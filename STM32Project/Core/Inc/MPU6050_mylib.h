#ifndef INC_MPU6050_MYLIB_H_
#define INC_MPU6050_MYLIB_H_

#define MPU6050_RA_WHO_AM_I 0x75
#define MPU6050_WHO_AM_I_DEF_VAL 0x71
#define MPU6050_RA_ADRR (0x68 <<1)
#define MPU6050_RA_CONF_REG 0x23
#define MPU6050_RA_CONF_VAL 0x78 //uruchowmienie akcelerometru i Å¼yroskopu

#define MPU6050_RA_GYRO_CONFIG 0x1B
#define MPU6050_GCONFIG_FS_SEL_BIT 4
#define MPU6050_GCONFIG_FS_SEL_LENGTH 2
#define MPU6050_RA_ACCEL_CONFIG 0x1C
#define MPU6050_ACONFIG_AFS_SEL_BIT 4
#define MPU6050_ACONFIG_AFS_SEL_LENGTH 2
#define MPU6050_RA_PWR_MGMT_1 0x6B
#define MPU6050_PWR1_SLEEP_BIT 6

//writeBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
//writeBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
//writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);


#define MPU6050_ACCEL_XOUT_H 0x3b
#define MPU6050_ACCEL_XOUT_L 0x3c
#define MPU6050_ACCEL_YOUT_H 0x3d
#define MPU6050_ACCEL_YOUT_L 0x3e
#define MPU6050_ACCEL_ZOUT_H 0x3f
#define MPU6050_ACCEL_ZOUT_L 0x40
#define MPU6050_ACCEL_XOUT_H_16 MPU6050_ACCEL_XOUT_H | 0x80
#define MPU6050_ACCEL_YOUT_H_16 MPU6050_ACCEL_YOUT_H | 0x80
#define MPU6050_ACCEL_ZOUT_H_16 MPU6050_ACCEL_ZOUT_H | 0x80
#define MPU6050_GYRO_XOUT_H 0x43
#define MPU6050_GYRO_XOUT_L 0x44
#define MPU6050_GYRO_YOUT_H 0x45
#define MPU6050_GYRO_YOUT_L 0x46
#define MPU6050_GYRO_ZOUT_H 0x47
#define MPU6050_GYRO_ZOUT_L 0x48
#define MPU6050_GYRO_XOUT_H_16 MPU6050_GYRO_XOUT_H | 0x80
#define MPU6050_GYRO_YOUT_H_16 MPU6050_GYRO_YOUT_H | 0x80
#define MPU6050_GYRO_ZOUT_H_16 MPU6050_GYRO_ZOUT_H | 0x80

#define GRAVITY 9.81

#include "i2c.h"
typedef struct {
	float acc_x, acc_y, acc_z;
	float gyro_x, gyro_y, gyro_z;
} MPU6050_data;

int8_t MPU6050_init();
float MPU6050_acc_mes(char axis);
float MPU6050_gyro_mes(char axis);
void MPU6050_measure(MPU6050_data*);

#endif /* INC_MPU6050_MYLIB_H_ */
