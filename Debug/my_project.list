
my_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3f0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  0800c590  0800c590  0001c590  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c9fc  0800c9fc  00020350  2**0
                  CONTENTS
  4 .ARM          00000008  0800c9fc  0800c9fc  0001c9fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca04  0800ca04  00020350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca04  0800ca04  0001ca04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca08  0800ca08  0001ca08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  0800ca0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c28  20000350  0800cd5c  00020350  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f78  0800cd5c  00021f78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020350  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f6e0  00000000  00000000  00020380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004415  00000000  00000000  0003fa60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c8  00000000  00000000  00043e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001238  00000000  00000000  00045240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001abbf  00000000  00000000  00046478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b384  00000000  00000000  00061037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fe5e  00000000  00000000  0007c3bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010c219  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062e4  00000000  00000000  0010c26c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000350 	.word	0x20000350
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c578 	.word	0x0800c578

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000354 	.word	0x20000354
 80001dc:	0800c578 	.word	0x0800c578

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <MPU6050_init>:
#include "MPU6050_mylib.h"

int8_t MPU6050_init(){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af04      	add	r7, sp, #16
	uint8_t Data_conf = 0, acc_2g = 0x00, gyro_2g=0x00;
 8000f56:	2300      	movs	r3, #0
 8000f58:	71fb      	strb	r3, [r7, #7]
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	71bb      	strb	r3, [r7, #6]
 8000f5e:	2300      	movs	r3, #0
 8000f60:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(&hi2c2, MPU6050_RA_ADRR, MPU6050_RA_WHO_AM_I, 1, &Data_conf, 1, 100);
 8000f62:	2364      	movs	r3, #100	; 0x64
 8000f64:	9302      	str	r3, [sp, #8]
 8000f66:	2301      	movs	r3, #1
 8000f68:	9301      	str	r3, [sp, #4]
 8000f6a:	1dfb      	adds	r3, r7, #7
 8000f6c:	9300      	str	r3, [sp, #0]
 8000f6e:	2301      	movs	r3, #1
 8000f70:	2275      	movs	r2, #117	; 0x75
 8000f72:	21d0      	movs	r1, #208	; 0xd0
 8000f74:	4812      	ldr	r0, [pc, #72]	; (8000fc0 <MPU6050_init+0x70>)
 8000f76:	f001 fca7 	bl	80028c8 <HAL_I2C_Mem_Read>
	if(Data_conf != MPU6050_WHO_AM_I_DEF_VAL){
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	2b71      	cmp	r3, #113	; 0x71
 8000f7e:	d002      	beq.n	8000f86 <MPU6050_init+0x36>
		return Data_conf;
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	b25b      	sxtb	r3, r3
 8000f84:	e018      	b.n	8000fb8 <MPU6050_init+0x68>
	}
	//ustawienie czujnika na skalach +-2g i +-250 deg/s2
	HAL_I2C_Mem_Write(&hi2c2, MPU6050_RA_ADRR, MPU6050_RA_ACCEL_CONFIG, 1, &acc_2g, 1, 100);
 8000f86:	2364      	movs	r3, #100	; 0x64
 8000f88:	9302      	str	r3, [sp, #8]
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	9301      	str	r3, [sp, #4]
 8000f8e:	1dbb      	adds	r3, r7, #6
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	2301      	movs	r3, #1
 8000f94:	221c      	movs	r2, #28
 8000f96:	21d0      	movs	r1, #208	; 0xd0
 8000f98:	4809      	ldr	r0, [pc, #36]	; (8000fc0 <MPU6050_init+0x70>)
 8000f9a:	f001 fb9b 	bl	80026d4 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c2, MPU6050_RA_ADRR, MPU6050_RA_GYRO_CONFIG, 1, &gyro_2g, 1, 100);
 8000f9e:	2364      	movs	r3, #100	; 0x64
 8000fa0:	9302      	str	r3, [sp, #8]
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	9301      	str	r3, [sp, #4]
 8000fa6:	1d7b      	adds	r3, r7, #5
 8000fa8:	9300      	str	r3, [sp, #0]
 8000faa:	2301      	movs	r3, #1
 8000fac:	221b      	movs	r2, #27
 8000fae:	21d0      	movs	r1, #208	; 0xd0
 8000fb0:	4803      	ldr	r0, [pc, #12]	; (8000fc0 <MPU6050_init+0x70>)
 8000fb2:	f001 fb8f 	bl	80026d4 <HAL_I2C_Mem_Write>
	return 0;
 8000fb6:	2300      	movs	r3, #0
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	2000059c 	.word	0x2000059c
 8000fc4:	00000000 	.word	0x00000000

08000fc8 <MPU6050_measure>:

	Axis = ((Data[0] << 8) | Data[1]);
	return ((float)Axis*250.0)/(float) INT16_MAX;
}

void MPU6050_measure(MPU6050_data* mes){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08a      	sub	sp, #40	; 0x28
 8000fcc:	af04      	add	r7, sp, #16
 8000fce:	6078      	str	r0, [r7, #4]
	uint8_t Data [14];//bufor danych
	int16_t Axis;//zmienna pomocnicza do konwersji odczytu na wartości fizyczne

	HAL_I2C_Mem_Read(&hi2c2, MPU6050_RA_ADRR, MPU6050_ACCEL_XOUT_H_16, 1, &Data, 14, 100);//odczyt danych z czujnika
 8000fd0:	2364      	movs	r3, #100	; 0x64
 8000fd2:	9302      	str	r3, [sp, #8]
 8000fd4:	230e      	movs	r3, #14
 8000fd6:	9301      	str	r3, [sp, #4]
 8000fd8:	f107 0308 	add.w	r3, r7, #8
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	2301      	movs	r3, #1
 8000fe0:	22bb      	movs	r2, #187	; 0xbb
 8000fe2:	21d0      	movs	r1, #208	; 0xd0
 8000fe4:	4892      	ldr	r0, [pc, #584]	; (8001230 <MPU6050_measure+0x268>)
 8000fe6:	f001 fc6f 	bl	80028c8 <HAL_I2C_Mem_Read>

	//konwersja danych z akcelerometru
	Axis = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	82fb      	strh	r3, [r7, #22]
	Axis = ((Data[0] << 8) | Data[1]);//konwersja odczytu do liczby 16-to bitowej
 8000fee:	7a3b      	ldrb	r3, [r7, #8]
 8000ff0:	021b      	lsls	r3, r3, #8
 8000ff2:	b21a      	sxth	r2, r3
 8000ff4:	7a7b      	ldrb	r3, [r7, #9]
 8000ff6:	b21b      	sxth	r3, r3
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	82fb      	strh	r3, [r7, #22]
	mes->acc_x = ((float)Axis*2.0*GRAVITY)/(float)INT16_MAX;//przeliczenie odczytu na wartości fizyczne
 8000ffc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001000:	ee07 3a90 	vmov	s15, r3
 8001004:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001008:	ee17 0a90 	vmov	r0, s15
 800100c:	f7ff faa4 	bl	8000558 <__aeabi_f2d>
 8001010:	4602      	mov	r2, r0
 8001012:	460b      	mov	r3, r1
 8001014:	f7ff f942 	bl	800029c <__adddf3>
 8001018:	4602      	mov	r2, r0
 800101a:	460b      	mov	r3, r1
 800101c:	4610      	mov	r0, r2
 800101e:	4619      	mov	r1, r3
 8001020:	a37f      	add	r3, pc, #508	; (adr r3, 8001220 <MPU6050_measure+0x258>)
 8001022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001026:	f7ff faef 	bl	8000608 <__aeabi_dmul>
 800102a:	4602      	mov	r2, r0
 800102c:	460b      	mov	r3, r1
 800102e:	4610      	mov	r0, r2
 8001030:	4619      	mov	r1, r3
 8001032:	a37d      	add	r3, pc, #500	; (adr r3, 8001228 <MPU6050_measure+0x260>)
 8001034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001038:	f7ff fc10 	bl	800085c <__aeabi_ddiv>
 800103c:	4602      	mov	r2, r0
 800103e:	460b      	mov	r3, r1
 8001040:	4610      	mov	r0, r2
 8001042:	4619      	mov	r1, r3
 8001044:	f7ff fdb8 	bl	8000bb8 <__aeabi_d2f>
 8001048:	4602      	mov	r2, r0
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	601a      	str	r2, [r3, #0]

	Axis = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	82fb      	strh	r3, [r7, #22]
	Axis = ((Data[2] << 8) | Data[3]);
 8001052:	7abb      	ldrb	r3, [r7, #10]
 8001054:	021b      	lsls	r3, r3, #8
 8001056:	b21a      	sxth	r2, r3
 8001058:	7afb      	ldrb	r3, [r7, #11]
 800105a:	b21b      	sxth	r3, r3
 800105c:	4313      	orrs	r3, r2
 800105e:	82fb      	strh	r3, [r7, #22]
	mes->acc_y = ((float)Axis*2.0*GRAVITY)/(float)INT16_MAX;
 8001060:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001064:	ee07 3a90 	vmov	s15, r3
 8001068:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800106c:	ee17 0a90 	vmov	r0, s15
 8001070:	f7ff fa72 	bl	8000558 <__aeabi_f2d>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	f7ff f910 	bl	800029c <__adddf3>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	4610      	mov	r0, r2
 8001082:	4619      	mov	r1, r3
 8001084:	a366      	add	r3, pc, #408	; (adr r3, 8001220 <MPU6050_measure+0x258>)
 8001086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108a:	f7ff fabd 	bl	8000608 <__aeabi_dmul>
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	4610      	mov	r0, r2
 8001094:	4619      	mov	r1, r3
 8001096:	a364      	add	r3, pc, #400	; (adr r3, 8001228 <MPU6050_measure+0x260>)
 8001098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109c:	f7ff fbde 	bl	800085c <__aeabi_ddiv>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	4610      	mov	r0, r2
 80010a6:	4619      	mov	r1, r3
 80010a8:	f7ff fd86 	bl	8000bb8 <__aeabi_d2f>
 80010ac:	4602      	mov	r2, r0
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	605a      	str	r2, [r3, #4]

	Axis = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	82fb      	strh	r3, [r7, #22]
	Axis = ((Data[4] << 8) | Data[5]);
 80010b6:	7b3b      	ldrb	r3, [r7, #12]
 80010b8:	021b      	lsls	r3, r3, #8
 80010ba:	b21a      	sxth	r2, r3
 80010bc:	7b7b      	ldrb	r3, [r7, #13]
 80010be:	b21b      	sxth	r3, r3
 80010c0:	4313      	orrs	r3, r2
 80010c2:	82fb      	strh	r3, [r7, #22]
	mes->acc_z = ((float)Axis*2.0*GRAVITY)/(float)INT16_MAX;
 80010c4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80010c8:	ee07 3a90 	vmov	s15, r3
 80010cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010d0:	ee17 0a90 	vmov	r0, s15
 80010d4:	f7ff fa40 	bl	8000558 <__aeabi_f2d>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	f7ff f8de 	bl	800029c <__adddf3>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	4610      	mov	r0, r2
 80010e6:	4619      	mov	r1, r3
 80010e8:	a34d      	add	r3, pc, #308	; (adr r3, 8001220 <MPU6050_measure+0x258>)
 80010ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ee:	f7ff fa8b 	bl	8000608 <__aeabi_dmul>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	4610      	mov	r0, r2
 80010f8:	4619      	mov	r1, r3
 80010fa:	a34b      	add	r3, pc, #300	; (adr r3, 8001228 <MPU6050_measure+0x260>)
 80010fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001100:	f7ff fbac 	bl	800085c <__aeabi_ddiv>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
 8001108:	4610      	mov	r0, r2
 800110a:	4619      	mov	r1, r3
 800110c:	f7ff fd54 	bl	8000bb8 <__aeabi_d2f>
 8001110:	4602      	mov	r2, r0
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	609a      	str	r2, [r3, #8]

	//konwersja danych z żyroskopu
	Axis = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	82fb      	strh	r3, [r7, #22]
	Axis = ((Data[8] << 8) | Data[9]);
 800111a:	7c3b      	ldrb	r3, [r7, #16]
 800111c:	021b      	lsls	r3, r3, #8
 800111e:	b21a      	sxth	r2, r3
 8001120:	7c7b      	ldrb	r3, [r7, #17]
 8001122:	b21b      	sxth	r3, r3
 8001124:	4313      	orrs	r3, r2
 8001126:	82fb      	strh	r3, [r7, #22]
	mes->gyro_x = ((float)Axis*250.0)/(float) INT16_MAX;
 8001128:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800112c:	ee07 3a90 	vmov	s15, r3
 8001130:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001134:	ee17 0a90 	vmov	r0, s15
 8001138:	f7ff fa0e 	bl	8000558 <__aeabi_f2d>
 800113c:	f04f 0200 	mov.w	r2, #0
 8001140:	4b3c      	ldr	r3, [pc, #240]	; (8001234 <MPU6050_measure+0x26c>)
 8001142:	f7ff fa61 	bl	8000608 <__aeabi_dmul>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	4610      	mov	r0, r2
 800114c:	4619      	mov	r1, r3
 800114e:	a336      	add	r3, pc, #216	; (adr r3, 8001228 <MPU6050_measure+0x260>)
 8001150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001154:	f7ff fb82 	bl	800085c <__aeabi_ddiv>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	4610      	mov	r0, r2
 800115e:	4619      	mov	r1, r3
 8001160:	f7ff fd2a 	bl	8000bb8 <__aeabi_d2f>
 8001164:	4602      	mov	r2, r0
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	60da      	str	r2, [r3, #12]

	Axis = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	82fb      	strh	r3, [r7, #22]
	Axis = ((Data[10] << 8) | Data[11]);
 800116e:	7cbb      	ldrb	r3, [r7, #18]
 8001170:	021b      	lsls	r3, r3, #8
 8001172:	b21a      	sxth	r2, r3
 8001174:	7cfb      	ldrb	r3, [r7, #19]
 8001176:	b21b      	sxth	r3, r3
 8001178:	4313      	orrs	r3, r2
 800117a:	82fb      	strh	r3, [r7, #22]
	mes->gyro_y = ((float)Axis*250.0)/(float) INT16_MAX;
 800117c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001188:	ee17 0a90 	vmov	r0, s15
 800118c:	f7ff f9e4 	bl	8000558 <__aeabi_f2d>
 8001190:	f04f 0200 	mov.w	r2, #0
 8001194:	4b27      	ldr	r3, [pc, #156]	; (8001234 <MPU6050_measure+0x26c>)
 8001196:	f7ff fa37 	bl	8000608 <__aeabi_dmul>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	4610      	mov	r0, r2
 80011a0:	4619      	mov	r1, r3
 80011a2:	a321      	add	r3, pc, #132	; (adr r3, 8001228 <MPU6050_measure+0x260>)
 80011a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a8:	f7ff fb58 	bl	800085c <__aeabi_ddiv>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4610      	mov	r0, r2
 80011b2:	4619      	mov	r1, r3
 80011b4:	f7ff fd00 	bl	8000bb8 <__aeabi_d2f>
 80011b8:	4602      	mov	r2, r0
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	611a      	str	r2, [r3, #16]

	Axis = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	82fb      	strh	r3, [r7, #22]
	Axis = ((Data[12] << 8) | Data[13]);
 80011c2:	7d3b      	ldrb	r3, [r7, #20]
 80011c4:	021b      	lsls	r3, r3, #8
 80011c6:	b21a      	sxth	r2, r3
 80011c8:	7d7b      	ldrb	r3, [r7, #21]
 80011ca:	b21b      	sxth	r3, r3
 80011cc:	4313      	orrs	r3, r2
 80011ce:	82fb      	strh	r3, [r7, #22]
	mes->gyro_z = ((float)Axis*250.0)/(float) INT16_MAX;
 80011d0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011d4:	ee07 3a90 	vmov	s15, r3
 80011d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011dc:	ee17 0a90 	vmov	r0, s15
 80011e0:	f7ff f9ba 	bl	8000558 <__aeabi_f2d>
 80011e4:	f04f 0200 	mov.w	r2, #0
 80011e8:	4b12      	ldr	r3, [pc, #72]	; (8001234 <MPU6050_measure+0x26c>)
 80011ea:	f7ff fa0d 	bl	8000608 <__aeabi_dmul>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	4610      	mov	r0, r2
 80011f4:	4619      	mov	r1, r3
 80011f6:	a30c      	add	r3, pc, #48	; (adr r3, 8001228 <MPU6050_measure+0x260>)
 80011f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fc:	f7ff fb2e 	bl	800085c <__aeabi_ddiv>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	4610      	mov	r0, r2
 8001206:	4619      	mov	r1, r3
 8001208:	f7ff fcd6 	bl	8000bb8 <__aeabi_d2f>
 800120c:	4602      	mov	r2, r0
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	615a      	str	r2, [r3, #20]
}
 8001212:	bf00      	nop
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	f3af 8000 	nop.w
 8001220:	51eb851f 	.word	0x51eb851f
 8001224:	40239eb8 	.word	0x40239eb8
 8001228:	00000000 	.word	0x00000000
 800122c:	40dfffc0 	.word	0x40dfffc0
 8001230:	2000059c 	.word	0x2000059c
 8001234:	406f4000 	.word	0x406f4000

08001238 <MX_GPIO_Init>:
        * EXTI
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08c      	sub	sp, #48	; 0x30
 800123c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123e:	f107 031c 	add.w	r3, r7, #28
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
 800124c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	61bb      	str	r3, [r7, #24]
 8001252:	4b6a      	ldr	r3, [pc, #424]	; (80013fc <MX_GPIO_Init+0x1c4>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a69      	ldr	r2, [pc, #420]	; (80013fc <MX_GPIO_Init+0x1c4>)
 8001258:	f043 0310 	orr.w	r3, r3, #16
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b67      	ldr	r3, [pc, #412]	; (80013fc <MX_GPIO_Init+0x1c4>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0310 	and.w	r3, r3, #16
 8001266:	61bb      	str	r3, [r7, #24]
 8001268:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	617b      	str	r3, [r7, #20]
 800126e:	4b63      	ldr	r3, [pc, #396]	; (80013fc <MX_GPIO_Init+0x1c4>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a62      	ldr	r2, [pc, #392]	; (80013fc <MX_GPIO_Init+0x1c4>)
 8001274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b60      	ldr	r3, [pc, #384]	; (80013fc <MX_GPIO_Init+0x1c4>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001282:	617b      	str	r3, [r7, #20]
 8001284:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	613b      	str	r3, [r7, #16]
 800128a:	4b5c      	ldr	r3, [pc, #368]	; (80013fc <MX_GPIO_Init+0x1c4>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a5b      	ldr	r2, [pc, #364]	; (80013fc <MX_GPIO_Init+0x1c4>)
 8001290:	f043 0304 	orr.w	r3, r3, #4
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b59      	ldr	r3, [pc, #356]	; (80013fc <MX_GPIO_Init+0x1c4>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0304 	and.w	r3, r3, #4
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	4b55      	ldr	r3, [pc, #340]	; (80013fc <MX_GPIO_Init+0x1c4>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a54      	ldr	r2, [pc, #336]	; (80013fc <MX_GPIO_Init+0x1c4>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b52      	ldr	r3, [pc, #328]	; (80013fc <MX_GPIO_Init+0x1c4>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	4b4e      	ldr	r3, [pc, #312]	; (80013fc <MX_GPIO_Init+0x1c4>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a4d      	ldr	r2, [pc, #308]	; (80013fc <MX_GPIO_Init+0x1c4>)
 80012c8:	f043 0302 	orr.w	r3, r3, #2
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b4b      	ldr	r3, [pc, #300]	; (80013fc <MX_GPIO_Init+0x1c4>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	4b47      	ldr	r3, [pc, #284]	; (80013fc <MX_GPIO_Init+0x1c4>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a46      	ldr	r2, [pc, #280]	; (80013fc <MX_GPIO_Init+0x1c4>)
 80012e4:	f043 0308 	orr.w	r3, r3, #8
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b44      	ldr	r3, [pc, #272]	; (80013fc <MX_GPIO_Init+0x1c4>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0308 	and.w	r3, r3, #8
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2108      	movs	r1, #8
 80012fa:	4841      	ldr	r0, [pc, #260]	; (8001400 <MX_GPIO_Init+0x1c8>)
 80012fc:	f001 f84e 	bl	800239c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001300:	2201      	movs	r2, #1
 8001302:	2101      	movs	r1, #1
 8001304:	483f      	ldr	r0, [pc, #252]	; (8001404 <MX_GPIO_Init+0x1cc>)
 8001306:	f001 f849 	bl	800239c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CSNpin_Pin|CEpin_Pin, GPIO_PIN_RESET);
 800130a:	2200      	movs	r2, #0
 800130c:	2130      	movs	r1, #48	; 0x30
 800130e:	483d      	ldr	r0, [pc, #244]	; (8001404 <MX_GPIO_Init+0x1cc>)
 8001310:	f001 f844 	bl	800239c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD2_Pin|LD3_Pin|LD5_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 8001314:	2200      	movs	r2, #0
 8001316:	f247 0110 	movw	r1, #28688	; 0x7010
 800131a:	483b      	ldr	r0, [pc, #236]	; (8001408 <MX_GPIO_Init+0x1d0>)
 800131c:	f001 f83e 	bl	800239c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8001320:	2304      	movs	r3, #4
 8001322:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001324:	2300      	movs	r3, #0
 8001326:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 800132c:	f107 031c 	add.w	r3, r7, #28
 8001330:	4619      	mov	r1, r3
 8001332:	4833      	ldr	r0, [pc, #204]	; (8001400 <MX_GPIO_Init+0x1c8>)
 8001334:	f000 feae 	bl	8002094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001338:	2308      	movs	r3, #8
 800133a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133c:	2301      	movs	r3, #1
 800133e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001344:	2300      	movs	r3, #0
 8001346:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001348:	f107 031c 	add.w	r3, r7, #28
 800134c:	4619      	mov	r1, r3
 800134e:	482c      	ldr	r0, [pc, #176]	; (8001400 <MX_GPIO_Init+0x1c8>)
 8001350:	f000 fea0 	bl	8002094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8001354:	2332      	movs	r3, #50	; 0x32
 8001356:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001358:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800135c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001362:	f107 031c 	add.w	r3, r7, #28
 8001366:	4619      	mov	r1, r3
 8001368:	4825      	ldr	r0, [pc, #148]	; (8001400 <MX_GPIO_Init+0x1c8>)
 800136a:	f000 fe93 	bl	8002094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|CSNpin_Pin|CEpin_Pin;
 800136e:	2331      	movs	r3, #49	; 0x31
 8001370:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001372:	2301      	movs	r3, #1
 8001374:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137a:	2300      	movs	r3, #0
 800137c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800137e:	f107 031c 	add.w	r3, r7, #28
 8001382:	4619      	mov	r1, r3
 8001384:	481f      	ldr	r0, [pc, #124]	; (8001404 <MX_GPIO_Init+0x1cc>)
 8001386:	f000 fe85 	bl	8002094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800138a:	2301      	movs	r3, #1
 800138c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800138e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001392:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001398:	f107 031c 	add.w	r3, r7, #28
 800139c:	4619      	mov	r1, r3
 800139e:	481b      	ldr	r0, [pc, #108]	; (800140c <MX_GPIO_Init+0x1d4>)
 80013a0:	f000 fe78 	bl	8002094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD5_Pin|Audio_RST_Pin;
 80013a4:	f247 0310 	movw	r3, #28688	; 0x7010
 80013a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013aa:	2301      	movs	r3, #1
 80013ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2300      	movs	r3, #0
 80013b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013b6:	f107 031c 	add.w	r3, r7, #28
 80013ba:	4619      	mov	r1, r3
 80013bc:	4812      	ldr	r0, [pc, #72]	; (8001408 <MX_GPIO_Init+0x1d0>)
 80013be:	f000 fe69 	bl	8002094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80013c2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80013c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013c8:	2312      	movs	r3, #18
 80013ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013cc:	2301      	movs	r3, #1
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d0:	2300      	movs	r3, #0
 80013d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013d4:	2304      	movs	r3, #4
 80013d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d8:	f107 031c 	add.w	r3, r7, #28
 80013dc:	4619      	mov	r1, r3
 80013de:	480c      	ldr	r0, [pc, #48]	; (8001410 <MX_GPIO_Init+0x1d8>)
 80013e0:	f000 fe58 	bl	8002094 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80013e4:	2200      	movs	r2, #0
 80013e6:	2100      	movs	r1, #0
 80013e8:	2006      	movs	r0, #6
 80013ea:	f000 fd8a 	bl	8001f02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80013ee:	2006      	movs	r0, #6
 80013f0:	f000 fda3 	bl	8001f3a <HAL_NVIC_EnableIRQ>

}
 80013f4:	bf00      	nop
 80013f6:	3730      	adds	r7, #48	; 0x30
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40023800 	.word	0x40023800
 8001400:	40021000 	.word	0x40021000
 8001404:	40020800 	.word	0x40020800
 8001408:	40020c00 	.word	0x40020c00
 800140c:	40020000 	.word	0x40020000
 8001410:	40020400 	.word	0x40020400

08001414 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <MX_I2C2_Init+0x50>)
 800141a:	4a13      	ldr	r2, [pc, #76]	; (8001468 <MX_I2C2_Init+0x54>)
 800141c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800141e:	4b11      	ldr	r3, [pc, #68]	; (8001464 <MX_I2C2_Init+0x50>)
 8001420:	4a12      	ldr	r2, [pc, #72]	; (800146c <MX_I2C2_Init+0x58>)
 8001422:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001424:	4b0f      	ldr	r3, [pc, #60]	; (8001464 <MX_I2C2_Init+0x50>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800142a:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <MX_I2C2_Init+0x50>)
 800142c:	2200      	movs	r2, #0
 800142e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001430:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <MX_I2C2_Init+0x50>)
 8001432:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001436:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001438:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <MX_I2C2_Init+0x50>)
 800143a:	2200      	movs	r2, #0
 800143c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800143e:	4b09      	ldr	r3, [pc, #36]	; (8001464 <MX_I2C2_Init+0x50>)
 8001440:	2200      	movs	r2, #0
 8001442:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001444:	4b07      	ldr	r3, [pc, #28]	; (8001464 <MX_I2C2_Init+0x50>)
 8001446:	2200      	movs	r2, #0
 8001448:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800144a:	4b06      	ldr	r3, [pc, #24]	; (8001464 <MX_I2C2_Init+0x50>)
 800144c:	2200      	movs	r2, #0
 800144e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001450:	4804      	ldr	r0, [pc, #16]	; (8001464 <MX_I2C2_Init+0x50>)
 8001452:	f000 fffb 	bl	800244c <HAL_I2C_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800145c:	f000 f972 	bl	8001744 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}
 8001464:	2000059c 	.word	0x2000059c
 8001468:	40005800 	.word	0x40005800
 800146c:	000186a0 	.word	0x000186a0

08001470 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	; 0x28
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a21      	ldr	r2, [pc, #132]	; (8001514 <HAL_I2C_MspInit+0xa4>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d13c      	bne.n	800150c <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	4b20      	ldr	r3, [pc, #128]	; (8001518 <HAL_I2C_MspInit+0xa8>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a1f      	ldr	r2, [pc, #124]	; (8001518 <HAL_I2C_MspInit+0xa8>)
 800149c:	f043 0302 	orr.w	r3, r3, #2
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b1d      	ldr	r3, [pc, #116]	; (8001518 <HAL_I2C_MspInit+0xa8>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	613b      	str	r3, [r7, #16]
 80014ac:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014b4:	2312      	movs	r3, #18
 80014b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014bc:	2303      	movs	r3, #3
 80014be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014c0:	2304      	movs	r3, #4
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	4619      	mov	r1, r3
 80014ca:	4814      	ldr	r0, [pc, #80]	; (800151c <HAL_I2C_MspInit+0xac>)
 80014cc:	f000 fde2 	bl	8002094 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014d0:	2308      	movs	r3, #8
 80014d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014d4:	2312      	movs	r3, #18
 80014d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014dc:	2303      	movs	r3, #3
 80014de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80014e0:	2309      	movs	r3, #9
 80014e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	4619      	mov	r1, r3
 80014ea:	480c      	ldr	r0, [pc, #48]	; (800151c <HAL_I2C_MspInit+0xac>)
 80014ec:	f000 fdd2 	bl	8002094 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014f0:	2300      	movs	r3, #0
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	4b08      	ldr	r3, [pc, #32]	; (8001518 <HAL_I2C_MspInit+0xa8>)
 80014f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f8:	4a07      	ldr	r2, [pc, #28]	; (8001518 <HAL_I2C_MspInit+0xa8>)
 80014fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001500:	4b05      	ldr	r3, [pc, #20]	; (8001518 <HAL_I2C_MspInit+0xa8>)
 8001502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001504:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800150c:	bf00      	nop
 800150e:	3728      	adds	r7, #40	; 0x28
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40005800 	.word	0x40005800
 8001518:	40023800 	.word	0x40023800
 800151c:	40020400 	.word	0x40020400

08001520 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001520:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001524:	b0a8      	sub	sp, #160	; 0xa0
 8001526:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001528:	f000 fb7a 	bl	8001c20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800152c:	f000 f8a2 	bl	8001674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001530:	f7ff fe82 	bl	8001238 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8001534:	f007 fc3a 	bl	8008dac <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 8001538:	f000 face 	bl	8001ad8 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800153c:	f000 f908 	bl	8001750 <MX_SPI1_Init>
  MX_I2C2_Init();
 8001540:	f7ff ff68 	bl	8001414 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  uint8_t DataToSend[40] = {0}; // Tablica zawierajaca dane do wyslania
 8001544:	2300      	movs	r3, #0
 8001546:	643b      	str	r3, [r7, #64]	; 0x40
 8001548:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800154c:	2224      	movs	r2, #36	; 0x24
 800154e:	2100      	movs	r1, #0
 8001550:	4618      	mov	r0, r3
 8001552:	f008 f981 	bl	8009858 <memset>
  uint8_t MessageLength = 0; // Zawiera dlugosc wysylanej wiadomosci
 8001556:	2300      	movs	r3, #0
 8001558:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  const uint8_t mes_count = 10;
 800155c:	230a      	movs	r3, #10
 800155e:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

  //struktura przechowująca dane odczytane z mierników
  MPU6050_data sensor_data, tmp_data;
  sensor_data.acc_x = 0;
 8001562:	f04f 0300 	mov.w	r3, #0
 8001566:	62bb      	str	r3, [r7, #40]	; 0x28
  sensor_data.acc_y = 0;
 8001568:	f04f 0300 	mov.w	r3, #0
 800156c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sensor_data.acc_z = 0;
 800156e:	f04f 0300 	mov.w	r3, #0
 8001572:	633b      	str	r3, [r7, #48]	; 0x30
  sensor_data.gyro_x = 0;
 8001574:	f04f 0300 	mov.w	r3, #0
 8001578:	637b      	str	r3, [r7, #52]	; 0x34
  sensor_data.gyro_y = 0;
 800157a:	f04f 0300 	mov.w	r3, #0
 800157e:	63bb      	str	r3, [r7, #56]	; 0x38
  sensor_data.gyro_z = 0;
 8001580:	f04f 0300 	mov.w	r3, #0
 8001584:	63fb      	str	r3, [r7, #60]	; 0x3c

  //częstotliwość pomiarów w Hz, domyślnie 5; wartość można edytować z poziomu komputera
  uint32_t measurementsFreq = 2, prevTime = HAL_GetTick(), recVal=0;
 8001586:	2302      	movs	r3, #2
 8001588:	673b      	str	r3, [r7, #112]	; 0x70
 800158a:	f000 fbaf 	bl	8001cec <HAL_GetTick>
 800158e:	66f8      	str	r0, [r7, #108]	; 0x6c
 8001590:	2300      	movs	r3, #0
 8001592:	66bb      	str	r3, [r7, #104]	; 0x68


  //inicjalizacja czujnika MPU6050
  if(MPU6050_init()!=0){
 8001594:	f7ff fcdc 	bl	8000f50 <MPU6050_init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d009      	beq.n	80015b2 <main+0x92>
	  while(1){
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800159e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015a2:	4832      	ldr	r0, [pc, #200]	; (800166c <main+0x14c>)
 80015a4:	f000 ff13 	bl	80023ce <HAL_GPIO_TogglePin>
		  HAL_Delay(500);
 80015a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015ac:	f000 fbaa 	bl	8001d04 <HAL_Delay>
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80015b0:	e7f5      	b.n	800159e <main+0x7e>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  for(int i=0;i<mes_count;i++){
		  MPU6050_measure(&sensor_data);
 80015b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff fd06 	bl	8000fc8 <MPU6050_measure>
//	  		  sensor_data.acc_z /= (float)mes_count;
//	  		  sensor_data.gyro_x /= (float)mes_count;
//	  		  sensor_data.gyro_y /= (float)mes_count;
//	  		  sensor_data.gyro_z /= (float)mes_count;

			MessageLength = sprintf(DataToSend, "%0.2f %0.2f %0.2f %0.2f %0.2f %0.2f \n\r", sensor_data.acc_x,sensor_data.acc_y,sensor_data.acc_z,sensor_data.gyro_x,sensor_data.gyro_y,sensor_data.gyro_z);
 80015bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015be:	4618      	mov	r0, r3
 80015c0:	f7fe ffca 	bl	8000558 <__aeabi_f2d>
 80015c4:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80015c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7fe ffc4 	bl	8000558 <__aeabi_f2d>
 80015d0:	4604      	mov	r4, r0
 80015d2:	460d      	mov	r5, r1
 80015d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7fe ffbe 	bl	8000558 <__aeabi_f2d>
 80015dc:	4680      	mov	r8, r0
 80015de:	4689      	mov	r9, r1
 80015e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7fe ffb8 	bl	8000558 <__aeabi_f2d>
 80015e8:	4682      	mov	sl, r0
 80015ea:	468b      	mov	fp, r1
 80015ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7fe ffb2 	bl	8000558 <__aeabi_f2d>
 80015f4:	e9c7 0100 	strd	r0, r1, [r7]
 80015f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe ffac 	bl	8000558 <__aeabi_f2d>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8001608:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800160c:	ed97 7b00 	vldr	d7, [r7]
 8001610:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001614:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001618:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800161c:	e9cd 4500 	strd	r4, r5, [sp]
 8001620:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001624:	4912      	ldr	r1, [pc, #72]	; (8001670 <main+0x150>)
 8001626:	f008 fd89 	bl	800a13c <siprintf>
 800162a:	4603      	mov	r3, r0
 800162c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

			CDC_Transmit_FS(DataToSend, MessageLength);
 8001630:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8001634:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001638:	4611      	mov	r1, r2
 800163a:	4618      	mov	r0, r3
 800163c:	f007 fc74 	bl	8008f28 <CDC_Transmit_FS>

			  sensor_data.acc_x = 0;
 8001640:	f04f 0300 	mov.w	r3, #0
 8001644:	62bb      	str	r3, [r7, #40]	; 0x28
			  sensor_data.acc_y = 0;
 8001646:	f04f 0300 	mov.w	r3, #0
 800164a:	62fb      	str	r3, [r7, #44]	; 0x2c
			  sensor_data.acc_z = 0;
 800164c:	f04f 0300 	mov.w	r3, #0
 8001650:	633b      	str	r3, [r7, #48]	; 0x30
			  sensor_data.gyro_x = 0;
 8001652:	f04f 0300 	mov.w	r3, #0
 8001656:	637b      	str	r3, [r7, #52]	; 0x34
			  sensor_data.gyro_y = 0;
 8001658:	f04f 0300 	mov.w	r3, #0
 800165c:	63bb      	str	r3, [r7, #56]	; 0x38
			  sensor_data.gyro_z = 0;
 800165e:	f04f 0300 	mov.w	r3, #0
 8001662:	63fb      	str	r3, [r7, #60]	; 0x3c

			  HAL_Delay(10);
 8001664:	200a      	movs	r0, #10
 8001666:	f000 fb4d 	bl	8001d04 <HAL_Delay>
  {
 800166a:	e7a2      	b.n	80015b2 <main+0x92>
 800166c:	40020c00 	.word	0x40020c00
 8001670:	0800c590 	.word	0x0800c590

08001674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b094      	sub	sp, #80	; 0x50
 8001678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800167a:	f107 0320 	add.w	r3, r7, #32
 800167e:	2230      	movs	r2, #48	; 0x30
 8001680:	2100      	movs	r1, #0
 8001682:	4618      	mov	r0, r3
 8001684:	f008 f8e8 	bl	8009858 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001688:	f107 030c 	add.w	r3, r7, #12
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001698:	2300      	movs	r3, #0
 800169a:	60bb      	str	r3, [r7, #8]
 800169c:	4b27      	ldr	r3, [pc, #156]	; (800173c <SystemClock_Config+0xc8>)
 800169e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a0:	4a26      	ldr	r2, [pc, #152]	; (800173c <SystemClock_Config+0xc8>)
 80016a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a6:	6413      	str	r3, [r2, #64]	; 0x40
 80016a8:	4b24      	ldr	r3, [pc, #144]	; (800173c <SystemClock_Config+0xc8>)
 80016aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b0:	60bb      	str	r3, [r7, #8]
 80016b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016b4:	2300      	movs	r3, #0
 80016b6:	607b      	str	r3, [r7, #4]
 80016b8:	4b21      	ldr	r3, [pc, #132]	; (8001740 <SystemClock_Config+0xcc>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a20      	ldr	r2, [pc, #128]	; (8001740 <SystemClock_Config+0xcc>)
 80016be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016c2:	6013      	str	r3, [r2, #0]
 80016c4:	4b1e      	ldr	r3, [pc, #120]	; (8001740 <SystemClock_Config+0xcc>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016cc:	607b      	str	r3, [r7, #4]
 80016ce:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016d0:	2301      	movs	r3, #1
 80016d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016da:	2302      	movs	r3, #2
 80016dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016e4:	2304      	movs	r3, #4
 80016e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80016e8:	2348      	movs	r3, #72	; 0x48
 80016ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016ec:	2302      	movs	r3, #2
 80016ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80016f0:	2303      	movs	r3, #3
 80016f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016f4:	f107 0320 	add.w	r3, r7, #32
 80016f8:	4618      	mov	r0, r3
 80016fa:	f002 ffe9 	bl	80046d0 <HAL_RCC_OscConfig>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001704:	f000 f81e 	bl	8001744 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001708:	230f      	movs	r3, #15
 800170a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800170c:	2302      	movs	r3, #2
 800170e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001714:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001718:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800171a:	2300      	movs	r3, #0
 800171c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800171e:	f107 030c 	add.w	r3, r7, #12
 8001722:	2102      	movs	r1, #2
 8001724:	4618      	mov	r0, r3
 8001726:	f003 fa4b 	bl	8004bc0 <HAL_RCC_ClockConfig>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001730:	f000 f808 	bl	8001744 <Error_Handler>
  }
}
 8001734:	bf00      	nop
 8001736:	3750      	adds	r7, #80	; 0x50
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40023800 	.word	0x40023800
 8001740:	40007000 	.word	0x40007000

08001744 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001748:	b672      	cpsid	i
}
 800174a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800174c:	e7fe      	b.n	800174c <Error_Handler+0x8>
	...

08001750 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001754:	4b17      	ldr	r3, [pc, #92]	; (80017b4 <MX_SPI1_Init+0x64>)
 8001756:	4a18      	ldr	r2, [pc, #96]	; (80017b8 <MX_SPI1_Init+0x68>)
 8001758:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800175a:	4b16      	ldr	r3, [pc, #88]	; (80017b4 <MX_SPI1_Init+0x64>)
 800175c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001760:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001762:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <MX_SPI1_Init+0x64>)
 8001764:	2200      	movs	r2, #0
 8001766:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001768:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <MX_SPI1_Init+0x64>)
 800176a:	2200      	movs	r2, #0
 800176c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800176e:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <MX_SPI1_Init+0x64>)
 8001770:	2200      	movs	r2, #0
 8001772:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001774:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <MX_SPI1_Init+0x64>)
 8001776:	2200      	movs	r2, #0
 8001778:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800177a:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <MX_SPI1_Init+0x64>)
 800177c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001780:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001782:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <MX_SPI1_Init+0x64>)
 8001784:	2220      	movs	r2, #32
 8001786:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001788:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <MX_SPI1_Init+0x64>)
 800178a:	2200      	movs	r2, #0
 800178c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800178e:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <MX_SPI1_Init+0x64>)
 8001790:	2200      	movs	r2, #0
 8001792:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001794:	4b07      	ldr	r3, [pc, #28]	; (80017b4 <MX_SPI1_Init+0x64>)
 8001796:	2200      	movs	r2, #0
 8001798:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800179a:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <MX_SPI1_Init+0x64>)
 800179c:	220a      	movs	r2, #10
 800179e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017a0:	4804      	ldr	r0, [pc, #16]	; (80017b4 <MX_SPI1_Init+0x64>)
 80017a2:	f003 fc09 	bl	8004fb8 <HAL_SPI_Init>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80017ac:	f7ff ffca 	bl	8001744 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017b0:	bf00      	nop
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	200005f0 	.word	0x200005f0
 80017b8:	40013000 	.word	0x40013000

080017bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08a      	sub	sp, #40	; 0x28
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	f107 0314 	add.w	r3, r7, #20
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a19      	ldr	r2, [pc, #100]	; (8001840 <HAL_SPI_MspInit+0x84>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d12b      	bne.n	8001836 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	613b      	str	r3, [r7, #16]
 80017e2:	4b18      	ldr	r3, [pc, #96]	; (8001844 <HAL_SPI_MspInit+0x88>)
 80017e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e6:	4a17      	ldr	r2, [pc, #92]	; (8001844 <HAL_SPI_MspInit+0x88>)
 80017e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017ec:	6453      	str	r3, [r2, #68]	; 0x44
 80017ee:	4b15      	ldr	r3, [pc, #84]	; (8001844 <HAL_SPI_MspInit+0x88>)
 80017f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017f6:	613b      	str	r3, [r7, #16]
 80017f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	4b11      	ldr	r3, [pc, #68]	; (8001844 <HAL_SPI_MspInit+0x88>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	4a10      	ldr	r2, [pc, #64]	; (8001844 <HAL_SPI_MspInit+0x88>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	6313      	str	r3, [r2, #48]	; 0x30
 800180a:	4b0e      	ldr	r3, [pc, #56]	; (8001844 <HAL_SPI_MspInit+0x88>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001816:	23e0      	movs	r3, #224	; 0xe0
 8001818:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181a:	2302      	movs	r3, #2
 800181c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001822:	2303      	movs	r3, #3
 8001824:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001826:	2305      	movs	r3, #5
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182a:	f107 0314 	add.w	r3, r7, #20
 800182e:	4619      	mov	r1, r3
 8001830:	4805      	ldr	r0, [pc, #20]	; (8001848 <HAL_SPI_MspInit+0x8c>)
 8001832:	f000 fc2f 	bl	8002094 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001836:	bf00      	nop
 8001838:	3728      	adds	r7, #40	; 0x28
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40013000 	.word	0x40013000
 8001844:	40023800 	.word	0x40023800
 8001848:	40020000 	.word	0x40020000

0800184c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	607b      	str	r3, [r7, #4]
 8001856:	4b10      	ldr	r3, [pc, #64]	; (8001898 <HAL_MspInit+0x4c>)
 8001858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185a:	4a0f      	ldr	r2, [pc, #60]	; (8001898 <HAL_MspInit+0x4c>)
 800185c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001860:	6453      	str	r3, [r2, #68]	; 0x44
 8001862:	4b0d      	ldr	r3, [pc, #52]	; (8001898 <HAL_MspInit+0x4c>)
 8001864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800186a:	607b      	str	r3, [r7, #4]
 800186c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	603b      	str	r3, [r7, #0]
 8001872:	4b09      	ldr	r3, [pc, #36]	; (8001898 <HAL_MspInit+0x4c>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	4a08      	ldr	r2, [pc, #32]	; (8001898 <HAL_MspInit+0x4c>)
 8001878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800187c:	6413      	str	r3, [r2, #64]	; 0x40
 800187e:	4b06      	ldr	r3, [pc, #24]	; (8001898 <HAL_MspInit+0x4c>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001886:	603b      	str	r3, [r7, #0]
 8001888:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800188a:	2007      	movs	r0, #7
 800188c:	f000 fb2e 	bl	8001eec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001890:	bf00      	nop
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40023800 	.word	0x40023800

0800189c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018a0:	e7fe      	b.n	80018a0 <NMI_Handler+0x4>

080018a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018a6:	e7fe      	b.n	80018a6 <HardFault_Handler+0x4>

080018a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018ac:	e7fe      	b.n	80018ac <MemManage_Handler+0x4>

080018ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018b2:	e7fe      	b.n	80018b2 <BusFault_Handler+0x4>

080018b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018b8:	e7fe      	b.n	80018b8 <UsageFault_Handler+0x4>

080018ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018e8:	f000 f9ec 	bl	8001cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ec:	bf00      	nop
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PH0_OSC_IN_Pin);
 80018f4:	2001      	movs	r0, #1
 80018f6:	f000 fd85 	bl	8002404 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
	...

08001900 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001904:	4802      	ldr	r0, [pc, #8]	; (8001910 <USART2_IRQHandler+0x10>)
 8001906:	f003 fc2d 	bl	8005164 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000648 	.word	0x20000648

08001914 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001918:	4802      	ldr	r0, [pc, #8]	; (8001924 <OTG_FS_IRQHandler+0x10>)
 800191a:	f001 fea6 	bl	800366a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20001b60 	.word	0x20001b60

08001928 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
	return 1;
 800192c:	2301      	movs	r3, #1
}
 800192e:	4618      	mov	r0, r3
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <_kill>:

int _kill(int pid, int sig)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001942:	f007 ff51 	bl	80097e8 <__errno>
 8001946:	4603      	mov	r3, r0
 8001948:	2216      	movs	r2, #22
 800194a:	601a      	str	r2, [r3, #0]
	return -1;
 800194c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001950:	4618      	mov	r0, r3
 8001952:	3708      	adds	r7, #8
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <_exit>:

void _exit (int status)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001960:	f04f 31ff 	mov.w	r1, #4294967295
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f7ff ffe7 	bl	8001938 <_kill>
	while (1) {}		/* Make sure we hang here */
 800196a:	e7fe      	b.n	800196a <_exit+0x12>

0800196c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]
 800197c:	e00a      	b.n	8001994 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800197e:	f3af 8000 	nop.w
 8001982:	4601      	mov	r1, r0
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	1c5a      	adds	r2, r3, #1
 8001988:	60ba      	str	r2, [r7, #8]
 800198a:	b2ca      	uxtb	r2, r1
 800198c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	3301      	adds	r3, #1
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	697a      	ldr	r2, [r7, #20]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	429a      	cmp	r2, r3
 800199a:	dbf0      	blt.n	800197e <_read+0x12>
	}

return len;
 800199c:	687b      	ldr	r3, [r7, #4]
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b086      	sub	sp, #24
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	60f8      	str	r0, [r7, #12]
 80019ae:	60b9      	str	r1, [r7, #8]
 80019b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b2:	2300      	movs	r3, #0
 80019b4:	617b      	str	r3, [r7, #20]
 80019b6:	e009      	b.n	80019cc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	1c5a      	adds	r2, r3, #1
 80019bc:	60ba      	str	r2, [r7, #8]
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	3301      	adds	r3, #1
 80019ca:	617b      	str	r3, [r7, #20]
 80019cc:	697a      	ldr	r2, [r7, #20]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	dbf1      	blt.n	80019b8 <_write+0x12>
	}

	return len;
 80019d4:	687b      	ldr	r3, [r7, #4]
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3718      	adds	r7, #24
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <_close>:

int _close(int file)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
	return -1;
 80019e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b083      	sub	sp, #12
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
 80019fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a06:	605a      	str	r2, [r3, #4]
	return 0;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <_isatty>:

int _isatty(int file)
{
 8001a16:	b480      	push	{r7}
 8001a18:	b083      	sub	sp, #12
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
	return 1;
 8001a1e:	2301      	movs	r3, #1
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
	return 0;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3714      	adds	r7, #20
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
	...

08001a48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a50:	4a14      	ldr	r2, [pc, #80]	; (8001aa4 <_sbrk+0x5c>)
 8001a52:	4b15      	ldr	r3, [pc, #84]	; (8001aa8 <_sbrk+0x60>)
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a5c:	4b13      	ldr	r3, [pc, #76]	; (8001aac <_sbrk+0x64>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d102      	bne.n	8001a6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a64:	4b11      	ldr	r3, [pc, #68]	; (8001aac <_sbrk+0x64>)
 8001a66:	4a12      	ldr	r2, [pc, #72]	; (8001ab0 <_sbrk+0x68>)
 8001a68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a6a:	4b10      	ldr	r3, [pc, #64]	; (8001aac <_sbrk+0x64>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4413      	add	r3, r2
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d207      	bcs.n	8001a88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a78:	f007 feb6 	bl	80097e8 <__errno>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	220c      	movs	r2, #12
 8001a80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a82:	f04f 33ff 	mov.w	r3, #4294967295
 8001a86:	e009      	b.n	8001a9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a88:	4b08      	ldr	r3, [pc, #32]	; (8001aac <_sbrk+0x64>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a8e:	4b07      	ldr	r3, [pc, #28]	; (8001aac <_sbrk+0x64>)
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4413      	add	r3, r2
 8001a96:	4a05      	ldr	r2, [pc, #20]	; (8001aac <_sbrk+0x64>)
 8001a98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3718      	adds	r7, #24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20020000 	.word	0x20020000
 8001aa8:	00000400 	.word	0x00000400
 8001aac:	2000036c 	.word	0x2000036c
 8001ab0:	20001f78 	.word	0x20001f78

08001ab4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ab8:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <SystemInit+0x20>)
 8001aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001abe:	4a05      	ldr	r2, [pc, #20]	; (8001ad4 <SystemInit+0x20>)
 8001ac0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ac4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001adc:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <MX_USART2_UART_Init+0x4c>)
 8001ade:	4a12      	ldr	r2, [pc, #72]	; (8001b28 <MX_USART2_UART_Init+0x50>)
 8001ae0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ae2:	4b10      	ldr	r3, [pc, #64]	; (8001b24 <MX_USART2_UART_Init+0x4c>)
 8001ae4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ae8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001aea:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <MX_USART2_UART_Init+0x4c>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001af0:	4b0c      	ldr	r3, [pc, #48]	; (8001b24 <MX_USART2_UART_Init+0x4c>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001af6:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <MX_USART2_UART_Init+0x4c>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001afc:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <MX_USART2_UART_Init+0x4c>)
 8001afe:	220c      	movs	r2, #12
 8001b00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b02:	4b08      	ldr	r3, [pc, #32]	; (8001b24 <MX_USART2_UART_Init+0x4c>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b08:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <MX_USART2_UART_Init+0x4c>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b0e:	4805      	ldr	r0, [pc, #20]	; (8001b24 <MX_USART2_UART_Init+0x4c>)
 8001b10:	f003 fadb 	bl	80050ca <HAL_UART_Init>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b1a:	f7ff fe13 	bl	8001744 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000648 	.word	0x20000648
 8001b28:	40004400 	.word	0x40004400

08001b2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08a      	sub	sp, #40	; 0x28
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b34:	f107 0314 	add.w	r3, r7, #20
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a1d      	ldr	r2, [pc, #116]	; (8001bc0 <HAL_UART_MspInit+0x94>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d133      	bne.n	8001bb6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	613b      	str	r3, [r7, #16]
 8001b52:	4b1c      	ldr	r3, [pc, #112]	; (8001bc4 <HAL_UART_MspInit+0x98>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	4a1b      	ldr	r2, [pc, #108]	; (8001bc4 <HAL_UART_MspInit+0x98>)
 8001b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b5e:	4b19      	ldr	r3, [pc, #100]	; (8001bc4 <HAL_UART_MspInit+0x98>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b66:	613b      	str	r3, [r7, #16]
 8001b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	4b15      	ldr	r3, [pc, #84]	; (8001bc4 <HAL_UART_MspInit+0x98>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	4a14      	ldr	r2, [pc, #80]	; (8001bc4 <HAL_UART_MspInit+0x98>)
 8001b74:	f043 0301 	orr.w	r3, r3, #1
 8001b78:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7a:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <HAL_UART_MspInit+0x98>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b86:	230c      	movs	r3, #12
 8001b88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b92:	2303      	movs	r3, #3
 8001b94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b96:	2307      	movs	r3, #7
 8001b98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b9a:	f107 0314 	add.w	r3, r7, #20
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4809      	ldr	r0, [pc, #36]	; (8001bc8 <HAL_UART_MspInit+0x9c>)
 8001ba2:	f000 fa77 	bl	8002094 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2100      	movs	r1, #0
 8001baa:	2026      	movs	r0, #38	; 0x26
 8001bac:	f000 f9a9 	bl	8001f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001bb0:	2026      	movs	r0, #38	; 0x26
 8001bb2:	f000 f9c2 	bl	8001f3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001bb6:	bf00      	nop
 8001bb8:	3728      	adds	r7, #40	; 0x28
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40004400 	.word	0x40004400
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	40020000 	.word	0x40020000

08001bcc <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:   ldr   sp, =_estack    		 /* set stack pointer */
 8001bcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bd0:	480d      	ldr	r0, [pc, #52]	; (8001c08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bd2:	490e      	ldr	r1, [pc, #56]	; (8001c0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bd4:	4a0e      	ldr	r2, [pc, #56]	; (8001c10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bd8:	e002      	b.n	8001be0 <LoopCopyDataInit>

08001bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bde:	3304      	adds	r3, #4

08001be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be4:	d3f9      	bcc.n	8001bda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001be6:	4a0b      	ldr	r2, [pc, #44]	; (8001c14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001be8:	4c0b      	ldr	r4, [pc, #44]	; (8001c18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bec:	e001      	b.n	8001bf2 <LoopFillZerobss>

08001bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bf0:	3204      	adds	r2, #4

08001bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf4:	d3fb      	bcc.n	8001bee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bf6:	f7ff ff5d 	bl	8001ab4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bfa:	f007 fdfb 	bl	80097f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bfe:	f7ff fc8f 	bl	8001520 <main>
  bx  lr    
 8001c02:	4770      	bx	lr
Reset_Handler:   ldr   sp, =_estack    		 /* set stack pointer */
 8001c04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c0c:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 8001c10:	0800ca0c 	.word	0x0800ca0c
  ldr r2, =_sbss
 8001c14:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 8001c18:	20001f78 	.word	0x20001f78

08001c1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c1c:	e7fe      	b.n	8001c1c <ADC_IRQHandler>
	...

08001c20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c24:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <HAL_Init+0x40>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a0d      	ldr	r2, [pc, #52]	; (8001c60 <HAL_Init+0x40>)
 8001c2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c30:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <HAL_Init+0x40>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a0a      	ldr	r2, [pc, #40]	; (8001c60 <HAL_Init+0x40>)
 8001c36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c3c:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <HAL_Init+0x40>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a07      	ldr	r2, [pc, #28]	; (8001c60 <HAL_Init+0x40>)
 8001c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c48:	2003      	movs	r0, #3
 8001c4a:	f000 f94f 	bl	8001eec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c4e:	2000      	movs	r0, #0
 8001c50:	f000 f808 	bl	8001c64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c54:	f7ff fdfa 	bl	800184c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40023c00 	.word	0x40023c00

08001c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c6c:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <HAL_InitTick+0x54>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <HAL_InitTick+0x58>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	4619      	mov	r1, r3
 8001c76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c82:	4618      	mov	r0, r3
 8001c84:	f000 f967 	bl	8001f56 <HAL_SYSTICK_Config>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e00e      	b.n	8001cb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b0f      	cmp	r3, #15
 8001c96:	d80a      	bhi.n	8001cae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca0:	f000 f92f 	bl	8001f02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ca4:	4a06      	ldr	r2, [pc, #24]	; (8001cc0 <HAL_InitTick+0x5c>)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
 8001cac:	e000      	b.n	8001cb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20000000 	.word	0x20000000
 8001cbc:	20000008 	.word	0x20000008
 8001cc0:	20000004 	.word	0x20000004

08001cc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cc8:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <HAL_IncTick+0x20>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <HAL_IncTick+0x24>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	4a04      	ldr	r2, [pc, #16]	; (8001ce8 <HAL_IncTick+0x24>)
 8001cd6:	6013      	str	r3, [r2, #0]
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	20000008 	.word	0x20000008
 8001ce8:	2000068c 	.word	0x2000068c

08001cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return uwTick;
 8001cf0:	4b03      	ldr	r3, [pc, #12]	; (8001d00 <HAL_GetTick+0x14>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	2000068c 	.word	0x2000068c

08001d04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d0c:	f7ff ffee 	bl	8001cec <HAL_GetTick>
 8001d10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d1c:	d005      	beq.n	8001d2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d1e:	4b0a      	ldr	r3, [pc, #40]	; (8001d48 <HAL_Delay+0x44>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	461a      	mov	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	4413      	add	r3, r2
 8001d28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d2a:	bf00      	nop
 8001d2c:	f7ff ffde 	bl	8001cec <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d8f7      	bhi.n	8001d2c <HAL_Delay+0x28>
  {
  }
}
 8001d3c:	bf00      	nop
 8001d3e:	bf00      	nop
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000008 	.word	0x20000008

08001d4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <__NVIC_SetPriorityGrouping+0x44>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d62:	68ba      	ldr	r2, [r7, #8]
 8001d64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d68:	4013      	ands	r3, r2
 8001d6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d7e:	4a04      	ldr	r2, [pc, #16]	; (8001d90 <__NVIC_SetPriorityGrouping+0x44>)
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	60d3      	str	r3, [r2, #12]
}
 8001d84:	bf00      	nop
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d98:	4b04      	ldr	r3, [pc, #16]	; (8001dac <__NVIC_GetPriorityGrouping+0x18>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	0a1b      	lsrs	r3, r3, #8
 8001d9e:	f003 0307 	and.w	r3, r3, #7
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	e000ed00 	.word	0xe000ed00

08001db0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	db0b      	blt.n	8001dda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dc2:	79fb      	ldrb	r3, [r7, #7]
 8001dc4:	f003 021f 	and.w	r2, r3, #31
 8001dc8:	4907      	ldr	r1, [pc, #28]	; (8001de8 <__NVIC_EnableIRQ+0x38>)
 8001dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dce:	095b      	lsrs	r3, r3, #5
 8001dd0:	2001      	movs	r0, #1
 8001dd2:	fa00 f202 	lsl.w	r2, r0, r2
 8001dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	e000e100 	.word	0xe000e100

08001dec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	6039      	str	r1, [r7, #0]
 8001df6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	db0a      	blt.n	8001e16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	490c      	ldr	r1, [pc, #48]	; (8001e38 <__NVIC_SetPriority+0x4c>)
 8001e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0a:	0112      	lsls	r2, r2, #4
 8001e0c:	b2d2      	uxtb	r2, r2
 8001e0e:	440b      	add	r3, r1
 8001e10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e14:	e00a      	b.n	8001e2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	4908      	ldr	r1, [pc, #32]	; (8001e3c <__NVIC_SetPriority+0x50>)
 8001e1c:	79fb      	ldrb	r3, [r7, #7]
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	3b04      	subs	r3, #4
 8001e24:	0112      	lsls	r2, r2, #4
 8001e26:	b2d2      	uxtb	r2, r2
 8001e28:	440b      	add	r3, r1
 8001e2a:	761a      	strb	r2, [r3, #24]
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	e000e100 	.word	0xe000e100
 8001e3c:	e000ed00 	.word	0xe000ed00

08001e40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b089      	sub	sp, #36	; 0x24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	f1c3 0307 	rsb	r3, r3, #7
 8001e5a:	2b04      	cmp	r3, #4
 8001e5c:	bf28      	it	cs
 8001e5e:	2304      	movcs	r3, #4
 8001e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	3304      	adds	r3, #4
 8001e66:	2b06      	cmp	r3, #6
 8001e68:	d902      	bls.n	8001e70 <NVIC_EncodePriority+0x30>
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	3b03      	subs	r3, #3
 8001e6e:	e000      	b.n	8001e72 <NVIC_EncodePriority+0x32>
 8001e70:	2300      	movs	r3, #0
 8001e72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e74:	f04f 32ff 	mov.w	r2, #4294967295
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43da      	mvns	r2, r3
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	401a      	ands	r2, r3
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e88:	f04f 31ff 	mov.w	r1, #4294967295
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e92:	43d9      	mvns	r1, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e98:	4313      	orrs	r3, r2
         );
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3724      	adds	r7, #36	; 0x24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
	...

08001ea8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eb8:	d301      	bcc.n	8001ebe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e00f      	b.n	8001ede <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ebe:	4a0a      	ldr	r2, [pc, #40]	; (8001ee8 <SysTick_Config+0x40>)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ec6:	210f      	movs	r1, #15
 8001ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ecc:	f7ff ff8e 	bl	8001dec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ed0:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <SysTick_Config+0x40>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ed6:	4b04      	ldr	r3, [pc, #16]	; (8001ee8 <SysTick_Config+0x40>)
 8001ed8:	2207      	movs	r2, #7
 8001eda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	e000e010 	.word	0xe000e010

08001eec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f7ff ff29 	bl	8001d4c <__NVIC_SetPriorityGrouping>
}
 8001efa:	bf00      	nop
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b086      	sub	sp, #24
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	4603      	mov	r3, r0
 8001f0a:	60b9      	str	r1, [r7, #8]
 8001f0c:	607a      	str	r2, [r7, #4]
 8001f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f14:	f7ff ff3e 	bl	8001d94 <__NVIC_GetPriorityGrouping>
 8001f18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	68b9      	ldr	r1, [r7, #8]
 8001f1e:	6978      	ldr	r0, [r7, #20]
 8001f20:	f7ff ff8e 	bl	8001e40 <NVIC_EncodePriority>
 8001f24:	4602      	mov	r2, r0
 8001f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f2a:	4611      	mov	r1, r2
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff ff5d 	bl	8001dec <__NVIC_SetPriority>
}
 8001f32:	bf00      	nop
 8001f34:	3718      	adds	r7, #24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b082      	sub	sp, #8
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	4603      	mov	r3, r0
 8001f42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff ff31 	bl	8001db0 <__NVIC_EnableIRQ>
}
 8001f4e:	bf00      	nop
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b082      	sub	sp, #8
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7ff ffa2 	bl	8001ea8 <SysTick_Config>
 8001f64:	4603      	mov	r3, r0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b084      	sub	sp, #16
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f7c:	f7ff feb6 	bl	8001cec <HAL_GetTick>
 8001f80:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d008      	beq.n	8001fa0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2280      	movs	r2, #128	; 0x80
 8001f92:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e052      	b.n	8002046 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 0216 	bic.w	r2, r2, #22
 8001fae:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	695a      	ldr	r2, [r3, #20]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fbe:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d103      	bne.n	8001fd0 <HAL_DMA_Abort+0x62>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d007      	beq.n	8001fe0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f022 0208 	bic.w	r2, r2, #8
 8001fde:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 0201 	bic.w	r2, r2, #1
 8001fee:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ff0:	e013      	b.n	800201a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ff2:	f7ff fe7b 	bl	8001cec <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b05      	cmp	r3, #5
 8001ffe:	d90c      	bls.n	800201a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2220      	movs	r2, #32
 8002004:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2203      	movs	r2, #3
 800200a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e015      	b.n	8002046 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0301 	and.w	r3, r3, #1
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1e4      	bne.n	8001ff2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800202c:	223f      	movs	r2, #63	; 0x3f
 800202e:	409a      	lsls	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d004      	beq.n	800206c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2280      	movs	r2, #128	; 0x80
 8002066:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e00c      	b.n	8002086 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2205      	movs	r2, #5
 8002070:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f022 0201 	bic.w	r2, r2, #1
 8002082:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
	...

08002094 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002094:	b480      	push	{r7}
 8002096:	b089      	sub	sp, #36	; 0x24
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020a2:	2300      	movs	r3, #0
 80020a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020a6:	2300      	movs	r3, #0
 80020a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020aa:	2300      	movs	r3, #0
 80020ac:	61fb      	str	r3, [r7, #28]
 80020ae:	e159      	b.n	8002364 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020b0:	2201      	movs	r2, #1
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	4013      	ands	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	f040 8148 	bne.w	800235e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f003 0303 	and.w	r3, r3, #3
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d005      	beq.n	80020e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d130      	bne.n	8002148 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	2203      	movs	r2, #3
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	43db      	mvns	r3, r3
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4013      	ands	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	68da      	ldr	r2, [r3, #12]
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4313      	orrs	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800211c:	2201      	movs	r2, #1
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	43db      	mvns	r3, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4013      	ands	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	091b      	lsrs	r3, r3, #4
 8002132:	f003 0201 	and.w	r2, r3, #1
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4313      	orrs	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f003 0303 	and.w	r3, r3, #3
 8002150:	2b03      	cmp	r3, #3
 8002152:	d017      	beq.n	8002184 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	2203      	movs	r2, #3
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	43db      	mvns	r3, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4013      	ands	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4313      	orrs	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f003 0303 	and.w	r3, r3, #3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d123      	bne.n	80021d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	08da      	lsrs	r2, r3, #3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3208      	adds	r2, #8
 8002198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800219c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	220f      	movs	r2, #15
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	43db      	mvns	r3, r3
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	4013      	ands	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	691a      	ldr	r2, [r3, #16]
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	08da      	lsrs	r2, r3, #3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	3208      	adds	r2, #8
 80021d2:	69b9      	ldr	r1, [r7, #24]
 80021d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	2203      	movs	r2, #3
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	43db      	mvns	r3, r3
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4013      	ands	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f003 0203 	and.w	r2, r3, #3
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4313      	orrs	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002214:	2b00      	cmp	r3, #0
 8002216:	f000 80a2 	beq.w	800235e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	4b57      	ldr	r3, [pc, #348]	; (800237c <HAL_GPIO_Init+0x2e8>)
 8002220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002222:	4a56      	ldr	r2, [pc, #344]	; (800237c <HAL_GPIO_Init+0x2e8>)
 8002224:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002228:	6453      	str	r3, [r2, #68]	; 0x44
 800222a:	4b54      	ldr	r3, [pc, #336]	; (800237c <HAL_GPIO_Init+0x2e8>)
 800222c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002236:	4a52      	ldr	r2, [pc, #328]	; (8002380 <HAL_GPIO_Init+0x2ec>)
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	089b      	lsrs	r3, r3, #2
 800223c:	3302      	adds	r3, #2
 800223e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002242:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	f003 0303 	and.w	r3, r3, #3
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	220f      	movs	r2, #15
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	43db      	mvns	r3, r3
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4013      	ands	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a49      	ldr	r2, [pc, #292]	; (8002384 <HAL_GPIO_Init+0x2f0>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d019      	beq.n	8002296 <HAL_GPIO_Init+0x202>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a48      	ldr	r2, [pc, #288]	; (8002388 <HAL_GPIO_Init+0x2f4>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d013      	beq.n	8002292 <HAL_GPIO_Init+0x1fe>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a47      	ldr	r2, [pc, #284]	; (800238c <HAL_GPIO_Init+0x2f8>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d00d      	beq.n	800228e <HAL_GPIO_Init+0x1fa>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a46      	ldr	r2, [pc, #280]	; (8002390 <HAL_GPIO_Init+0x2fc>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d007      	beq.n	800228a <HAL_GPIO_Init+0x1f6>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a45      	ldr	r2, [pc, #276]	; (8002394 <HAL_GPIO_Init+0x300>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d101      	bne.n	8002286 <HAL_GPIO_Init+0x1f2>
 8002282:	2304      	movs	r3, #4
 8002284:	e008      	b.n	8002298 <HAL_GPIO_Init+0x204>
 8002286:	2307      	movs	r3, #7
 8002288:	e006      	b.n	8002298 <HAL_GPIO_Init+0x204>
 800228a:	2303      	movs	r3, #3
 800228c:	e004      	b.n	8002298 <HAL_GPIO_Init+0x204>
 800228e:	2302      	movs	r3, #2
 8002290:	e002      	b.n	8002298 <HAL_GPIO_Init+0x204>
 8002292:	2301      	movs	r3, #1
 8002294:	e000      	b.n	8002298 <HAL_GPIO_Init+0x204>
 8002296:	2300      	movs	r3, #0
 8002298:	69fa      	ldr	r2, [r7, #28]
 800229a:	f002 0203 	and.w	r2, r2, #3
 800229e:	0092      	lsls	r2, r2, #2
 80022a0:	4093      	lsls	r3, r2
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022a8:	4935      	ldr	r1, [pc, #212]	; (8002380 <HAL_GPIO_Init+0x2ec>)
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	089b      	lsrs	r3, r3, #2
 80022ae:	3302      	adds	r3, #2
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022b6:	4b38      	ldr	r3, [pc, #224]	; (8002398 <HAL_GPIO_Init+0x304>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	43db      	mvns	r3, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4013      	ands	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022da:	4a2f      	ldr	r2, [pc, #188]	; (8002398 <HAL_GPIO_Init+0x304>)
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80022e0:	4b2d      	ldr	r3, [pc, #180]	; (8002398 <HAL_GPIO_Init+0x304>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	43db      	mvns	r3, r3
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4013      	ands	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d003      	beq.n	8002304 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	4313      	orrs	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002304:	4a24      	ldr	r2, [pc, #144]	; (8002398 <HAL_GPIO_Init+0x304>)
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800230a:	4b23      	ldr	r3, [pc, #140]	; (8002398 <HAL_GPIO_Init+0x304>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	43db      	mvns	r3, r3
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4013      	ands	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d003      	beq.n	800232e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	4313      	orrs	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800232e:	4a1a      	ldr	r2, [pc, #104]	; (8002398 <HAL_GPIO_Init+0x304>)
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002334:	4b18      	ldr	r3, [pc, #96]	; (8002398 <HAL_GPIO_Init+0x304>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	43db      	mvns	r3, r3
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4013      	ands	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d003      	beq.n	8002358 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	4313      	orrs	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002358:	4a0f      	ldr	r2, [pc, #60]	; (8002398 <HAL_GPIO_Init+0x304>)
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	3301      	adds	r3, #1
 8002362:	61fb      	str	r3, [r7, #28]
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	2b0f      	cmp	r3, #15
 8002368:	f67f aea2 	bls.w	80020b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800236c:	bf00      	nop
 800236e:	bf00      	nop
 8002370:	3724      	adds	r7, #36	; 0x24
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	40023800 	.word	0x40023800
 8002380:	40013800 	.word	0x40013800
 8002384:	40020000 	.word	0x40020000
 8002388:	40020400 	.word	0x40020400
 800238c:	40020800 	.word	0x40020800
 8002390:	40020c00 	.word	0x40020c00
 8002394:	40021000 	.word	0x40021000
 8002398:	40013c00 	.word	0x40013c00

0800239c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	460b      	mov	r3, r1
 80023a6:	807b      	strh	r3, [r7, #2]
 80023a8:	4613      	mov	r3, r2
 80023aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023ac:	787b      	ldrb	r3, [r7, #1]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d003      	beq.n	80023ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023b2:	887a      	ldrh	r2, [r7, #2]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023b8:	e003      	b.n	80023c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023ba:	887b      	ldrh	r3, [r7, #2]
 80023bc:	041a      	lsls	r2, r3, #16
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	619a      	str	r2, [r3, #24]
}
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b085      	sub	sp, #20
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
 80023d6:	460b      	mov	r3, r1
 80023d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023e0:	887a      	ldrh	r2, [r7, #2]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	4013      	ands	r3, r2
 80023e6:	041a      	lsls	r2, r3, #16
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	43d9      	mvns	r1, r3
 80023ec:	887b      	ldrh	r3, [r7, #2]
 80023ee:	400b      	ands	r3, r1
 80023f0:	431a      	orrs	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	619a      	str	r2, [r3, #24]
}
 80023f6:	bf00      	nop
 80023f8:	3714      	adds	r7, #20
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
	...

08002404 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800240e:	4b08      	ldr	r3, [pc, #32]	; (8002430 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002410:	695a      	ldr	r2, [r3, #20]
 8002412:	88fb      	ldrh	r3, [r7, #6]
 8002414:	4013      	ands	r3, r2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d006      	beq.n	8002428 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800241a:	4a05      	ldr	r2, [pc, #20]	; (8002430 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800241c:	88fb      	ldrh	r3, [r7, #6]
 800241e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002420:	88fb      	ldrh	r3, [r7, #6]
 8002422:	4618      	mov	r0, r3
 8002424:	f000 f806 	bl	8002434 <HAL_GPIO_EXTI_Callback>
  }
}
 8002428:	bf00      	nop
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40013c00 	.word	0x40013c00

08002434 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	4603      	mov	r3, r0
 800243c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
	...

0800244c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e12b      	b.n	80026b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d106      	bne.n	8002478 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7fe fffc 	bl	8001470 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2224      	movs	r2, #36	; 0x24
 800247c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0201 	bic.w	r2, r2, #1
 800248e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800249e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024b0:	f002 fd5a 	bl	8004f68 <HAL_RCC_GetPCLK1Freq>
 80024b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	4a81      	ldr	r2, [pc, #516]	; (80026c0 <HAL_I2C_Init+0x274>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d807      	bhi.n	80024d0 <HAL_I2C_Init+0x84>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	4a80      	ldr	r2, [pc, #512]	; (80026c4 <HAL_I2C_Init+0x278>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	bf94      	ite	ls
 80024c8:	2301      	movls	r3, #1
 80024ca:	2300      	movhi	r3, #0
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	e006      	b.n	80024de <HAL_I2C_Init+0x92>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	4a7d      	ldr	r2, [pc, #500]	; (80026c8 <HAL_I2C_Init+0x27c>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	bf94      	ite	ls
 80024d8:	2301      	movls	r3, #1
 80024da:	2300      	movhi	r3, #0
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e0e7      	b.n	80026b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	4a78      	ldr	r2, [pc, #480]	; (80026cc <HAL_I2C_Init+0x280>)
 80024ea:	fba2 2303 	umull	r2, r3, r2, r3
 80024ee:	0c9b      	lsrs	r3, r3, #18
 80024f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68ba      	ldr	r2, [r7, #8]
 8002502:	430a      	orrs	r2, r1
 8002504:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	4a6a      	ldr	r2, [pc, #424]	; (80026c0 <HAL_I2C_Init+0x274>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d802      	bhi.n	8002520 <HAL_I2C_Init+0xd4>
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	3301      	adds	r3, #1
 800251e:	e009      	b.n	8002534 <HAL_I2C_Init+0xe8>
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002526:	fb02 f303 	mul.w	r3, r2, r3
 800252a:	4a69      	ldr	r2, [pc, #420]	; (80026d0 <HAL_I2C_Init+0x284>)
 800252c:	fba2 2303 	umull	r2, r3, r2, r3
 8002530:	099b      	lsrs	r3, r3, #6
 8002532:	3301      	adds	r3, #1
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6812      	ldr	r2, [r2, #0]
 8002538:	430b      	orrs	r3, r1
 800253a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002546:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	495c      	ldr	r1, [pc, #368]	; (80026c0 <HAL_I2C_Init+0x274>)
 8002550:	428b      	cmp	r3, r1
 8002552:	d819      	bhi.n	8002588 <HAL_I2C_Init+0x13c>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	1e59      	subs	r1, r3, #1
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002562:	1c59      	adds	r1, r3, #1
 8002564:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002568:	400b      	ands	r3, r1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00a      	beq.n	8002584 <HAL_I2C_Init+0x138>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	1e59      	subs	r1, r3, #1
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	fbb1 f3f3 	udiv	r3, r1, r3
 800257c:	3301      	adds	r3, #1
 800257e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002582:	e051      	b.n	8002628 <HAL_I2C_Init+0x1dc>
 8002584:	2304      	movs	r3, #4
 8002586:	e04f      	b.n	8002628 <HAL_I2C_Init+0x1dc>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d111      	bne.n	80025b4 <HAL_I2C_Init+0x168>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	1e58      	subs	r0, r3, #1
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6859      	ldr	r1, [r3, #4]
 8002598:	460b      	mov	r3, r1
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	440b      	add	r3, r1
 800259e:	fbb0 f3f3 	udiv	r3, r0, r3
 80025a2:	3301      	adds	r3, #1
 80025a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	bf0c      	ite	eq
 80025ac:	2301      	moveq	r3, #1
 80025ae:	2300      	movne	r3, #0
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	e012      	b.n	80025da <HAL_I2C_Init+0x18e>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	1e58      	subs	r0, r3, #1
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6859      	ldr	r1, [r3, #4]
 80025bc:	460b      	mov	r3, r1
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	440b      	add	r3, r1
 80025c2:	0099      	lsls	r1, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ca:	3301      	adds	r3, #1
 80025cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	bf0c      	ite	eq
 80025d4:	2301      	moveq	r3, #1
 80025d6:	2300      	movne	r3, #0
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <HAL_I2C_Init+0x196>
 80025de:	2301      	movs	r3, #1
 80025e0:	e022      	b.n	8002628 <HAL_I2C_Init+0x1dc>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10e      	bne.n	8002608 <HAL_I2C_Init+0x1bc>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	1e58      	subs	r0, r3, #1
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6859      	ldr	r1, [r3, #4]
 80025f2:	460b      	mov	r3, r1
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	440b      	add	r3, r1
 80025f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80025fc:	3301      	adds	r3, #1
 80025fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002606:	e00f      	b.n	8002628 <HAL_I2C_Init+0x1dc>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	1e58      	subs	r0, r3, #1
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6859      	ldr	r1, [r3, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	440b      	add	r3, r1
 8002616:	0099      	lsls	r1, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	fbb0 f3f3 	udiv	r3, r0, r3
 800261e:	3301      	adds	r3, #1
 8002620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002624:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002628:	6879      	ldr	r1, [r7, #4]
 800262a:	6809      	ldr	r1, [r1, #0]
 800262c:	4313      	orrs	r3, r2
 800262e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69da      	ldr	r2, [r3, #28]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a1b      	ldr	r3, [r3, #32]
 8002642:	431a      	orrs	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	430a      	orrs	r2, r1
 800264a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002656:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	6911      	ldr	r1, [r2, #16]
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	68d2      	ldr	r2, [r2, #12]
 8002662:	4311      	orrs	r1, r2
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6812      	ldr	r2, [r2, #0]
 8002668:	430b      	orrs	r3, r1
 800266a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	695a      	ldr	r2, [r3, #20]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	431a      	orrs	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	430a      	orrs	r2, r1
 8002686:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f042 0201 	orr.w	r2, r2, #1
 8002696:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2220      	movs	r2, #32
 80026a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	000186a0 	.word	0x000186a0
 80026c4:	001e847f 	.word	0x001e847f
 80026c8:	003d08ff 	.word	0x003d08ff
 80026cc:	431bde83 	.word	0x431bde83
 80026d0:	10624dd3 	.word	0x10624dd3

080026d4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b088      	sub	sp, #32
 80026d8:	af02      	add	r7, sp, #8
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	4608      	mov	r0, r1
 80026de:	4611      	mov	r1, r2
 80026e0:	461a      	mov	r2, r3
 80026e2:	4603      	mov	r3, r0
 80026e4:	817b      	strh	r3, [r7, #10]
 80026e6:	460b      	mov	r3, r1
 80026e8:	813b      	strh	r3, [r7, #8]
 80026ea:	4613      	mov	r3, r2
 80026ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026ee:	f7ff fafd 	bl	8001cec <HAL_GetTick>
 80026f2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2b20      	cmp	r3, #32
 80026fe:	f040 80d9 	bne.w	80028b4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	9300      	str	r3, [sp, #0]
 8002706:	2319      	movs	r3, #25
 8002708:	2201      	movs	r2, #1
 800270a:	496d      	ldr	r1, [pc, #436]	; (80028c0 <HAL_I2C_Mem_Write+0x1ec>)
 800270c:	68f8      	ldr	r0, [r7, #12]
 800270e:	f000 fc7f 	bl	8003010 <I2C_WaitOnFlagUntilTimeout>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002718:	2302      	movs	r3, #2
 800271a:	e0cc      	b.n	80028b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002722:	2b01      	cmp	r3, #1
 8002724:	d101      	bne.n	800272a <HAL_I2C_Mem_Write+0x56>
 8002726:	2302      	movs	r3, #2
 8002728:	e0c5      	b.n	80028b6 <HAL_I2C_Mem_Write+0x1e2>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	2b01      	cmp	r3, #1
 800273e:	d007      	beq.n	8002750 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f042 0201 	orr.w	r2, r2, #1
 800274e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800275e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2221      	movs	r2, #33	; 0x21
 8002764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2240      	movs	r2, #64	; 0x40
 800276c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6a3a      	ldr	r2, [r7, #32]
 800277a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002780:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002786:	b29a      	uxth	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	4a4d      	ldr	r2, [pc, #308]	; (80028c4 <HAL_I2C_Mem_Write+0x1f0>)
 8002790:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002792:	88f8      	ldrh	r0, [r7, #6]
 8002794:	893a      	ldrh	r2, [r7, #8]
 8002796:	8979      	ldrh	r1, [r7, #10]
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	9301      	str	r3, [sp, #4]
 800279c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800279e:	9300      	str	r3, [sp, #0]
 80027a0:	4603      	mov	r3, r0
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f000 fab6 	bl	8002d14 <I2C_RequestMemoryWrite>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d052      	beq.n	8002854 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e081      	b.n	80028b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027b6:	68f8      	ldr	r0, [r7, #12]
 80027b8:	f000 fd00 	bl	80031bc <I2C_WaitOnTXEFlagUntilTimeout>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00d      	beq.n	80027de <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	d107      	bne.n	80027da <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e06b      	b.n	80028b6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e2:	781a      	ldrb	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ee:	1c5a      	adds	r2, r3, #1
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f8:	3b01      	subs	r3, #1
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002804:	b29b      	uxth	r3, r3
 8002806:	3b01      	subs	r3, #1
 8002808:	b29a      	uxth	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b04      	cmp	r3, #4
 800281a:	d11b      	bne.n	8002854 <HAL_I2C_Mem_Write+0x180>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002820:	2b00      	cmp	r3, #0
 8002822:	d017      	beq.n	8002854 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002828:	781a      	ldrb	r2, [r3, #0]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002834:	1c5a      	adds	r2, r3, #1
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800283e:	3b01      	subs	r3, #1
 8002840:	b29a      	uxth	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800284a:	b29b      	uxth	r3, r3
 800284c:	3b01      	subs	r3, #1
 800284e:	b29a      	uxth	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1aa      	bne.n	80027b2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f000 fcec 	bl	800323e <I2C_WaitOnBTFFlagUntilTimeout>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00d      	beq.n	8002888 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002870:	2b04      	cmp	r3, #4
 8002872:	d107      	bne.n	8002884 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002882:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e016      	b.n	80028b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002896:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2220      	movs	r2, #32
 800289c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80028b0:	2300      	movs	r3, #0
 80028b2:	e000      	b.n	80028b6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80028b4:	2302      	movs	r3, #2
  }
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	00100002 	.word	0x00100002
 80028c4:	ffff0000 	.word	0xffff0000

080028c8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b08c      	sub	sp, #48	; 0x30
 80028cc:	af02      	add	r7, sp, #8
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	4608      	mov	r0, r1
 80028d2:	4611      	mov	r1, r2
 80028d4:	461a      	mov	r2, r3
 80028d6:	4603      	mov	r3, r0
 80028d8:	817b      	strh	r3, [r7, #10]
 80028da:	460b      	mov	r3, r1
 80028dc:	813b      	strh	r3, [r7, #8]
 80028de:	4613      	mov	r3, r2
 80028e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028e2:	f7ff fa03 	bl	8001cec <HAL_GetTick>
 80028e6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b20      	cmp	r3, #32
 80028f2:	f040 8208 	bne.w	8002d06 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	2319      	movs	r3, #25
 80028fc:	2201      	movs	r2, #1
 80028fe:	497b      	ldr	r1, [pc, #492]	; (8002aec <HAL_I2C_Mem_Read+0x224>)
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f000 fb85 	bl	8003010 <I2C_WaitOnFlagUntilTimeout>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800290c:	2302      	movs	r3, #2
 800290e:	e1fb      	b.n	8002d08 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002916:	2b01      	cmp	r3, #1
 8002918:	d101      	bne.n	800291e <HAL_I2C_Mem_Read+0x56>
 800291a:	2302      	movs	r3, #2
 800291c:	e1f4      	b.n	8002d08 <HAL_I2C_Mem_Read+0x440>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0301 	and.w	r3, r3, #1
 8002930:	2b01      	cmp	r3, #1
 8002932:	d007      	beq.n	8002944 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f042 0201 	orr.w	r2, r2, #1
 8002942:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002952:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2222      	movs	r2, #34	; 0x22
 8002958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2240      	movs	r2, #64	; 0x40
 8002960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800296e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002974:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800297a:	b29a      	uxth	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	4a5b      	ldr	r2, [pc, #364]	; (8002af0 <HAL_I2C_Mem_Read+0x228>)
 8002984:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002986:	88f8      	ldrh	r0, [r7, #6]
 8002988:	893a      	ldrh	r2, [r7, #8]
 800298a:	8979      	ldrh	r1, [r7, #10]
 800298c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298e:	9301      	str	r3, [sp, #4]
 8002990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002992:	9300      	str	r3, [sp, #0]
 8002994:	4603      	mov	r3, r0
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 fa52 	bl	8002e40 <I2C_RequestMemoryRead>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e1b0      	b.n	8002d08 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d113      	bne.n	80029d6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029ae:	2300      	movs	r3, #0
 80029b0:	623b      	str	r3, [r7, #32]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	623b      	str	r3, [r7, #32]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	623b      	str	r3, [r7, #32]
 80029c2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	e184      	b.n	8002ce0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d11b      	bne.n	8002a16 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029ee:	2300      	movs	r3, #0
 80029f0:	61fb      	str	r3, [r7, #28]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	695b      	ldr	r3, [r3, #20]
 80029f8:	61fb      	str	r3, [r7, #28]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	61fb      	str	r3, [r7, #28]
 8002a02:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	e164      	b.n	8002ce0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d11b      	bne.n	8002a56 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a2c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a3e:	2300      	movs	r3, #0
 8002a40:	61bb      	str	r3, [r7, #24]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	695b      	ldr	r3, [r3, #20]
 8002a48:	61bb      	str	r3, [r7, #24]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	61bb      	str	r3, [r7, #24]
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	e144      	b.n	8002ce0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a56:	2300      	movs	r3, #0
 8002a58:	617b      	str	r3, [r7, #20]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	617b      	str	r3, [r7, #20]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	617b      	str	r3, [r7, #20]
 8002a6a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002a6c:	e138      	b.n	8002ce0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a72:	2b03      	cmp	r3, #3
 8002a74:	f200 80f1 	bhi.w	8002c5a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d123      	bne.n	8002ac8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f000 fc1b 	bl	80032c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e139      	b.n	8002d08 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	691a      	ldr	r2, [r3, #16]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9e:	b2d2      	uxtb	r2, r2
 8002aa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa6:	1c5a      	adds	r2, r3, #1
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ac6:	e10b      	b.n	8002ce0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d14e      	bne.n	8002b6e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad2:	9300      	str	r3, [sp, #0]
 8002ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	4906      	ldr	r1, [pc, #24]	; (8002af4 <HAL_I2C_Mem_Read+0x22c>)
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 fa98 	bl	8003010 <I2C_WaitOnFlagUntilTimeout>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d008      	beq.n	8002af8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e10e      	b.n	8002d08 <HAL_I2C_Mem_Read+0x440>
 8002aea:	bf00      	nop
 8002aec:	00100002 	.word	0x00100002
 8002af0:	ffff0000 	.word	0xffff0000
 8002af4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	691a      	ldr	r2, [r3, #16]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1a:	1c5a      	adds	r2, r3, #1
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b24:	3b01      	subs	r3, #1
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	3b01      	subs	r3, #1
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	691a      	ldr	r2, [r3, #16]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b44:	b2d2      	uxtb	r2, r2
 8002b46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4c:	1c5a      	adds	r2, r3, #1
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b56:	3b01      	subs	r3, #1
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	3b01      	subs	r3, #1
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b6c:	e0b8      	b.n	8002ce0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b70:	9300      	str	r3, [sp, #0]
 8002b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b74:	2200      	movs	r2, #0
 8002b76:	4966      	ldr	r1, [pc, #408]	; (8002d10 <HAL_I2C_Mem_Read+0x448>)
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f000 fa49 	bl	8003010 <I2C_WaitOnFlagUntilTimeout>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e0bf      	b.n	8002d08 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	691a      	ldr	r2, [r3, #16]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba2:	b2d2      	uxtb	r2, r2
 8002ba4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002baa:	1c5a      	adds	r2, r3, #1
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	494f      	ldr	r1, [pc, #316]	; (8002d10 <HAL_I2C_Mem_Read+0x448>)
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f000 fa1b 	bl	8003010 <I2C_WaitOnFlagUntilTimeout>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e091      	b.n	8002d08 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bf2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	691a      	ldr	r2, [r3, #16]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c06:	1c5a      	adds	r2, r3, #1
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c10:	3b01      	subs	r3, #1
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	691a      	ldr	r2, [r3, #16]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c30:	b2d2      	uxtb	r2, r2
 8002c32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c38:	1c5a      	adds	r2, r3, #1
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c42:	3b01      	subs	r3, #1
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	3b01      	subs	r3, #1
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c58:	e042      	b.n	8002ce0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c5c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f000 fb2e 	bl	80032c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e04c      	b.n	8002d08 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	691a      	ldr	r2, [r3, #16]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c78:	b2d2      	uxtb	r2, r2
 8002c7a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	1c5a      	adds	r2, r3, #1
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	f003 0304 	and.w	r3, r3, #4
 8002caa:	2b04      	cmp	r3, #4
 8002cac:	d118      	bne.n	8002ce0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	691a      	ldr	r2, [r3, #16]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb8:	b2d2      	uxtb	r2, r2
 8002cba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	1c5a      	adds	r2, r3, #1
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f47f aec2 	bne.w	8002a6e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2220      	movs	r2, #32
 8002cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d02:	2300      	movs	r3, #0
 8002d04:	e000      	b.n	8002d08 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002d06:	2302      	movs	r3, #2
  }
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3728      	adds	r7, #40	; 0x28
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	00010004 	.word	0x00010004

08002d14 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b088      	sub	sp, #32
 8002d18:	af02      	add	r7, sp, #8
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	4608      	mov	r0, r1
 8002d1e:	4611      	mov	r1, r2
 8002d20:	461a      	mov	r2, r3
 8002d22:	4603      	mov	r3, r0
 8002d24:	817b      	strh	r3, [r7, #10]
 8002d26:	460b      	mov	r3, r1
 8002d28:	813b      	strh	r3, [r7, #8]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d3c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d40:	9300      	str	r3, [sp, #0]
 8002d42:	6a3b      	ldr	r3, [r7, #32]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	f000 f960 	bl	8003010 <I2C_WaitOnFlagUntilTimeout>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00d      	beq.n	8002d72 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d64:	d103      	bne.n	8002d6e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d6c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e05f      	b.n	8002e32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d72:	897b      	ldrh	r3, [r7, #10]
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	461a      	mov	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d80:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	6a3a      	ldr	r2, [r7, #32]
 8002d86:	492d      	ldr	r1, [pc, #180]	; (8002e3c <I2C_RequestMemoryWrite+0x128>)
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f000 f998 	bl	80030be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e04c      	b.n	8002e32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d98:	2300      	movs	r3, #0
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	617b      	str	r3, [r7, #20]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	617b      	str	r3, [r7, #20]
 8002dac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002db0:	6a39      	ldr	r1, [r7, #32]
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	f000 fa02 	bl	80031bc <I2C_WaitOnTXEFlagUntilTimeout>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00d      	beq.n	8002dda <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	2b04      	cmp	r3, #4
 8002dc4:	d107      	bne.n	8002dd6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dd4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e02b      	b.n	8002e32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002dda:	88fb      	ldrh	r3, [r7, #6]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d105      	bne.n	8002dec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002de0:	893b      	ldrh	r3, [r7, #8]
 8002de2:	b2da      	uxtb	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	611a      	str	r2, [r3, #16]
 8002dea:	e021      	b.n	8002e30 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002dec:	893b      	ldrh	r3, [r7, #8]
 8002dee:	0a1b      	lsrs	r3, r3, #8
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	b2da      	uxtb	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dfc:	6a39      	ldr	r1, [r7, #32]
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 f9dc 	bl	80031bc <I2C_WaitOnTXEFlagUntilTimeout>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00d      	beq.n	8002e26 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	2b04      	cmp	r3, #4
 8002e10:	d107      	bne.n	8002e22 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e20:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e005      	b.n	8002e32 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e26:	893b      	ldrh	r3, [r7, #8]
 8002e28:	b2da      	uxtb	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3718      	adds	r7, #24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	00010002 	.word	0x00010002

08002e40 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b088      	sub	sp, #32
 8002e44:	af02      	add	r7, sp, #8
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	4608      	mov	r0, r1
 8002e4a:	4611      	mov	r1, r2
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	4603      	mov	r3, r0
 8002e50:	817b      	strh	r3, [r7, #10]
 8002e52:	460b      	mov	r3, r1
 8002e54:	813b      	strh	r3, [r7, #8]
 8002e56:	4613      	mov	r3, r2
 8002e58:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e68:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e78:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7c:	9300      	str	r3, [sp, #0]
 8002e7e:	6a3b      	ldr	r3, [r7, #32]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 f8c2 	bl	8003010 <I2C_WaitOnFlagUntilTimeout>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00d      	beq.n	8002eae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ea0:	d103      	bne.n	8002eaa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ea8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e0aa      	b.n	8003004 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002eae:	897b      	ldrh	r3, [r7, #10]
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ebc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec0:	6a3a      	ldr	r2, [r7, #32]
 8002ec2:	4952      	ldr	r1, [pc, #328]	; (800300c <I2C_RequestMemoryRead+0x1cc>)
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f000 f8fa 	bl	80030be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e097      	b.n	8003004 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	617b      	str	r3, [r7, #20]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	617b      	str	r3, [r7, #20]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	617b      	str	r3, [r7, #20]
 8002ee8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eec:	6a39      	ldr	r1, [r7, #32]
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f000 f964 	bl	80031bc <I2C_WaitOnTXEFlagUntilTimeout>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00d      	beq.n	8002f16 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	d107      	bne.n	8002f12 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f10:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e076      	b.n	8003004 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f16:	88fb      	ldrh	r3, [r7, #6]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d105      	bne.n	8002f28 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f1c:	893b      	ldrh	r3, [r7, #8]
 8002f1e:	b2da      	uxtb	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	611a      	str	r2, [r3, #16]
 8002f26:	e021      	b.n	8002f6c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f28:	893b      	ldrh	r3, [r7, #8]
 8002f2a:	0a1b      	lsrs	r3, r3, #8
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f38:	6a39      	ldr	r1, [r7, #32]
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f000 f93e 	bl	80031bc <I2C_WaitOnTXEFlagUntilTimeout>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00d      	beq.n	8002f62 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	2b04      	cmp	r3, #4
 8002f4c:	d107      	bne.n	8002f5e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f5c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e050      	b.n	8003004 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f62:	893b      	ldrh	r3, [r7, #8]
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f6e:	6a39      	ldr	r1, [r7, #32]
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f000 f923 	bl	80031bc <I2C_WaitOnTXEFlagUntilTimeout>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00d      	beq.n	8002f98 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f80:	2b04      	cmp	r3, #4
 8002f82:	d107      	bne.n	8002f94 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f92:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e035      	b.n	8003004 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fa6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002faa:	9300      	str	r3, [sp, #0]
 8002fac:	6a3b      	ldr	r3, [r7, #32]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f000 f82b 	bl	8003010 <I2C_WaitOnFlagUntilTimeout>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00d      	beq.n	8002fdc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fce:	d103      	bne.n	8002fd8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fd6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e013      	b.n	8003004 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002fdc:	897b      	ldrh	r3, [r7, #10]
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	f043 0301 	orr.w	r3, r3, #1
 8002fe4:	b2da      	uxtb	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fee:	6a3a      	ldr	r2, [r7, #32]
 8002ff0:	4906      	ldr	r1, [pc, #24]	; (800300c <I2C_RequestMemoryRead+0x1cc>)
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f000 f863 	bl	80030be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e000      	b.n	8003004 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3718      	adds	r7, #24
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	00010002 	.word	0x00010002

08003010 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	603b      	str	r3, [r7, #0]
 800301c:	4613      	mov	r3, r2
 800301e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003020:	e025      	b.n	800306e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003028:	d021      	beq.n	800306e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800302a:	f7fe fe5f 	bl	8001cec <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	429a      	cmp	r2, r3
 8003038:	d302      	bcc.n	8003040 <I2C_WaitOnFlagUntilTimeout+0x30>
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d116      	bne.n	800306e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2220      	movs	r2, #32
 800304a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	f043 0220 	orr.w	r2, r3, #32
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e023      	b.n	80030b6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	0c1b      	lsrs	r3, r3, #16
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b01      	cmp	r3, #1
 8003076:	d10d      	bne.n	8003094 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	43da      	mvns	r2, r3
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	4013      	ands	r3, r2
 8003084:	b29b      	uxth	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	bf0c      	ite	eq
 800308a:	2301      	moveq	r3, #1
 800308c:	2300      	movne	r3, #0
 800308e:	b2db      	uxtb	r3, r3
 8003090:	461a      	mov	r2, r3
 8003092:	e00c      	b.n	80030ae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	43da      	mvns	r2, r3
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	4013      	ands	r3, r2
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	bf0c      	ite	eq
 80030a6:	2301      	moveq	r3, #1
 80030a8:	2300      	movne	r3, #0
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	461a      	mov	r2, r3
 80030ae:	79fb      	ldrb	r3, [r7, #7]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d0b6      	beq.n	8003022 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b084      	sub	sp, #16
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	60f8      	str	r0, [r7, #12]
 80030c6:	60b9      	str	r1, [r7, #8]
 80030c8:	607a      	str	r2, [r7, #4]
 80030ca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030cc:	e051      	b.n	8003172 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030dc:	d123      	bne.n	8003126 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2220      	movs	r2, #32
 8003102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	f043 0204 	orr.w	r2, r3, #4
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e046      	b.n	80031b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800312c:	d021      	beq.n	8003172 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800312e:	f7fe fddd 	bl	8001cec <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	429a      	cmp	r2, r3
 800313c:	d302      	bcc.n	8003144 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d116      	bne.n	8003172 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2220      	movs	r2, #32
 800314e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	f043 0220 	orr.w	r2, r3, #32
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e020      	b.n	80031b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	0c1b      	lsrs	r3, r3, #16
 8003176:	b2db      	uxtb	r3, r3
 8003178:	2b01      	cmp	r3, #1
 800317a:	d10c      	bne.n	8003196 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	43da      	mvns	r2, r3
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	4013      	ands	r3, r2
 8003188:	b29b      	uxth	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	bf14      	ite	ne
 800318e:	2301      	movne	r3, #1
 8003190:	2300      	moveq	r3, #0
 8003192:	b2db      	uxtb	r3, r3
 8003194:	e00b      	b.n	80031ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	43da      	mvns	r2, r3
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	4013      	ands	r3, r2
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	bf14      	ite	ne
 80031a8:	2301      	movne	r3, #1
 80031aa:	2300      	moveq	r3, #0
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d18d      	bne.n	80030ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3710      	adds	r7, #16
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031c8:	e02d      	b.n	8003226 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f000 f8ce 	bl	800336c <I2C_IsAcknowledgeFailed>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e02d      	b.n	8003236 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e0:	d021      	beq.n	8003226 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031e2:	f7fe fd83 	bl	8001cec <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	68ba      	ldr	r2, [r7, #8]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d302      	bcc.n	80031f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d116      	bne.n	8003226 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2220      	movs	r2, #32
 8003202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	f043 0220 	orr.w	r2, r3, #32
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e007      	b.n	8003236 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003230:	2b80      	cmp	r3, #128	; 0x80
 8003232:	d1ca      	bne.n	80031ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b084      	sub	sp, #16
 8003242:	af00      	add	r7, sp, #0
 8003244:	60f8      	str	r0, [r7, #12]
 8003246:	60b9      	str	r1, [r7, #8]
 8003248:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800324a:	e02d      	b.n	80032a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f000 f88d 	bl	800336c <I2C_IsAcknowledgeFailed>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e02d      	b.n	80032b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003262:	d021      	beq.n	80032a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003264:	f7fe fd42 	bl	8001cec <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	429a      	cmp	r2, r3
 8003272:	d302      	bcc.n	800327a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d116      	bne.n	80032a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2220      	movs	r2, #32
 8003284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003294:	f043 0220 	orr.w	r2, r3, #32
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e007      	b.n	80032b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	f003 0304 	and.w	r3, r3, #4
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	d1ca      	bne.n	800324c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032cc:	e042      	b.n	8003354 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	f003 0310 	and.w	r3, r3, #16
 80032d8:	2b10      	cmp	r3, #16
 80032da:	d119      	bne.n	8003310 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f06f 0210 	mvn.w	r2, #16
 80032e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2220      	movs	r2, #32
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e029      	b.n	8003364 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003310:	f7fe fcec 	bl	8001cec <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	68ba      	ldr	r2, [r7, #8]
 800331c:	429a      	cmp	r2, r3
 800331e:	d302      	bcc.n	8003326 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d116      	bne.n	8003354 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2220      	movs	r2, #32
 8003330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003340:	f043 0220 	orr.w	r2, r3, #32
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e007      	b.n	8003364 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335e:	2b40      	cmp	r3, #64	; 0x40
 8003360:	d1b5      	bne.n	80032ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800337e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003382:	d11b      	bne.n	80033bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800338c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2220      	movs	r2, #32
 8003398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a8:	f043 0204 	orr.w	r2, r3, #4
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e000      	b.n	80033be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr

080033ca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80033ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033cc:	b08f      	sub	sp, #60	; 0x3c
 80033ce:	af0a      	add	r7, sp, #40	; 0x28
 80033d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d101      	bne.n	80033dc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e10f      	b.n	80035fc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d106      	bne.n	80033fc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f005 fede 	bl	80091b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2203      	movs	r2, #3
 8003400:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800340c:	2b00      	cmp	r3, #0
 800340e:	d102      	bne.n	8003416 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f002 fdd1 	bl	8005fc2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	603b      	str	r3, [r7, #0]
 8003426:	687e      	ldr	r6, [r7, #4]
 8003428:	466d      	mov	r5, sp
 800342a:	f106 0410 	add.w	r4, r6, #16
 800342e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003430:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003432:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003434:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003436:	e894 0003 	ldmia.w	r4, {r0, r1}
 800343a:	e885 0003 	stmia.w	r5, {r0, r1}
 800343e:	1d33      	adds	r3, r6, #4
 8003440:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003442:	6838      	ldr	r0, [r7, #0]
 8003444:	f002 fca8 	bl	8005d98 <USB_CoreInit>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d005      	beq.n	800345a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2202      	movs	r2, #2
 8003452:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e0d0      	b.n	80035fc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2100      	movs	r1, #0
 8003460:	4618      	mov	r0, r3
 8003462:	f002 fdbf 	bl	8005fe4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003466:	2300      	movs	r3, #0
 8003468:	73fb      	strb	r3, [r7, #15]
 800346a:	e04a      	b.n	8003502 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800346c:	7bfa      	ldrb	r2, [r7, #15]
 800346e:	6879      	ldr	r1, [r7, #4]
 8003470:	4613      	mov	r3, r2
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	1a9b      	subs	r3, r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	440b      	add	r3, r1
 800347a:	333d      	adds	r3, #61	; 0x3d
 800347c:	2201      	movs	r2, #1
 800347e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003480:	7bfa      	ldrb	r2, [r7, #15]
 8003482:	6879      	ldr	r1, [r7, #4]
 8003484:	4613      	mov	r3, r2
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	1a9b      	subs	r3, r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	440b      	add	r3, r1
 800348e:	333c      	adds	r3, #60	; 0x3c
 8003490:	7bfa      	ldrb	r2, [r7, #15]
 8003492:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003494:	7bfa      	ldrb	r2, [r7, #15]
 8003496:	7bfb      	ldrb	r3, [r7, #15]
 8003498:	b298      	uxth	r0, r3
 800349a:	6879      	ldr	r1, [r7, #4]
 800349c:	4613      	mov	r3, r2
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	1a9b      	subs	r3, r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	440b      	add	r3, r1
 80034a6:	3342      	adds	r3, #66	; 0x42
 80034a8:	4602      	mov	r2, r0
 80034aa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80034ac:	7bfa      	ldrb	r2, [r7, #15]
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	4613      	mov	r3, r2
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	1a9b      	subs	r3, r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	440b      	add	r3, r1
 80034ba:	333f      	adds	r3, #63	; 0x3f
 80034bc:	2200      	movs	r2, #0
 80034be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80034c0:	7bfa      	ldrb	r2, [r7, #15]
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	4613      	mov	r3, r2
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	1a9b      	subs	r3, r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	440b      	add	r3, r1
 80034ce:	3344      	adds	r3, #68	; 0x44
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80034d4:	7bfa      	ldrb	r2, [r7, #15]
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	4613      	mov	r3, r2
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	1a9b      	subs	r3, r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	440b      	add	r3, r1
 80034e2:	3348      	adds	r3, #72	; 0x48
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80034e8:	7bfa      	ldrb	r2, [r7, #15]
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	4613      	mov	r3, r2
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	1a9b      	subs	r3, r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	440b      	add	r3, r1
 80034f6:	3350      	adds	r3, #80	; 0x50
 80034f8:	2200      	movs	r2, #0
 80034fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034fc:	7bfb      	ldrb	r3, [r7, #15]
 80034fe:	3301      	adds	r3, #1
 8003500:	73fb      	strb	r3, [r7, #15]
 8003502:	7bfa      	ldrb	r2, [r7, #15]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	429a      	cmp	r2, r3
 800350a:	d3af      	bcc.n	800346c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800350c:	2300      	movs	r3, #0
 800350e:	73fb      	strb	r3, [r7, #15]
 8003510:	e044      	b.n	800359c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003512:	7bfa      	ldrb	r2, [r7, #15]
 8003514:	6879      	ldr	r1, [r7, #4]
 8003516:	4613      	mov	r3, r2
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	1a9b      	subs	r3, r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	440b      	add	r3, r1
 8003520:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003524:	2200      	movs	r2, #0
 8003526:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003528:	7bfa      	ldrb	r2, [r7, #15]
 800352a:	6879      	ldr	r1, [r7, #4]
 800352c:	4613      	mov	r3, r2
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	1a9b      	subs	r3, r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	440b      	add	r3, r1
 8003536:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800353a:	7bfa      	ldrb	r2, [r7, #15]
 800353c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800353e:	7bfa      	ldrb	r2, [r7, #15]
 8003540:	6879      	ldr	r1, [r7, #4]
 8003542:	4613      	mov	r3, r2
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	1a9b      	subs	r3, r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	440b      	add	r3, r1
 800354c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003550:	2200      	movs	r2, #0
 8003552:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003554:	7bfa      	ldrb	r2, [r7, #15]
 8003556:	6879      	ldr	r1, [r7, #4]
 8003558:	4613      	mov	r3, r2
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	1a9b      	subs	r3, r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	440b      	add	r3, r1
 8003562:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003566:	2200      	movs	r2, #0
 8003568:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800356a:	7bfa      	ldrb	r2, [r7, #15]
 800356c:	6879      	ldr	r1, [r7, #4]
 800356e:	4613      	mov	r3, r2
 8003570:	00db      	lsls	r3, r3, #3
 8003572:	1a9b      	subs	r3, r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	440b      	add	r3, r1
 8003578:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003580:	7bfa      	ldrb	r2, [r7, #15]
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	4613      	mov	r3, r2
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	1a9b      	subs	r3, r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	440b      	add	r3, r1
 800358e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003592:	2200      	movs	r2, #0
 8003594:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003596:	7bfb      	ldrb	r3, [r7, #15]
 8003598:	3301      	adds	r3, #1
 800359a:	73fb      	strb	r3, [r7, #15]
 800359c:	7bfa      	ldrb	r2, [r7, #15]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d3b5      	bcc.n	8003512 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	603b      	str	r3, [r7, #0]
 80035ac:	687e      	ldr	r6, [r7, #4]
 80035ae:	466d      	mov	r5, sp
 80035b0:	f106 0410 	add.w	r4, r6, #16
 80035b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80035c4:	1d33      	adds	r3, r6, #4
 80035c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035c8:	6838      	ldr	r0, [r7, #0]
 80035ca:	f002 fd57 	bl	800607c <USB_DevInit>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d005      	beq.n	80035e0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2202      	movs	r2, #2
 80035d8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e00d      	b.n	80035fc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f003 fdd3 	bl	80071a0 <USB_DevDisconnect>

  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3714      	adds	r7, #20
 8003600:	46bd      	mov	sp, r7
 8003602:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003604 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003618:	2b01      	cmp	r3, #1
 800361a:	d101      	bne.n	8003620 <HAL_PCD_Start+0x1c>
 800361c:	2302      	movs	r3, #2
 800361e:	e020      	b.n	8003662 <HAL_PCD_Start+0x5e>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362c:	2b01      	cmp	r3, #1
 800362e:	d109      	bne.n	8003644 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003634:	2b01      	cmp	r3, #1
 8003636:	d005      	beq.n	8003644 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4618      	mov	r0, r3
 800364a:	f002 fca9 	bl	8005fa0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f003 fd83 	bl	800715e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800366a:	b590      	push	{r4, r7, lr}
 800366c:	b08d      	sub	sp, #52	; 0x34
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003678:	6a3b      	ldr	r3, [r7, #32]
 800367a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4618      	mov	r0, r3
 8003682:	f003 fe41 	bl	8007308 <USB_GetMode>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	f040 839d 	bne.w	8003dc8 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f003 fda5 	bl	80071e2 <USB_ReadInterrupts>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	f000 8393 	beq.w	8003dc6 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f003 fd9c 	bl	80071e2 <USB_ReadInterrupts>
 80036aa:	4603      	mov	r3, r0
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d107      	bne.n	80036c4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	695a      	ldr	r2, [r3, #20]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f002 0202 	and.w	r2, r2, #2
 80036c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f003 fd8a 	bl	80071e2 <USB_ReadInterrupts>
 80036ce:	4603      	mov	r3, r0
 80036d0:	f003 0310 	and.w	r3, r3, #16
 80036d4:	2b10      	cmp	r3, #16
 80036d6:	d161      	bne.n	800379c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	699a      	ldr	r2, [r3, #24]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f022 0210 	bic.w	r2, r2, #16
 80036e6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80036e8:	6a3b      	ldr	r3, [r7, #32]
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	f003 020f 	and.w	r2, r3, #15
 80036f4:	4613      	mov	r3, r2
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	1a9b      	subs	r3, r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	4413      	add	r3, r2
 8003704:	3304      	adds	r3, #4
 8003706:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	0c5b      	lsrs	r3, r3, #17
 800370c:	f003 030f 	and.w	r3, r3, #15
 8003710:	2b02      	cmp	r3, #2
 8003712:	d124      	bne.n	800375e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800371a:	4013      	ands	r3, r2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d035      	beq.n	800378c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	091b      	lsrs	r3, r3, #4
 8003728:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800372a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800372e:	b29b      	uxth	r3, r3
 8003730:	461a      	mov	r2, r3
 8003732:	6a38      	ldr	r0, [r7, #32]
 8003734:	f003 fbc1 	bl	8006eba <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	68da      	ldr	r2, [r3, #12]
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	091b      	lsrs	r3, r3, #4
 8003740:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003744:	441a      	add	r2, r3
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	699a      	ldr	r2, [r3, #24]
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	091b      	lsrs	r3, r3, #4
 8003752:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003756:	441a      	add	r2, r3
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	619a      	str	r2, [r3, #24]
 800375c:	e016      	b.n	800378c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	0c5b      	lsrs	r3, r3, #17
 8003762:	f003 030f 	and.w	r3, r3, #15
 8003766:	2b06      	cmp	r3, #6
 8003768:	d110      	bne.n	800378c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003770:	2208      	movs	r2, #8
 8003772:	4619      	mov	r1, r3
 8003774:	6a38      	ldr	r0, [r7, #32]
 8003776:	f003 fba0 	bl	8006eba <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	699a      	ldr	r2, [r3, #24]
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	091b      	lsrs	r3, r3, #4
 8003782:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003786:	441a      	add	r2, r3
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	699a      	ldr	r2, [r3, #24]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 0210 	orr.w	r2, r2, #16
 800379a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f003 fd1e 	bl	80071e2 <USB_ReadInterrupts>
 80037a6:	4603      	mov	r3, r0
 80037a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037ac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80037b0:	d16e      	bne.n	8003890 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80037b2:	2300      	movs	r3, #0
 80037b4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f003 fd24 	bl	8007208 <USB_ReadDevAllOutEpInterrupt>
 80037c0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80037c2:	e062      	b.n	800388a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80037c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d057      	beq.n	800387e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037d4:	b2d2      	uxtb	r2, r2
 80037d6:	4611      	mov	r1, r2
 80037d8:	4618      	mov	r0, r3
 80037da:	f003 fd49 	bl	8007270 <USB_ReadDevOutEPInterrupt>
 80037de:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00c      	beq.n	8003804 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80037ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ec:	015a      	lsls	r2, r3, #5
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	4413      	add	r3, r2
 80037f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037f6:	461a      	mov	r2, r3
 80037f8:	2301      	movs	r3, #1
 80037fa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80037fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 fdb0 	bl	8004364 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	f003 0308 	and.w	r3, r3, #8
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00c      	beq.n	8003828 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003810:	015a      	lsls	r2, r3, #5
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	4413      	add	r3, r2
 8003816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800381a:	461a      	mov	r2, r3
 800381c:	2308      	movs	r3, #8
 800381e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003820:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 feaa 	bl	800457c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	f003 0310 	and.w	r3, r3, #16
 800382e:	2b00      	cmp	r3, #0
 8003830:	d008      	beq.n	8003844 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003834:	015a      	lsls	r2, r3, #5
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	4413      	add	r3, r2
 800383a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800383e:	461a      	mov	r2, r3
 8003840:	2310      	movs	r3, #16
 8003842:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	f003 0320 	and.w	r3, r3, #32
 800384a:	2b00      	cmp	r3, #0
 800384c:	d008      	beq.n	8003860 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800384e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003850:	015a      	lsls	r2, r3, #5
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	4413      	add	r3, r2
 8003856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800385a:	461a      	mov	r2, r3
 800385c:	2320      	movs	r3, #32
 800385e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d009      	beq.n	800387e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800386a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386c:	015a      	lsls	r2, r3, #5
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	4413      	add	r3, r2
 8003872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003876:	461a      	mov	r2, r3
 8003878:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800387c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	3301      	adds	r3, #1
 8003882:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003886:	085b      	lsrs	r3, r3, #1
 8003888:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800388a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800388c:	2b00      	cmp	r3, #0
 800388e:	d199      	bne.n	80037c4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4618      	mov	r0, r3
 8003896:	f003 fca4 	bl	80071e2 <USB_ReadInterrupts>
 800389a:	4603      	mov	r3, r0
 800389c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038a4:	f040 80c0 	bne.w	8003a28 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f003 fcc5 	bl	800723c <USB_ReadDevAllInEpInterrupt>
 80038b2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80038b4:	2300      	movs	r3, #0
 80038b6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80038b8:	e0b2      	b.n	8003a20 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80038ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f000 80a7 	beq.w	8003a14 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038cc:	b2d2      	uxtb	r2, r2
 80038ce:	4611      	mov	r1, r2
 80038d0:	4618      	mov	r0, r3
 80038d2:	f003 fceb 	bl	80072ac <USB_ReadDevInEPInterrupt>
 80038d6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d057      	beq.n	8003992 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80038e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e4:	f003 030f 	and.w	r3, r3, #15
 80038e8:	2201      	movs	r2, #1
 80038ea:	fa02 f303 	lsl.w	r3, r2, r3
 80038ee:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	43db      	mvns	r3, r3
 80038fc:	69f9      	ldr	r1, [r7, #28]
 80038fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003902:	4013      	ands	r3, r2
 8003904:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003908:	015a      	lsls	r2, r3, #5
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	4413      	add	r3, r2
 800390e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003912:	461a      	mov	r2, r3
 8003914:	2301      	movs	r3, #1
 8003916:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d132      	bne.n	8003986 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003920:	6879      	ldr	r1, [r7, #4]
 8003922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003924:	4613      	mov	r3, r2
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	1a9b      	subs	r3, r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	440b      	add	r3, r1
 800392e:	3348      	adds	r3, #72	; 0x48
 8003930:	6819      	ldr	r1, [r3, #0]
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003936:	4613      	mov	r3, r2
 8003938:	00db      	lsls	r3, r3, #3
 800393a:	1a9b      	subs	r3, r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	4403      	add	r3, r0
 8003940:	3344      	adds	r3, #68	; 0x44
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4419      	add	r1, r3
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800394a:	4613      	mov	r3, r2
 800394c:	00db      	lsls	r3, r3, #3
 800394e:	1a9b      	subs	r3, r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	4403      	add	r3, r0
 8003954:	3348      	adds	r3, #72	; 0x48
 8003956:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395a:	2b00      	cmp	r3, #0
 800395c:	d113      	bne.n	8003986 <HAL_PCD_IRQHandler+0x31c>
 800395e:	6879      	ldr	r1, [r7, #4]
 8003960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003962:	4613      	mov	r3, r2
 8003964:	00db      	lsls	r3, r3, #3
 8003966:	1a9b      	subs	r3, r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	440b      	add	r3, r1
 800396c:	3350      	adds	r3, #80	; 0x50
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d108      	bne.n	8003986 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6818      	ldr	r0, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800397e:	461a      	mov	r2, r3
 8003980:	2101      	movs	r1, #1
 8003982:	f003 fcf3 	bl	800736c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003988:	b2db      	uxtb	r3, r3
 800398a:	4619      	mov	r1, r3
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f005 fca2 	bl	80092d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	f003 0308 	and.w	r3, r3, #8
 8003998:	2b00      	cmp	r3, #0
 800399a:	d008      	beq.n	80039ae <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399e:	015a      	lsls	r2, r3, #5
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	4413      	add	r3, r2
 80039a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039a8:	461a      	mov	r2, r3
 80039aa:	2308      	movs	r3, #8
 80039ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	f003 0310 	and.w	r3, r3, #16
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d008      	beq.n	80039ca <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80039b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ba:	015a      	lsls	r2, r3, #5
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	4413      	add	r3, r2
 80039c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039c4:	461a      	mov	r2, r3
 80039c6:	2310      	movs	r3, #16
 80039c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d008      	beq.n	80039e6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80039d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d6:	015a      	lsls	r2, r3, #5
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	4413      	add	r3, r2
 80039dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039e0:	461a      	mov	r2, r3
 80039e2:	2340      	movs	r3, #64	; 0x40
 80039e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	f003 0302 	and.w	r3, r3, #2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d008      	beq.n	8003a02 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80039f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f2:	015a      	lsls	r2, r3, #5
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	4413      	add	r3, r2
 80039f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039fc:	461a      	mov	r2, r3
 80039fe:	2302      	movs	r3, #2
 8003a00:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d003      	beq.n	8003a14 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003a0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 fc1b 	bl	800424a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a16:	3301      	adds	r3, #1
 8003a18:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1c:	085b      	lsrs	r3, r3, #1
 8003a1e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f47f af49 	bne.w	80038ba <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f003 fbd8 	bl	80071e2 <USB_ReadInterrupts>
 8003a32:	4603      	mov	r3, r0
 8003a34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a3c:	d122      	bne.n	8003a84 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	69fa      	ldr	r2, [r7, #28]
 8003a48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a4c:	f023 0301 	bic.w	r3, r3, #1
 8003a50:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d108      	bne.n	8003a6e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003a64:	2100      	movs	r1, #0
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 fe26 	bl	80046b8 <HAL_PCDEx_LPM_Callback>
 8003a6c:	e002      	b.n	8003a74 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f005 fc9e 	bl	80093b0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	695a      	ldr	r2, [r3, #20]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003a82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f003 fbaa 	bl	80071e2 <USB_ReadInterrupts>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a98:	d112      	bne.n	8003ac0 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d102      	bne.n	8003ab0 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f005 fc5a 	bl	8009364 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	695a      	ldr	r2, [r3, #20]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003abe:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f003 fb8c 	bl	80071e2 <USB_ReadInterrupts>
 8003aca:	4603      	mov	r3, r0
 8003acc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ad0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ad4:	f040 80c7 	bne.w	8003c66 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	69fa      	ldr	r2, [r7, #28]
 8003ae2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ae6:	f023 0301 	bic.w	r3, r3, #1
 8003aea:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2110      	movs	r1, #16
 8003af2:	4618      	mov	r0, r3
 8003af4:	f002 fc26 	bl	8006344 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003af8:	2300      	movs	r3, #0
 8003afa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003afc:	e056      	b.n	8003bac <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b00:	015a      	lsls	r2, r3, #5
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	4413      	add	r3, r2
 8003b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b10:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b14:	015a      	lsls	r2, r3, #5
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	4413      	add	r3, r2
 8003b1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b22:	0151      	lsls	r1, r2, #5
 8003b24:	69fa      	ldr	r2, [r7, #28]
 8003b26:	440a      	add	r2, r1
 8003b28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b2c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b30:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b34:	015a      	lsls	r2, r3, #5
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	4413      	add	r3, r2
 8003b3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b42:	0151      	lsls	r1, r2, #5
 8003b44:	69fa      	ldr	r2, [r7, #28]
 8003b46:	440a      	add	r2, r1
 8003b48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b4c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b50:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b54:	015a      	lsls	r2, r3, #5
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	4413      	add	r3, r2
 8003b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b5e:	461a      	mov	r2, r3
 8003b60:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b64:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b68:	015a      	lsls	r2, r3, #5
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b76:	0151      	lsls	r1, r2, #5
 8003b78:	69fa      	ldr	r2, [r7, #28]
 8003b7a:	440a      	add	r2, r1
 8003b7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b80:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b84:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b88:	015a      	lsls	r2, r3, #5
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b96:	0151      	lsls	r1, r2, #5
 8003b98:	69fa      	ldr	r2, [r7, #28]
 8003b9a:	440a      	add	r2, r1
 8003b9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ba0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ba4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba8:	3301      	adds	r3, #1
 8003baa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d3a3      	bcc.n	8003afe <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	69fa      	ldr	r2, [r7, #28]
 8003bc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bc4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003bc8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d016      	beq.n	8003c00 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bdc:	69fa      	ldr	r2, [r7, #28]
 8003bde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003be2:	f043 030b 	orr.w	r3, r3, #11
 8003be6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf2:	69fa      	ldr	r2, [r7, #28]
 8003bf4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bf8:	f043 030b 	orr.w	r3, r3, #11
 8003bfc:	6453      	str	r3, [r2, #68]	; 0x44
 8003bfe:	e015      	b.n	8003c2c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c06:	695b      	ldr	r3, [r3, #20]
 8003c08:	69fa      	ldr	r2, [r7, #28]
 8003c0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c0e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c12:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003c16:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	69fa      	ldr	r2, [r7, #28]
 8003c22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c26:	f043 030b 	orr.w	r3, r3, #11
 8003c2a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	69fa      	ldr	r2, [r7, #28]
 8003c36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c3a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003c3e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6818      	ldr	r0, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003c50:	461a      	mov	r2, r3
 8003c52:	f003 fb8b 	bl	800736c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	695a      	ldr	r2, [r3, #20]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003c64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f003 fab9 	bl	80071e2 <USB_ReadInterrupts>
 8003c70:	4603      	mov	r3, r0
 8003c72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c7a:	d124      	bne.n	8003cc6 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4618      	mov	r0, r3
 8003c82:	f003 fb4f 	bl	8007324 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f002 fbb7 	bl	80063fe <USB_GetDevSpeed>
 8003c90:	4603      	mov	r3, r0
 8003c92:	461a      	mov	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681c      	ldr	r4, [r3, #0]
 8003c9c:	f001 f958 	bl	8004f50 <HAL_RCC_GetHCLKFreq>
 8003ca0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	461a      	mov	r2, r3
 8003caa:	4620      	mov	r0, r4
 8003cac:	f002 f8d6 	bl	8005e5c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f005 fb38 	bl	8009326 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	695a      	ldr	r2, [r3, #20]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003cc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f003 fa89 	bl	80071e2 <USB_ReadInterrupts>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	f003 0308 	and.w	r3, r3, #8
 8003cd6:	2b08      	cmp	r3, #8
 8003cd8:	d10a      	bne.n	8003cf0 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f005 fb15 	bl	800930a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	695a      	ldr	r2, [r3, #20]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f002 0208 	and.w	r2, r2, #8
 8003cee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f003 fa74 	bl	80071e2 <USB_ReadInterrupts>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d04:	d10f      	bne.n	8003d26 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003d06:	2300      	movs	r3, #0
 8003d08:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	4619      	mov	r1, r3
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f005 fb6d 	bl	80093f0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	695a      	ldr	r2, [r3, #20]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003d24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f003 fa59 	bl	80071e2 <USB_ReadInterrupts>
 8003d30:	4603      	mov	r3, r0
 8003d32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d3a:	d10f      	bne.n	8003d5c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	4619      	mov	r1, r3
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f005 fb40 	bl	80093cc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	695a      	ldr	r2, [r3, #20]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003d5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4618      	mov	r0, r3
 8003d62:	f003 fa3e 	bl	80071e2 <USB_ReadInterrupts>
 8003d66:	4603      	mov	r3, r0
 8003d68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d70:	d10a      	bne.n	8003d88 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f005 fb4e 	bl	8009414 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	695a      	ldr	r2, [r3, #20]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003d86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f003 fa28 	bl	80071e2 <USB_ReadInterrupts>
 8003d92:	4603      	mov	r3, r0
 8003d94:	f003 0304 	and.w	r3, r3, #4
 8003d98:	2b04      	cmp	r3, #4
 8003d9a:	d115      	bne.n	8003dc8 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	f003 0304 	and.w	r3, r3, #4
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d002      	beq.n	8003db4 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f005 fb3e 	bl	8009430 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6859      	ldr	r1, [r3, #4]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	69ba      	ldr	r2, [r7, #24]
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	605a      	str	r2, [r3, #4]
 8003dc4:	e000      	b.n	8003dc8 <HAL_PCD_IRQHandler+0x75e>
      return;
 8003dc6:	bf00      	nop
    }
  }
}
 8003dc8:	3734      	adds	r7, #52	; 0x34
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd90      	pop	{r4, r7, pc}

08003dce <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b082      	sub	sp, #8
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d101      	bne.n	8003de8 <HAL_PCD_SetAddress+0x1a>
 8003de4:	2302      	movs	r3, #2
 8003de6:	e013      	b.n	8003e10 <HAL_PCD_SetAddress+0x42>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	78fa      	ldrb	r2, [r7, #3]
 8003df4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	78fa      	ldrb	r2, [r7, #3]
 8003dfe:	4611      	mov	r1, r2
 8003e00:	4618      	mov	r0, r3
 8003e02:	f003 f986 	bl	8007112 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3708      	adds	r7, #8
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	4608      	mov	r0, r1
 8003e22:	4611      	mov	r1, r2
 8003e24:	461a      	mov	r2, r3
 8003e26:	4603      	mov	r3, r0
 8003e28:	70fb      	strb	r3, [r7, #3]
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	803b      	strh	r3, [r7, #0]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003e32:	2300      	movs	r3, #0
 8003e34:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	da0f      	bge.n	8003e5e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e3e:	78fb      	ldrb	r3, [r7, #3]
 8003e40:	f003 020f 	and.w	r2, r3, #15
 8003e44:	4613      	mov	r3, r2
 8003e46:	00db      	lsls	r3, r3, #3
 8003e48:	1a9b      	subs	r3, r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	3338      	adds	r3, #56	; 0x38
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	4413      	add	r3, r2
 8003e52:	3304      	adds	r3, #4
 8003e54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	705a      	strb	r2, [r3, #1]
 8003e5c:	e00f      	b.n	8003e7e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e5e:	78fb      	ldrb	r3, [r7, #3]
 8003e60:	f003 020f 	and.w	r2, r3, #15
 8003e64:	4613      	mov	r3, r2
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	1a9b      	subs	r3, r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	4413      	add	r3, r2
 8003e74:	3304      	adds	r3, #4
 8003e76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003e7e:	78fb      	ldrb	r3, [r7, #3]
 8003e80:	f003 030f 	and.w	r3, r3, #15
 8003e84:	b2da      	uxtb	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003e8a:	883a      	ldrh	r2, [r7, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	78ba      	ldrb	r2, [r7, #2]
 8003e94:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	785b      	ldrb	r3, [r3, #1]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d004      	beq.n	8003ea8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003ea8:	78bb      	ldrb	r3, [r7, #2]
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d102      	bne.n	8003eb4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d101      	bne.n	8003ec2 <HAL_PCD_EP_Open+0xaa>
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	e00e      	b.n	8003ee0 <HAL_PCD_EP_Open+0xc8>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68f9      	ldr	r1, [r7, #12]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f002 fab9 	bl	8006448 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003ede:	7afb      	ldrb	r3, [r7, #11]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ef4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	da0f      	bge.n	8003f1c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003efc:	78fb      	ldrb	r3, [r7, #3]
 8003efe:	f003 020f 	and.w	r2, r3, #15
 8003f02:	4613      	mov	r3, r2
 8003f04:	00db      	lsls	r3, r3, #3
 8003f06:	1a9b      	subs	r3, r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	3338      	adds	r3, #56	; 0x38
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	4413      	add	r3, r2
 8003f10:	3304      	adds	r3, #4
 8003f12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2201      	movs	r2, #1
 8003f18:	705a      	strb	r2, [r3, #1]
 8003f1a:	e00f      	b.n	8003f3c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f1c:	78fb      	ldrb	r3, [r7, #3]
 8003f1e:	f003 020f 	and.w	r2, r3, #15
 8003f22:	4613      	mov	r3, r2
 8003f24:	00db      	lsls	r3, r3, #3
 8003f26:	1a9b      	subs	r3, r3, r2
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	4413      	add	r3, r2
 8003f32:	3304      	adds	r3, #4
 8003f34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003f3c:	78fb      	ldrb	r3, [r7, #3]
 8003f3e:	f003 030f 	and.w	r3, r3, #15
 8003f42:	b2da      	uxtb	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d101      	bne.n	8003f56 <HAL_PCD_EP_Close+0x6e>
 8003f52:	2302      	movs	r3, #2
 8003f54:	e00e      	b.n	8003f74 <HAL_PCD_EP_Close+0x8c>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68f9      	ldr	r1, [r7, #12]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f002 faf7 	bl	8006558 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b086      	sub	sp, #24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	607a      	str	r2, [r7, #4]
 8003f86:	603b      	str	r3, [r7, #0]
 8003f88:	460b      	mov	r3, r1
 8003f8a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f8c:	7afb      	ldrb	r3, [r7, #11]
 8003f8e:	f003 020f 	and.w	r2, r3, #15
 8003f92:	4613      	mov	r3, r2
 8003f94:	00db      	lsls	r3, r3, #3
 8003f96:	1a9b      	subs	r3, r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	3304      	adds	r3, #4
 8003fa4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fbe:	7afb      	ldrb	r3, [r7, #11]
 8003fc0:	f003 030f 	and.w	r3, r3, #15
 8003fc4:	b2da      	uxtb	r2, r3
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d102      	bne.n	8003fd8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003fd8:	7afb      	ldrb	r3, [r7, #11]
 8003fda:	f003 030f 	and.w	r3, r3, #15
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d109      	bne.n	8003ff6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6818      	ldr	r0, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	461a      	mov	r2, r3
 8003fee:	6979      	ldr	r1, [r7, #20]
 8003ff0:	f002 fdd2 	bl	8006b98 <USB_EP0StartXfer>
 8003ff4:	e008      	b.n	8004008 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6818      	ldr	r0, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	461a      	mov	r2, r3
 8004002:	6979      	ldr	r1, [r7, #20]
 8004004:	f002 fb84 	bl	8006710 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3718      	adds	r7, #24
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004012:	b480      	push	{r7}
 8004014:	b083      	sub	sp, #12
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
 800401a:	460b      	mov	r3, r1
 800401c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800401e:	78fb      	ldrb	r3, [r7, #3]
 8004020:	f003 020f 	and.w	r2, r3, #15
 8004024:	6879      	ldr	r1, [r7, #4]
 8004026:	4613      	mov	r3, r2
 8004028:	00db      	lsls	r3, r3, #3
 800402a:	1a9b      	subs	r3, r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	440b      	add	r3, r1
 8004030:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004034:	681b      	ldr	r3, [r3, #0]
}
 8004036:	4618      	mov	r0, r3
 8004038:	370c      	adds	r7, #12
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr

08004042 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004042:	b580      	push	{r7, lr}
 8004044:	b086      	sub	sp, #24
 8004046:	af00      	add	r7, sp, #0
 8004048:	60f8      	str	r0, [r7, #12]
 800404a:	607a      	str	r2, [r7, #4]
 800404c:	603b      	str	r3, [r7, #0]
 800404e:	460b      	mov	r3, r1
 8004050:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004052:	7afb      	ldrb	r3, [r7, #11]
 8004054:	f003 020f 	and.w	r2, r3, #15
 8004058:	4613      	mov	r3, r2
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	1a9b      	subs	r3, r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	3338      	adds	r3, #56	; 0x38
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	4413      	add	r3, r2
 8004066:	3304      	adds	r3, #4
 8004068:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	683a      	ldr	r2, [r7, #0]
 8004074:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	2200      	movs	r2, #0
 800407a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	2201      	movs	r2, #1
 8004080:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004082:	7afb      	ldrb	r3, [r7, #11]
 8004084:	f003 030f 	and.w	r3, r3, #15
 8004088:	b2da      	uxtb	r2, r3
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d102      	bne.n	800409c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800409c:	7afb      	ldrb	r3, [r7, #11]
 800409e:	f003 030f 	and.w	r3, r3, #15
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d109      	bne.n	80040ba <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6818      	ldr	r0, [r3, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	461a      	mov	r2, r3
 80040b2:	6979      	ldr	r1, [r7, #20]
 80040b4:	f002 fd70 	bl	8006b98 <USB_EP0StartXfer>
 80040b8:	e008      	b.n	80040cc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6818      	ldr	r0, [r3, #0]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	461a      	mov	r2, r3
 80040c6:	6979      	ldr	r1, [r7, #20]
 80040c8:	f002 fb22 	bl	8006710 <USB_EPStartXfer>
  }

  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3718      	adds	r7, #24
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b084      	sub	sp, #16
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
 80040de:	460b      	mov	r3, r1
 80040e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80040e2:	78fb      	ldrb	r3, [r7, #3]
 80040e4:	f003 020f 	and.w	r2, r3, #15
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d901      	bls.n	80040f4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e050      	b.n	8004196 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80040f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	da0f      	bge.n	800411c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040fc:	78fb      	ldrb	r3, [r7, #3]
 80040fe:	f003 020f 	and.w	r2, r3, #15
 8004102:	4613      	mov	r3, r2
 8004104:	00db      	lsls	r3, r3, #3
 8004106:	1a9b      	subs	r3, r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	3338      	adds	r3, #56	; 0x38
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	4413      	add	r3, r2
 8004110:	3304      	adds	r3, #4
 8004112:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2201      	movs	r2, #1
 8004118:	705a      	strb	r2, [r3, #1]
 800411a:	e00d      	b.n	8004138 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800411c:	78fa      	ldrb	r2, [r7, #3]
 800411e:	4613      	mov	r3, r2
 8004120:	00db      	lsls	r3, r3, #3
 8004122:	1a9b      	subs	r3, r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	4413      	add	r3, r2
 800412e:	3304      	adds	r3, #4
 8004130:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2201      	movs	r2, #1
 800413c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800413e:	78fb      	ldrb	r3, [r7, #3]
 8004140:	f003 030f 	and.w	r3, r3, #15
 8004144:	b2da      	uxtb	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004150:	2b01      	cmp	r3, #1
 8004152:	d101      	bne.n	8004158 <HAL_PCD_EP_SetStall+0x82>
 8004154:	2302      	movs	r3, #2
 8004156:	e01e      	b.n	8004196 <HAL_PCD_EP_SetStall+0xc0>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68f9      	ldr	r1, [r7, #12]
 8004166:	4618      	mov	r0, r3
 8004168:	f002 feff 	bl	8006f6a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800416c:	78fb      	ldrb	r3, [r7, #3]
 800416e:	f003 030f 	and.w	r3, r3, #15
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10a      	bne.n	800418c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6818      	ldr	r0, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	b2d9      	uxtb	r1, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004186:	461a      	mov	r2, r3
 8004188:	f003 f8f0 	bl	800736c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b084      	sub	sp, #16
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
 80041a6:	460b      	mov	r3, r1
 80041a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80041aa:	78fb      	ldrb	r3, [r7, #3]
 80041ac:	f003 020f 	and.w	r2, r3, #15
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d901      	bls.n	80041bc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e042      	b.n	8004242 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80041bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	da0f      	bge.n	80041e4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041c4:	78fb      	ldrb	r3, [r7, #3]
 80041c6:	f003 020f 	and.w	r2, r3, #15
 80041ca:	4613      	mov	r3, r2
 80041cc:	00db      	lsls	r3, r3, #3
 80041ce:	1a9b      	subs	r3, r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	3338      	adds	r3, #56	; 0x38
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	4413      	add	r3, r2
 80041d8:	3304      	adds	r3, #4
 80041da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2201      	movs	r2, #1
 80041e0:	705a      	strb	r2, [r3, #1]
 80041e2:	e00f      	b.n	8004204 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041e4:	78fb      	ldrb	r3, [r7, #3]
 80041e6:	f003 020f 	and.w	r2, r3, #15
 80041ea:	4613      	mov	r3, r2
 80041ec:	00db      	lsls	r3, r3, #3
 80041ee:	1a9b      	subs	r3, r3, r2
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	4413      	add	r3, r2
 80041fa:	3304      	adds	r3, #4
 80041fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800420a:	78fb      	ldrb	r3, [r7, #3]
 800420c:	f003 030f 	and.w	r3, r3, #15
 8004210:	b2da      	uxtb	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800421c:	2b01      	cmp	r3, #1
 800421e:	d101      	bne.n	8004224 <HAL_PCD_EP_ClrStall+0x86>
 8004220:	2302      	movs	r3, #2
 8004222:	e00e      	b.n	8004242 <HAL_PCD_EP_ClrStall+0xa4>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68f9      	ldr	r1, [r7, #12]
 8004232:	4618      	mov	r0, r3
 8004234:	f002 ff07 	bl	8007046 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800424a:	b580      	push	{r7, lr}
 800424c:	b08a      	sub	sp, #40	; 0x28
 800424e:	af02      	add	r7, sp, #8
 8004250:	6078      	str	r0, [r7, #4]
 8004252:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	4613      	mov	r3, r2
 8004262:	00db      	lsls	r3, r3, #3
 8004264:	1a9b      	subs	r3, r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	3338      	adds	r3, #56	; 0x38
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	4413      	add	r3, r2
 800426e:	3304      	adds	r3, #4
 8004270:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	699a      	ldr	r2, [r3, #24]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	429a      	cmp	r2, r3
 800427c:	d901      	bls.n	8004282 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e06c      	b.n	800435c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	695a      	ldr	r2, [r3, #20]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	69fa      	ldr	r2, [r7, #28]
 8004294:	429a      	cmp	r2, r3
 8004296:	d902      	bls.n	800429e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	3303      	adds	r3, #3
 80042a2:	089b      	lsrs	r3, r3, #2
 80042a4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80042a6:	e02b      	b.n	8004300 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	695a      	ldr	r2, [r3, #20]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	69fa      	ldr	r2, [r7, #28]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d902      	bls.n	80042c4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	3303      	adds	r3, #3
 80042c8:	089b      	lsrs	r3, r3, #2
 80042ca:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	68d9      	ldr	r1, [r3, #12]
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	9300      	str	r3, [sp, #0]
 80042e0:	4603      	mov	r3, r0
 80042e2:	6978      	ldr	r0, [r7, #20]
 80042e4:	f002 fdab 	bl	8006e3e <USB_WritePacket>

    ep->xfer_buff  += len;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	68da      	ldr	r2, [r3, #12]
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	441a      	add	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	699a      	ldr	r2, [r3, #24]
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	441a      	add	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	015a      	lsls	r2, r3, #5
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	4413      	add	r3, r2
 8004308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	b29b      	uxth	r3, r3
 8004310:	69ba      	ldr	r2, [r7, #24]
 8004312:	429a      	cmp	r2, r3
 8004314:	d809      	bhi.n	800432a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	699a      	ldr	r2, [r3, #24]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800431e:	429a      	cmp	r2, r3
 8004320:	d203      	bcs.n	800432a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1be      	bne.n	80042a8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	695a      	ldr	r2, [r3, #20]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	429a      	cmp	r2, r3
 8004334:	d811      	bhi.n	800435a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	f003 030f 	and.w	r3, r3, #15
 800433c:	2201      	movs	r2, #1
 800433e:	fa02 f303 	lsl.w	r3, r2, r3
 8004342:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800434a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	43db      	mvns	r3, r3
 8004350:	6939      	ldr	r1, [r7, #16]
 8004352:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004356:	4013      	ands	r3, r2
 8004358:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	3720      	adds	r7, #32
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	333c      	adds	r3, #60	; 0x3c
 800437c:	3304      	adds	r3, #4
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	015a      	lsls	r2, r3, #5
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	4413      	add	r3, r2
 800438a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	2b01      	cmp	r3, #1
 8004398:	f040 80a0 	bne.w	80044dc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	f003 0308 	and.w	r3, r3, #8
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d015      	beq.n	80043d2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	4a72      	ldr	r2, [pc, #456]	; (8004574 <PCD_EP_OutXfrComplete_int+0x210>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	f240 80dd 	bls.w	800456a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f000 80d7 	beq.w	800456a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	015a      	lsls	r2, r3, #5
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	4413      	add	r3, r2
 80043c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c8:	461a      	mov	r2, r3
 80043ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043ce:	6093      	str	r3, [r2, #8]
 80043d0:	e0cb      	b.n	800456a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	f003 0320 	and.w	r3, r3, #32
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d009      	beq.n	80043f0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	015a      	lsls	r2, r3, #5
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	4413      	add	r3, r2
 80043e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043e8:	461a      	mov	r2, r3
 80043ea:	2320      	movs	r3, #32
 80043ec:	6093      	str	r3, [r2, #8]
 80043ee:	e0bc      	b.n	800456a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	f040 80b7 	bne.w	800456a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	4a5d      	ldr	r2, [pc, #372]	; (8004574 <PCD_EP_OutXfrComplete_int+0x210>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d90f      	bls.n	8004424 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00a      	beq.n	8004424 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	015a      	lsls	r2, r3, #5
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	4413      	add	r3, r2
 8004416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800441a:	461a      	mov	r2, r3
 800441c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004420:	6093      	str	r3, [r2, #8]
 8004422:	e0a2      	b.n	800456a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004424:	6879      	ldr	r1, [r7, #4]
 8004426:	683a      	ldr	r2, [r7, #0]
 8004428:	4613      	mov	r3, r2
 800442a:	00db      	lsls	r3, r3, #3
 800442c:	1a9b      	subs	r3, r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	440b      	add	r3, r1
 8004432:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004436:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	0159      	lsls	r1, r3, #5
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	440b      	add	r3, r1
 8004440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800444a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	683a      	ldr	r2, [r7, #0]
 8004450:	4613      	mov	r3, r2
 8004452:	00db      	lsls	r3, r3, #3
 8004454:	1a9b      	subs	r3, r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	4403      	add	r3, r0
 800445a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800445e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004460:	6879      	ldr	r1, [r7, #4]
 8004462:	683a      	ldr	r2, [r7, #0]
 8004464:	4613      	mov	r3, r2
 8004466:	00db      	lsls	r3, r3, #3
 8004468:	1a9b      	subs	r3, r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	440b      	add	r3, r1
 800446e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004472:	6819      	ldr	r1, [r3, #0]
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	683a      	ldr	r2, [r7, #0]
 8004478:	4613      	mov	r3, r2
 800447a:	00db      	lsls	r3, r3, #3
 800447c:	1a9b      	subs	r3, r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	4403      	add	r3, r0
 8004482:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4419      	add	r1, r3
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	683a      	ldr	r2, [r7, #0]
 800448e:	4613      	mov	r3, r2
 8004490:	00db      	lsls	r3, r3, #3
 8004492:	1a9b      	subs	r3, r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4403      	add	r3, r0
 8004498:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800449c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d114      	bne.n	80044ce <PCD_EP_OutXfrComplete_int+0x16a>
 80044a4:	6879      	ldr	r1, [r7, #4]
 80044a6:	683a      	ldr	r2, [r7, #0]
 80044a8:	4613      	mov	r3, r2
 80044aa:	00db      	lsls	r3, r3, #3
 80044ac:	1a9b      	subs	r3, r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	440b      	add	r3, r1
 80044b2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d108      	bne.n	80044ce <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6818      	ldr	r0, [r3, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80044c6:	461a      	mov	r2, r3
 80044c8:	2101      	movs	r1, #1
 80044ca:	f002 ff4f 	bl	800736c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	4619      	mov	r1, r3
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f004 fee3 	bl	80092a0 <HAL_PCD_DataOutStageCallback>
 80044da:	e046      	b.n	800456a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	4a26      	ldr	r2, [pc, #152]	; (8004578 <PCD_EP_OutXfrComplete_int+0x214>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d124      	bne.n	800452e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00a      	beq.n	8004504 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	015a      	lsls	r2, r3, #5
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	4413      	add	r3, r2
 80044f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044fa:	461a      	mov	r2, r3
 80044fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004500:	6093      	str	r3, [r2, #8]
 8004502:	e032      	b.n	800456a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	f003 0320 	and.w	r3, r3, #32
 800450a:	2b00      	cmp	r3, #0
 800450c:	d008      	beq.n	8004520 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	015a      	lsls	r2, r3, #5
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	4413      	add	r3, r2
 8004516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800451a:	461a      	mov	r2, r3
 800451c:	2320      	movs	r3, #32
 800451e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	b2db      	uxtb	r3, r3
 8004524:	4619      	mov	r1, r3
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f004 feba 	bl	80092a0 <HAL_PCD_DataOutStageCallback>
 800452c:	e01d      	b.n	800456a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d114      	bne.n	800455e <PCD_EP_OutXfrComplete_int+0x1fa>
 8004534:	6879      	ldr	r1, [r7, #4]
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	4613      	mov	r3, r2
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	1a9b      	subs	r3, r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	440b      	add	r3, r1
 8004542:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d108      	bne.n	800455e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6818      	ldr	r0, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004556:	461a      	mov	r2, r3
 8004558:	2100      	movs	r1, #0
 800455a:	f002 ff07 	bl	800736c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	b2db      	uxtb	r3, r3
 8004562:	4619      	mov	r1, r3
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f004 fe9b 	bl	80092a0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3718      	adds	r7, #24
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	4f54300a 	.word	0x4f54300a
 8004578:	4f54310a 	.word	0x4f54310a

0800457c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b086      	sub	sp, #24
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	333c      	adds	r3, #60	; 0x3c
 8004594:	3304      	adds	r3, #4
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	015a      	lsls	r2, r3, #5
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	4413      	add	r3, r2
 80045a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	4a15      	ldr	r2, [pc, #84]	; (8004604 <PCD_EP_OutSetupPacket_int+0x88>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d90e      	bls.n	80045d0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d009      	beq.n	80045d0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	015a      	lsls	r2, r3, #5
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	4413      	add	r3, r2
 80045c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045c8:	461a      	mov	r2, r3
 80045ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045ce:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f004 fe53 	bl	800927c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	4a0a      	ldr	r2, [pc, #40]	; (8004604 <PCD_EP_OutSetupPacket_int+0x88>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d90c      	bls.n	80045f8 <PCD_EP_OutSetupPacket_int+0x7c>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d108      	bne.n	80045f8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6818      	ldr	r0, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80045f0:	461a      	mov	r2, r3
 80045f2:	2101      	movs	r1, #1
 80045f4:	f002 feba 	bl	800736c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3718      	adds	r7, #24
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	4f54300a 	.word	0x4f54300a

08004608 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	460b      	mov	r3, r1
 8004612:	70fb      	strb	r3, [r7, #3]
 8004614:	4613      	mov	r3, r2
 8004616:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004620:	78fb      	ldrb	r3, [r7, #3]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d107      	bne.n	8004636 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004626:	883b      	ldrh	r3, [r7, #0]
 8004628:	0419      	lsls	r1, r3, #16
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68ba      	ldr	r2, [r7, #8]
 8004630:	430a      	orrs	r2, r1
 8004632:	629a      	str	r2, [r3, #40]	; 0x28
 8004634:	e028      	b.n	8004688 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463c:	0c1b      	lsrs	r3, r3, #16
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	4413      	add	r3, r2
 8004642:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004644:	2300      	movs	r3, #0
 8004646:	73fb      	strb	r3, [r7, #15]
 8004648:	e00d      	b.n	8004666 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	7bfb      	ldrb	r3, [r7, #15]
 8004650:	3340      	adds	r3, #64	; 0x40
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4413      	add	r3, r2
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	0c1b      	lsrs	r3, r3, #16
 800465a:	68ba      	ldr	r2, [r7, #8]
 800465c:	4413      	add	r3, r2
 800465e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004660:	7bfb      	ldrb	r3, [r7, #15]
 8004662:	3301      	adds	r3, #1
 8004664:	73fb      	strb	r3, [r7, #15]
 8004666:	7bfa      	ldrb	r2, [r7, #15]
 8004668:	78fb      	ldrb	r3, [r7, #3]
 800466a:	3b01      	subs	r3, #1
 800466c:	429a      	cmp	r2, r3
 800466e:	d3ec      	bcc.n	800464a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004670:	883b      	ldrh	r3, [r7, #0]
 8004672:	0418      	lsls	r0, r3, #16
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6819      	ldr	r1, [r3, #0]
 8004678:	78fb      	ldrb	r3, [r7, #3]
 800467a:	3b01      	subs	r3, #1
 800467c:	68ba      	ldr	r2, [r7, #8]
 800467e:	4302      	orrs	r2, r0
 8004680:	3340      	adds	r3, #64	; 0x40
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	440b      	add	r3, r1
 8004686:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3714      	adds	r7, #20
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr

08004696 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004696:	b480      	push	{r7}
 8004698:	b083      	sub	sp, #12
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
 800469e:	460b      	mov	r3, r1
 80046a0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	887a      	ldrh	r2, [r7, #2]
 80046a8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	460b      	mov	r3, r1
 80046c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d101      	bne.n	80046e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e264      	b.n	8004bac <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d075      	beq.n	80047da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046ee:	4ba3      	ldr	r3, [pc, #652]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f003 030c 	and.w	r3, r3, #12
 80046f6:	2b04      	cmp	r3, #4
 80046f8:	d00c      	beq.n	8004714 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046fa:	4ba0      	ldr	r3, [pc, #640]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004702:	2b08      	cmp	r3, #8
 8004704:	d112      	bne.n	800472c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004706:	4b9d      	ldr	r3, [pc, #628]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800470e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004712:	d10b      	bne.n	800472c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004714:	4b99      	ldr	r3, [pc, #612]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d05b      	beq.n	80047d8 <HAL_RCC_OscConfig+0x108>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d157      	bne.n	80047d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e23f      	b.n	8004bac <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004734:	d106      	bne.n	8004744 <HAL_RCC_OscConfig+0x74>
 8004736:	4b91      	ldr	r3, [pc, #580]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a90      	ldr	r2, [pc, #576]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 800473c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004740:	6013      	str	r3, [r2, #0]
 8004742:	e01d      	b.n	8004780 <HAL_RCC_OscConfig+0xb0>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800474c:	d10c      	bne.n	8004768 <HAL_RCC_OscConfig+0x98>
 800474e:	4b8b      	ldr	r3, [pc, #556]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a8a      	ldr	r2, [pc, #552]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 8004754:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004758:	6013      	str	r3, [r2, #0]
 800475a:	4b88      	ldr	r3, [pc, #544]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a87      	ldr	r2, [pc, #540]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 8004760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004764:	6013      	str	r3, [r2, #0]
 8004766:	e00b      	b.n	8004780 <HAL_RCC_OscConfig+0xb0>
 8004768:	4b84      	ldr	r3, [pc, #528]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a83      	ldr	r2, [pc, #524]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 800476e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004772:	6013      	str	r3, [r2, #0]
 8004774:	4b81      	ldr	r3, [pc, #516]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a80      	ldr	r2, [pc, #512]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 800477a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800477e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d013      	beq.n	80047b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004788:	f7fd fab0 	bl	8001cec <HAL_GetTick>
 800478c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800478e:	e008      	b.n	80047a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004790:	f7fd faac 	bl	8001cec <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b64      	cmp	r3, #100	; 0x64
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e204      	b.n	8004bac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047a2:	4b76      	ldr	r3, [pc, #472]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d0f0      	beq.n	8004790 <HAL_RCC_OscConfig+0xc0>
 80047ae:	e014      	b.n	80047da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b0:	f7fd fa9c 	bl	8001cec <HAL_GetTick>
 80047b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047b6:	e008      	b.n	80047ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047b8:	f7fd fa98 	bl	8001cec <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b64      	cmp	r3, #100	; 0x64
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e1f0      	b.n	8004bac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047ca:	4b6c      	ldr	r3, [pc, #432]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1f0      	bne.n	80047b8 <HAL_RCC_OscConfig+0xe8>
 80047d6:	e000      	b.n	80047da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d063      	beq.n	80048ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047e6:	4b65      	ldr	r3, [pc, #404]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f003 030c 	and.w	r3, r3, #12
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00b      	beq.n	800480a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047f2:	4b62      	ldr	r3, [pc, #392]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047fa:	2b08      	cmp	r3, #8
 80047fc:	d11c      	bne.n	8004838 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047fe:	4b5f      	ldr	r3, [pc, #380]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d116      	bne.n	8004838 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800480a:	4b5c      	ldr	r3, [pc, #368]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d005      	beq.n	8004822 <HAL_RCC_OscConfig+0x152>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d001      	beq.n	8004822 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e1c4      	b.n	8004bac <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004822:	4b56      	ldr	r3, [pc, #344]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	00db      	lsls	r3, r3, #3
 8004830:	4952      	ldr	r1, [pc, #328]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 8004832:	4313      	orrs	r3, r2
 8004834:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004836:	e03a      	b.n	80048ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d020      	beq.n	8004882 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004840:	4b4f      	ldr	r3, [pc, #316]	; (8004980 <HAL_RCC_OscConfig+0x2b0>)
 8004842:	2201      	movs	r2, #1
 8004844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004846:	f7fd fa51 	bl	8001cec <HAL_GetTick>
 800484a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800484c:	e008      	b.n	8004860 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800484e:	f7fd fa4d 	bl	8001cec <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	2b02      	cmp	r3, #2
 800485a:	d901      	bls.n	8004860 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e1a5      	b.n	8004bac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004860:	4b46      	ldr	r3, [pc, #280]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d0f0      	beq.n	800484e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800486c:	4b43      	ldr	r3, [pc, #268]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	00db      	lsls	r3, r3, #3
 800487a:	4940      	ldr	r1, [pc, #256]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 800487c:	4313      	orrs	r3, r2
 800487e:	600b      	str	r3, [r1, #0]
 8004880:	e015      	b.n	80048ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004882:	4b3f      	ldr	r3, [pc, #252]	; (8004980 <HAL_RCC_OscConfig+0x2b0>)
 8004884:	2200      	movs	r2, #0
 8004886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004888:	f7fd fa30 	bl	8001cec <HAL_GetTick>
 800488c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800488e:	e008      	b.n	80048a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004890:	f7fd fa2c 	bl	8001cec <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	2b02      	cmp	r3, #2
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e184      	b.n	8004bac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048a2:	4b36      	ldr	r3, [pc, #216]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1f0      	bne.n	8004890 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0308 	and.w	r3, r3, #8
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d030      	beq.n	800491c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d016      	beq.n	80048f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048c2:	4b30      	ldr	r3, [pc, #192]	; (8004984 <HAL_RCC_OscConfig+0x2b4>)
 80048c4:	2201      	movs	r2, #1
 80048c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048c8:	f7fd fa10 	bl	8001cec <HAL_GetTick>
 80048cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048ce:	e008      	b.n	80048e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048d0:	f7fd fa0c 	bl	8001cec <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d901      	bls.n	80048e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e164      	b.n	8004bac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048e2:	4b26      	ldr	r3, [pc, #152]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 80048e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d0f0      	beq.n	80048d0 <HAL_RCC_OscConfig+0x200>
 80048ee:	e015      	b.n	800491c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048f0:	4b24      	ldr	r3, [pc, #144]	; (8004984 <HAL_RCC_OscConfig+0x2b4>)
 80048f2:	2200      	movs	r2, #0
 80048f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048f6:	f7fd f9f9 	bl	8001cec <HAL_GetTick>
 80048fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048fc:	e008      	b.n	8004910 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048fe:	f7fd f9f5 	bl	8001cec <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	2b02      	cmp	r3, #2
 800490a:	d901      	bls.n	8004910 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e14d      	b.n	8004bac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004910:	4b1a      	ldr	r3, [pc, #104]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 8004912:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d1f0      	bne.n	80048fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0304 	and.w	r3, r3, #4
 8004924:	2b00      	cmp	r3, #0
 8004926:	f000 80a0 	beq.w	8004a6a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800492a:	2300      	movs	r3, #0
 800492c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800492e:	4b13      	ldr	r3, [pc, #76]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 8004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10f      	bne.n	800495a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800493a:	2300      	movs	r3, #0
 800493c:	60bb      	str	r3, [r7, #8]
 800493e:	4b0f      	ldr	r3, [pc, #60]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 8004940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004942:	4a0e      	ldr	r2, [pc, #56]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 8004944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004948:	6413      	str	r3, [r2, #64]	; 0x40
 800494a:	4b0c      	ldr	r3, [pc, #48]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 800494c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004952:	60bb      	str	r3, [r7, #8]
 8004954:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004956:	2301      	movs	r3, #1
 8004958:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800495a:	4b0b      	ldr	r3, [pc, #44]	; (8004988 <HAL_RCC_OscConfig+0x2b8>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004962:	2b00      	cmp	r3, #0
 8004964:	d121      	bne.n	80049aa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004966:	4b08      	ldr	r3, [pc, #32]	; (8004988 <HAL_RCC_OscConfig+0x2b8>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a07      	ldr	r2, [pc, #28]	; (8004988 <HAL_RCC_OscConfig+0x2b8>)
 800496c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004970:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004972:	f7fd f9bb 	bl	8001cec <HAL_GetTick>
 8004976:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004978:	e011      	b.n	800499e <HAL_RCC_OscConfig+0x2ce>
 800497a:	bf00      	nop
 800497c:	40023800 	.word	0x40023800
 8004980:	42470000 	.word	0x42470000
 8004984:	42470e80 	.word	0x42470e80
 8004988:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800498c:	f7fd f9ae 	bl	8001cec <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	2b02      	cmp	r3, #2
 8004998:	d901      	bls.n	800499e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e106      	b.n	8004bac <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800499e:	4b85      	ldr	r3, [pc, #532]	; (8004bb4 <HAL_RCC_OscConfig+0x4e4>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d0f0      	beq.n	800498c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d106      	bne.n	80049c0 <HAL_RCC_OscConfig+0x2f0>
 80049b2:	4b81      	ldr	r3, [pc, #516]	; (8004bb8 <HAL_RCC_OscConfig+0x4e8>)
 80049b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b6:	4a80      	ldr	r2, [pc, #512]	; (8004bb8 <HAL_RCC_OscConfig+0x4e8>)
 80049b8:	f043 0301 	orr.w	r3, r3, #1
 80049bc:	6713      	str	r3, [r2, #112]	; 0x70
 80049be:	e01c      	b.n	80049fa <HAL_RCC_OscConfig+0x32a>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	2b05      	cmp	r3, #5
 80049c6:	d10c      	bne.n	80049e2 <HAL_RCC_OscConfig+0x312>
 80049c8:	4b7b      	ldr	r3, [pc, #492]	; (8004bb8 <HAL_RCC_OscConfig+0x4e8>)
 80049ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049cc:	4a7a      	ldr	r2, [pc, #488]	; (8004bb8 <HAL_RCC_OscConfig+0x4e8>)
 80049ce:	f043 0304 	orr.w	r3, r3, #4
 80049d2:	6713      	str	r3, [r2, #112]	; 0x70
 80049d4:	4b78      	ldr	r3, [pc, #480]	; (8004bb8 <HAL_RCC_OscConfig+0x4e8>)
 80049d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d8:	4a77      	ldr	r2, [pc, #476]	; (8004bb8 <HAL_RCC_OscConfig+0x4e8>)
 80049da:	f043 0301 	orr.w	r3, r3, #1
 80049de:	6713      	str	r3, [r2, #112]	; 0x70
 80049e0:	e00b      	b.n	80049fa <HAL_RCC_OscConfig+0x32a>
 80049e2:	4b75      	ldr	r3, [pc, #468]	; (8004bb8 <HAL_RCC_OscConfig+0x4e8>)
 80049e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e6:	4a74      	ldr	r2, [pc, #464]	; (8004bb8 <HAL_RCC_OscConfig+0x4e8>)
 80049e8:	f023 0301 	bic.w	r3, r3, #1
 80049ec:	6713      	str	r3, [r2, #112]	; 0x70
 80049ee:	4b72      	ldr	r3, [pc, #456]	; (8004bb8 <HAL_RCC_OscConfig+0x4e8>)
 80049f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f2:	4a71      	ldr	r2, [pc, #452]	; (8004bb8 <HAL_RCC_OscConfig+0x4e8>)
 80049f4:	f023 0304 	bic.w	r3, r3, #4
 80049f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d015      	beq.n	8004a2e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a02:	f7fd f973 	bl	8001cec <HAL_GetTick>
 8004a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a08:	e00a      	b.n	8004a20 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a0a:	f7fd f96f 	bl	8001cec <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d901      	bls.n	8004a20 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e0c5      	b.n	8004bac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a20:	4b65      	ldr	r3, [pc, #404]	; (8004bb8 <HAL_RCC_OscConfig+0x4e8>)
 8004a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a24:	f003 0302 	and.w	r3, r3, #2
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d0ee      	beq.n	8004a0a <HAL_RCC_OscConfig+0x33a>
 8004a2c:	e014      	b.n	8004a58 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a2e:	f7fd f95d 	bl	8001cec <HAL_GetTick>
 8004a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a34:	e00a      	b.n	8004a4c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a36:	f7fd f959 	bl	8001cec <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d901      	bls.n	8004a4c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e0af      	b.n	8004bac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a4c:	4b5a      	ldr	r3, [pc, #360]	; (8004bb8 <HAL_RCC_OscConfig+0x4e8>)
 8004a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a50:	f003 0302 	and.w	r3, r3, #2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d1ee      	bne.n	8004a36 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a58:	7dfb      	ldrb	r3, [r7, #23]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d105      	bne.n	8004a6a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a5e:	4b56      	ldr	r3, [pc, #344]	; (8004bb8 <HAL_RCC_OscConfig+0x4e8>)
 8004a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a62:	4a55      	ldr	r2, [pc, #340]	; (8004bb8 <HAL_RCC_OscConfig+0x4e8>)
 8004a64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a68:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f000 809b 	beq.w	8004baa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a74:	4b50      	ldr	r3, [pc, #320]	; (8004bb8 <HAL_RCC_OscConfig+0x4e8>)
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f003 030c 	and.w	r3, r3, #12
 8004a7c:	2b08      	cmp	r3, #8
 8004a7e:	d05c      	beq.n	8004b3a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d141      	bne.n	8004b0c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a88:	4b4c      	ldr	r3, [pc, #304]	; (8004bbc <HAL_RCC_OscConfig+0x4ec>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a8e:	f7fd f92d 	bl	8001cec <HAL_GetTick>
 8004a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a94:	e008      	b.n	8004aa8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a96:	f7fd f929 	bl	8001cec <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d901      	bls.n	8004aa8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e081      	b.n	8004bac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aa8:	4b43      	ldr	r3, [pc, #268]	; (8004bb8 <HAL_RCC_OscConfig+0x4e8>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1f0      	bne.n	8004a96 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	69da      	ldr	r2, [r3, #28]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a1b      	ldr	r3, [r3, #32]
 8004abc:	431a      	orrs	r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac2:	019b      	lsls	r3, r3, #6
 8004ac4:	431a      	orrs	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aca:	085b      	lsrs	r3, r3, #1
 8004acc:	3b01      	subs	r3, #1
 8004ace:	041b      	lsls	r3, r3, #16
 8004ad0:	431a      	orrs	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad6:	061b      	lsls	r3, r3, #24
 8004ad8:	4937      	ldr	r1, [pc, #220]	; (8004bb8 <HAL_RCC_OscConfig+0x4e8>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ade:	4b37      	ldr	r3, [pc, #220]	; (8004bbc <HAL_RCC_OscConfig+0x4ec>)
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae4:	f7fd f902 	bl	8001cec <HAL_GetTick>
 8004ae8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aea:	e008      	b.n	8004afe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aec:	f7fd f8fe 	bl	8001cec <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e056      	b.n	8004bac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004afe:	4b2e      	ldr	r3, [pc, #184]	; (8004bb8 <HAL_RCC_OscConfig+0x4e8>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d0f0      	beq.n	8004aec <HAL_RCC_OscConfig+0x41c>
 8004b0a:	e04e      	b.n	8004baa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b0c:	4b2b      	ldr	r3, [pc, #172]	; (8004bbc <HAL_RCC_OscConfig+0x4ec>)
 8004b0e:	2200      	movs	r2, #0
 8004b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b12:	f7fd f8eb 	bl	8001cec <HAL_GetTick>
 8004b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b18:	e008      	b.n	8004b2c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b1a:	f7fd f8e7 	bl	8001cec <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d901      	bls.n	8004b2c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e03f      	b.n	8004bac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b2c:	4b22      	ldr	r3, [pc, #136]	; (8004bb8 <HAL_RCC_OscConfig+0x4e8>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1f0      	bne.n	8004b1a <HAL_RCC_OscConfig+0x44a>
 8004b38:	e037      	b.n	8004baa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d101      	bne.n	8004b46 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e032      	b.n	8004bac <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b46:	4b1c      	ldr	r3, [pc, #112]	; (8004bb8 <HAL_RCC_OscConfig+0x4e8>)
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d028      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d121      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d11a      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b76:	4013      	ands	r3, r2
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b7c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d111      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8c:	085b      	lsrs	r3, r3, #1
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d107      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d001      	beq.n	8004baa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e000      	b.n	8004bac <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3718      	adds	r7, #24
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	40007000 	.word	0x40007000
 8004bb8:	40023800 	.word	0x40023800
 8004bbc:	42470060 	.word	0x42470060

08004bc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d101      	bne.n	8004bd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e0cc      	b.n	8004d6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bd4:	4b68      	ldr	r3, [pc, #416]	; (8004d78 <HAL_RCC_ClockConfig+0x1b8>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0307 	and.w	r3, r3, #7
 8004bdc:	683a      	ldr	r2, [r7, #0]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d90c      	bls.n	8004bfc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004be2:	4b65      	ldr	r3, [pc, #404]	; (8004d78 <HAL_RCC_ClockConfig+0x1b8>)
 8004be4:	683a      	ldr	r2, [r7, #0]
 8004be6:	b2d2      	uxtb	r2, r2
 8004be8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bea:	4b63      	ldr	r3, [pc, #396]	; (8004d78 <HAL_RCC_ClockConfig+0x1b8>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0307 	and.w	r3, r3, #7
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d001      	beq.n	8004bfc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e0b8      	b.n	8004d6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0302 	and.w	r3, r3, #2
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d020      	beq.n	8004c4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0304 	and.w	r3, r3, #4
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d005      	beq.n	8004c20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c14:	4b59      	ldr	r3, [pc, #356]	; (8004d7c <HAL_RCC_ClockConfig+0x1bc>)
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	4a58      	ldr	r2, [pc, #352]	; (8004d7c <HAL_RCC_ClockConfig+0x1bc>)
 8004c1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0308 	and.w	r3, r3, #8
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d005      	beq.n	8004c38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c2c:	4b53      	ldr	r3, [pc, #332]	; (8004d7c <HAL_RCC_ClockConfig+0x1bc>)
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	4a52      	ldr	r2, [pc, #328]	; (8004d7c <HAL_RCC_ClockConfig+0x1bc>)
 8004c32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c38:	4b50      	ldr	r3, [pc, #320]	; (8004d7c <HAL_RCC_ClockConfig+0x1bc>)
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	494d      	ldr	r1, [pc, #308]	; (8004d7c <HAL_RCC_ClockConfig+0x1bc>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0301 	and.w	r3, r3, #1
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d044      	beq.n	8004ce0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d107      	bne.n	8004c6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c5e:	4b47      	ldr	r3, [pc, #284]	; (8004d7c <HAL_RCC_ClockConfig+0x1bc>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d119      	bne.n	8004c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e07f      	b.n	8004d6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d003      	beq.n	8004c7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c7a:	2b03      	cmp	r3, #3
 8004c7c:	d107      	bne.n	8004c8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c7e:	4b3f      	ldr	r3, [pc, #252]	; (8004d7c <HAL_RCC_ClockConfig+0x1bc>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d109      	bne.n	8004c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e06f      	b.n	8004d6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c8e:	4b3b      	ldr	r3, [pc, #236]	; (8004d7c <HAL_RCC_ClockConfig+0x1bc>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d101      	bne.n	8004c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e067      	b.n	8004d6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c9e:	4b37      	ldr	r3, [pc, #220]	; (8004d7c <HAL_RCC_ClockConfig+0x1bc>)
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	f023 0203 	bic.w	r2, r3, #3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	4934      	ldr	r1, [pc, #208]	; (8004d7c <HAL_RCC_ClockConfig+0x1bc>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cb0:	f7fd f81c 	bl	8001cec <HAL_GetTick>
 8004cb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cb6:	e00a      	b.n	8004cce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cb8:	f7fd f818 	bl	8001cec <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e04f      	b.n	8004d6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cce:	4b2b      	ldr	r3, [pc, #172]	; (8004d7c <HAL_RCC_ClockConfig+0x1bc>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f003 020c 	and.w	r2, r3, #12
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d1eb      	bne.n	8004cb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ce0:	4b25      	ldr	r3, [pc, #148]	; (8004d78 <HAL_RCC_ClockConfig+0x1b8>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0307 	and.w	r3, r3, #7
 8004ce8:	683a      	ldr	r2, [r7, #0]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d20c      	bcs.n	8004d08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cee:	4b22      	ldr	r3, [pc, #136]	; (8004d78 <HAL_RCC_ClockConfig+0x1b8>)
 8004cf0:	683a      	ldr	r2, [r7, #0]
 8004cf2:	b2d2      	uxtb	r2, r2
 8004cf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cf6:	4b20      	ldr	r3, [pc, #128]	; (8004d78 <HAL_RCC_ClockConfig+0x1b8>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0307 	and.w	r3, r3, #7
 8004cfe:	683a      	ldr	r2, [r7, #0]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d001      	beq.n	8004d08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e032      	b.n	8004d6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0304 	and.w	r3, r3, #4
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d008      	beq.n	8004d26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d14:	4b19      	ldr	r3, [pc, #100]	; (8004d7c <HAL_RCC_ClockConfig+0x1bc>)
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	4916      	ldr	r1, [pc, #88]	; (8004d7c <HAL_RCC_ClockConfig+0x1bc>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0308 	and.w	r3, r3, #8
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d009      	beq.n	8004d46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d32:	4b12      	ldr	r3, [pc, #72]	; (8004d7c <HAL_RCC_ClockConfig+0x1bc>)
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	00db      	lsls	r3, r3, #3
 8004d40:	490e      	ldr	r1, [pc, #56]	; (8004d7c <HAL_RCC_ClockConfig+0x1bc>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d46:	f000 f821 	bl	8004d8c <HAL_RCC_GetSysClockFreq>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	4b0b      	ldr	r3, [pc, #44]	; (8004d7c <HAL_RCC_ClockConfig+0x1bc>)
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	091b      	lsrs	r3, r3, #4
 8004d52:	f003 030f 	and.w	r3, r3, #15
 8004d56:	490a      	ldr	r1, [pc, #40]	; (8004d80 <HAL_RCC_ClockConfig+0x1c0>)
 8004d58:	5ccb      	ldrb	r3, [r1, r3]
 8004d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d5e:	4a09      	ldr	r2, [pc, #36]	; (8004d84 <HAL_RCC_ClockConfig+0x1c4>)
 8004d60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d62:	4b09      	ldr	r3, [pc, #36]	; (8004d88 <HAL_RCC_ClockConfig+0x1c8>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7fc ff7c 	bl	8001c64 <HAL_InitTick>

  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	40023c00 	.word	0x40023c00
 8004d7c:	40023800 	.word	0x40023800
 8004d80:	0800c600 	.word	0x0800c600
 8004d84:	20000000 	.word	0x20000000
 8004d88:	20000004 	.word	0x20000004

08004d8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d8c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004d90:	b084      	sub	sp, #16
 8004d92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d94:	2300      	movs	r3, #0
 8004d96:	607b      	str	r3, [r7, #4]
 8004d98:	2300      	movs	r3, #0
 8004d9a:	60fb      	str	r3, [r7, #12]
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004da0:	2300      	movs	r3, #0
 8004da2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004da4:	4b67      	ldr	r3, [pc, #412]	; (8004f44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f003 030c 	and.w	r3, r3, #12
 8004dac:	2b08      	cmp	r3, #8
 8004dae:	d00d      	beq.n	8004dcc <HAL_RCC_GetSysClockFreq+0x40>
 8004db0:	2b08      	cmp	r3, #8
 8004db2:	f200 80bd 	bhi.w	8004f30 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d002      	beq.n	8004dc0 <HAL_RCC_GetSysClockFreq+0x34>
 8004dba:	2b04      	cmp	r3, #4
 8004dbc:	d003      	beq.n	8004dc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004dbe:	e0b7      	b.n	8004f30 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004dc0:	4b61      	ldr	r3, [pc, #388]	; (8004f48 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004dc2:	60bb      	str	r3, [r7, #8]
       break;
 8004dc4:	e0b7      	b.n	8004f36 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004dc6:	4b61      	ldr	r3, [pc, #388]	; (8004f4c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004dc8:	60bb      	str	r3, [r7, #8]
      break;
 8004dca:	e0b4      	b.n	8004f36 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004dcc:	4b5d      	ldr	r3, [pc, #372]	; (8004f44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dd4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004dd6:	4b5b      	ldr	r3, [pc, #364]	; (8004f44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d04d      	beq.n	8004e7e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004de2:	4b58      	ldr	r3, [pc, #352]	; (8004f44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	099b      	lsrs	r3, r3, #6
 8004de8:	461a      	mov	r2, r3
 8004dea:	f04f 0300 	mov.w	r3, #0
 8004dee:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004df2:	f04f 0100 	mov.w	r1, #0
 8004df6:	ea02 0800 	and.w	r8, r2, r0
 8004dfa:	ea03 0901 	and.w	r9, r3, r1
 8004dfe:	4640      	mov	r0, r8
 8004e00:	4649      	mov	r1, r9
 8004e02:	f04f 0200 	mov.w	r2, #0
 8004e06:	f04f 0300 	mov.w	r3, #0
 8004e0a:	014b      	lsls	r3, r1, #5
 8004e0c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004e10:	0142      	lsls	r2, r0, #5
 8004e12:	4610      	mov	r0, r2
 8004e14:	4619      	mov	r1, r3
 8004e16:	ebb0 0008 	subs.w	r0, r0, r8
 8004e1a:	eb61 0109 	sbc.w	r1, r1, r9
 8004e1e:	f04f 0200 	mov.w	r2, #0
 8004e22:	f04f 0300 	mov.w	r3, #0
 8004e26:	018b      	lsls	r3, r1, #6
 8004e28:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004e2c:	0182      	lsls	r2, r0, #6
 8004e2e:	1a12      	subs	r2, r2, r0
 8004e30:	eb63 0301 	sbc.w	r3, r3, r1
 8004e34:	f04f 0000 	mov.w	r0, #0
 8004e38:	f04f 0100 	mov.w	r1, #0
 8004e3c:	00d9      	lsls	r1, r3, #3
 8004e3e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e42:	00d0      	lsls	r0, r2, #3
 8004e44:	4602      	mov	r2, r0
 8004e46:	460b      	mov	r3, r1
 8004e48:	eb12 0208 	adds.w	r2, r2, r8
 8004e4c:	eb43 0309 	adc.w	r3, r3, r9
 8004e50:	f04f 0000 	mov.w	r0, #0
 8004e54:	f04f 0100 	mov.w	r1, #0
 8004e58:	0259      	lsls	r1, r3, #9
 8004e5a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004e5e:	0250      	lsls	r0, r2, #9
 8004e60:	4602      	mov	r2, r0
 8004e62:	460b      	mov	r3, r1
 8004e64:	4610      	mov	r0, r2
 8004e66:	4619      	mov	r1, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	f04f 0300 	mov.w	r3, #0
 8004e70:	f7fb fef2 	bl	8000c58 <__aeabi_uldivmod>
 8004e74:	4602      	mov	r2, r0
 8004e76:	460b      	mov	r3, r1
 8004e78:	4613      	mov	r3, r2
 8004e7a:	60fb      	str	r3, [r7, #12]
 8004e7c:	e04a      	b.n	8004f14 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e7e:	4b31      	ldr	r3, [pc, #196]	; (8004f44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	099b      	lsrs	r3, r3, #6
 8004e84:	461a      	mov	r2, r3
 8004e86:	f04f 0300 	mov.w	r3, #0
 8004e8a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004e8e:	f04f 0100 	mov.w	r1, #0
 8004e92:	ea02 0400 	and.w	r4, r2, r0
 8004e96:	ea03 0501 	and.w	r5, r3, r1
 8004e9a:	4620      	mov	r0, r4
 8004e9c:	4629      	mov	r1, r5
 8004e9e:	f04f 0200 	mov.w	r2, #0
 8004ea2:	f04f 0300 	mov.w	r3, #0
 8004ea6:	014b      	lsls	r3, r1, #5
 8004ea8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004eac:	0142      	lsls	r2, r0, #5
 8004eae:	4610      	mov	r0, r2
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	1b00      	subs	r0, r0, r4
 8004eb4:	eb61 0105 	sbc.w	r1, r1, r5
 8004eb8:	f04f 0200 	mov.w	r2, #0
 8004ebc:	f04f 0300 	mov.w	r3, #0
 8004ec0:	018b      	lsls	r3, r1, #6
 8004ec2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004ec6:	0182      	lsls	r2, r0, #6
 8004ec8:	1a12      	subs	r2, r2, r0
 8004eca:	eb63 0301 	sbc.w	r3, r3, r1
 8004ece:	f04f 0000 	mov.w	r0, #0
 8004ed2:	f04f 0100 	mov.w	r1, #0
 8004ed6:	00d9      	lsls	r1, r3, #3
 8004ed8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004edc:	00d0      	lsls	r0, r2, #3
 8004ede:	4602      	mov	r2, r0
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	1912      	adds	r2, r2, r4
 8004ee4:	eb45 0303 	adc.w	r3, r5, r3
 8004ee8:	f04f 0000 	mov.w	r0, #0
 8004eec:	f04f 0100 	mov.w	r1, #0
 8004ef0:	0299      	lsls	r1, r3, #10
 8004ef2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004ef6:	0290      	lsls	r0, r2, #10
 8004ef8:	4602      	mov	r2, r0
 8004efa:	460b      	mov	r3, r1
 8004efc:	4610      	mov	r0, r2
 8004efe:	4619      	mov	r1, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	461a      	mov	r2, r3
 8004f04:	f04f 0300 	mov.w	r3, #0
 8004f08:	f7fb fea6 	bl	8000c58 <__aeabi_uldivmod>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	460b      	mov	r3, r1
 8004f10:	4613      	mov	r3, r2
 8004f12:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f14:	4b0b      	ldr	r3, [pc, #44]	; (8004f44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	0c1b      	lsrs	r3, r3, #16
 8004f1a:	f003 0303 	and.w	r3, r3, #3
 8004f1e:	3301      	adds	r3, #1
 8004f20:	005b      	lsls	r3, r3, #1
 8004f22:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f2c:	60bb      	str	r3, [r7, #8]
      break;
 8004f2e:	e002      	b.n	8004f36 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f30:	4b05      	ldr	r3, [pc, #20]	; (8004f48 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004f32:	60bb      	str	r3, [r7, #8]
      break;
 8004f34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f36:	68bb      	ldr	r3, [r7, #8]
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004f42:	bf00      	nop
 8004f44:	40023800 	.word	0x40023800
 8004f48:	00f42400 	.word	0x00f42400
 8004f4c:	007a1200 	.word	0x007a1200

08004f50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f50:	b480      	push	{r7}
 8004f52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f54:	4b03      	ldr	r3, [pc, #12]	; (8004f64 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f56:	681b      	ldr	r3, [r3, #0]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	20000000 	.word	0x20000000

08004f68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f6c:	f7ff fff0 	bl	8004f50 <HAL_RCC_GetHCLKFreq>
 8004f70:	4602      	mov	r2, r0
 8004f72:	4b05      	ldr	r3, [pc, #20]	; (8004f88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	0a9b      	lsrs	r3, r3, #10
 8004f78:	f003 0307 	and.w	r3, r3, #7
 8004f7c:	4903      	ldr	r1, [pc, #12]	; (8004f8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f7e:	5ccb      	ldrb	r3, [r1, r3]
 8004f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	40023800 	.word	0x40023800
 8004f8c:	0800c610 	.word	0x0800c610

08004f90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f94:	f7ff ffdc 	bl	8004f50 <HAL_RCC_GetHCLKFreq>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	4b05      	ldr	r3, [pc, #20]	; (8004fb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	0b5b      	lsrs	r3, r3, #13
 8004fa0:	f003 0307 	and.w	r3, r3, #7
 8004fa4:	4903      	ldr	r1, [pc, #12]	; (8004fb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fa6:	5ccb      	ldrb	r3, [r1, r3]
 8004fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	40023800 	.word	0x40023800
 8004fb4:	0800c610 	.word	0x0800c610

08004fb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d101      	bne.n	8004fca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e07b      	b.n	80050c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d108      	bne.n	8004fe4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fda:	d009      	beq.n	8004ff0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	61da      	str	r2, [r3, #28]
 8004fe2:	e005      	b.n	8004ff0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d106      	bne.n	8005010 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f7fc fbd6 	bl	80017bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2202      	movs	r2, #2
 8005014:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005026:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005038:	431a      	orrs	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005042:	431a      	orrs	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	f003 0302 	and.w	r3, r3, #2
 800504c:	431a      	orrs	r2, r3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	431a      	orrs	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	699b      	ldr	r3, [r3, #24]
 800505c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005060:	431a      	orrs	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	69db      	ldr	r3, [r3, #28]
 8005066:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800506a:	431a      	orrs	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a1b      	ldr	r3, [r3, #32]
 8005070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005074:	ea42 0103 	orr.w	r1, r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	430a      	orrs	r2, r1
 8005086:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	0c1b      	lsrs	r3, r3, #16
 800508e:	f003 0104 	and.w	r1, r3, #4
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005096:	f003 0210 	and.w	r2, r3, #16
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	430a      	orrs	r2, r1
 80050a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	69da      	ldr	r2, [r3, #28]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3708      	adds	r7, #8
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b082      	sub	sp, #8
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d101      	bne.n	80050dc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e03f      	b.n	800515c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d106      	bne.n	80050f6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f7fc fd1b 	bl	8001b2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2224      	movs	r2, #36	; 0x24
 80050fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68da      	ldr	r2, [r3, #12]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800510c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 fc7a 	bl	8005a08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	691a      	ldr	r2, [r3, #16]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005122:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	695a      	ldr	r2, [r3, #20]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005132:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68da      	ldr	r2, [r3, #12]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005142:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2220      	movs	r2, #32
 800514e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2220      	movs	r2, #32
 8005156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	3708      	adds	r7, #8
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b0ba      	sub	sp, #232	; 0xe8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800518a:	2300      	movs	r3, #0
 800518c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005190:	2300      	movs	r3, #0
 8005192:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800519a:	f003 030f 	and.w	r3, r3, #15
 800519e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80051a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d10f      	bne.n	80051ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051ae:	f003 0320 	and.w	r3, r3, #32
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d009      	beq.n	80051ca <HAL_UART_IRQHandler+0x66>
 80051b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051ba:	f003 0320 	and.w	r3, r3, #32
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d003      	beq.n	80051ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 fb65 	bl	8005892 <UART_Receive_IT>
      return;
 80051c8:	e256      	b.n	8005678 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80051ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	f000 80de 	beq.w	8005390 <HAL_UART_IRQHandler+0x22c>
 80051d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051d8:	f003 0301 	and.w	r3, r3, #1
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d106      	bne.n	80051ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80051e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051e4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f000 80d1 	beq.w	8005390 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80051ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051f2:	f003 0301 	and.w	r3, r3, #1
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00b      	beq.n	8005212 <HAL_UART_IRQHandler+0xae>
 80051fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005202:	2b00      	cmp	r3, #0
 8005204:	d005      	beq.n	8005212 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520a:	f043 0201 	orr.w	r2, r3, #1
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005216:	f003 0304 	and.w	r3, r3, #4
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00b      	beq.n	8005236 <HAL_UART_IRQHandler+0xd2>
 800521e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005222:	f003 0301 	and.w	r3, r3, #1
 8005226:	2b00      	cmp	r3, #0
 8005228:	d005      	beq.n	8005236 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522e:	f043 0202 	orr.w	r2, r3, #2
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800523a:	f003 0302 	and.w	r3, r3, #2
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00b      	beq.n	800525a <HAL_UART_IRQHandler+0xf6>
 8005242:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005246:	f003 0301 	and.w	r3, r3, #1
 800524a:	2b00      	cmp	r3, #0
 800524c:	d005      	beq.n	800525a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005252:	f043 0204 	orr.w	r2, r3, #4
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800525a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800525e:	f003 0308 	and.w	r3, r3, #8
 8005262:	2b00      	cmp	r3, #0
 8005264:	d011      	beq.n	800528a <HAL_UART_IRQHandler+0x126>
 8005266:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800526a:	f003 0320 	and.w	r3, r3, #32
 800526e:	2b00      	cmp	r3, #0
 8005270:	d105      	bne.n	800527e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005272:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005276:	f003 0301 	and.w	r3, r3, #1
 800527a:	2b00      	cmp	r3, #0
 800527c:	d005      	beq.n	800528a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005282:	f043 0208 	orr.w	r2, r3, #8
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528e:	2b00      	cmp	r3, #0
 8005290:	f000 81ed 	beq.w	800566e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005298:	f003 0320 	and.w	r3, r3, #32
 800529c:	2b00      	cmp	r3, #0
 800529e:	d008      	beq.n	80052b2 <HAL_UART_IRQHandler+0x14e>
 80052a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052a4:	f003 0320 	and.w	r3, r3, #32
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d002      	beq.n	80052b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 faf0 	bl	8005892 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	695b      	ldr	r3, [r3, #20]
 80052b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052bc:	2b40      	cmp	r3, #64	; 0x40
 80052be:	bf0c      	ite	eq
 80052c0:	2301      	moveq	r3, #1
 80052c2:	2300      	movne	r3, #0
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ce:	f003 0308 	and.w	r3, r3, #8
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d103      	bne.n	80052de <HAL_UART_IRQHandler+0x17a>
 80052d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d04f      	beq.n	800537e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 f9f8 	bl	80056d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ee:	2b40      	cmp	r3, #64	; 0x40
 80052f0:	d141      	bne.n	8005376 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	3314      	adds	r3, #20
 80052f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005300:	e853 3f00 	ldrex	r3, [r3]
 8005304:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005308:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800530c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005310:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	3314      	adds	r3, #20
 800531a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800531e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005322:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005326:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800532a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800532e:	e841 2300 	strex	r3, r2, [r1]
 8005332:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005336:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1d9      	bne.n	80052f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005342:	2b00      	cmp	r3, #0
 8005344:	d013      	beq.n	800536e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534a:	4a7d      	ldr	r2, [pc, #500]	; (8005540 <HAL_UART_IRQHandler+0x3dc>)
 800534c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005352:	4618      	mov	r0, r3
 8005354:	f7fc fe7b 	bl	800204e <HAL_DMA_Abort_IT>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d016      	beq.n	800538c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005368:	4610      	mov	r0, r2
 800536a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800536c:	e00e      	b.n	800538c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f99a 	bl	80056a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005374:	e00a      	b.n	800538c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 f996 	bl	80056a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800537c:	e006      	b.n	800538c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f992 	bl	80056a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800538a:	e170      	b.n	800566e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800538c:	bf00      	nop
    return;
 800538e:	e16e      	b.n	800566e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005394:	2b01      	cmp	r3, #1
 8005396:	f040 814a 	bne.w	800562e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800539a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800539e:	f003 0310 	and.w	r3, r3, #16
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	f000 8143 	beq.w	800562e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80053a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053ac:	f003 0310 	and.w	r3, r3, #16
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f000 813c 	beq.w	800562e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053b6:	2300      	movs	r3, #0
 80053b8:	60bb      	str	r3, [r7, #8]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	60bb      	str	r3, [r7, #8]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	60bb      	str	r3, [r7, #8]
 80053ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	695b      	ldr	r3, [r3, #20]
 80053d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d6:	2b40      	cmp	r3, #64	; 0x40
 80053d8:	f040 80b4 	bne.w	8005544 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80053e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f000 8140 	beq.w	8005672 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80053f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80053fa:	429a      	cmp	r2, r3
 80053fc:	f080 8139 	bcs.w	8005672 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005406:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540c:	69db      	ldr	r3, [r3, #28]
 800540e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005412:	f000 8088 	beq.w	8005526 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	330c      	adds	r3, #12
 800541c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005420:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005424:	e853 3f00 	ldrex	r3, [r3]
 8005428:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800542c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005430:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005434:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	330c      	adds	r3, #12
 800543e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005442:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005446:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800544e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005452:	e841 2300 	strex	r3, r2, [r1]
 8005456:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800545a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1d9      	bne.n	8005416 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	3314      	adds	r3, #20
 8005468:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800546a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800546c:	e853 3f00 	ldrex	r3, [r3]
 8005470:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005472:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005474:	f023 0301 	bic.w	r3, r3, #1
 8005478:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	3314      	adds	r3, #20
 8005482:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005486:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800548a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800548c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800548e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005492:	e841 2300 	strex	r3, r2, [r1]
 8005496:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005498:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800549a:	2b00      	cmp	r3, #0
 800549c:	d1e1      	bne.n	8005462 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	3314      	adds	r3, #20
 80054a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054a8:	e853 3f00 	ldrex	r3, [r3]
 80054ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80054ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	3314      	adds	r3, #20
 80054be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80054c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80054c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80054c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80054ca:	e841 2300 	strex	r3, r2, [r1]
 80054ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80054d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d1e3      	bne.n	800549e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2220      	movs	r2, #32
 80054da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	330c      	adds	r3, #12
 80054ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054ee:	e853 3f00 	ldrex	r3, [r3]
 80054f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80054f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054f6:	f023 0310 	bic.w	r3, r3, #16
 80054fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	330c      	adds	r3, #12
 8005504:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005508:	65ba      	str	r2, [r7, #88]	; 0x58
 800550a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800550c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800550e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005510:	e841 2300 	strex	r3, r2, [r1]
 8005514:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005516:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005518:	2b00      	cmp	r3, #0
 800551a:	d1e3      	bne.n	80054e4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005520:	4618      	mov	r0, r3
 8005522:	f7fc fd24 	bl	8001f6e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800552e:	b29b      	uxth	r3, r3
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	b29b      	uxth	r3, r3
 8005534:	4619      	mov	r1, r3
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 f8c0 	bl	80056bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800553c:	e099      	b.n	8005672 <HAL_UART_IRQHandler+0x50e>
 800553e:	bf00      	nop
 8005540:	0800579b 	.word	0x0800579b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800554c:	b29b      	uxth	r3, r3
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005558:	b29b      	uxth	r3, r3
 800555a:	2b00      	cmp	r3, #0
 800555c:	f000 808b 	beq.w	8005676 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005560:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005564:	2b00      	cmp	r3, #0
 8005566:	f000 8086 	beq.w	8005676 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	330c      	adds	r3, #12
 8005570:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005574:	e853 3f00 	ldrex	r3, [r3]
 8005578:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800557a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800557c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005580:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	330c      	adds	r3, #12
 800558a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800558e:	647a      	str	r2, [r7, #68]	; 0x44
 8005590:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005592:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005594:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005596:	e841 2300 	strex	r3, r2, [r1]
 800559a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800559c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1e3      	bne.n	800556a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	3314      	adds	r3, #20
 80055a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ac:	e853 3f00 	ldrex	r3, [r3]
 80055b0:	623b      	str	r3, [r7, #32]
   return(result);
 80055b2:	6a3b      	ldr	r3, [r7, #32]
 80055b4:	f023 0301 	bic.w	r3, r3, #1
 80055b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	3314      	adds	r3, #20
 80055c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80055c6:	633a      	str	r2, [r7, #48]	; 0x30
 80055c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055ce:	e841 2300 	strex	r3, r2, [r1]
 80055d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80055d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1e3      	bne.n	80055a2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2220      	movs	r2, #32
 80055de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	330c      	adds	r3, #12
 80055ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	e853 3f00 	ldrex	r3, [r3]
 80055f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f023 0310 	bic.w	r3, r3, #16
 80055fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	330c      	adds	r3, #12
 8005608:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800560c:	61fa      	str	r2, [r7, #28]
 800560e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005610:	69b9      	ldr	r1, [r7, #24]
 8005612:	69fa      	ldr	r2, [r7, #28]
 8005614:	e841 2300 	strex	r3, r2, [r1]
 8005618:	617b      	str	r3, [r7, #20]
   return(result);
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d1e3      	bne.n	80055e8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005620:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005624:	4619      	mov	r1, r3
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 f848 	bl	80056bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800562c:	e023      	b.n	8005676 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800562e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005636:	2b00      	cmp	r3, #0
 8005638:	d009      	beq.n	800564e <HAL_UART_IRQHandler+0x4ea>
 800563a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800563e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005642:	2b00      	cmp	r3, #0
 8005644:	d003      	beq.n	800564e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 f8bb 	bl	80057c2 <UART_Transmit_IT>
    return;
 800564c:	e014      	b.n	8005678 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800564e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00e      	beq.n	8005678 <HAL_UART_IRQHandler+0x514>
 800565a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800565e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005662:	2b00      	cmp	r3, #0
 8005664:	d008      	beq.n	8005678 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 f8fb 	bl	8005862 <UART_EndTransmit_IT>
    return;
 800566c:	e004      	b.n	8005678 <HAL_UART_IRQHandler+0x514>
    return;
 800566e:	bf00      	nop
 8005670:	e002      	b.n	8005678 <HAL_UART_IRQHandler+0x514>
      return;
 8005672:	bf00      	nop
 8005674:	e000      	b.n	8005678 <HAL_UART_IRQHandler+0x514>
      return;
 8005676:	bf00      	nop
  }
}
 8005678:	37e8      	adds	r7, #232	; 0xe8
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop

08005680 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005688:	bf00      	nop
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800569c:	bf00      	nop
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80056b0:	bf00      	nop
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	460b      	mov	r3, r1
 80056c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b095      	sub	sp, #84	; 0x54
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	330c      	adds	r3, #12
 80056e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056e6:	e853 3f00 	ldrex	r3, [r3]
 80056ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80056ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	330c      	adds	r3, #12
 80056fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056fc:	643a      	str	r2, [r7, #64]	; 0x40
 80056fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005700:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005702:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005704:	e841 2300 	strex	r3, r2, [r1]
 8005708:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800570a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800570c:	2b00      	cmp	r3, #0
 800570e:	d1e5      	bne.n	80056dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	3314      	adds	r3, #20
 8005716:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005718:	6a3b      	ldr	r3, [r7, #32]
 800571a:	e853 3f00 	ldrex	r3, [r3]
 800571e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	f023 0301 	bic.w	r3, r3, #1
 8005726:	64bb      	str	r3, [r7, #72]	; 0x48
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	3314      	adds	r3, #20
 800572e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005730:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005732:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005734:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005736:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005738:	e841 2300 	strex	r3, r2, [r1]
 800573c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800573e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1e5      	bne.n	8005710 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005748:	2b01      	cmp	r3, #1
 800574a:	d119      	bne.n	8005780 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	330c      	adds	r3, #12
 8005752:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	e853 3f00 	ldrex	r3, [r3]
 800575a:	60bb      	str	r3, [r7, #8]
   return(result);
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	f023 0310 	bic.w	r3, r3, #16
 8005762:	647b      	str	r3, [r7, #68]	; 0x44
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	330c      	adds	r3, #12
 800576a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800576c:	61ba      	str	r2, [r7, #24]
 800576e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005770:	6979      	ldr	r1, [r7, #20]
 8005772:	69ba      	ldr	r2, [r7, #24]
 8005774:	e841 2300 	strex	r3, r2, [r1]
 8005778:	613b      	str	r3, [r7, #16]
   return(result);
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1e5      	bne.n	800574c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2220      	movs	r2, #32
 8005784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800578e:	bf00      	nop
 8005790:	3754      	adds	r7, #84	; 0x54
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr

0800579a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800579a:	b580      	push	{r7, lr}
 800579c:	b084      	sub	sp, #16
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2200      	movs	r2, #0
 80057ac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057b4:	68f8      	ldr	r0, [r7, #12]
 80057b6:	f7ff ff77 	bl	80056a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057ba:	bf00      	nop
 80057bc:	3710      	adds	r7, #16
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}

080057c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80057c2:	b480      	push	{r7}
 80057c4:	b085      	sub	sp, #20
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	2b21      	cmp	r3, #33	; 0x21
 80057d4:	d13e      	bne.n	8005854 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057de:	d114      	bne.n	800580a <UART_Transmit_IT+0x48>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d110      	bne.n	800580a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a1b      	ldr	r3, [r3, #32]
 80057ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	881b      	ldrh	r3, [r3, #0]
 80057f2:	461a      	mov	r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	1c9a      	adds	r2, r3, #2
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	621a      	str	r2, [r3, #32]
 8005808:	e008      	b.n	800581c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	1c59      	adds	r1, r3, #1
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	6211      	str	r1, [r2, #32]
 8005814:	781a      	ldrb	r2, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005820:	b29b      	uxth	r3, r3
 8005822:	3b01      	subs	r3, #1
 8005824:	b29b      	uxth	r3, r3
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	4619      	mov	r1, r3
 800582a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800582c:	2b00      	cmp	r3, #0
 800582e:	d10f      	bne.n	8005850 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68da      	ldr	r2, [r3, #12]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800583e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68da      	ldr	r2, [r3, #12]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800584e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005850:	2300      	movs	r3, #0
 8005852:	e000      	b.n	8005856 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005854:	2302      	movs	r3, #2
  }
}
 8005856:	4618      	mov	r0, r3
 8005858:	3714      	adds	r7, #20
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr

08005862 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005862:	b580      	push	{r7, lr}
 8005864:	b082      	sub	sp, #8
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68da      	ldr	r2, [r3, #12]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005878:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2220      	movs	r2, #32
 800587e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f7ff fefc 	bl	8005680 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3708      	adds	r7, #8
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}

08005892 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005892:	b580      	push	{r7, lr}
 8005894:	b08c      	sub	sp, #48	; 0x30
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b22      	cmp	r3, #34	; 0x22
 80058a4:	f040 80ab 	bne.w	80059fe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058b0:	d117      	bne.n	80058e2 <UART_Receive_IT+0x50>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d113      	bne.n	80058e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80058ba:	2300      	movs	r3, #0
 80058bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058d0:	b29a      	uxth	r2, r3
 80058d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058da:	1c9a      	adds	r2, r3, #2
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	629a      	str	r2, [r3, #40]	; 0x28
 80058e0:	e026      	b.n	8005930 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80058e8:	2300      	movs	r3, #0
 80058ea:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058f4:	d007      	beq.n	8005906 <UART_Receive_IT+0x74>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d10a      	bne.n	8005914 <UART_Receive_IT+0x82>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d106      	bne.n	8005914 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	b2da      	uxtb	r2, r3
 800590e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005910:	701a      	strb	r2, [r3, #0]
 8005912:	e008      	b.n	8005926 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	b2db      	uxtb	r3, r3
 800591c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005920:	b2da      	uxtb	r2, r3
 8005922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005924:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800592a:	1c5a      	adds	r2, r3, #1
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005934:	b29b      	uxth	r3, r3
 8005936:	3b01      	subs	r3, #1
 8005938:	b29b      	uxth	r3, r3
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	4619      	mov	r1, r3
 800593e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005940:	2b00      	cmp	r3, #0
 8005942:	d15a      	bne.n	80059fa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68da      	ldr	r2, [r3, #12]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f022 0220 	bic.w	r2, r2, #32
 8005952:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68da      	ldr	r2, [r3, #12]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005962:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	695a      	ldr	r2, [r3, #20]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f022 0201 	bic.w	r2, r2, #1
 8005972:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2220      	movs	r2, #32
 8005978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005980:	2b01      	cmp	r3, #1
 8005982:	d135      	bne.n	80059f0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	330c      	adds	r3, #12
 8005990:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	e853 3f00 	ldrex	r3, [r3]
 8005998:	613b      	str	r3, [r7, #16]
   return(result);
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	f023 0310 	bic.w	r3, r3, #16
 80059a0:	627b      	str	r3, [r7, #36]	; 0x24
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	330c      	adds	r3, #12
 80059a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059aa:	623a      	str	r2, [r7, #32]
 80059ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ae:	69f9      	ldr	r1, [r7, #28]
 80059b0:	6a3a      	ldr	r2, [r7, #32]
 80059b2:	e841 2300 	strex	r3, r2, [r1]
 80059b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d1e5      	bne.n	800598a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0310 	and.w	r3, r3, #16
 80059c8:	2b10      	cmp	r3, #16
 80059ca:	d10a      	bne.n	80059e2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80059cc:	2300      	movs	r3, #0
 80059ce:	60fb      	str	r3, [r7, #12]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	60fb      	str	r3, [r7, #12]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	60fb      	str	r3, [r7, #12]
 80059e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80059e6:	4619      	mov	r1, r3
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f7ff fe67 	bl	80056bc <HAL_UARTEx_RxEventCallback>
 80059ee:	e002      	b.n	80059f6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f7ff fe4f 	bl	8005694 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80059f6:	2300      	movs	r3, #0
 80059f8:	e002      	b.n	8005a00 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80059fa:	2300      	movs	r3, #0
 80059fc:	e000      	b.n	8005a00 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80059fe:	2302      	movs	r3, #2
  }
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3730      	adds	r7, #48	; 0x30
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a0c:	b09f      	sub	sp, #124	; 0x7c
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005a1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a1e:	68d9      	ldr	r1, [r3, #12]
 8005a20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	ea40 0301 	orr.w	r3, r0, r1
 8005a28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a2c:	689a      	ldr	r2, [r3, #8]
 8005a2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	431a      	orrs	r2, r3
 8005a34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a36:	695b      	ldr	r3, [r3, #20]
 8005a38:	431a      	orrs	r2, r3
 8005a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a3c:	69db      	ldr	r3, [r3, #28]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005a42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005a4c:	f021 010c 	bic.w	r1, r1, #12
 8005a50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a56:	430b      	orrs	r3, r1
 8005a58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	695b      	ldr	r3, [r3, #20]
 8005a60:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005a64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a66:	6999      	ldr	r1, [r3, #24]
 8005a68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	ea40 0301 	orr.w	r3, r0, r1
 8005a70:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	4bc5      	ldr	r3, [pc, #788]	; (8005d8c <UART_SetConfig+0x384>)
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d004      	beq.n	8005a86 <UART_SetConfig+0x7e>
 8005a7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	4bc3      	ldr	r3, [pc, #780]	; (8005d90 <UART_SetConfig+0x388>)
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d103      	bne.n	8005a8e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a86:	f7ff fa83 	bl	8004f90 <HAL_RCC_GetPCLK2Freq>
 8005a8a:	6778      	str	r0, [r7, #116]	; 0x74
 8005a8c:	e002      	b.n	8005a94 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a8e:	f7ff fa6b 	bl	8004f68 <HAL_RCC_GetPCLK1Freq>
 8005a92:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a96:	69db      	ldr	r3, [r3, #28]
 8005a98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a9c:	f040 80b6 	bne.w	8005c0c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005aa0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005aa2:	461c      	mov	r4, r3
 8005aa4:	f04f 0500 	mov.w	r5, #0
 8005aa8:	4622      	mov	r2, r4
 8005aaa:	462b      	mov	r3, r5
 8005aac:	1891      	adds	r1, r2, r2
 8005aae:	6439      	str	r1, [r7, #64]	; 0x40
 8005ab0:	415b      	adcs	r3, r3
 8005ab2:	647b      	str	r3, [r7, #68]	; 0x44
 8005ab4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005ab8:	1912      	adds	r2, r2, r4
 8005aba:	eb45 0303 	adc.w	r3, r5, r3
 8005abe:	f04f 0000 	mov.w	r0, #0
 8005ac2:	f04f 0100 	mov.w	r1, #0
 8005ac6:	00d9      	lsls	r1, r3, #3
 8005ac8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005acc:	00d0      	lsls	r0, r2, #3
 8005ace:	4602      	mov	r2, r0
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	1911      	adds	r1, r2, r4
 8005ad4:	6639      	str	r1, [r7, #96]	; 0x60
 8005ad6:	416b      	adcs	r3, r5
 8005ad8:	667b      	str	r3, [r7, #100]	; 0x64
 8005ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	461a      	mov	r2, r3
 8005ae0:	f04f 0300 	mov.w	r3, #0
 8005ae4:	1891      	adds	r1, r2, r2
 8005ae6:	63b9      	str	r1, [r7, #56]	; 0x38
 8005ae8:	415b      	adcs	r3, r3
 8005aea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005aec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005af0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005af4:	f7fb f8b0 	bl	8000c58 <__aeabi_uldivmod>
 8005af8:	4602      	mov	r2, r0
 8005afa:	460b      	mov	r3, r1
 8005afc:	4ba5      	ldr	r3, [pc, #660]	; (8005d94 <UART_SetConfig+0x38c>)
 8005afe:	fba3 2302 	umull	r2, r3, r3, r2
 8005b02:	095b      	lsrs	r3, r3, #5
 8005b04:	011e      	lsls	r6, r3, #4
 8005b06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b08:	461c      	mov	r4, r3
 8005b0a:	f04f 0500 	mov.w	r5, #0
 8005b0e:	4622      	mov	r2, r4
 8005b10:	462b      	mov	r3, r5
 8005b12:	1891      	adds	r1, r2, r2
 8005b14:	6339      	str	r1, [r7, #48]	; 0x30
 8005b16:	415b      	adcs	r3, r3
 8005b18:	637b      	str	r3, [r7, #52]	; 0x34
 8005b1a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005b1e:	1912      	adds	r2, r2, r4
 8005b20:	eb45 0303 	adc.w	r3, r5, r3
 8005b24:	f04f 0000 	mov.w	r0, #0
 8005b28:	f04f 0100 	mov.w	r1, #0
 8005b2c:	00d9      	lsls	r1, r3, #3
 8005b2e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b32:	00d0      	lsls	r0, r2, #3
 8005b34:	4602      	mov	r2, r0
 8005b36:	460b      	mov	r3, r1
 8005b38:	1911      	adds	r1, r2, r4
 8005b3a:	65b9      	str	r1, [r7, #88]	; 0x58
 8005b3c:	416b      	adcs	r3, r5
 8005b3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	461a      	mov	r2, r3
 8005b46:	f04f 0300 	mov.w	r3, #0
 8005b4a:	1891      	adds	r1, r2, r2
 8005b4c:	62b9      	str	r1, [r7, #40]	; 0x28
 8005b4e:	415b      	adcs	r3, r3
 8005b50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b56:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005b5a:	f7fb f87d 	bl	8000c58 <__aeabi_uldivmod>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	460b      	mov	r3, r1
 8005b62:	4b8c      	ldr	r3, [pc, #560]	; (8005d94 <UART_SetConfig+0x38c>)
 8005b64:	fba3 1302 	umull	r1, r3, r3, r2
 8005b68:	095b      	lsrs	r3, r3, #5
 8005b6a:	2164      	movs	r1, #100	; 0x64
 8005b6c:	fb01 f303 	mul.w	r3, r1, r3
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	00db      	lsls	r3, r3, #3
 8005b74:	3332      	adds	r3, #50	; 0x32
 8005b76:	4a87      	ldr	r2, [pc, #540]	; (8005d94 <UART_SetConfig+0x38c>)
 8005b78:	fba2 2303 	umull	r2, r3, r2, r3
 8005b7c:	095b      	lsrs	r3, r3, #5
 8005b7e:	005b      	lsls	r3, r3, #1
 8005b80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005b84:	441e      	add	r6, r3
 8005b86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f04f 0100 	mov.w	r1, #0
 8005b8e:	4602      	mov	r2, r0
 8005b90:	460b      	mov	r3, r1
 8005b92:	1894      	adds	r4, r2, r2
 8005b94:	623c      	str	r4, [r7, #32]
 8005b96:	415b      	adcs	r3, r3
 8005b98:	627b      	str	r3, [r7, #36]	; 0x24
 8005b9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b9e:	1812      	adds	r2, r2, r0
 8005ba0:	eb41 0303 	adc.w	r3, r1, r3
 8005ba4:	f04f 0400 	mov.w	r4, #0
 8005ba8:	f04f 0500 	mov.w	r5, #0
 8005bac:	00dd      	lsls	r5, r3, #3
 8005bae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005bb2:	00d4      	lsls	r4, r2, #3
 8005bb4:	4622      	mov	r2, r4
 8005bb6:	462b      	mov	r3, r5
 8005bb8:	1814      	adds	r4, r2, r0
 8005bba:	653c      	str	r4, [r7, #80]	; 0x50
 8005bbc:	414b      	adcs	r3, r1
 8005bbe:	657b      	str	r3, [r7, #84]	; 0x54
 8005bc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	f04f 0300 	mov.w	r3, #0
 8005bca:	1891      	adds	r1, r2, r2
 8005bcc:	61b9      	str	r1, [r7, #24]
 8005bce:	415b      	adcs	r3, r3
 8005bd0:	61fb      	str	r3, [r7, #28]
 8005bd2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bd6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005bda:	f7fb f83d 	bl	8000c58 <__aeabi_uldivmod>
 8005bde:	4602      	mov	r2, r0
 8005be0:	460b      	mov	r3, r1
 8005be2:	4b6c      	ldr	r3, [pc, #432]	; (8005d94 <UART_SetConfig+0x38c>)
 8005be4:	fba3 1302 	umull	r1, r3, r3, r2
 8005be8:	095b      	lsrs	r3, r3, #5
 8005bea:	2164      	movs	r1, #100	; 0x64
 8005bec:	fb01 f303 	mul.w	r3, r1, r3
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	00db      	lsls	r3, r3, #3
 8005bf4:	3332      	adds	r3, #50	; 0x32
 8005bf6:	4a67      	ldr	r2, [pc, #412]	; (8005d94 <UART_SetConfig+0x38c>)
 8005bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bfc:	095b      	lsrs	r3, r3, #5
 8005bfe:	f003 0207 	and.w	r2, r3, #7
 8005c02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4432      	add	r2, r6
 8005c08:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c0a:	e0b9      	b.n	8005d80 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c0e:	461c      	mov	r4, r3
 8005c10:	f04f 0500 	mov.w	r5, #0
 8005c14:	4622      	mov	r2, r4
 8005c16:	462b      	mov	r3, r5
 8005c18:	1891      	adds	r1, r2, r2
 8005c1a:	6139      	str	r1, [r7, #16]
 8005c1c:	415b      	adcs	r3, r3
 8005c1e:	617b      	str	r3, [r7, #20]
 8005c20:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005c24:	1912      	adds	r2, r2, r4
 8005c26:	eb45 0303 	adc.w	r3, r5, r3
 8005c2a:	f04f 0000 	mov.w	r0, #0
 8005c2e:	f04f 0100 	mov.w	r1, #0
 8005c32:	00d9      	lsls	r1, r3, #3
 8005c34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c38:	00d0      	lsls	r0, r2, #3
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	eb12 0804 	adds.w	r8, r2, r4
 8005c42:	eb43 0905 	adc.w	r9, r3, r5
 8005c46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f04f 0100 	mov.w	r1, #0
 8005c50:	f04f 0200 	mov.w	r2, #0
 8005c54:	f04f 0300 	mov.w	r3, #0
 8005c58:	008b      	lsls	r3, r1, #2
 8005c5a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005c5e:	0082      	lsls	r2, r0, #2
 8005c60:	4640      	mov	r0, r8
 8005c62:	4649      	mov	r1, r9
 8005c64:	f7fa fff8 	bl	8000c58 <__aeabi_uldivmod>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	4b49      	ldr	r3, [pc, #292]	; (8005d94 <UART_SetConfig+0x38c>)
 8005c6e:	fba3 2302 	umull	r2, r3, r3, r2
 8005c72:	095b      	lsrs	r3, r3, #5
 8005c74:	011e      	lsls	r6, r3, #4
 8005c76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f04f 0100 	mov.w	r1, #0
 8005c7e:	4602      	mov	r2, r0
 8005c80:	460b      	mov	r3, r1
 8005c82:	1894      	adds	r4, r2, r2
 8005c84:	60bc      	str	r4, [r7, #8]
 8005c86:	415b      	adcs	r3, r3
 8005c88:	60fb      	str	r3, [r7, #12]
 8005c8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c8e:	1812      	adds	r2, r2, r0
 8005c90:	eb41 0303 	adc.w	r3, r1, r3
 8005c94:	f04f 0400 	mov.w	r4, #0
 8005c98:	f04f 0500 	mov.w	r5, #0
 8005c9c:	00dd      	lsls	r5, r3, #3
 8005c9e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005ca2:	00d4      	lsls	r4, r2, #3
 8005ca4:	4622      	mov	r2, r4
 8005ca6:	462b      	mov	r3, r5
 8005ca8:	1814      	adds	r4, r2, r0
 8005caa:	64bc      	str	r4, [r7, #72]	; 0x48
 8005cac:	414b      	adcs	r3, r1
 8005cae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f04f 0100 	mov.w	r1, #0
 8005cba:	f04f 0200 	mov.w	r2, #0
 8005cbe:	f04f 0300 	mov.w	r3, #0
 8005cc2:	008b      	lsls	r3, r1, #2
 8005cc4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005cc8:	0082      	lsls	r2, r0, #2
 8005cca:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005cce:	f7fa ffc3 	bl	8000c58 <__aeabi_uldivmod>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	4b2f      	ldr	r3, [pc, #188]	; (8005d94 <UART_SetConfig+0x38c>)
 8005cd8:	fba3 1302 	umull	r1, r3, r3, r2
 8005cdc:	095b      	lsrs	r3, r3, #5
 8005cde:	2164      	movs	r1, #100	; 0x64
 8005ce0:	fb01 f303 	mul.w	r3, r1, r3
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	011b      	lsls	r3, r3, #4
 8005ce8:	3332      	adds	r3, #50	; 0x32
 8005cea:	4a2a      	ldr	r2, [pc, #168]	; (8005d94 <UART_SetConfig+0x38c>)
 8005cec:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf0:	095b      	lsrs	r3, r3, #5
 8005cf2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cf6:	441e      	add	r6, r3
 8005cf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f04f 0100 	mov.w	r1, #0
 8005d00:	4602      	mov	r2, r0
 8005d02:	460b      	mov	r3, r1
 8005d04:	1894      	adds	r4, r2, r2
 8005d06:	603c      	str	r4, [r7, #0]
 8005d08:	415b      	adcs	r3, r3
 8005d0a:	607b      	str	r3, [r7, #4]
 8005d0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d10:	1812      	adds	r2, r2, r0
 8005d12:	eb41 0303 	adc.w	r3, r1, r3
 8005d16:	f04f 0400 	mov.w	r4, #0
 8005d1a:	f04f 0500 	mov.w	r5, #0
 8005d1e:	00dd      	lsls	r5, r3, #3
 8005d20:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005d24:	00d4      	lsls	r4, r2, #3
 8005d26:	4622      	mov	r2, r4
 8005d28:	462b      	mov	r3, r5
 8005d2a:	eb12 0a00 	adds.w	sl, r2, r0
 8005d2e:	eb43 0b01 	adc.w	fp, r3, r1
 8005d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	4618      	mov	r0, r3
 8005d38:	f04f 0100 	mov.w	r1, #0
 8005d3c:	f04f 0200 	mov.w	r2, #0
 8005d40:	f04f 0300 	mov.w	r3, #0
 8005d44:	008b      	lsls	r3, r1, #2
 8005d46:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005d4a:	0082      	lsls	r2, r0, #2
 8005d4c:	4650      	mov	r0, sl
 8005d4e:	4659      	mov	r1, fp
 8005d50:	f7fa ff82 	bl	8000c58 <__aeabi_uldivmod>
 8005d54:	4602      	mov	r2, r0
 8005d56:	460b      	mov	r3, r1
 8005d58:	4b0e      	ldr	r3, [pc, #56]	; (8005d94 <UART_SetConfig+0x38c>)
 8005d5a:	fba3 1302 	umull	r1, r3, r3, r2
 8005d5e:	095b      	lsrs	r3, r3, #5
 8005d60:	2164      	movs	r1, #100	; 0x64
 8005d62:	fb01 f303 	mul.w	r3, r1, r3
 8005d66:	1ad3      	subs	r3, r2, r3
 8005d68:	011b      	lsls	r3, r3, #4
 8005d6a:	3332      	adds	r3, #50	; 0x32
 8005d6c:	4a09      	ldr	r2, [pc, #36]	; (8005d94 <UART_SetConfig+0x38c>)
 8005d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d72:	095b      	lsrs	r3, r3, #5
 8005d74:	f003 020f 	and.w	r2, r3, #15
 8005d78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4432      	add	r2, r6
 8005d7e:	609a      	str	r2, [r3, #8]
}
 8005d80:	bf00      	nop
 8005d82:	377c      	adds	r7, #124	; 0x7c
 8005d84:	46bd      	mov	sp, r7
 8005d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d8a:	bf00      	nop
 8005d8c:	40011000 	.word	0x40011000
 8005d90:	40011400 	.word	0x40011400
 8005d94:	51eb851f 	.word	0x51eb851f

08005d98 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d98:	b084      	sub	sp, #16
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b084      	sub	sp, #16
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
 8005da2:	f107 001c 	add.w	r0, r7, #28
 8005da6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d122      	bne.n	8005df6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005dc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005dd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d105      	bne.n	8005dea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f001 fb1c 	bl	8007428 <USB_CoreReset>
 8005df0:	4603      	mov	r3, r0
 8005df2:	73fb      	strb	r3, [r7, #15]
 8005df4:	e01a      	b.n	8005e2c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f001 fb10 	bl	8007428 <USB_CoreReset>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005e0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d106      	bne.n	8005e20 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e16:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	639a      	str	r2, [r3, #56]	; 0x38
 8005e1e:	e005      	b.n	8005e2c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d10b      	bne.n	8005e4a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	f043 0206 	orr.w	r2, r3, #6
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	f043 0220 	orr.w	r2, r3, #32
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3710      	adds	r7, #16
 8005e50:	46bd      	mov	sp, r7
 8005e52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e56:	b004      	add	sp, #16
 8005e58:	4770      	bx	lr
	...

08005e5c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b087      	sub	sp, #28
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	4613      	mov	r3, r2
 8005e68:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005e6a:	79fb      	ldrb	r3, [r7, #7]
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	d165      	bne.n	8005f3c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	4a41      	ldr	r2, [pc, #260]	; (8005f78 <USB_SetTurnaroundTime+0x11c>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d906      	bls.n	8005e86 <USB_SetTurnaroundTime+0x2a>
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	4a40      	ldr	r2, [pc, #256]	; (8005f7c <USB_SetTurnaroundTime+0x120>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d202      	bcs.n	8005e86 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005e80:	230f      	movs	r3, #15
 8005e82:	617b      	str	r3, [r7, #20]
 8005e84:	e062      	b.n	8005f4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	4a3c      	ldr	r2, [pc, #240]	; (8005f7c <USB_SetTurnaroundTime+0x120>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d306      	bcc.n	8005e9c <USB_SetTurnaroundTime+0x40>
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	4a3b      	ldr	r2, [pc, #236]	; (8005f80 <USB_SetTurnaroundTime+0x124>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d202      	bcs.n	8005e9c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005e96:	230e      	movs	r3, #14
 8005e98:	617b      	str	r3, [r7, #20]
 8005e9a:	e057      	b.n	8005f4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	4a38      	ldr	r2, [pc, #224]	; (8005f80 <USB_SetTurnaroundTime+0x124>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d306      	bcc.n	8005eb2 <USB_SetTurnaroundTime+0x56>
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	4a37      	ldr	r2, [pc, #220]	; (8005f84 <USB_SetTurnaroundTime+0x128>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d202      	bcs.n	8005eb2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005eac:	230d      	movs	r3, #13
 8005eae:	617b      	str	r3, [r7, #20]
 8005eb0:	e04c      	b.n	8005f4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	4a33      	ldr	r2, [pc, #204]	; (8005f84 <USB_SetTurnaroundTime+0x128>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d306      	bcc.n	8005ec8 <USB_SetTurnaroundTime+0x6c>
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	4a32      	ldr	r2, [pc, #200]	; (8005f88 <USB_SetTurnaroundTime+0x12c>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d802      	bhi.n	8005ec8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005ec2:	230c      	movs	r3, #12
 8005ec4:	617b      	str	r3, [r7, #20]
 8005ec6:	e041      	b.n	8005f4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	4a2f      	ldr	r2, [pc, #188]	; (8005f88 <USB_SetTurnaroundTime+0x12c>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d906      	bls.n	8005ede <USB_SetTurnaroundTime+0x82>
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	4a2e      	ldr	r2, [pc, #184]	; (8005f8c <USB_SetTurnaroundTime+0x130>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d802      	bhi.n	8005ede <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005ed8:	230b      	movs	r3, #11
 8005eda:	617b      	str	r3, [r7, #20]
 8005edc:	e036      	b.n	8005f4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	4a2a      	ldr	r2, [pc, #168]	; (8005f8c <USB_SetTurnaroundTime+0x130>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d906      	bls.n	8005ef4 <USB_SetTurnaroundTime+0x98>
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	4a29      	ldr	r2, [pc, #164]	; (8005f90 <USB_SetTurnaroundTime+0x134>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d802      	bhi.n	8005ef4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005eee:	230a      	movs	r3, #10
 8005ef0:	617b      	str	r3, [r7, #20]
 8005ef2:	e02b      	b.n	8005f4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	4a26      	ldr	r2, [pc, #152]	; (8005f90 <USB_SetTurnaroundTime+0x134>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d906      	bls.n	8005f0a <USB_SetTurnaroundTime+0xae>
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	4a25      	ldr	r2, [pc, #148]	; (8005f94 <USB_SetTurnaroundTime+0x138>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d202      	bcs.n	8005f0a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005f04:	2309      	movs	r3, #9
 8005f06:	617b      	str	r3, [r7, #20]
 8005f08:	e020      	b.n	8005f4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	4a21      	ldr	r2, [pc, #132]	; (8005f94 <USB_SetTurnaroundTime+0x138>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d306      	bcc.n	8005f20 <USB_SetTurnaroundTime+0xc4>
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	4a20      	ldr	r2, [pc, #128]	; (8005f98 <USB_SetTurnaroundTime+0x13c>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d802      	bhi.n	8005f20 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005f1a:	2308      	movs	r3, #8
 8005f1c:	617b      	str	r3, [r7, #20]
 8005f1e:	e015      	b.n	8005f4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	4a1d      	ldr	r2, [pc, #116]	; (8005f98 <USB_SetTurnaroundTime+0x13c>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d906      	bls.n	8005f36 <USB_SetTurnaroundTime+0xda>
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	4a1c      	ldr	r2, [pc, #112]	; (8005f9c <USB_SetTurnaroundTime+0x140>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d202      	bcs.n	8005f36 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005f30:	2307      	movs	r3, #7
 8005f32:	617b      	str	r3, [r7, #20]
 8005f34:	e00a      	b.n	8005f4c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005f36:	2306      	movs	r3, #6
 8005f38:	617b      	str	r3, [r7, #20]
 8005f3a:	e007      	b.n	8005f4c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005f3c:	79fb      	ldrb	r3, [r7, #7]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d102      	bne.n	8005f48 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005f42:	2309      	movs	r3, #9
 8005f44:	617b      	str	r3, [r7, #20]
 8005f46:	e001      	b.n	8005f4c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005f48:	2309      	movs	r3, #9
 8005f4a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	68da      	ldr	r2, [r3, #12]
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	029b      	lsls	r3, r3, #10
 8005f60:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005f64:	431a      	orrs	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005f6a:	2300      	movs	r3, #0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	371c      	adds	r7, #28
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr
 8005f78:	00d8acbf 	.word	0x00d8acbf
 8005f7c:	00e4e1c0 	.word	0x00e4e1c0
 8005f80:	00f42400 	.word	0x00f42400
 8005f84:	01067380 	.word	0x01067380
 8005f88:	011a499f 	.word	0x011a499f
 8005f8c:	01312cff 	.word	0x01312cff
 8005f90:	014ca43f 	.word	0x014ca43f
 8005f94:	016e3600 	.word	0x016e3600
 8005f98:	01a6ab1f 	.word	0x01a6ab1f
 8005f9c:	01e84800 	.word	0x01e84800

08005fa0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	f043 0201 	orr.w	r2, r3, #1
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	370c      	adds	r7, #12
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b083      	sub	sp, #12
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	f023 0201 	bic.w	r2, r3, #1
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	460b      	mov	r3, r1
 8005fee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006000:	78fb      	ldrb	r3, [r7, #3]
 8006002:	2b01      	cmp	r3, #1
 8006004:	d115      	bne.n	8006032 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006012:	2001      	movs	r0, #1
 8006014:	f7fb fe76 	bl	8001d04 <HAL_Delay>
      ms++;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	3301      	adds	r3, #1
 800601c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f001 f972 	bl	8007308 <USB_GetMode>
 8006024:	4603      	mov	r3, r0
 8006026:	2b01      	cmp	r3, #1
 8006028:	d01e      	beq.n	8006068 <USB_SetCurrentMode+0x84>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2b31      	cmp	r3, #49	; 0x31
 800602e:	d9f0      	bls.n	8006012 <USB_SetCurrentMode+0x2e>
 8006030:	e01a      	b.n	8006068 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006032:	78fb      	ldrb	r3, [r7, #3]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d115      	bne.n	8006064 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006044:	2001      	movs	r0, #1
 8006046:	f7fb fe5d 	bl	8001d04 <HAL_Delay>
      ms++;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	3301      	adds	r3, #1
 800604e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f001 f959 	bl	8007308 <USB_GetMode>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d005      	beq.n	8006068 <USB_SetCurrentMode+0x84>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2b31      	cmp	r3, #49	; 0x31
 8006060:	d9f0      	bls.n	8006044 <USB_SetCurrentMode+0x60>
 8006062:	e001      	b.n	8006068 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	e005      	b.n	8006074 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2b32      	cmp	r3, #50	; 0x32
 800606c:	d101      	bne.n	8006072 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e000      	b.n	8006074 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3710      	adds	r7, #16
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800607c:	b084      	sub	sp, #16
 800607e:	b580      	push	{r7, lr}
 8006080:	b086      	sub	sp, #24
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
 8006086:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800608a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800608e:	2300      	movs	r3, #0
 8006090:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006096:	2300      	movs	r3, #0
 8006098:	613b      	str	r3, [r7, #16]
 800609a:	e009      	b.n	80060b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	3340      	adds	r3, #64	; 0x40
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	4413      	add	r3, r2
 80060a6:	2200      	movs	r2, #0
 80060a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	3301      	adds	r3, #1
 80060ae:	613b      	str	r3, [r7, #16]
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	2b0e      	cmp	r3, #14
 80060b4:	d9f2      	bls.n	800609c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80060b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d11c      	bne.n	80060f6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060ca:	f043 0302 	orr.w	r3, r3, #2
 80060ce:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ec:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	639a      	str	r2, [r3, #56]	; 0x38
 80060f4:	e00b      	b.n	800610e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006106:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006114:	461a      	mov	r2, r3
 8006116:	2300      	movs	r3, #0
 8006118:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006120:	4619      	mov	r1, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006128:	461a      	mov	r2, r3
 800612a:	680b      	ldr	r3, [r1, #0]
 800612c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800612e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006130:	2b01      	cmp	r3, #1
 8006132:	d10c      	bne.n	800614e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006136:	2b00      	cmp	r3, #0
 8006138:	d104      	bne.n	8006144 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800613a:	2100      	movs	r1, #0
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 f945 	bl	80063cc <USB_SetDevSpeed>
 8006142:	e008      	b.n	8006156 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006144:	2101      	movs	r1, #1
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 f940 	bl	80063cc <USB_SetDevSpeed>
 800614c:	e003      	b.n	8006156 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800614e:	2103      	movs	r1, #3
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 f93b 	bl	80063cc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006156:	2110      	movs	r1, #16
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 f8f3 	bl	8006344 <USB_FlushTxFifo>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d001      	beq.n	8006168 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 f90f 	bl	800638c <USB_FlushRxFifo>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d001      	beq.n	8006178 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800617e:	461a      	mov	r2, r3
 8006180:	2300      	movs	r3, #0
 8006182:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800618a:	461a      	mov	r2, r3
 800618c:	2300      	movs	r3, #0
 800618e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006196:	461a      	mov	r2, r3
 8006198:	2300      	movs	r3, #0
 800619a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800619c:	2300      	movs	r3, #0
 800619e:	613b      	str	r3, [r7, #16]
 80061a0:	e043      	b.n	800622a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	015a      	lsls	r2, r3, #5
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	4413      	add	r3, r2
 80061aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061b8:	d118      	bne.n	80061ec <USB_DevInit+0x170>
    {
      if (i == 0U)
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10a      	bne.n	80061d6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	015a      	lsls	r2, r3, #5
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	4413      	add	r3, r2
 80061c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061cc:	461a      	mov	r2, r3
 80061ce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80061d2:	6013      	str	r3, [r2, #0]
 80061d4:	e013      	b.n	80061fe <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	015a      	lsls	r2, r3, #5
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	4413      	add	r3, r2
 80061de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061e2:	461a      	mov	r2, r3
 80061e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80061e8:	6013      	str	r3, [r2, #0]
 80061ea:	e008      	b.n	80061fe <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	015a      	lsls	r2, r3, #5
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	4413      	add	r3, r2
 80061f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061f8:	461a      	mov	r2, r3
 80061fa:	2300      	movs	r3, #0
 80061fc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	015a      	lsls	r2, r3, #5
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	4413      	add	r3, r2
 8006206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800620a:	461a      	mov	r2, r3
 800620c:	2300      	movs	r3, #0
 800620e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	015a      	lsls	r2, r3, #5
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	4413      	add	r3, r2
 8006218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800621c:	461a      	mov	r2, r3
 800621e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006222:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	3301      	adds	r3, #1
 8006228:	613b      	str	r3, [r7, #16]
 800622a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	429a      	cmp	r2, r3
 8006230:	d3b7      	bcc.n	80061a2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006232:	2300      	movs	r3, #0
 8006234:	613b      	str	r3, [r7, #16]
 8006236:	e043      	b.n	80062c0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	015a      	lsls	r2, r3, #5
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	4413      	add	r3, r2
 8006240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800624a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800624e:	d118      	bne.n	8006282 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d10a      	bne.n	800626c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	015a      	lsls	r2, r3, #5
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	4413      	add	r3, r2
 800625e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006262:	461a      	mov	r2, r3
 8006264:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006268:	6013      	str	r3, [r2, #0]
 800626a:	e013      	b.n	8006294 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	015a      	lsls	r2, r3, #5
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	4413      	add	r3, r2
 8006274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006278:	461a      	mov	r2, r3
 800627a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800627e:	6013      	str	r3, [r2, #0]
 8006280:	e008      	b.n	8006294 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	015a      	lsls	r2, r3, #5
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	4413      	add	r3, r2
 800628a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800628e:	461a      	mov	r2, r3
 8006290:	2300      	movs	r3, #0
 8006292:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	015a      	lsls	r2, r3, #5
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	4413      	add	r3, r2
 800629c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a0:	461a      	mov	r2, r3
 80062a2:	2300      	movs	r3, #0
 80062a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	015a      	lsls	r2, r3, #5
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	4413      	add	r3, r2
 80062ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b2:	461a      	mov	r2, r3
 80062b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80062b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	3301      	adds	r3, #1
 80062be:	613b      	str	r3, [r7, #16]
 80062c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c2:	693a      	ldr	r2, [r7, #16]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d3b7      	bcc.n	8006238 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ce:	691b      	ldr	r3, [r3, #16]
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062da:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80062e8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80062ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d105      	bne.n	80062fc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	699b      	ldr	r3, [r3, #24]
 80062f4:	f043 0210 	orr.w	r2, r3, #16
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	699a      	ldr	r2, [r3, #24]
 8006300:	4b0f      	ldr	r3, [pc, #60]	; (8006340 <USB_DevInit+0x2c4>)
 8006302:	4313      	orrs	r3, r2
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800630a:	2b00      	cmp	r3, #0
 800630c:	d005      	beq.n	800631a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	699b      	ldr	r3, [r3, #24]
 8006312:	f043 0208 	orr.w	r2, r3, #8
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800631a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800631c:	2b01      	cmp	r3, #1
 800631e:	d107      	bne.n	8006330 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	699b      	ldr	r3, [r3, #24]
 8006324:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006328:	f043 0304 	orr.w	r3, r3, #4
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006330:	7dfb      	ldrb	r3, [r7, #23]
}
 8006332:	4618      	mov	r0, r3
 8006334:	3718      	adds	r7, #24
 8006336:	46bd      	mov	sp, r7
 8006338:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800633c:	b004      	add	sp, #16
 800633e:	4770      	bx	lr
 8006340:	803c3800 	.word	0x803c3800

08006344 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006344:	b480      	push	{r7}
 8006346:	b085      	sub	sp, #20
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800634e:	2300      	movs	r3, #0
 8006350:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	019b      	lsls	r3, r3, #6
 8006356:	f043 0220 	orr.w	r2, r3, #32
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	3301      	adds	r3, #1
 8006362:	60fb      	str	r3, [r7, #12]
 8006364:	4a08      	ldr	r2, [pc, #32]	; (8006388 <USB_FlushTxFifo+0x44>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d901      	bls.n	800636e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	e006      	b.n	800637c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	f003 0320 	and.w	r3, r3, #32
 8006376:	2b20      	cmp	r3, #32
 8006378:	d0f1      	beq.n	800635e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3714      	adds	r7, #20
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr
 8006388:	00030d40 	.word	0x00030d40

0800638c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800638c:	b480      	push	{r7}
 800638e:	b085      	sub	sp, #20
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006394:	2300      	movs	r3, #0
 8006396:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2210      	movs	r2, #16
 800639c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	3301      	adds	r3, #1
 80063a2:	60fb      	str	r3, [r7, #12]
 80063a4:	4a08      	ldr	r2, [pc, #32]	; (80063c8 <USB_FlushRxFifo+0x3c>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d901      	bls.n	80063ae <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80063aa:	2303      	movs	r3, #3
 80063ac:	e006      	b.n	80063bc <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	f003 0310 	and.w	r3, r3, #16
 80063b6:	2b10      	cmp	r3, #16
 80063b8:	d0f1      	beq.n	800639e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3714      	adds	r7, #20
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr
 80063c8:	00030d40 	.word	0x00030d40

080063cc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b085      	sub	sp, #20
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	460b      	mov	r3, r1
 80063d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	78fb      	ldrb	r3, [r7, #3]
 80063e6:	68f9      	ldr	r1, [r7, #12]
 80063e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063ec:	4313      	orrs	r3, r2
 80063ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3714      	adds	r7, #20
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr

080063fe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80063fe:	b480      	push	{r7}
 8006400:	b087      	sub	sp, #28
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	f003 0306 	and.w	r3, r3, #6
 8006416:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d102      	bne.n	8006424 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800641e:	2300      	movs	r3, #0
 8006420:	75fb      	strb	r3, [r7, #23]
 8006422:	e00a      	b.n	800643a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2b02      	cmp	r3, #2
 8006428:	d002      	beq.n	8006430 <USB_GetDevSpeed+0x32>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2b06      	cmp	r3, #6
 800642e:	d102      	bne.n	8006436 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006430:	2302      	movs	r3, #2
 8006432:	75fb      	strb	r3, [r7, #23]
 8006434:	e001      	b.n	800643a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006436:	230f      	movs	r3, #15
 8006438:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800643a:	7dfb      	ldrb	r3, [r7, #23]
}
 800643c:	4618      	mov	r0, r3
 800643e:	371c      	adds	r7, #28
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	785b      	ldrb	r3, [r3, #1]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d13a      	bne.n	80064da <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800646a:	69da      	ldr	r2, [r3, #28]
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	f003 030f 	and.w	r3, r3, #15
 8006474:	2101      	movs	r1, #1
 8006476:	fa01 f303 	lsl.w	r3, r1, r3
 800647a:	b29b      	uxth	r3, r3
 800647c:	68f9      	ldr	r1, [r7, #12]
 800647e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006482:	4313      	orrs	r3, r2
 8006484:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	015a      	lsls	r2, r3, #5
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	4413      	add	r3, r2
 800648e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006498:	2b00      	cmp	r3, #0
 800649a:	d155      	bne.n	8006548 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	015a      	lsls	r2, r3, #5
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	4413      	add	r3, r2
 80064a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	78db      	ldrb	r3, [r3, #3]
 80064b6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80064b8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	059b      	lsls	r3, r3, #22
 80064be:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80064c0:	4313      	orrs	r3, r2
 80064c2:	68ba      	ldr	r2, [r7, #8]
 80064c4:	0151      	lsls	r1, r2, #5
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	440a      	add	r2, r1
 80064ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064d6:	6013      	str	r3, [r2, #0]
 80064d8:	e036      	b.n	8006548 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064e0:	69da      	ldr	r2, [r3, #28]
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	f003 030f 	and.w	r3, r3, #15
 80064ea:	2101      	movs	r1, #1
 80064ec:	fa01 f303 	lsl.w	r3, r1, r3
 80064f0:	041b      	lsls	r3, r3, #16
 80064f2:	68f9      	ldr	r1, [r7, #12]
 80064f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064f8:	4313      	orrs	r3, r2
 80064fa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	015a      	lsls	r2, r3, #5
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	4413      	add	r3, r2
 8006504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800650e:	2b00      	cmp	r3, #0
 8006510:	d11a      	bne.n	8006548 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	015a      	lsls	r2, r3, #5
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	4413      	add	r3, r2
 800651a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	78db      	ldrb	r3, [r3, #3]
 800652c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800652e:	430b      	orrs	r3, r1
 8006530:	4313      	orrs	r3, r2
 8006532:	68ba      	ldr	r2, [r7, #8]
 8006534:	0151      	lsls	r1, r2, #5
 8006536:	68fa      	ldr	r2, [r7, #12]
 8006538:	440a      	add	r2, r1
 800653a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800653e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006542:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006546:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	3714      	adds	r7, #20
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr
	...

08006558 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	785b      	ldrb	r3, [r3, #1]
 8006570:	2b01      	cmp	r3, #1
 8006572:	d161      	bne.n	8006638 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	015a      	lsls	r2, r3, #5
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	4413      	add	r3, r2
 800657c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006586:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800658a:	d11f      	bne.n	80065cc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	015a      	lsls	r2, r3, #5
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	4413      	add	r3, r2
 8006594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	68ba      	ldr	r2, [r7, #8]
 800659c:	0151      	lsls	r1, r2, #5
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	440a      	add	r2, r1
 80065a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80065aa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	015a      	lsls	r2, r3, #5
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	4413      	add	r3, r2
 80065b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68ba      	ldr	r2, [r7, #8]
 80065bc:	0151      	lsls	r1, r2, #5
 80065be:	68fa      	ldr	r2, [r7, #12]
 80065c0:	440a      	add	r2, r1
 80065c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	f003 030f 	and.w	r3, r3, #15
 80065dc:	2101      	movs	r1, #1
 80065de:	fa01 f303 	lsl.w	r3, r1, r3
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	43db      	mvns	r3, r3
 80065e6:	68f9      	ldr	r1, [r7, #12]
 80065e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065ec:	4013      	ands	r3, r2
 80065ee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065f6:	69da      	ldr	r2, [r3, #28]
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	f003 030f 	and.w	r3, r3, #15
 8006600:	2101      	movs	r1, #1
 8006602:	fa01 f303 	lsl.w	r3, r1, r3
 8006606:	b29b      	uxth	r3, r3
 8006608:	43db      	mvns	r3, r3
 800660a:	68f9      	ldr	r1, [r7, #12]
 800660c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006610:	4013      	ands	r3, r2
 8006612:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	015a      	lsls	r2, r3, #5
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	4413      	add	r3, r2
 800661c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	0159      	lsls	r1, r3, #5
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	440b      	add	r3, r1
 800662a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800662e:	4619      	mov	r1, r3
 8006630:	4b35      	ldr	r3, [pc, #212]	; (8006708 <USB_DeactivateEndpoint+0x1b0>)
 8006632:	4013      	ands	r3, r2
 8006634:	600b      	str	r3, [r1, #0]
 8006636:	e060      	b.n	80066fa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	015a      	lsls	r2, r3, #5
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	4413      	add	r3, r2
 8006640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800664a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800664e:	d11f      	bne.n	8006690 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	015a      	lsls	r2, r3, #5
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	4413      	add	r3, r2
 8006658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68ba      	ldr	r2, [r7, #8]
 8006660:	0151      	lsls	r1, r2, #5
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	440a      	add	r2, r1
 8006666:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800666a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800666e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	015a      	lsls	r2, r3, #5
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	4413      	add	r3, r2
 8006678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68ba      	ldr	r2, [r7, #8]
 8006680:	0151      	lsls	r1, r2, #5
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	440a      	add	r2, r1
 8006686:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800668a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800668e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006696:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	f003 030f 	and.w	r3, r3, #15
 80066a0:	2101      	movs	r1, #1
 80066a2:	fa01 f303 	lsl.w	r3, r1, r3
 80066a6:	041b      	lsls	r3, r3, #16
 80066a8:	43db      	mvns	r3, r3
 80066aa:	68f9      	ldr	r1, [r7, #12]
 80066ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066b0:	4013      	ands	r3, r2
 80066b2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066ba:	69da      	ldr	r2, [r3, #28]
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	f003 030f 	and.w	r3, r3, #15
 80066c4:	2101      	movs	r1, #1
 80066c6:	fa01 f303 	lsl.w	r3, r1, r3
 80066ca:	041b      	lsls	r3, r3, #16
 80066cc:	43db      	mvns	r3, r3
 80066ce:	68f9      	ldr	r1, [r7, #12]
 80066d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066d4:	4013      	ands	r3, r2
 80066d6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	015a      	lsls	r2, r3, #5
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	4413      	add	r3, r2
 80066e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	0159      	lsls	r1, r3, #5
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	440b      	add	r3, r1
 80066ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066f2:	4619      	mov	r1, r3
 80066f4:	4b05      	ldr	r3, [pc, #20]	; (800670c <USB_DeactivateEndpoint+0x1b4>)
 80066f6:	4013      	ands	r3, r2
 80066f8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3714      	adds	r7, #20
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr
 8006708:	ec337800 	.word	0xec337800
 800670c:	eff37800 	.word	0xeff37800

08006710 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b08a      	sub	sp, #40	; 0x28
 8006714:	af02      	add	r7, sp, #8
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	4613      	mov	r3, r2
 800671c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	785b      	ldrb	r3, [r3, #1]
 800672c:	2b01      	cmp	r3, #1
 800672e:	f040 815c 	bne.w	80069ea <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	695b      	ldr	r3, [r3, #20]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d132      	bne.n	80067a0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	015a      	lsls	r2, r3, #5
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	4413      	add	r3, r2
 8006742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006746:	691b      	ldr	r3, [r3, #16]
 8006748:	69ba      	ldr	r2, [r7, #24]
 800674a:	0151      	lsls	r1, r2, #5
 800674c:	69fa      	ldr	r2, [r7, #28]
 800674e:	440a      	add	r2, r1
 8006750:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006754:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006758:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800675c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	015a      	lsls	r2, r3, #5
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	4413      	add	r3, r2
 8006766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	69ba      	ldr	r2, [r7, #24]
 800676e:	0151      	lsls	r1, r2, #5
 8006770:	69fa      	ldr	r2, [r7, #28]
 8006772:	440a      	add	r2, r1
 8006774:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006778:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800677c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	015a      	lsls	r2, r3, #5
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	4413      	add	r3, r2
 8006786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	69ba      	ldr	r2, [r7, #24]
 800678e:	0151      	lsls	r1, r2, #5
 8006790:	69fa      	ldr	r2, [r7, #28]
 8006792:	440a      	add	r2, r1
 8006794:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006798:	0cdb      	lsrs	r3, r3, #19
 800679a:	04db      	lsls	r3, r3, #19
 800679c:	6113      	str	r3, [r2, #16]
 800679e:	e074      	b.n	800688a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	015a      	lsls	r2, r3, #5
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	4413      	add	r3, r2
 80067a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	69ba      	ldr	r2, [r7, #24]
 80067b0:	0151      	lsls	r1, r2, #5
 80067b2:	69fa      	ldr	r2, [r7, #28]
 80067b4:	440a      	add	r2, r1
 80067b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067ba:	0cdb      	lsrs	r3, r3, #19
 80067bc:	04db      	lsls	r3, r3, #19
 80067be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	015a      	lsls	r2, r3, #5
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	4413      	add	r3, r2
 80067c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	69ba      	ldr	r2, [r7, #24]
 80067d0:	0151      	lsls	r1, r2, #5
 80067d2:	69fa      	ldr	r2, [r7, #28]
 80067d4:	440a      	add	r2, r1
 80067d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067da:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80067de:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80067e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	015a      	lsls	r2, r3, #5
 80067e8:	69fb      	ldr	r3, [r7, #28]
 80067ea:	4413      	add	r3, r2
 80067ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067f0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	6959      	ldr	r1, [r3, #20]
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	440b      	add	r3, r1
 80067fc:	1e59      	subs	r1, r3, #1
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	fbb1 f3f3 	udiv	r3, r1, r3
 8006806:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006808:	4b9d      	ldr	r3, [pc, #628]	; (8006a80 <USB_EPStartXfer+0x370>)
 800680a:	400b      	ands	r3, r1
 800680c:	69b9      	ldr	r1, [r7, #24]
 800680e:	0148      	lsls	r0, r1, #5
 8006810:	69f9      	ldr	r1, [r7, #28]
 8006812:	4401      	add	r1, r0
 8006814:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006818:	4313      	orrs	r3, r2
 800681a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800681c:	69bb      	ldr	r3, [r7, #24]
 800681e:	015a      	lsls	r2, r3, #5
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	4413      	add	r3, r2
 8006824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006828:	691a      	ldr	r2, [r3, #16]
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	695b      	ldr	r3, [r3, #20]
 800682e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006832:	69b9      	ldr	r1, [r7, #24]
 8006834:	0148      	lsls	r0, r1, #5
 8006836:	69f9      	ldr	r1, [r7, #28]
 8006838:	4401      	add	r1, r0
 800683a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800683e:	4313      	orrs	r3, r2
 8006840:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	78db      	ldrb	r3, [r3, #3]
 8006846:	2b01      	cmp	r3, #1
 8006848:	d11f      	bne.n	800688a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	015a      	lsls	r2, r3, #5
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	4413      	add	r3, r2
 8006852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006856:	691b      	ldr	r3, [r3, #16]
 8006858:	69ba      	ldr	r2, [r7, #24]
 800685a:	0151      	lsls	r1, r2, #5
 800685c:	69fa      	ldr	r2, [r7, #28]
 800685e:	440a      	add	r2, r1
 8006860:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006864:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006868:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800686a:	69bb      	ldr	r3, [r7, #24]
 800686c:	015a      	lsls	r2, r3, #5
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	4413      	add	r3, r2
 8006872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	69ba      	ldr	r2, [r7, #24]
 800687a:	0151      	lsls	r1, r2, #5
 800687c:	69fa      	ldr	r2, [r7, #28]
 800687e:	440a      	add	r2, r1
 8006880:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006884:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006888:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800688a:	79fb      	ldrb	r3, [r7, #7]
 800688c:	2b01      	cmp	r3, #1
 800688e:	d14b      	bne.n	8006928 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d009      	beq.n	80068ac <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	015a      	lsls	r2, r3, #5
 800689c:	69fb      	ldr	r3, [r7, #28]
 800689e:	4413      	add	r3, r2
 80068a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068a4:	461a      	mov	r2, r3
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	691b      	ldr	r3, [r3, #16]
 80068aa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	78db      	ldrb	r3, [r3, #3]
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d128      	bne.n	8006906 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d110      	bne.n	80068e6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80068c4:	69bb      	ldr	r3, [r7, #24]
 80068c6:	015a      	lsls	r2, r3, #5
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	4413      	add	r3, r2
 80068cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	69ba      	ldr	r2, [r7, #24]
 80068d4:	0151      	lsls	r1, r2, #5
 80068d6:	69fa      	ldr	r2, [r7, #28]
 80068d8:	440a      	add	r2, r1
 80068da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80068e2:	6013      	str	r3, [r2, #0]
 80068e4:	e00f      	b.n	8006906 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	015a      	lsls	r2, r3, #5
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	4413      	add	r3, r2
 80068ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	69ba      	ldr	r2, [r7, #24]
 80068f6:	0151      	lsls	r1, r2, #5
 80068f8:	69fa      	ldr	r2, [r7, #28]
 80068fa:	440a      	add	r2, r1
 80068fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006904:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	015a      	lsls	r2, r3, #5
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	4413      	add	r3, r2
 800690e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	69ba      	ldr	r2, [r7, #24]
 8006916:	0151      	lsls	r1, r2, #5
 8006918:	69fa      	ldr	r2, [r7, #28]
 800691a:	440a      	add	r2, r1
 800691c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006920:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006924:	6013      	str	r3, [r2, #0]
 8006926:	e12f      	b.n	8006b88 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	015a      	lsls	r2, r3, #5
 800692c:	69fb      	ldr	r3, [r7, #28]
 800692e:	4413      	add	r3, r2
 8006930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	69ba      	ldr	r2, [r7, #24]
 8006938:	0151      	lsls	r1, r2, #5
 800693a:	69fa      	ldr	r2, [r7, #28]
 800693c:	440a      	add	r2, r1
 800693e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006942:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006946:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	78db      	ldrb	r3, [r3, #3]
 800694c:	2b01      	cmp	r3, #1
 800694e:	d015      	beq.n	800697c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	695b      	ldr	r3, [r3, #20]
 8006954:	2b00      	cmp	r3, #0
 8006956:	f000 8117 	beq.w	8006b88 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006960:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	f003 030f 	and.w	r3, r3, #15
 800696a:	2101      	movs	r1, #1
 800696c:	fa01 f303 	lsl.w	r3, r1, r3
 8006970:	69f9      	ldr	r1, [r7, #28]
 8006972:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006976:	4313      	orrs	r3, r2
 8006978:	634b      	str	r3, [r1, #52]	; 0x34
 800697a:	e105      	b.n	8006b88 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006988:	2b00      	cmp	r3, #0
 800698a:	d110      	bne.n	80069ae <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800698c:	69bb      	ldr	r3, [r7, #24]
 800698e:	015a      	lsls	r2, r3, #5
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	4413      	add	r3, r2
 8006994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	69ba      	ldr	r2, [r7, #24]
 800699c:	0151      	lsls	r1, r2, #5
 800699e:	69fa      	ldr	r2, [r7, #28]
 80069a0:	440a      	add	r2, r1
 80069a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80069aa:	6013      	str	r3, [r2, #0]
 80069ac:	e00f      	b.n	80069ce <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	015a      	lsls	r2, r3, #5
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	4413      	add	r3, r2
 80069b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	69ba      	ldr	r2, [r7, #24]
 80069be:	0151      	lsls	r1, r2, #5
 80069c0:	69fa      	ldr	r2, [r7, #28]
 80069c2:	440a      	add	r2, r1
 80069c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069cc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	68d9      	ldr	r1, [r3, #12]
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	781a      	ldrb	r2, [r3, #0]
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	695b      	ldr	r3, [r3, #20]
 80069da:	b298      	uxth	r0, r3
 80069dc:	79fb      	ldrb	r3, [r7, #7]
 80069de:	9300      	str	r3, [sp, #0]
 80069e0:	4603      	mov	r3, r0
 80069e2:	68f8      	ldr	r0, [r7, #12]
 80069e4:	f000 fa2b 	bl	8006e3e <USB_WritePacket>
 80069e8:	e0ce      	b.n	8006b88 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	015a      	lsls	r2, r3, #5
 80069ee:	69fb      	ldr	r3, [r7, #28]
 80069f0:	4413      	add	r3, r2
 80069f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069f6:	691b      	ldr	r3, [r3, #16]
 80069f8:	69ba      	ldr	r2, [r7, #24]
 80069fa:	0151      	lsls	r1, r2, #5
 80069fc:	69fa      	ldr	r2, [r7, #28]
 80069fe:	440a      	add	r2, r1
 8006a00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a04:	0cdb      	lsrs	r3, r3, #19
 8006a06:	04db      	lsls	r3, r3, #19
 8006a08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	015a      	lsls	r2, r3, #5
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	4413      	add	r3, r2
 8006a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a16:	691b      	ldr	r3, [r3, #16]
 8006a18:	69ba      	ldr	r2, [r7, #24]
 8006a1a:	0151      	lsls	r1, r2, #5
 8006a1c:	69fa      	ldr	r2, [r7, #28]
 8006a1e:	440a      	add	r2, r1
 8006a20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a24:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006a28:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006a2c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	695b      	ldr	r3, [r3, #20]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d126      	bne.n	8006a84 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	015a      	lsls	r2, r3, #5
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a42:	691a      	ldr	r2, [r3, #16]
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a4c:	69b9      	ldr	r1, [r7, #24]
 8006a4e:	0148      	lsls	r0, r1, #5
 8006a50:	69f9      	ldr	r1, [r7, #28]
 8006a52:	4401      	add	r1, r0
 8006a54:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	015a      	lsls	r2, r3, #5
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	4413      	add	r3, r2
 8006a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	69ba      	ldr	r2, [r7, #24]
 8006a6c:	0151      	lsls	r1, r2, #5
 8006a6e:	69fa      	ldr	r2, [r7, #28]
 8006a70:	440a      	add	r2, r1
 8006a72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a7a:	6113      	str	r3, [r2, #16]
 8006a7c:	e036      	b.n	8006aec <USB_EPStartXfer+0x3dc>
 8006a7e:	bf00      	nop
 8006a80:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	695a      	ldr	r2, [r3, #20]
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	1e5a      	subs	r2, r3, #1
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a98:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	015a      	lsls	r2, r3, #5
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aa6:	691a      	ldr	r2, [r3, #16]
 8006aa8:	8afb      	ldrh	r3, [r7, #22]
 8006aaa:	04d9      	lsls	r1, r3, #19
 8006aac:	4b39      	ldr	r3, [pc, #228]	; (8006b94 <USB_EPStartXfer+0x484>)
 8006aae:	400b      	ands	r3, r1
 8006ab0:	69b9      	ldr	r1, [r7, #24]
 8006ab2:	0148      	lsls	r0, r1, #5
 8006ab4:	69f9      	ldr	r1, [r7, #28]
 8006ab6:	4401      	add	r1, r0
 8006ab8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006abc:	4313      	orrs	r3, r2
 8006abe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006ac0:	69bb      	ldr	r3, [r7, #24]
 8006ac2:	015a      	lsls	r2, r3, #5
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	4413      	add	r3, r2
 8006ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006acc:	691a      	ldr	r2, [r3, #16]
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	8af9      	ldrh	r1, [r7, #22]
 8006ad4:	fb01 f303 	mul.w	r3, r1, r3
 8006ad8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006adc:	69b9      	ldr	r1, [r7, #24]
 8006ade:	0148      	lsls	r0, r1, #5
 8006ae0:	69f9      	ldr	r1, [r7, #28]
 8006ae2:	4401      	add	r1, r0
 8006ae4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006aec:	79fb      	ldrb	r3, [r7, #7]
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d10d      	bne.n	8006b0e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	68db      	ldr	r3, [r3, #12]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d009      	beq.n	8006b0e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	68d9      	ldr	r1, [r3, #12]
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	015a      	lsls	r2, r3, #5
 8006b02:	69fb      	ldr	r3, [r7, #28]
 8006b04:	4413      	add	r3, r2
 8006b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b0a:	460a      	mov	r2, r1
 8006b0c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	78db      	ldrb	r3, [r3, #3]
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d128      	bne.n	8006b68 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d110      	bne.n	8006b48 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	015a      	lsls	r2, r3, #5
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	69ba      	ldr	r2, [r7, #24]
 8006b36:	0151      	lsls	r1, r2, #5
 8006b38:	69fa      	ldr	r2, [r7, #28]
 8006b3a:	440a      	add	r2, r1
 8006b3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006b44:	6013      	str	r3, [r2, #0]
 8006b46:	e00f      	b.n	8006b68 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	015a      	lsls	r2, r3, #5
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	4413      	add	r3, r2
 8006b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	69ba      	ldr	r2, [r7, #24]
 8006b58:	0151      	lsls	r1, r2, #5
 8006b5a:	69fa      	ldr	r2, [r7, #28]
 8006b5c:	440a      	add	r2, r1
 8006b5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b66:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	015a      	lsls	r2, r3, #5
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	4413      	add	r3, r2
 8006b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	69ba      	ldr	r2, [r7, #24]
 8006b78:	0151      	lsls	r1, r2, #5
 8006b7a:	69fa      	ldr	r2, [r7, #28]
 8006b7c:	440a      	add	r2, r1
 8006b7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b82:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006b86:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3720      	adds	r7, #32
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	1ff80000 	.word	0x1ff80000

08006b98 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b087      	sub	sp, #28
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	60f8      	str	r0, [r7, #12]
 8006ba0:	60b9      	str	r1, [r7, #8]
 8006ba2:	4613      	mov	r3, r2
 8006ba4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	785b      	ldrb	r3, [r3, #1]
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	f040 80cd 	bne.w	8006d54 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	695b      	ldr	r3, [r3, #20]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d132      	bne.n	8006c28 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	015a      	lsls	r2, r3, #5
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	4413      	add	r3, r2
 8006bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bce:	691b      	ldr	r3, [r3, #16]
 8006bd0:	693a      	ldr	r2, [r7, #16]
 8006bd2:	0151      	lsls	r1, r2, #5
 8006bd4:	697a      	ldr	r2, [r7, #20]
 8006bd6:	440a      	add	r2, r1
 8006bd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bdc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006be0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006be4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	015a      	lsls	r2, r3, #5
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	4413      	add	r3, r2
 8006bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	693a      	ldr	r2, [r7, #16]
 8006bf6:	0151      	lsls	r1, r2, #5
 8006bf8:	697a      	ldr	r2, [r7, #20]
 8006bfa:	440a      	add	r2, r1
 8006bfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c04:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	015a      	lsls	r2, r3, #5
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	4413      	add	r3, r2
 8006c0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	693a      	ldr	r2, [r7, #16]
 8006c16:	0151      	lsls	r1, r2, #5
 8006c18:	697a      	ldr	r2, [r7, #20]
 8006c1a:	440a      	add	r2, r1
 8006c1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c20:	0cdb      	lsrs	r3, r3, #19
 8006c22:	04db      	lsls	r3, r3, #19
 8006c24:	6113      	str	r3, [r2, #16]
 8006c26:	e04e      	b.n	8006cc6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	015a      	lsls	r2, r3, #5
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	4413      	add	r3, r2
 8006c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c34:	691b      	ldr	r3, [r3, #16]
 8006c36:	693a      	ldr	r2, [r7, #16]
 8006c38:	0151      	lsls	r1, r2, #5
 8006c3a:	697a      	ldr	r2, [r7, #20]
 8006c3c:	440a      	add	r2, r1
 8006c3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c42:	0cdb      	lsrs	r3, r3, #19
 8006c44:	04db      	lsls	r3, r3, #19
 8006c46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	015a      	lsls	r2, r3, #5
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	4413      	add	r3, r2
 8006c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	693a      	ldr	r2, [r7, #16]
 8006c58:	0151      	lsls	r1, r2, #5
 8006c5a:	697a      	ldr	r2, [r7, #20]
 8006c5c:	440a      	add	r2, r1
 8006c5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c62:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c66:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c6a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	695a      	ldr	r2, [r3, #20]
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d903      	bls.n	8006c80 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	689a      	ldr	r2, [r3, #8]
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	015a      	lsls	r2, r3, #5
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	4413      	add	r3, r2
 8006c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c8c:	691b      	ldr	r3, [r3, #16]
 8006c8e:	693a      	ldr	r2, [r7, #16]
 8006c90:	0151      	lsls	r1, r2, #5
 8006c92:	697a      	ldr	r2, [r7, #20]
 8006c94:	440a      	add	r2, r1
 8006c96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	015a      	lsls	r2, r3, #5
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cac:	691a      	ldr	r2, [r3, #16]
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	695b      	ldr	r3, [r3, #20]
 8006cb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cb6:	6939      	ldr	r1, [r7, #16]
 8006cb8:	0148      	lsls	r0, r1, #5
 8006cba:	6979      	ldr	r1, [r7, #20]
 8006cbc:	4401      	add	r1, r0
 8006cbe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006cc6:	79fb      	ldrb	r3, [r7, #7]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d11e      	bne.n	8006d0a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	691b      	ldr	r3, [r3, #16]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d009      	beq.n	8006ce8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	015a      	lsls	r2, r3, #5
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	4413      	add	r3, r2
 8006cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	015a      	lsls	r2, r3, #5
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	4413      	add	r3, r2
 8006cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	693a      	ldr	r2, [r7, #16]
 8006cf8:	0151      	lsls	r1, r2, #5
 8006cfa:	697a      	ldr	r2, [r7, #20]
 8006cfc:	440a      	add	r2, r1
 8006cfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d02:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d06:	6013      	str	r3, [r2, #0]
 8006d08:	e092      	b.n	8006e30 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	015a      	lsls	r2, r3, #5
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	4413      	add	r3, r2
 8006d12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	693a      	ldr	r2, [r7, #16]
 8006d1a:	0151      	lsls	r1, r2, #5
 8006d1c:	697a      	ldr	r2, [r7, #20]
 8006d1e:	440a      	add	r2, r1
 8006d20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d24:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d28:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	695b      	ldr	r3, [r3, #20]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d07e      	beq.n	8006e30 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	f003 030f 	and.w	r3, r3, #15
 8006d42:	2101      	movs	r1, #1
 8006d44:	fa01 f303 	lsl.w	r3, r1, r3
 8006d48:	6979      	ldr	r1, [r7, #20]
 8006d4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	634b      	str	r3, [r1, #52]	; 0x34
 8006d52:	e06d      	b.n	8006e30 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	015a      	lsls	r2, r3, #5
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	4413      	add	r3, r2
 8006d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	693a      	ldr	r2, [r7, #16]
 8006d64:	0151      	lsls	r1, r2, #5
 8006d66:	697a      	ldr	r2, [r7, #20]
 8006d68:	440a      	add	r2, r1
 8006d6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d6e:	0cdb      	lsrs	r3, r3, #19
 8006d70:	04db      	lsls	r3, r3, #19
 8006d72:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	015a      	lsls	r2, r3, #5
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	693a      	ldr	r2, [r7, #16]
 8006d84:	0151      	lsls	r1, r2, #5
 8006d86:	697a      	ldr	r2, [r7, #20]
 8006d88:	440a      	add	r2, r1
 8006d8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d8e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d92:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d96:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	695b      	ldr	r3, [r3, #20]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d003      	beq.n	8006da8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	689a      	ldr	r2, [r3, #8]
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	015a      	lsls	r2, r3, #5
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	4413      	add	r3, r2
 8006db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	693a      	ldr	r2, [r7, #16]
 8006db8:	0151      	lsls	r1, r2, #5
 8006dba:	697a      	ldr	r2, [r7, #20]
 8006dbc:	440a      	add	r2, r1
 8006dbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dc2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006dc6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	015a      	lsls	r2, r3, #5
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	4413      	add	r3, r2
 8006dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dd4:	691a      	ldr	r2, [r3, #16]
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006dde:	6939      	ldr	r1, [r7, #16]
 8006de0:	0148      	lsls	r0, r1, #5
 8006de2:	6979      	ldr	r1, [r7, #20]
 8006de4:	4401      	add	r1, r0
 8006de6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006dea:	4313      	orrs	r3, r2
 8006dec:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006dee:	79fb      	ldrb	r3, [r7, #7]
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d10d      	bne.n	8006e10 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d009      	beq.n	8006e10 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	68d9      	ldr	r1, [r3, #12]
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	015a      	lsls	r2, r3, #5
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	4413      	add	r3, r2
 8006e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e0c:	460a      	mov	r2, r1
 8006e0e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	015a      	lsls	r2, r3, #5
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	4413      	add	r3, r2
 8006e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	693a      	ldr	r2, [r7, #16]
 8006e20:	0151      	lsls	r1, r2, #5
 8006e22:	697a      	ldr	r2, [r7, #20]
 8006e24:	440a      	add	r2, r1
 8006e26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e2a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	371c      	adds	r7, #28
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr

08006e3e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006e3e:	b480      	push	{r7}
 8006e40:	b089      	sub	sp, #36	; 0x24
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	60f8      	str	r0, [r7, #12]
 8006e46:	60b9      	str	r1, [r7, #8]
 8006e48:	4611      	mov	r1, r2
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	71fb      	strb	r3, [r7, #7]
 8006e50:	4613      	mov	r3, r2
 8006e52:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006e5c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d123      	bne.n	8006eac <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006e64:	88bb      	ldrh	r3, [r7, #4]
 8006e66:	3303      	adds	r3, #3
 8006e68:	089b      	lsrs	r3, r3, #2
 8006e6a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	61bb      	str	r3, [r7, #24]
 8006e70:	e018      	b.n	8006ea4 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006e72:	79fb      	ldrb	r3, [r7, #7]
 8006e74:	031a      	lsls	r2, r3, #12
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	4413      	add	r3, r2
 8006e7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e7e:	461a      	mov	r2, r3
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006e86:	69fb      	ldr	r3, [r7, #28]
 8006e88:	3301      	adds	r3, #1
 8006e8a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	3301      	adds	r3, #1
 8006e90:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e92:	69fb      	ldr	r3, [r7, #28]
 8006e94:	3301      	adds	r3, #1
 8006e96:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	61bb      	str	r3, [r7, #24]
 8006ea4:	69ba      	ldr	r2, [r7, #24]
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d3e2      	bcc.n	8006e72 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006eac:	2300      	movs	r3, #0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3724      	adds	r7, #36	; 0x24
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr

08006eba <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006eba:	b480      	push	{r7}
 8006ebc:	b08b      	sub	sp, #44	; 0x2c
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	60f8      	str	r0, [r7, #12]
 8006ec2:	60b9      	str	r1, [r7, #8]
 8006ec4:	4613      	mov	r3, r2
 8006ec6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006ed0:	88fb      	ldrh	r3, [r7, #6]
 8006ed2:	089b      	lsrs	r3, r3, #2
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006ed8:	88fb      	ldrh	r3, [r7, #6]
 8006eda:	f003 0303 	and.w	r3, r3, #3
 8006ede:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	623b      	str	r3, [r7, #32]
 8006ee4:	e014      	b.n	8006f10 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef0:	601a      	str	r2, [r3, #0]
    pDest++;
 8006ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efa:	3301      	adds	r3, #1
 8006efc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f00:	3301      	adds	r3, #1
 8006f02:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f06:	3301      	adds	r3, #1
 8006f08:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006f0a:	6a3b      	ldr	r3, [r7, #32]
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	623b      	str	r3, [r7, #32]
 8006f10:	6a3a      	ldr	r2, [r7, #32]
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d3e6      	bcc.n	8006ee6 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006f18:	8bfb      	ldrh	r3, [r7, #30]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d01e      	beq.n	8006f5c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f28:	461a      	mov	r2, r3
 8006f2a:	f107 0310 	add.w	r3, r7, #16
 8006f2e:	6812      	ldr	r2, [r2, #0]
 8006f30:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006f32:	693a      	ldr	r2, [r7, #16]
 8006f34:	6a3b      	ldr	r3, [r7, #32]
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	00db      	lsls	r3, r3, #3
 8006f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8006f3e:	b2da      	uxtb	r2, r3
 8006f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f42:	701a      	strb	r2, [r3, #0]
      i++;
 8006f44:	6a3b      	ldr	r3, [r7, #32]
 8006f46:	3301      	adds	r3, #1
 8006f48:	623b      	str	r3, [r7, #32]
      pDest++;
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006f50:	8bfb      	ldrh	r3, [r7, #30]
 8006f52:	3b01      	subs	r3, #1
 8006f54:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006f56:	8bfb      	ldrh	r3, [r7, #30]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d1ea      	bne.n	8006f32 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	372c      	adds	r7, #44	; 0x2c
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr

08006f6a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f6a:	b480      	push	{r7}
 8006f6c:	b085      	sub	sp, #20
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
 8006f72:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	785b      	ldrb	r3, [r3, #1]
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d12c      	bne.n	8006fe0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	015a      	lsls	r2, r3, #5
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	db12      	blt.n	8006fbe <USB_EPSetStall+0x54>
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d00f      	beq.n	8006fbe <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	015a      	lsls	r2, r3, #5
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	4413      	add	r3, r2
 8006fa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	68ba      	ldr	r2, [r7, #8]
 8006fae:	0151      	lsls	r1, r2, #5
 8006fb0:	68fa      	ldr	r2, [r7, #12]
 8006fb2:	440a      	add	r2, r1
 8006fb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fb8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006fbc:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	015a      	lsls	r2, r3, #5
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	68ba      	ldr	r2, [r7, #8]
 8006fce:	0151      	lsls	r1, r2, #5
 8006fd0:	68fa      	ldr	r2, [r7, #12]
 8006fd2:	440a      	add	r2, r1
 8006fd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006fdc:	6013      	str	r3, [r2, #0]
 8006fde:	e02b      	b.n	8007038 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	015a      	lsls	r2, r3, #5
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	4413      	add	r3, r2
 8006fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	db12      	blt.n	8007018 <USB_EPSetStall+0xae>
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d00f      	beq.n	8007018 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	015a      	lsls	r2, r3, #5
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	4413      	add	r3, r2
 8007000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	68ba      	ldr	r2, [r7, #8]
 8007008:	0151      	lsls	r1, r2, #5
 800700a:	68fa      	ldr	r2, [r7, #12]
 800700c:	440a      	add	r2, r1
 800700e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007012:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007016:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	015a      	lsls	r2, r3, #5
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	4413      	add	r3, r2
 8007020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	68ba      	ldr	r2, [r7, #8]
 8007028:	0151      	lsls	r1, r2, #5
 800702a:	68fa      	ldr	r2, [r7, #12]
 800702c:	440a      	add	r2, r1
 800702e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007032:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007036:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3714      	adds	r7, #20
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr

08007046 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007046:	b480      	push	{r7}
 8007048:	b085      	sub	sp, #20
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
 800704e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	785b      	ldrb	r3, [r3, #1]
 800705e:	2b01      	cmp	r3, #1
 8007060:	d128      	bne.n	80070b4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	015a      	lsls	r2, r3, #5
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	4413      	add	r3, r2
 800706a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	68ba      	ldr	r2, [r7, #8]
 8007072:	0151      	lsls	r1, r2, #5
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	440a      	add	r2, r1
 8007078:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800707c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007080:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	78db      	ldrb	r3, [r3, #3]
 8007086:	2b03      	cmp	r3, #3
 8007088:	d003      	beq.n	8007092 <USB_EPClearStall+0x4c>
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	78db      	ldrb	r3, [r3, #3]
 800708e:	2b02      	cmp	r3, #2
 8007090:	d138      	bne.n	8007104 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	015a      	lsls	r2, r3, #5
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	4413      	add	r3, r2
 800709a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	68ba      	ldr	r2, [r7, #8]
 80070a2:	0151      	lsls	r1, r2, #5
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	440a      	add	r2, r1
 80070a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070b0:	6013      	str	r3, [r2, #0]
 80070b2:	e027      	b.n	8007104 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	015a      	lsls	r2, r3, #5
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	4413      	add	r3, r2
 80070bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	68ba      	ldr	r2, [r7, #8]
 80070c4:	0151      	lsls	r1, r2, #5
 80070c6:	68fa      	ldr	r2, [r7, #12]
 80070c8:	440a      	add	r2, r1
 80070ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80070d2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	78db      	ldrb	r3, [r3, #3]
 80070d8:	2b03      	cmp	r3, #3
 80070da:	d003      	beq.n	80070e4 <USB_EPClearStall+0x9e>
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	78db      	ldrb	r3, [r3, #3]
 80070e0:	2b02      	cmp	r3, #2
 80070e2:	d10f      	bne.n	8007104 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	015a      	lsls	r2, r3, #5
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	4413      	add	r3, r2
 80070ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	68ba      	ldr	r2, [r7, #8]
 80070f4:	0151      	lsls	r1, r2, #5
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	440a      	add	r2, r1
 80070fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007102:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3714      	adds	r7, #20
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr

08007112 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007112:	b480      	push	{r7}
 8007114:	b085      	sub	sp, #20
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
 800711a:	460b      	mov	r3, r1
 800711c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007130:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007134:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	78fb      	ldrb	r3, [r7, #3]
 8007140:	011b      	lsls	r3, r3, #4
 8007142:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007146:	68f9      	ldr	r1, [r7, #12]
 8007148:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800714c:	4313      	orrs	r3, r2
 800714e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	3714      	adds	r7, #20
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr

0800715e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800715e:	b480      	push	{r7}
 8007160:	b085      	sub	sp, #20
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	68fa      	ldr	r2, [r7, #12]
 8007174:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007178:	f023 0303 	bic.w	r3, r3, #3
 800717c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800718c:	f023 0302 	bic.w	r3, r3, #2
 8007190:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	3714      	adds	r7, #20
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b085      	sub	sp, #20
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80071ba:	f023 0303 	bic.w	r3, r3, #3
 80071be:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071ce:	f043 0302 	orr.w	r3, r3, #2
 80071d2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3714      	adds	r7, #20
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr

080071e2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80071e2:	b480      	push	{r7}
 80071e4:	b085      	sub	sp, #20
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	695b      	ldr	r3, [r3, #20]
 80071ee:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	699b      	ldr	r3, [r3, #24]
 80071f4:	68fa      	ldr	r2, [r7, #12]
 80071f6:	4013      	ands	r3, r2
 80071f8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80071fa:	68fb      	ldr	r3, [r7, #12]
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3714      	adds	r7, #20
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr

08007208 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007208:	b480      	push	{r7}
 800720a:	b085      	sub	sp, #20
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800721a:	699b      	ldr	r3, [r3, #24]
 800721c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007224:	69db      	ldr	r3, [r3, #28]
 8007226:	68ba      	ldr	r2, [r7, #8]
 8007228:	4013      	ands	r3, r2
 800722a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	0c1b      	lsrs	r3, r3, #16
}
 8007230:	4618      	mov	r0, r3
 8007232:	3714      	adds	r7, #20
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800723c:	b480      	push	{r7}
 800723e:	b085      	sub	sp, #20
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800724e:	699b      	ldr	r3, [r3, #24]
 8007250:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007258:	69db      	ldr	r3, [r3, #28]
 800725a:	68ba      	ldr	r2, [r7, #8]
 800725c:	4013      	ands	r3, r2
 800725e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	b29b      	uxth	r3, r3
}
 8007264:	4618      	mov	r0, r3
 8007266:	3714      	adds	r7, #20
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007270:	b480      	push	{r7}
 8007272:	b085      	sub	sp, #20
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	460b      	mov	r3, r1
 800727a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007280:	78fb      	ldrb	r3, [r7, #3]
 8007282:	015a      	lsls	r2, r3, #5
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	4413      	add	r3, r2
 8007288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007296:	695b      	ldr	r3, [r3, #20]
 8007298:	68ba      	ldr	r2, [r7, #8]
 800729a:	4013      	ands	r3, r2
 800729c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800729e:	68bb      	ldr	r3, [r7, #8]
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3714      	adds	r7, #20
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b087      	sub	sp, #28
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	460b      	mov	r3, r1
 80072b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072c2:	691b      	ldr	r3, [r3, #16]
 80072c4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072ce:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80072d0:	78fb      	ldrb	r3, [r7, #3]
 80072d2:	f003 030f 	and.w	r3, r3, #15
 80072d6:	68fa      	ldr	r2, [r7, #12]
 80072d8:	fa22 f303 	lsr.w	r3, r2, r3
 80072dc:	01db      	lsls	r3, r3, #7
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	693a      	ldr	r2, [r7, #16]
 80072e2:	4313      	orrs	r3, r2
 80072e4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80072e6:	78fb      	ldrb	r3, [r7, #3]
 80072e8:	015a      	lsls	r2, r3, #5
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	4413      	add	r3, r2
 80072ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	693a      	ldr	r2, [r7, #16]
 80072f6:	4013      	ands	r3, r2
 80072f8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80072fa:	68bb      	ldr	r3, [r7, #8]
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	371c      	adds	r7, #28
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	695b      	ldr	r3, [r3, #20]
 8007314:	f003 0301 	and.w	r3, r3, #1
}
 8007318:	4618      	mov	r0, r3
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007324:	b480      	push	{r7}
 8007326:	b085      	sub	sp, #20
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	68fa      	ldr	r2, [r7, #12]
 800733a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800733e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007342:	f023 0307 	bic.w	r3, r3, #7
 8007346:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	68fa      	ldr	r2, [r7, #12]
 8007352:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800735a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	3714      	adds	r7, #20
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr
	...

0800736c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800736c:	b480      	push	{r7}
 800736e:	b087      	sub	sp, #28
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	460b      	mov	r3, r1
 8007376:	607a      	str	r2, [r7, #4]
 8007378:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	333c      	adds	r3, #60	; 0x3c
 8007382:	3304      	adds	r3, #4
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	4a26      	ldr	r2, [pc, #152]	; (8007424 <USB_EP0_OutStart+0xb8>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d90a      	bls.n	80073a6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800739c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073a0:	d101      	bne.n	80073a6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80073a2:	2300      	movs	r3, #0
 80073a4:	e037      	b.n	8007416 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073ac:	461a      	mov	r2, r3
 80073ae:	2300      	movs	r3, #0
 80073b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	697a      	ldr	r2, [r7, #20]
 80073bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80073c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	697a      	ldr	r2, [r7, #20]
 80073d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073d4:	f043 0318 	orr.w	r3, r3, #24
 80073d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073e0:	691b      	ldr	r3, [r3, #16]
 80073e2:	697a      	ldr	r2, [r7, #20]
 80073e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073e8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80073ec:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80073ee:	7afb      	ldrb	r3, [r7, #11]
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d10f      	bne.n	8007414 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073fa:	461a      	mov	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	697a      	ldr	r2, [r7, #20]
 800740a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800740e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007412:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	371c      	adds	r7, #28
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop
 8007424:	4f54300a 	.word	0x4f54300a

08007428 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007428:	b480      	push	{r7}
 800742a:	b085      	sub	sp, #20
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007430:	2300      	movs	r3, #0
 8007432:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	3301      	adds	r3, #1
 8007438:	60fb      	str	r3, [r7, #12]
 800743a:	4a13      	ldr	r2, [pc, #76]	; (8007488 <USB_CoreReset+0x60>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d901      	bls.n	8007444 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007440:	2303      	movs	r3, #3
 8007442:	e01a      	b.n	800747a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	691b      	ldr	r3, [r3, #16]
 8007448:	2b00      	cmp	r3, #0
 800744a:	daf3      	bge.n	8007434 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800744c:	2300      	movs	r3, #0
 800744e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	691b      	ldr	r3, [r3, #16]
 8007454:	f043 0201 	orr.w	r2, r3, #1
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	3301      	adds	r3, #1
 8007460:	60fb      	str	r3, [r7, #12]
 8007462:	4a09      	ldr	r2, [pc, #36]	; (8007488 <USB_CoreReset+0x60>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d901      	bls.n	800746c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007468:	2303      	movs	r3, #3
 800746a:	e006      	b.n	800747a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	691b      	ldr	r3, [r3, #16]
 8007470:	f003 0301 	and.w	r3, r3, #1
 8007474:	2b01      	cmp	r3, #1
 8007476:	d0f1      	beq.n	800745c <USB_CoreReset+0x34>

  return HAL_OK;
 8007478:	2300      	movs	r3, #0
}
 800747a:	4618      	mov	r0, r3
 800747c:	3714      	adds	r7, #20
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr
 8007486:	bf00      	nop
 8007488:	00030d40 	.word	0x00030d40

0800748c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	460b      	mov	r3, r1
 8007496:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007498:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800749c:	f002 f960 	bl	8009760 <USBD_static_malloc>
 80074a0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d105      	bne.n	80074b4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80074b0:	2302      	movs	r3, #2
 80074b2:	e066      	b.n	8007582 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	68fa      	ldr	r2, [r7, #12]
 80074b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	7c1b      	ldrb	r3, [r3, #16]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d119      	bne.n	80074f8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80074c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074c8:	2202      	movs	r2, #2
 80074ca:	2181      	movs	r1, #129	; 0x81
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f002 f824 	bl	800951a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2201      	movs	r2, #1
 80074d6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80074d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074dc:	2202      	movs	r2, #2
 80074de:	2101      	movs	r1, #1
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f002 f81a 	bl	800951a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2201      	movs	r2, #1
 80074ea:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2210      	movs	r2, #16
 80074f2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80074f6:	e016      	b.n	8007526 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80074f8:	2340      	movs	r3, #64	; 0x40
 80074fa:	2202      	movs	r2, #2
 80074fc:	2181      	movs	r1, #129	; 0x81
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f002 f80b 	bl	800951a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800750a:	2340      	movs	r3, #64	; 0x40
 800750c:	2202      	movs	r2, #2
 800750e:	2101      	movs	r1, #1
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f002 f802 	bl	800951a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2201      	movs	r2, #1
 800751a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2210      	movs	r2, #16
 8007522:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007526:	2308      	movs	r3, #8
 8007528:	2203      	movs	r2, #3
 800752a:	2182      	movs	r1, #130	; 0x82
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f001 fff4 	bl	800951a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2201      	movs	r2, #1
 8007536:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2200      	movs	r2, #0
 8007548:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2200      	movs	r2, #0
 8007550:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	7c1b      	ldrb	r3, [r3, #16]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d109      	bne.n	8007570 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007562:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007566:	2101      	movs	r1, #1
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f002 f8c5 	bl	80096f8 <USBD_LL_PrepareReceive>
 800756e:	e007      	b.n	8007580 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007576:	2340      	movs	r3, #64	; 0x40
 8007578:	2101      	movs	r1, #1
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f002 f8bc 	bl	80096f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007580:	2300      	movs	r3, #0
}
 8007582:	4618      	mov	r0, r3
 8007584:	3710      	adds	r7, #16
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}

0800758a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800758a:	b580      	push	{r7, lr}
 800758c:	b082      	sub	sp, #8
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
 8007592:	460b      	mov	r3, r1
 8007594:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007596:	2181      	movs	r1, #129	; 0x81
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f001 ffe4 	bl	8009566 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80075a4:	2101      	movs	r1, #1
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f001 ffdd 	bl	8009566 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80075b4:	2182      	movs	r1, #130	; 0x82
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f001 ffd5 	bl	8009566 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d00e      	beq.n	80075f4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075e6:	4618      	mov	r0, r3
 80075e8:	f002 f8c8 	bl	800977c <USBD_static_free>
    pdev->pClassData = NULL;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80075f4:	2300      	movs	r3, #0
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3708      	adds	r7, #8
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
	...

08007600 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b086      	sub	sp, #24
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007610:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007612:	2300      	movs	r3, #0
 8007614:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007616:	2300      	movs	r3, #0
 8007618:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800761a:	2300      	movs	r3, #0
 800761c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d101      	bne.n	8007628 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007624:	2303      	movs	r3, #3
 8007626:	e0af      	b.n	8007788 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007630:	2b00      	cmp	r3, #0
 8007632:	d03f      	beq.n	80076b4 <USBD_CDC_Setup+0xb4>
 8007634:	2b20      	cmp	r3, #32
 8007636:	f040 809f 	bne.w	8007778 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	88db      	ldrh	r3, [r3, #6]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d02e      	beq.n	80076a0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	b25b      	sxtb	r3, r3
 8007648:	2b00      	cmp	r3, #0
 800764a:	da16      	bge.n	800767a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	683a      	ldr	r2, [r7, #0]
 8007656:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007658:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800765a:	683a      	ldr	r2, [r7, #0]
 800765c:	88d2      	ldrh	r2, [r2, #6]
 800765e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	88db      	ldrh	r3, [r3, #6]
 8007664:	2b07      	cmp	r3, #7
 8007666:	bf28      	it	cs
 8007668:	2307      	movcs	r3, #7
 800766a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	89fa      	ldrh	r2, [r7, #14]
 8007670:	4619      	mov	r1, r3
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f001 fb19 	bl	8008caa <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007678:	e085      	b.n	8007786 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	785a      	ldrb	r2, [r3, #1]
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	88db      	ldrh	r3, [r3, #6]
 8007688:	b2da      	uxtb	r2, r3
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007690:	6939      	ldr	r1, [r7, #16]
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	88db      	ldrh	r3, [r3, #6]
 8007696:	461a      	mov	r2, r3
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f001 fb32 	bl	8008d02 <USBD_CtlPrepareRx>
      break;
 800769e:	e072      	b.n	8007786 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	683a      	ldr	r2, [r7, #0]
 80076aa:	7850      	ldrb	r0, [r2, #1]
 80076ac:	2200      	movs	r2, #0
 80076ae:	6839      	ldr	r1, [r7, #0]
 80076b0:	4798      	blx	r3
      break;
 80076b2:	e068      	b.n	8007786 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	785b      	ldrb	r3, [r3, #1]
 80076b8:	2b0b      	cmp	r3, #11
 80076ba:	d852      	bhi.n	8007762 <USBD_CDC_Setup+0x162>
 80076bc:	a201      	add	r2, pc, #4	; (adr r2, 80076c4 <USBD_CDC_Setup+0xc4>)
 80076be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c2:	bf00      	nop
 80076c4:	080076f5 	.word	0x080076f5
 80076c8:	08007771 	.word	0x08007771
 80076cc:	08007763 	.word	0x08007763
 80076d0:	08007763 	.word	0x08007763
 80076d4:	08007763 	.word	0x08007763
 80076d8:	08007763 	.word	0x08007763
 80076dc:	08007763 	.word	0x08007763
 80076e0:	08007763 	.word	0x08007763
 80076e4:	08007763 	.word	0x08007763
 80076e8:	08007763 	.word	0x08007763
 80076ec:	0800771f 	.word	0x0800771f
 80076f0:	08007749 	.word	0x08007749
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076fa:	b2db      	uxtb	r3, r3
 80076fc:	2b03      	cmp	r3, #3
 80076fe:	d107      	bne.n	8007710 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007700:	f107 030a 	add.w	r3, r7, #10
 8007704:	2202      	movs	r2, #2
 8007706:	4619      	mov	r1, r3
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f001 face 	bl	8008caa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800770e:	e032      	b.n	8007776 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007710:	6839      	ldr	r1, [r7, #0]
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f001 fa58 	bl	8008bc8 <USBD_CtlError>
            ret = USBD_FAIL;
 8007718:	2303      	movs	r3, #3
 800771a:	75fb      	strb	r3, [r7, #23]
          break;
 800771c:	e02b      	b.n	8007776 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007724:	b2db      	uxtb	r3, r3
 8007726:	2b03      	cmp	r3, #3
 8007728:	d107      	bne.n	800773a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800772a:	f107 030d 	add.w	r3, r7, #13
 800772e:	2201      	movs	r2, #1
 8007730:	4619      	mov	r1, r3
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f001 fab9 	bl	8008caa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007738:	e01d      	b.n	8007776 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800773a:	6839      	ldr	r1, [r7, #0]
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f001 fa43 	bl	8008bc8 <USBD_CtlError>
            ret = USBD_FAIL;
 8007742:	2303      	movs	r3, #3
 8007744:	75fb      	strb	r3, [r7, #23]
          break;
 8007746:	e016      	b.n	8007776 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800774e:	b2db      	uxtb	r3, r3
 8007750:	2b03      	cmp	r3, #3
 8007752:	d00f      	beq.n	8007774 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8007754:	6839      	ldr	r1, [r7, #0]
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f001 fa36 	bl	8008bc8 <USBD_CtlError>
            ret = USBD_FAIL;
 800775c:	2303      	movs	r3, #3
 800775e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007760:	e008      	b.n	8007774 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007762:	6839      	ldr	r1, [r7, #0]
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f001 fa2f 	bl	8008bc8 <USBD_CtlError>
          ret = USBD_FAIL;
 800776a:	2303      	movs	r3, #3
 800776c:	75fb      	strb	r3, [r7, #23]
          break;
 800776e:	e002      	b.n	8007776 <USBD_CDC_Setup+0x176>
          break;
 8007770:	bf00      	nop
 8007772:	e008      	b.n	8007786 <USBD_CDC_Setup+0x186>
          break;
 8007774:	bf00      	nop
      }
      break;
 8007776:	e006      	b.n	8007786 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8007778:	6839      	ldr	r1, [r7, #0]
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f001 fa24 	bl	8008bc8 <USBD_CtlError>
      ret = USBD_FAIL;
 8007780:	2303      	movs	r3, #3
 8007782:	75fb      	strb	r3, [r7, #23]
      break;
 8007784:	bf00      	nop
  }

  return (uint8_t)ret;
 8007786:	7dfb      	ldrb	r3, [r7, #23]
}
 8007788:	4618      	mov	r0, r3
 800778a:	3718      	adds	r7, #24
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	460b      	mov	r3, r1
 800779a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80077a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d101      	bne.n	80077b2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80077ae:	2303      	movs	r3, #3
 80077b0:	e04f      	b.n	8007852 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077b8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80077ba:	78fa      	ldrb	r2, [r7, #3]
 80077bc:	6879      	ldr	r1, [r7, #4]
 80077be:	4613      	mov	r3, r2
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	4413      	add	r3, r2
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	440b      	add	r3, r1
 80077c8:	3318      	adds	r3, #24
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d029      	beq.n	8007824 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80077d0:	78fa      	ldrb	r2, [r7, #3]
 80077d2:	6879      	ldr	r1, [r7, #4]
 80077d4:	4613      	mov	r3, r2
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	4413      	add	r3, r2
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	440b      	add	r3, r1
 80077de:	3318      	adds	r3, #24
 80077e0:	681a      	ldr	r2, [r3, #0]
 80077e2:	78f9      	ldrb	r1, [r7, #3]
 80077e4:	68f8      	ldr	r0, [r7, #12]
 80077e6:	460b      	mov	r3, r1
 80077e8:	00db      	lsls	r3, r3, #3
 80077ea:	1a5b      	subs	r3, r3, r1
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	4403      	add	r3, r0
 80077f0:	3344      	adds	r3, #68	; 0x44
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	fbb2 f1f3 	udiv	r1, r2, r3
 80077f8:	fb03 f301 	mul.w	r3, r3, r1
 80077fc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d110      	bne.n	8007824 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007802:	78fa      	ldrb	r2, [r7, #3]
 8007804:	6879      	ldr	r1, [r7, #4]
 8007806:	4613      	mov	r3, r2
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	4413      	add	r3, r2
 800780c:	009b      	lsls	r3, r3, #2
 800780e:	440b      	add	r3, r1
 8007810:	3318      	adds	r3, #24
 8007812:	2200      	movs	r2, #0
 8007814:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007816:	78f9      	ldrb	r1, [r7, #3]
 8007818:	2300      	movs	r3, #0
 800781a:	2200      	movs	r2, #0
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f001 ff4a 	bl	80096b6 <USBD_LL_Transmit>
 8007822:	e015      	b.n	8007850 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	2200      	movs	r2, #0
 8007828:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007832:	691b      	ldr	r3, [r3, #16]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d00b      	beq.n	8007850 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800783e:	691b      	ldr	r3, [r3, #16]
 8007840:	68ba      	ldr	r2, [r7, #8]
 8007842:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007846:	68ba      	ldr	r2, [r7, #8]
 8007848:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800784c:	78fa      	ldrb	r2, [r7, #3]
 800784e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007850:	2300      	movs	r3, #0
}
 8007852:	4618      	mov	r0, r3
 8007854:	3710      	adds	r7, #16
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}

0800785a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800785a:	b580      	push	{r7, lr}
 800785c:	b084      	sub	sp, #16
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
 8007862:	460b      	mov	r3, r1
 8007864:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800786c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007874:	2b00      	cmp	r3, #0
 8007876:	d101      	bne.n	800787c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007878:	2303      	movs	r3, #3
 800787a:	e015      	b.n	80078a8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800787c:	78fb      	ldrb	r3, [r7, #3]
 800787e:	4619      	mov	r1, r3
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f001 ff5a 	bl	800973a <USBD_LL_GetRxDataSize>
 8007886:	4602      	mov	r2, r0
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007894:	68db      	ldr	r3, [r3, #12]
 8007896:	68fa      	ldr	r2, [r7, #12]
 8007898:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800789c:	68fa      	ldr	r2, [r7, #12]
 800789e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80078a2:	4611      	mov	r1, r2
 80078a4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3710      	adds	r7, #16
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078be:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d101      	bne.n	80078ca <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80078c6:	2303      	movs	r3, #3
 80078c8:	e01b      	b.n	8007902 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d015      	beq.n	8007900 <USBD_CDC_EP0_RxReady+0x50>
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80078da:	2bff      	cmp	r3, #255	; 0xff
 80078dc:	d010      	beq.n	8007900 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	68fa      	ldr	r2, [r7, #12]
 80078e8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80078ec:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80078ee:	68fa      	ldr	r2, [r7, #12]
 80078f0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80078f4:	b292      	uxth	r2, r2
 80078f6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	22ff      	movs	r2, #255	; 0xff
 80078fc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	3710      	adds	r7, #16
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
	...

0800790c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800790c:	b480      	push	{r7}
 800790e:	b083      	sub	sp, #12
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2243      	movs	r2, #67	; 0x43
 8007918:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800791a:	4b03      	ldr	r3, [pc, #12]	; (8007928 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800791c:	4618      	mov	r0, r3
 800791e:	370c      	adds	r7, #12
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr
 8007928:	20000094 	.word	0x20000094

0800792c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2243      	movs	r2, #67	; 0x43
 8007938:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800793a:	4b03      	ldr	r3, [pc, #12]	; (8007948 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800793c:	4618      	mov	r0, r3
 800793e:	370c      	adds	r7, #12
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr
 8007948:	20000050 	.word	0x20000050

0800794c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800794c:	b480      	push	{r7}
 800794e:	b083      	sub	sp, #12
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2243      	movs	r2, #67	; 0x43
 8007958:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800795a:	4b03      	ldr	r3, [pc, #12]	; (8007968 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800795c:	4618      	mov	r0, r3
 800795e:	370c      	adds	r7, #12
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr
 8007968:	200000d8 	.word	0x200000d8

0800796c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800796c:	b480      	push	{r7}
 800796e:	b083      	sub	sp, #12
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	220a      	movs	r2, #10
 8007978:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800797a:	4b03      	ldr	r3, [pc, #12]	; (8007988 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800797c:	4618      	mov	r0, r3
 800797e:	370c      	adds	r7, #12
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr
 8007988:	2000000c 	.word	0x2000000c

0800798c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d101      	bne.n	80079a0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800799c:	2303      	movs	r3, #3
 800799e:	e004      	b.n	80079aa <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	683a      	ldr	r2, [r7, #0]
 80079a4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	370c      	adds	r7, #12
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr

080079b6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80079b6:	b480      	push	{r7}
 80079b8:	b087      	sub	sp, #28
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	60f8      	str	r0, [r7, #12]
 80079be:	60b9      	str	r1, [r7, #8]
 80079c0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079c8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d101      	bne.n	80079d4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80079d0:	2303      	movs	r3, #3
 80079d2:	e008      	b.n	80079e6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	68ba      	ldr	r2, [r7, #8]
 80079d8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80079e4:	2300      	movs	r3, #0
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	371c      	adds	r7, #28
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr

080079f2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80079f2:	b480      	push	{r7}
 80079f4:	b085      	sub	sp, #20
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]
 80079fa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a02:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d101      	bne.n	8007a0e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8007a0a:	2303      	movs	r3, #3
 8007a0c:	e004      	b.n	8007a18 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	683a      	ldr	r2, [r7, #0]
 8007a12:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007a16:	2300      	movs	r3, #0
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3714      	adds	r7, #20
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a32:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007a34:	2301      	movs	r3, #1
 8007a36:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d101      	bne.n	8007a46 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007a42:	2303      	movs	r3, #3
 8007a44:	e01a      	b.n	8007a7c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d114      	bne.n	8007a7a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007a6e:	2181      	movs	r1, #129	; 0x81
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f001 fe20 	bl	80096b6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007a76:	2300      	movs	r3, #0
 8007a78:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3710      	adds	r7, #16
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a92:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d101      	bne.n	8007aa2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007a9e:	2303      	movs	r3, #3
 8007aa0:	e016      	b.n	8007ad0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	7c1b      	ldrb	r3, [r3, #16]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d109      	bne.n	8007abe <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ab0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ab4:	2101      	movs	r1, #1
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f001 fe1e 	bl	80096f8 <USBD_LL_PrepareReceive>
 8007abc:	e007      	b.n	8007ace <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ac4:	2340      	movs	r3, #64	; 0x40
 8007ac6:	2101      	movs	r1, #1
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f001 fe15 	bl	80096f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007ace:	2300      	movs	r3, #0
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3710      	adds	r7, #16
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b086      	sub	sp, #24
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	4613      	mov	r3, r2
 8007ae4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d101      	bne.n	8007af0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007aec:	2303      	movs	r3, #3
 8007aee:	e01f      	b.n	8007b30 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2200      	movs	r2, #0
 8007af4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2200      	movs	r2, #0
 8007afc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2200      	movs	r2, #0
 8007b04:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d003      	beq.n	8007b16 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	68ba      	ldr	r2, [r7, #8]
 8007b12:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2201      	movs	r2, #1
 8007b1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	79fa      	ldrb	r2, [r7, #7]
 8007b22:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007b24:	68f8      	ldr	r0, [r7, #12]
 8007b26:	f001 fc91 	bl	800944c <USBD_LL_Init>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007b2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3718      	adds	r7, #24
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b42:	2300      	movs	r3, #0
 8007b44:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d101      	bne.n	8007b50 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007b4c:	2303      	movs	r3, #3
 8007b4e:	e016      	b.n	8007b7e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	683a      	ldr	r2, [r7, #0]
 8007b54:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d00b      	beq.n	8007b7c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b6c:	f107 020e 	add.w	r2, r7, #14
 8007b70:	4610      	mov	r0, r2
 8007b72:	4798      	blx	r3
 8007b74:	4602      	mov	r2, r0
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007b7c:	2300      	movs	r3, #0
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3710      	adds	r7, #16
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}

08007b86 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007b86:	b580      	push	{r7, lr}
 8007b88:	b082      	sub	sp, #8
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f001 fca8 	bl	80094e4 <USBD_LL_Start>
 8007b94:	4603      	mov	r3, r0
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3708      	adds	r7, #8
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}

08007b9e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007b9e:	b480      	push	{r7}
 8007ba0:	b083      	sub	sp, #12
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007ba6:	2300      	movs	r3, #0
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	370c      	adds	r7, #12
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr

08007bb4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d009      	beq.n	8007be2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	78fa      	ldrb	r2, [r7, #3]
 8007bd8:	4611      	mov	r1, r2
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	4798      	blx	r3
 8007bde:	4603      	mov	r3, r0
 8007be0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3710      	adds	r7, #16
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b082      	sub	sp, #8
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d007      	beq.n	8007c12 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	78fa      	ldrb	r2, [r7, #3]
 8007c0c:	4611      	mov	r1, r2
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	4798      	blx	r3
  }

  return USBD_OK;
 8007c12:	2300      	movs	r3, #0
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3708      	adds	r7, #8
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c2c:	6839      	ldr	r1, [r7, #0]
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f000 ff90 	bl	8008b54 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2201      	movs	r2, #1
 8007c38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007c42:	461a      	mov	r2, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007c50:	f003 031f 	and.w	r3, r3, #31
 8007c54:	2b02      	cmp	r3, #2
 8007c56:	d01a      	beq.n	8007c8e <USBD_LL_SetupStage+0x72>
 8007c58:	2b02      	cmp	r3, #2
 8007c5a:	d822      	bhi.n	8007ca2 <USBD_LL_SetupStage+0x86>
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d002      	beq.n	8007c66 <USBD_LL_SetupStage+0x4a>
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d00a      	beq.n	8007c7a <USBD_LL_SetupStage+0x5e>
 8007c64:	e01d      	b.n	8007ca2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 fa62 	bl	8008138 <USBD_StdDevReq>
 8007c74:	4603      	mov	r3, r0
 8007c76:	73fb      	strb	r3, [r7, #15]
      break;
 8007c78:	e020      	b.n	8007cbc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c80:	4619      	mov	r1, r3
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 fac6 	bl	8008214 <USBD_StdItfReq>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	73fb      	strb	r3, [r7, #15]
      break;
 8007c8c:	e016      	b.n	8007cbc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c94:	4619      	mov	r1, r3
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 fb05 	bl	80082a6 <USBD_StdEPReq>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	73fb      	strb	r3, [r7, #15]
      break;
 8007ca0:	e00c      	b.n	8007cbc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007ca8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	4619      	mov	r1, r3
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f001 fc77 	bl	80095a4 <USBD_LL_StallEP>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	73fb      	strb	r3, [r7, #15]
      break;
 8007cba:	bf00      	nop
  }

  return ret;
 8007cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}

08007cc6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b086      	sub	sp, #24
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	60f8      	str	r0, [r7, #12]
 8007cce:	460b      	mov	r3, r1
 8007cd0:	607a      	str	r2, [r7, #4]
 8007cd2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007cd4:	7afb      	ldrb	r3, [r7, #11]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d138      	bne.n	8007d4c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007ce0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007ce8:	2b03      	cmp	r3, #3
 8007cea:	d14a      	bne.n	8007d82 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	689a      	ldr	r2, [r3, #8]
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	68db      	ldr	r3, [r3, #12]
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d913      	bls.n	8007d20 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	689a      	ldr	r2, [r3, #8]
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	1ad2      	subs	r2, r2, r3
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	68da      	ldr	r2, [r3, #12]
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	bf28      	it	cs
 8007d12:	4613      	movcs	r3, r2
 8007d14:	461a      	mov	r2, r3
 8007d16:	6879      	ldr	r1, [r7, #4]
 8007d18:	68f8      	ldr	r0, [r7, #12]
 8007d1a:	f001 f80f 	bl	8008d3c <USBD_CtlContinueRx>
 8007d1e:	e030      	b.n	8007d82 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	2b03      	cmp	r3, #3
 8007d2a:	d10b      	bne.n	8007d44 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d32:	691b      	ldr	r3, [r3, #16]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d005      	beq.n	8007d44 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	68f8      	ldr	r0, [r7, #12]
 8007d42:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007d44:	68f8      	ldr	r0, [r7, #12]
 8007d46:	f001 f80a 	bl	8008d5e <USBD_CtlSendStatus>
 8007d4a:	e01a      	b.n	8007d82 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	2b03      	cmp	r3, #3
 8007d56:	d114      	bne.n	8007d82 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d5e:	699b      	ldr	r3, [r3, #24]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d00e      	beq.n	8007d82 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d6a:	699b      	ldr	r3, [r3, #24]
 8007d6c:	7afa      	ldrb	r2, [r7, #11]
 8007d6e:	4611      	mov	r1, r2
 8007d70:	68f8      	ldr	r0, [r7, #12]
 8007d72:	4798      	blx	r3
 8007d74:	4603      	mov	r3, r0
 8007d76:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007d78:	7dfb      	ldrb	r3, [r7, #23]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d001      	beq.n	8007d82 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007d7e:	7dfb      	ldrb	r3, [r7, #23]
 8007d80:	e000      	b.n	8007d84 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007d82:	2300      	movs	r3, #0
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3718      	adds	r7, #24
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b086      	sub	sp, #24
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	60f8      	str	r0, [r7, #12]
 8007d94:	460b      	mov	r3, r1
 8007d96:	607a      	str	r2, [r7, #4]
 8007d98:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007d9a:	7afb      	ldrb	r3, [r7, #11]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d16b      	bne.n	8007e78 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	3314      	adds	r3, #20
 8007da4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007dac:	2b02      	cmp	r3, #2
 8007dae:	d156      	bne.n	8007e5e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	689a      	ldr	r2, [r3, #8]
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d914      	bls.n	8007de6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	689a      	ldr	r2, [r3, #8]
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	68db      	ldr	r3, [r3, #12]
 8007dc4:	1ad2      	subs	r2, r2, r3
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	461a      	mov	r2, r3
 8007dd0:	6879      	ldr	r1, [r7, #4]
 8007dd2:	68f8      	ldr	r0, [r7, #12]
 8007dd4:	f000 ff84 	bl	8008ce0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007dd8:	2300      	movs	r3, #0
 8007dda:	2200      	movs	r2, #0
 8007ddc:	2100      	movs	r1, #0
 8007dde:	68f8      	ldr	r0, [r7, #12]
 8007de0:	f001 fc8a 	bl	80096f8 <USBD_LL_PrepareReceive>
 8007de4:	e03b      	b.n	8007e5e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	68da      	ldr	r2, [r3, #12]
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d11c      	bne.n	8007e2c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	685a      	ldr	r2, [r3, #4]
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d316      	bcc.n	8007e2c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	685a      	ldr	r2, [r3, #4]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d20f      	bcs.n	8007e2c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	2100      	movs	r1, #0
 8007e10:	68f8      	ldr	r0, [r7, #12]
 8007e12:	f000 ff65 	bl	8008ce0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e1e:	2300      	movs	r3, #0
 8007e20:	2200      	movs	r2, #0
 8007e22:	2100      	movs	r1, #0
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	f001 fc67 	bl	80096f8 <USBD_LL_PrepareReceive>
 8007e2a:	e018      	b.n	8007e5e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	2b03      	cmp	r3, #3
 8007e36:	d10b      	bne.n	8007e50 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d005      	beq.n	8007e50 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e4a:	68db      	ldr	r3, [r3, #12]
 8007e4c:	68f8      	ldr	r0, [r7, #12]
 8007e4e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e50:	2180      	movs	r1, #128	; 0x80
 8007e52:	68f8      	ldr	r0, [r7, #12]
 8007e54:	f001 fba6 	bl	80095a4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007e58:	68f8      	ldr	r0, [r7, #12]
 8007e5a:	f000 ff93 	bl	8008d84 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d122      	bne.n	8007eae <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007e68:	68f8      	ldr	r0, [r7, #12]
 8007e6a:	f7ff fe98 	bl	8007b9e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2200      	movs	r2, #0
 8007e72:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007e76:	e01a      	b.n	8007eae <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	2b03      	cmp	r3, #3
 8007e82:	d114      	bne.n	8007eae <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e8a:	695b      	ldr	r3, [r3, #20]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d00e      	beq.n	8007eae <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e96:	695b      	ldr	r3, [r3, #20]
 8007e98:	7afa      	ldrb	r2, [r7, #11]
 8007e9a:	4611      	mov	r1, r2
 8007e9c:	68f8      	ldr	r0, [r7, #12]
 8007e9e:	4798      	blx	r3
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007ea4:	7dfb      	ldrb	r3, [r7, #23]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d001      	beq.n	8007eae <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007eaa:	7dfb      	ldrb	r3, [r7, #23]
 8007eac:	e000      	b.n	8007eb0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007eae:	2300      	movs	r3, #0
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3718      	adds	r7, #24
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b082      	sub	sp, #8
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d101      	bne.n	8007eec <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007ee8:	2303      	movs	r3, #3
 8007eea:	e02f      	b.n	8007f4c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d00f      	beq.n	8007f16 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d009      	beq.n	8007f16 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	6852      	ldr	r2, [r2, #4]
 8007f0e:	b2d2      	uxtb	r2, r2
 8007f10:	4611      	mov	r1, r2
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f16:	2340      	movs	r3, #64	; 0x40
 8007f18:	2200      	movs	r2, #0
 8007f1a:	2100      	movs	r1, #0
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f001 fafc 	bl	800951a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2201      	movs	r2, #1
 8007f26:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2240      	movs	r2, #64	; 0x40
 8007f2e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f32:	2340      	movs	r3, #64	; 0x40
 8007f34:	2200      	movs	r2, #0
 8007f36:	2180      	movs	r1, #128	; 0x80
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f001 faee 	bl	800951a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2201      	movs	r2, #1
 8007f42:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2240      	movs	r2, #64	; 0x40
 8007f48:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007f4a:	2300      	movs	r3, #0
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3708      	adds	r7, #8
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	78fa      	ldrb	r2, [r7, #3]
 8007f64:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007f66:	2300      	movs	r3, #0
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	370c      	adds	r7, #12
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f82:	b2da      	uxtb	r2, r3
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2204      	movs	r2, #4
 8007f8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007f92:	2300      	movs	r3, #0
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	370c      	adds	r7, #12
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	2b04      	cmp	r3, #4
 8007fb2:	d106      	bne.n	8007fc2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007fba:	b2da      	uxtb	r2, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007fc2:	2300      	movs	r3, #0
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	370c      	adds	r7, #12
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr

08007fd0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d101      	bne.n	8007fe6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007fe2:	2303      	movs	r3, #3
 8007fe4:	e012      	b.n	800800c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	2b03      	cmp	r3, #3
 8007ff0:	d10b      	bne.n	800800a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ff8:	69db      	ldr	r3, [r3, #28]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d005      	beq.n	800800a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008004:	69db      	ldr	r3, [r3, #28]
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800800a:	2300      	movs	r3, #0
}
 800800c:	4618      	mov	r0, r3
 800800e:	3708      	adds	r7, #8
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b082      	sub	sp, #8
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	460b      	mov	r3, r1
 800801e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008026:	2b00      	cmp	r3, #0
 8008028:	d101      	bne.n	800802e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800802a:	2303      	movs	r3, #3
 800802c:	e014      	b.n	8008058 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008034:	b2db      	uxtb	r3, r3
 8008036:	2b03      	cmp	r3, #3
 8008038:	d10d      	bne.n	8008056 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008040:	6a1b      	ldr	r3, [r3, #32]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d007      	beq.n	8008056 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800804c:	6a1b      	ldr	r3, [r3, #32]
 800804e:	78fa      	ldrb	r2, [r7, #3]
 8008050:	4611      	mov	r1, r2
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008056:	2300      	movs	r3, #0
}
 8008058:	4618      	mov	r0, r3
 800805a:	3708      	adds	r7, #8
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b082      	sub	sp, #8
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	460b      	mov	r3, r1
 800806a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008072:	2b00      	cmp	r3, #0
 8008074:	d101      	bne.n	800807a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008076:	2303      	movs	r3, #3
 8008078:	e014      	b.n	80080a4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008080:	b2db      	uxtb	r3, r3
 8008082:	2b03      	cmp	r3, #3
 8008084:	d10d      	bne.n	80080a2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800808c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800808e:	2b00      	cmp	r3, #0
 8008090:	d007      	beq.n	80080a2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809a:	78fa      	ldrb	r2, [r7, #3]
 800809c:	4611      	mov	r1, r2
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80080a2:	2300      	movs	r3, #0
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3708      	adds	r7, #8
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}

080080ac <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80080b4:	2300      	movs	r3, #0
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	370c      	adds	r7, #12
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr

080080c2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80080c2:	b580      	push	{r7, lr}
 80080c4:	b082      	sub	sp, #8
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2201      	movs	r2, #1
 80080ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d009      	beq.n	80080f0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	6852      	ldr	r2, [r2, #4]
 80080e8:	b2d2      	uxtb	r2, r2
 80080ea:	4611      	mov	r1, r2
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	4798      	blx	r3
  }

  return USBD_OK;
 80080f0:	2300      	movs	r3, #0
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3708      	adds	r7, #8
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}

080080fa <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80080fa:	b480      	push	{r7}
 80080fc:	b087      	sub	sp, #28
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	3301      	adds	r3, #1
 8008110:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008118:	8a3b      	ldrh	r3, [r7, #16]
 800811a:	021b      	lsls	r3, r3, #8
 800811c:	b21a      	sxth	r2, r3
 800811e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008122:	4313      	orrs	r3, r2
 8008124:	b21b      	sxth	r3, r3
 8008126:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008128:	89fb      	ldrh	r3, [r7, #14]
}
 800812a:	4618      	mov	r0, r3
 800812c:	371c      	adds	r7, #28
 800812e:	46bd      	mov	sp, r7
 8008130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008134:	4770      	bx	lr
	...

08008138 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008142:	2300      	movs	r3, #0
 8008144:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800814e:	2b40      	cmp	r3, #64	; 0x40
 8008150:	d005      	beq.n	800815e <USBD_StdDevReq+0x26>
 8008152:	2b40      	cmp	r3, #64	; 0x40
 8008154:	d853      	bhi.n	80081fe <USBD_StdDevReq+0xc6>
 8008156:	2b00      	cmp	r3, #0
 8008158:	d00b      	beq.n	8008172 <USBD_StdDevReq+0x3a>
 800815a:	2b20      	cmp	r3, #32
 800815c:	d14f      	bne.n	80081fe <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	6839      	ldr	r1, [r7, #0]
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	4798      	blx	r3
 800816c:	4603      	mov	r3, r0
 800816e:	73fb      	strb	r3, [r7, #15]
      break;
 8008170:	e04a      	b.n	8008208 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	785b      	ldrb	r3, [r3, #1]
 8008176:	2b09      	cmp	r3, #9
 8008178:	d83b      	bhi.n	80081f2 <USBD_StdDevReq+0xba>
 800817a:	a201      	add	r2, pc, #4	; (adr r2, 8008180 <USBD_StdDevReq+0x48>)
 800817c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008180:	080081d5 	.word	0x080081d5
 8008184:	080081e9 	.word	0x080081e9
 8008188:	080081f3 	.word	0x080081f3
 800818c:	080081df 	.word	0x080081df
 8008190:	080081f3 	.word	0x080081f3
 8008194:	080081b3 	.word	0x080081b3
 8008198:	080081a9 	.word	0x080081a9
 800819c:	080081f3 	.word	0x080081f3
 80081a0:	080081cb 	.word	0x080081cb
 80081a4:	080081bd 	.word	0x080081bd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80081a8:	6839      	ldr	r1, [r7, #0]
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 f9de 	bl	800856c <USBD_GetDescriptor>
          break;
 80081b0:	e024      	b.n	80081fc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80081b2:	6839      	ldr	r1, [r7, #0]
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 fb43 	bl	8008840 <USBD_SetAddress>
          break;
 80081ba:	e01f      	b.n	80081fc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80081bc:	6839      	ldr	r1, [r7, #0]
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 fb82 	bl	80088c8 <USBD_SetConfig>
 80081c4:	4603      	mov	r3, r0
 80081c6:	73fb      	strb	r3, [r7, #15]
          break;
 80081c8:	e018      	b.n	80081fc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80081ca:	6839      	ldr	r1, [r7, #0]
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 fc21 	bl	8008a14 <USBD_GetConfig>
          break;
 80081d2:	e013      	b.n	80081fc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80081d4:	6839      	ldr	r1, [r7, #0]
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 fc52 	bl	8008a80 <USBD_GetStatus>
          break;
 80081dc:	e00e      	b.n	80081fc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80081de:	6839      	ldr	r1, [r7, #0]
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f000 fc81 	bl	8008ae8 <USBD_SetFeature>
          break;
 80081e6:	e009      	b.n	80081fc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80081e8:	6839      	ldr	r1, [r7, #0]
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 fc90 	bl	8008b10 <USBD_ClrFeature>
          break;
 80081f0:	e004      	b.n	80081fc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80081f2:	6839      	ldr	r1, [r7, #0]
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 fce7 	bl	8008bc8 <USBD_CtlError>
          break;
 80081fa:	bf00      	nop
      }
      break;
 80081fc:	e004      	b.n	8008208 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80081fe:	6839      	ldr	r1, [r7, #0]
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 fce1 	bl	8008bc8 <USBD_CtlError>
      break;
 8008206:	bf00      	nop
  }

  return ret;
 8008208:	7bfb      	ldrb	r3, [r7, #15]
}
 800820a:	4618      	mov	r0, r3
 800820c:	3710      	adds	r7, #16
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop

08008214 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800821e:	2300      	movs	r3, #0
 8008220:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	781b      	ldrb	r3, [r3, #0]
 8008226:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800822a:	2b40      	cmp	r3, #64	; 0x40
 800822c:	d005      	beq.n	800823a <USBD_StdItfReq+0x26>
 800822e:	2b40      	cmp	r3, #64	; 0x40
 8008230:	d82f      	bhi.n	8008292 <USBD_StdItfReq+0x7e>
 8008232:	2b00      	cmp	r3, #0
 8008234:	d001      	beq.n	800823a <USBD_StdItfReq+0x26>
 8008236:	2b20      	cmp	r3, #32
 8008238:	d12b      	bne.n	8008292 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008240:	b2db      	uxtb	r3, r3
 8008242:	3b01      	subs	r3, #1
 8008244:	2b02      	cmp	r3, #2
 8008246:	d81d      	bhi.n	8008284 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	889b      	ldrh	r3, [r3, #4]
 800824c:	b2db      	uxtb	r3, r3
 800824e:	2b01      	cmp	r3, #1
 8008250:	d813      	bhi.n	800827a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	6839      	ldr	r1, [r7, #0]
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	4798      	blx	r3
 8008260:	4603      	mov	r3, r0
 8008262:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	88db      	ldrh	r3, [r3, #6]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d110      	bne.n	800828e <USBD_StdItfReq+0x7a>
 800826c:	7bfb      	ldrb	r3, [r7, #15]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d10d      	bne.n	800828e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 fd73 	bl	8008d5e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008278:	e009      	b.n	800828e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800827a:	6839      	ldr	r1, [r7, #0]
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f000 fca3 	bl	8008bc8 <USBD_CtlError>
          break;
 8008282:	e004      	b.n	800828e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008284:	6839      	ldr	r1, [r7, #0]
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 fc9e 	bl	8008bc8 <USBD_CtlError>
          break;
 800828c:	e000      	b.n	8008290 <USBD_StdItfReq+0x7c>
          break;
 800828e:	bf00      	nop
      }
      break;
 8008290:	e004      	b.n	800829c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008292:	6839      	ldr	r1, [r7, #0]
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 fc97 	bl	8008bc8 <USBD_CtlError>
      break;
 800829a:	bf00      	nop
  }

  return ret;
 800829c:	7bfb      	ldrb	r3, [r7, #15]
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3710      	adds	r7, #16
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}

080082a6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082a6:	b580      	push	{r7, lr}
 80082a8:	b084      	sub	sp, #16
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
 80082ae:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80082b0:	2300      	movs	r3, #0
 80082b2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	889b      	ldrh	r3, [r3, #4]
 80082b8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082c2:	2b40      	cmp	r3, #64	; 0x40
 80082c4:	d007      	beq.n	80082d6 <USBD_StdEPReq+0x30>
 80082c6:	2b40      	cmp	r3, #64	; 0x40
 80082c8:	f200 8145 	bhi.w	8008556 <USBD_StdEPReq+0x2b0>
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d00c      	beq.n	80082ea <USBD_StdEPReq+0x44>
 80082d0:	2b20      	cmp	r3, #32
 80082d2:	f040 8140 	bne.w	8008556 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082dc:	689b      	ldr	r3, [r3, #8]
 80082de:	6839      	ldr	r1, [r7, #0]
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	4798      	blx	r3
 80082e4:	4603      	mov	r3, r0
 80082e6:	73fb      	strb	r3, [r7, #15]
      break;
 80082e8:	e13a      	b.n	8008560 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	785b      	ldrb	r3, [r3, #1]
 80082ee:	2b03      	cmp	r3, #3
 80082f0:	d007      	beq.n	8008302 <USBD_StdEPReq+0x5c>
 80082f2:	2b03      	cmp	r3, #3
 80082f4:	f300 8129 	bgt.w	800854a <USBD_StdEPReq+0x2a4>
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d07f      	beq.n	80083fc <USBD_StdEPReq+0x156>
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d03c      	beq.n	800837a <USBD_StdEPReq+0xd4>
 8008300:	e123      	b.n	800854a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008308:	b2db      	uxtb	r3, r3
 800830a:	2b02      	cmp	r3, #2
 800830c:	d002      	beq.n	8008314 <USBD_StdEPReq+0x6e>
 800830e:	2b03      	cmp	r3, #3
 8008310:	d016      	beq.n	8008340 <USBD_StdEPReq+0x9a>
 8008312:	e02c      	b.n	800836e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008314:	7bbb      	ldrb	r3, [r7, #14]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d00d      	beq.n	8008336 <USBD_StdEPReq+0x90>
 800831a:	7bbb      	ldrb	r3, [r7, #14]
 800831c:	2b80      	cmp	r3, #128	; 0x80
 800831e:	d00a      	beq.n	8008336 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008320:	7bbb      	ldrb	r3, [r7, #14]
 8008322:	4619      	mov	r1, r3
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f001 f93d 	bl	80095a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800832a:	2180      	movs	r1, #128	; 0x80
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f001 f939 	bl	80095a4 <USBD_LL_StallEP>
 8008332:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008334:	e020      	b.n	8008378 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008336:	6839      	ldr	r1, [r7, #0]
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 fc45 	bl	8008bc8 <USBD_CtlError>
              break;
 800833e:	e01b      	b.n	8008378 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	885b      	ldrh	r3, [r3, #2]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d10e      	bne.n	8008366 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008348:	7bbb      	ldrb	r3, [r7, #14]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d00b      	beq.n	8008366 <USBD_StdEPReq+0xc0>
 800834e:	7bbb      	ldrb	r3, [r7, #14]
 8008350:	2b80      	cmp	r3, #128	; 0x80
 8008352:	d008      	beq.n	8008366 <USBD_StdEPReq+0xc0>
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	88db      	ldrh	r3, [r3, #6]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d104      	bne.n	8008366 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800835c:	7bbb      	ldrb	r3, [r7, #14]
 800835e:	4619      	mov	r1, r3
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f001 f91f 	bl	80095a4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 fcf9 	bl	8008d5e <USBD_CtlSendStatus>

              break;
 800836c:	e004      	b.n	8008378 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800836e:	6839      	ldr	r1, [r7, #0]
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f000 fc29 	bl	8008bc8 <USBD_CtlError>
              break;
 8008376:	bf00      	nop
          }
          break;
 8008378:	e0ec      	b.n	8008554 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008380:	b2db      	uxtb	r3, r3
 8008382:	2b02      	cmp	r3, #2
 8008384:	d002      	beq.n	800838c <USBD_StdEPReq+0xe6>
 8008386:	2b03      	cmp	r3, #3
 8008388:	d016      	beq.n	80083b8 <USBD_StdEPReq+0x112>
 800838a:	e030      	b.n	80083ee <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800838c:	7bbb      	ldrb	r3, [r7, #14]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d00d      	beq.n	80083ae <USBD_StdEPReq+0x108>
 8008392:	7bbb      	ldrb	r3, [r7, #14]
 8008394:	2b80      	cmp	r3, #128	; 0x80
 8008396:	d00a      	beq.n	80083ae <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008398:	7bbb      	ldrb	r3, [r7, #14]
 800839a:	4619      	mov	r1, r3
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f001 f901 	bl	80095a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80083a2:	2180      	movs	r1, #128	; 0x80
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f001 f8fd 	bl	80095a4 <USBD_LL_StallEP>
 80083aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80083ac:	e025      	b.n	80083fa <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80083ae:	6839      	ldr	r1, [r7, #0]
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f000 fc09 	bl	8008bc8 <USBD_CtlError>
              break;
 80083b6:	e020      	b.n	80083fa <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	885b      	ldrh	r3, [r3, #2]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d11b      	bne.n	80083f8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80083c0:	7bbb      	ldrb	r3, [r7, #14]
 80083c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d004      	beq.n	80083d4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80083ca:	7bbb      	ldrb	r3, [r7, #14]
 80083cc:	4619      	mov	r1, r3
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f001 f907 	bl	80095e2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 fcc2 	bl	8008d5e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	6839      	ldr	r1, [r7, #0]
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	4798      	blx	r3
 80083e8:	4603      	mov	r3, r0
 80083ea:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80083ec:	e004      	b.n	80083f8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80083ee:	6839      	ldr	r1, [r7, #0]
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 fbe9 	bl	8008bc8 <USBD_CtlError>
              break;
 80083f6:	e000      	b.n	80083fa <USBD_StdEPReq+0x154>
              break;
 80083f8:	bf00      	nop
          }
          break;
 80083fa:	e0ab      	b.n	8008554 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008402:	b2db      	uxtb	r3, r3
 8008404:	2b02      	cmp	r3, #2
 8008406:	d002      	beq.n	800840e <USBD_StdEPReq+0x168>
 8008408:	2b03      	cmp	r3, #3
 800840a:	d032      	beq.n	8008472 <USBD_StdEPReq+0x1cc>
 800840c:	e097      	b.n	800853e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800840e:	7bbb      	ldrb	r3, [r7, #14]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d007      	beq.n	8008424 <USBD_StdEPReq+0x17e>
 8008414:	7bbb      	ldrb	r3, [r7, #14]
 8008416:	2b80      	cmp	r3, #128	; 0x80
 8008418:	d004      	beq.n	8008424 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800841a:	6839      	ldr	r1, [r7, #0]
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 fbd3 	bl	8008bc8 <USBD_CtlError>
                break;
 8008422:	e091      	b.n	8008548 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008424:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008428:	2b00      	cmp	r3, #0
 800842a:	da0b      	bge.n	8008444 <USBD_StdEPReq+0x19e>
 800842c:	7bbb      	ldrb	r3, [r7, #14]
 800842e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008432:	4613      	mov	r3, r2
 8008434:	009b      	lsls	r3, r3, #2
 8008436:	4413      	add	r3, r2
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	3310      	adds	r3, #16
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	4413      	add	r3, r2
 8008440:	3304      	adds	r3, #4
 8008442:	e00b      	b.n	800845c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008444:	7bbb      	ldrb	r3, [r7, #14]
 8008446:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800844a:	4613      	mov	r3, r2
 800844c:	009b      	lsls	r3, r3, #2
 800844e:	4413      	add	r3, r2
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	4413      	add	r3, r2
 800845a:	3304      	adds	r3, #4
 800845c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	2200      	movs	r2, #0
 8008462:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	2202      	movs	r2, #2
 8008468:	4619      	mov	r1, r3
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 fc1d 	bl	8008caa <USBD_CtlSendData>
              break;
 8008470:	e06a      	b.n	8008548 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008472:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008476:	2b00      	cmp	r3, #0
 8008478:	da11      	bge.n	800849e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800847a:	7bbb      	ldrb	r3, [r7, #14]
 800847c:	f003 020f 	and.w	r2, r3, #15
 8008480:	6879      	ldr	r1, [r7, #4]
 8008482:	4613      	mov	r3, r2
 8008484:	009b      	lsls	r3, r3, #2
 8008486:	4413      	add	r3, r2
 8008488:	009b      	lsls	r3, r3, #2
 800848a:	440b      	add	r3, r1
 800848c:	3324      	adds	r3, #36	; 0x24
 800848e:	881b      	ldrh	r3, [r3, #0]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d117      	bne.n	80084c4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008494:	6839      	ldr	r1, [r7, #0]
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 fb96 	bl	8008bc8 <USBD_CtlError>
                  break;
 800849c:	e054      	b.n	8008548 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800849e:	7bbb      	ldrb	r3, [r7, #14]
 80084a0:	f003 020f 	and.w	r2, r3, #15
 80084a4:	6879      	ldr	r1, [r7, #4]
 80084a6:	4613      	mov	r3, r2
 80084a8:	009b      	lsls	r3, r3, #2
 80084aa:	4413      	add	r3, r2
 80084ac:	009b      	lsls	r3, r3, #2
 80084ae:	440b      	add	r3, r1
 80084b0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80084b4:	881b      	ldrh	r3, [r3, #0]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d104      	bne.n	80084c4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80084ba:	6839      	ldr	r1, [r7, #0]
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 fb83 	bl	8008bc8 <USBD_CtlError>
                  break;
 80084c2:	e041      	b.n	8008548 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	da0b      	bge.n	80084e4 <USBD_StdEPReq+0x23e>
 80084cc:	7bbb      	ldrb	r3, [r7, #14]
 80084ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084d2:	4613      	mov	r3, r2
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	4413      	add	r3, r2
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	3310      	adds	r3, #16
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	4413      	add	r3, r2
 80084e0:	3304      	adds	r3, #4
 80084e2:	e00b      	b.n	80084fc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80084e4:	7bbb      	ldrb	r3, [r7, #14]
 80084e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084ea:	4613      	mov	r3, r2
 80084ec:	009b      	lsls	r3, r3, #2
 80084ee:	4413      	add	r3, r2
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	4413      	add	r3, r2
 80084fa:	3304      	adds	r3, #4
 80084fc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80084fe:	7bbb      	ldrb	r3, [r7, #14]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d002      	beq.n	800850a <USBD_StdEPReq+0x264>
 8008504:	7bbb      	ldrb	r3, [r7, #14]
 8008506:	2b80      	cmp	r3, #128	; 0x80
 8008508:	d103      	bne.n	8008512 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	2200      	movs	r2, #0
 800850e:	601a      	str	r2, [r3, #0]
 8008510:	e00e      	b.n	8008530 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008512:	7bbb      	ldrb	r3, [r7, #14]
 8008514:	4619      	mov	r1, r3
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f001 f882 	bl	8009620 <USBD_LL_IsStallEP>
 800851c:	4603      	mov	r3, r0
 800851e:	2b00      	cmp	r3, #0
 8008520:	d003      	beq.n	800852a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	2201      	movs	r2, #1
 8008526:	601a      	str	r2, [r3, #0]
 8008528:	e002      	b.n	8008530 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	2200      	movs	r2, #0
 800852e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	2202      	movs	r2, #2
 8008534:	4619      	mov	r1, r3
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 fbb7 	bl	8008caa <USBD_CtlSendData>
              break;
 800853c:	e004      	b.n	8008548 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800853e:	6839      	ldr	r1, [r7, #0]
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f000 fb41 	bl	8008bc8 <USBD_CtlError>
              break;
 8008546:	bf00      	nop
          }
          break;
 8008548:	e004      	b.n	8008554 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800854a:	6839      	ldr	r1, [r7, #0]
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 fb3b 	bl	8008bc8 <USBD_CtlError>
          break;
 8008552:	bf00      	nop
      }
      break;
 8008554:	e004      	b.n	8008560 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008556:	6839      	ldr	r1, [r7, #0]
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f000 fb35 	bl	8008bc8 <USBD_CtlError>
      break;
 800855e:	bf00      	nop
  }

  return ret;
 8008560:	7bfb      	ldrb	r3, [r7, #15]
}
 8008562:	4618      	mov	r0, r3
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
	...

0800856c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008576:	2300      	movs	r3, #0
 8008578:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800857a:	2300      	movs	r3, #0
 800857c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800857e:	2300      	movs	r3, #0
 8008580:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	885b      	ldrh	r3, [r3, #2]
 8008586:	0a1b      	lsrs	r3, r3, #8
 8008588:	b29b      	uxth	r3, r3
 800858a:	3b01      	subs	r3, #1
 800858c:	2b06      	cmp	r3, #6
 800858e:	f200 8128 	bhi.w	80087e2 <USBD_GetDescriptor+0x276>
 8008592:	a201      	add	r2, pc, #4	; (adr r2, 8008598 <USBD_GetDescriptor+0x2c>)
 8008594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008598:	080085b5 	.word	0x080085b5
 800859c:	080085cd 	.word	0x080085cd
 80085a0:	0800860d 	.word	0x0800860d
 80085a4:	080087e3 	.word	0x080087e3
 80085a8:	080087e3 	.word	0x080087e3
 80085ac:	08008783 	.word	0x08008783
 80085b0:	080087af 	.word	0x080087af
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	7c12      	ldrb	r2, [r2, #16]
 80085c0:	f107 0108 	add.w	r1, r7, #8
 80085c4:	4610      	mov	r0, r2
 80085c6:	4798      	blx	r3
 80085c8:	60f8      	str	r0, [r7, #12]
      break;
 80085ca:	e112      	b.n	80087f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	7c1b      	ldrb	r3, [r3, #16]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d10d      	bne.n	80085f0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085dc:	f107 0208 	add.w	r2, r7, #8
 80085e0:	4610      	mov	r0, r2
 80085e2:	4798      	blx	r3
 80085e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	3301      	adds	r3, #1
 80085ea:	2202      	movs	r2, #2
 80085ec:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80085ee:	e100      	b.n	80087f2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085f8:	f107 0208 	add.w	r2, r7, #8
 80085fc:	4610      	mov	r0, r2
 80085fe:	4798      	blx	r3
 8008600:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	3301      	adds	r3, #1
 8008606:	2202      	movs	r2, #2
 8008608:	701a      	strb	r2, [r3, #0]
      break;
 800860a:	e0f2      	b.n	80087f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	885b      	ldrh	r3, [r3, #2]
 8008610:	b2db      	uxtb	r3, r3
 8008612:	2b05      	cmp	r3, #5
 8008614:	f200 80ac 	bhi.w	8008770 <USBD_GetDescriptor+0x204>
 8008618:	a201      	add	r2, pc, #4	; (adr r2, 8008620 <USBD_GetDescriptor+0xb4>)
 800861a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800861e:	bf00      	nop
 8008620:	08008639 	.word	0x08008639
 8008624:	0800866d 	.word	0x0800866d
 8008628:	080086a1 	.word	0x080086a1
 800862c:	080086d5 	.word	0x080086d5
 8008630:	08008709 	.word	0x08008709
 8008634:	0800873d 	.word	0x0800873d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d00b      	beq.n	800865c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	7c12      	ldrb	r2, [r2, #16]
 8008650:	f107 0108 	add.w	r1, r7, #8
 8008654:	4610      	mov	r0, r2
 8008656:	4798      	blx	r3
 8008658:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800865a:	e091      	b.n	8008780 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800865c:	6839      	ldr	r1, [r7, #0]
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 fab2 	bl	8008bc8 <USBD_CtlError>
            err++;
 8008664:	7afb      	ldrb	r3, [r7, #11]
 8008666:	3301      	adds	r3, #1
 8008668:	72fb      	strb	r3, [r7, #11]
          break;
 800866a:	e089      	b.n	8008780 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d00b      	beq.n	8008690 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800867e:	689b      	ldr	r3, [r3, #8]
 8008680:	687a      	ldr	r2, [r7, #4]
 8008682:	7c12      	ldrb	r2, [r2, #16]
 8008684:	f107 0108 	add.w	r1, r7, #8
 8008688:	4610      	mov	r0, r2
 800868a:	4798      	blx	r3
 800868c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800868e:	e077      	b.n	8008780 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008690:	6839      	ldr	r1, [r7, #0]
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 fa98 	bl	8008bc8 <USBD_CtlError>
            err++;
 8008698:	7afb      	ldrb	r3, [r7, #11]
 800869a:	3301      	adds	r3, #1
 800869c:	72fb      	strb	r3, [r7, #11]
          break;
 800869e:	e06f      	b.n	8008780 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086a6:	68db      	ldr	r3, [r3, #12]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d00b      	beq.n	80086c4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086b2:	68db      	ldr	r3, [r3, #12]
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	7c12      	ldrb	r2, [r2, #16]
 80086b8:	f107 0108 	add.w	r1, r7, #8
 80086bc:	4610      	mov	r0, r2
 80086be:	4798      	blx	r3
 80086c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086c2:	e05d      	b.n	8008780 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086c4:	6839      	ldr	r1, [r7, #0]
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f000 fa7e 	bl	8008bc8 <USBD_CtlError>
            err++;
 80086cc:	7afb      	ldrb	r3, [r7, #11]
 80086ce:	3301      	adds	r3, #1
 80086d0:	72fb      	strb	r3, [r7, #11]
          break;
 80086d2:	e055      	b.n	8008780 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086da:	691b      	ldr	r3, [r3, #16]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d00b      	beq.n	80086f8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086e6:	691b      	ldr	r3, [r3, #16]
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	7c12      	ldrb	r2, [r2, #16]
 80086ec:	f107 0108 	add.w	r1, r7, #8
 80086f0:	4610      	mov	r0, r2
 80086f2:	4798      	blx	r3
 80086f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086f6:	e043      	b.n	8008780 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086f8:	6839      	ldr	r1, [r7, #0]
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 fa64 	bl	8008bc8 <USBD_CtlError>
            err++;
 8008700:	7afb      	ldrb	r3, [r7, #11]
 8008702:	3301      	adds	r3, #1
 8008704:	72fb      	strb	r3, [r7, #11]
          break;
 8008706:	e03b      	b.n	8008780 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800870e:	695b      	ldr	r3, [r3, #20]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d00b      	beq.n	800872c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800871a:	695b      	ldr	r3, [r3, #20]
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	7c12      	ldrb	r2, [r2, #16]
 8008720:	f107 0108 	add.w	r1, r7, #8
 8008724:	4610      	mov	r0, r2
 8008726:	4798      	blx	r3
 8008728:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800872a:	e029      	b.n	8008780 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800872c:	6839      	ldr	r1, [r7, #0]
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 fa4a 	bl	8008bc8 <USBD_CtlError>
            err++;
 8008734:	7afb      	ldrb	r3, [r7, #11]
 8008736:	3301      	adds	r3, #1
 8008738:	72fb      	strb	r3, [r7, #11]
          break;
 800873a:	e021      	b.n	8008780 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008742:	699b      	ldr	r3, [r3, #24]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d00b      	beq.n	8008760 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800874e:	699b      	ldr	r3, [r3, #24]
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	7c12      	ldrb	r2, [r2, #16]
 8008754:	f107 0108 	add.w	r1, r7, #8
 8008758:	4610      	mov	r0, r2
 800875a:	4798      	blx	r3
 800875c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800875e:	e00f      	b.n	8008780 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008760:	6839      	ldr	r1, [r7, #0]
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 fa30 	bl	8008bc8 <USBD_CtlError>
            err++;
 8008768:	7afb      	ldrb	r3, [r7, #11]
 800876a:	3301      	adds	r3, #1
 800876c:	72fb      	strb	r3, [r7, #11]
          break;
 800876e:	e007      	b.n	8008780 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008770:	6839      	ldr	r1, [r7, #0]
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 fa28 	bl	8008bc8 <USBD_CtlError>
          err++;
 8008778:	7afb      	ldrb	r3, [r7, #11]
 800877a:	3301      	adds	r3, #1
 800877c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800877e:	bf00      	nop
      }
      break;
 8008780:	e037      	b.n	80087f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	7c1b      	ldrb	r3, [r3, #16]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d109      	bne.n	800879e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008792:	f107 0208 	add.w	r2, r7, #8
 8008796:	4610      	mov	r0, r2
 8008798:	4798      	blx	r3
 800879a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800879c:	e029      	b.n	80087f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800879e:	6839      	ldr	r1, [r7, #0]
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f000 fa11 	bl	8008bc8 <USBD_CtlError>
        err++;
 80087a6:	7afb      	ldrb	r3, [r7, #11]
 80087a8:	3301      	adds	r3, #1
 80087aa:	72fb      	strb	r3, [r7, #11]
      break;
 80087ac:	e021      	b.n	80087f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	7c1b      	ldrb	r3, [r3, #16]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d10d      	bne.n	80087d2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087be:	f107 0208 	add.w	r2, r7, #8
 80087c2:	4610      	mov	r0, r2
 80087c4:	4798      	blx	r3
 80087c6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	3301      	adds	r3, #1
 80087cc:	2207      	movs	r2, #7
 80087ce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80087d0:	e00f      	b.n	80087f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80087d2:	6839      	ldr	r1, [r7, #0]
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 f9f7 	bl	8008bc8 <USBD_CtlError>
        err++;
 80087da:	7afb      	ldrb	r3, [r7, #11]
 80087dc:	3301      	adds	r3, #1
 80087de:	72fb      	strb	r3, [r7, #11]
      break;
 80087e0:	e007      	b.n	80087f2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80087e2:	6839      	ldr	r1, [r7, #0]
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f000 f9ef 	bl	8008bc8 <USBD_CtlError>
      err++;
 80087ea:	7afb      	ldrb	r3, [r7, #11]
 80087ec:	3301      	adds	r3, #1
 80087ee:	72fb      	strb	r3, [r7, #11]
      break;
 80087f0:	bf00      	nop
  }

  if (err != 0U)
 80087f2:	7afb      	ldrb	r3, [r7, #11]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d11e      	bne.n	8008836 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	88db      	ldrh	r3, [r3, #6]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d016      	beq.n	800882e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008800:	893b      	ldrh	r3, [r7, #8]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d00e      	beq.n	8008824 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	88da      	ldrh	r2, [r3, #6]
 800880a:	893b      	ldrh	r3, [r7, #8]
 800880c:	4293      	cmp	r3, r2
 800880e:	bf28      	it	cs
 8008810:	4613      	movcs	r3, r2
 8008812:	b29b      	uxth	r3, r3
 8008814:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008816:	893b      	ldrh	r3, [r7, #8]
 8008818:	461a      	mov	r2, r3
 800881a:	68f9      	ldr	r1, [r7, #12]
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 fa44 	bl	8008caa <USBD_CtlSendData>
 8008822:	e009      	b.n	8008838 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008824:	6839      	ldr	r1, [r7, #0]
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 f9ce 	bl	8008bc8 <USBD_CtlError>
 800882c:	e004      	b.n	8008838 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 fa95 	bl	8008d5e <USBD_CtlSendStatus>
 8008834:	e000      	b.n	8008838 <USBD_GetDescriptor+0x2cc>
    return;
 8008836:	bf00      	nop
  }
}
 8008838:	3710      	adds	r7, #16
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
 800883e:	bf00      	nop

08008840 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b084      	sub	sp, #16
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	889b      	ldrh	r3, [r3, #4]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d131      	bne.n	80088b6 <USBD_SetAddress+0x76>
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	88db      	ldrh	r3, [r3, #6]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d12d      	bne.n	80088b6 <USBD_SetAddress+0x76>
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	885b      	ldrh	r3, [r3, #2]
 800885e:	2b7f      	cmp	r3, #127	; 0x7f
 8008860:	d829      	bhi.n	80088b6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	885b      	ldrh	r3, [r3, #2]
 8008866:	b2db      	uxtb	r3, r3
 8008868:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800886c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008874:	b2db      	uxtb	r3, r3
 8008876:	2b03      	cmp	r3, #3
 8008878:	d104      	bne.n	8008884 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800887a:	6839      	ldr	r1, [r7, #0]
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 f9a3 	bl	8008bc8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008882:	e01d      	b.n	80088c0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	7bfa      	ldrb	r2, [r7, #15]
 8008888:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800888c:	7bfb      	ldrb	r3, [r7, #15]
 800888e:	4619      	mov	r1, r3
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f000 fef1 	bl	8009678 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 fa61 	bl	8008d5e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800889c:	7bfb      	ldrb	r3, [r7, #15]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d004      	beq.n	80088ac <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2202      	movs	r2, #2
 80088a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088aa:	e009      	b.n	80088c0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2201      	movs	r2, #1
 80088b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088b4:	e004      	b.n	80088c0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80088b6:	6839      	ldr	r1, [r7, #0]
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f000 f985 	bl	8008bc8 <USBD_CtlError>
  }
}
 80088be:	bf00      	nop
 80088c0:	bf00      	nop
 80088c2:	3710      	adds	r7, #16
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80088d2:	2300      	movs	r3, #0
 80088d4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	885b      	ldrh	r3, [r3, #2]
 80088da:	b2da      	uxtb	r2, r3
 80088dc:	4b4c      	ldr	r3, [pc, #304]	; (8008a10 <USBD_SetConfig+0x148>)
 80088de:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80088e0:	4b4b      	ldr	r3, [pc, #300]	; (8008a10 <USBD_SetConfig+0x148>)
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d905      	bls.n	80088f4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80088e8:	6839      	ldr	r1, [r7, #0]
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f000 f96c 	bl	8008bc8 <USBD_CtlError>
    return USBD_FAIL;
 80088f0:	2303      	movs	r3, #3
 80088f2:	e088      	b.n	8008a06 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088fa:	b2db      	uxtb	r3, r3
 80088fc:	2b02      	cmp	r3, #2
 80088fe:	d002      	beq.n	8008906 <USBD_SetConfig+0x3e>
 8008900:	2b03      	cmp	r3, #3
 8008902:	d025      	beq.n	8008950 <USBD_SetConfig+0x88>
 8008904:	e071      	b.n	80089ea <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008906:	4b42      	ldr	r3, [pc, #264]	; (8008a10 <USBD_SetConfig+0x148>)
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d01c      	beq.n	8008948 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800890e:	4b40      	ldr	r3, [pc, #256]	; (8008a10 <USBD_SetConfig+0x148>)
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	461a      	mov	r2, r3
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008918:	4b3d      	ldr	r3, [pc, #244]	; (8008a10 <USBD_SetConfig+0x148>)
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	4619      	mov	r1, r3
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f7ff f948 	bl	8007bb4 <USBD_SetClassConfig>
 8008924:	4603      	mov	r3, r0
 8008926:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008928:	7bfb      	ldrb	r3, [r7, #15]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d004      	beq.n	8008938 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800892e:	6839      	ldr	r1, [r7, #0]
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f000 f949 	bl	8008bc8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008936:	e065      	b.n	8008a04 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f000 fa10 	bl	8008d5e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2203      	movs	r2, #3
 8008942:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008946:	e05d      	b.n	8008a04 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f000 fa08 	bl	8008d5e <USBD_CtlSendStatus>
      break;
 800894e:	e059      	b.n	8008a04 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008950:	4b2f      	ldr	r3, [pc, #188]	; (8008a10 <USBD_SetConfig+0x148>)
 8008952:	781b      	ldrb	r3, [r3, #0]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d112      	bne.n	800897e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2202      	movs	r2, #2
 800895c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008960:	4b2b      	ldr	r3, [pc, #172]	; (8008a10 <USBD_SetConfig+0x148>)
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	461a      	mov	r2, r3
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800896a:	4b29      	ldr	r3, [pc, #164]	; (8008a10 <USBD_SetConfig+0x148>)
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	4619      	mov	r1, r3
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f7ff f93b 	bl	8007bec <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 f9f1 	bl	8008d5e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800897c:	e042      	b.n	8008a04 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800897e:	4b24      	ldr	r3, [pc, #144]	; (8008a10 <USBD_SetConfig+0x148>)
 8008980:	781b      	ldrb	r3, [r3, #0]
 8008982:	461a      	mov	r2, r3
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	429a      	cmp	r2, r3
 800898a:	d02a      	beq.n	80089e2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	b2db      	uxtb	r3, r3
 8008992:	4619      	mov	r1, r3
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f7ff f929 	bl	8007bec <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800899a:	4b1d      	ldr	r3, [pc, #116]	; (8008a10 <USBD_SetConfig+0x148>)
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	461a      	mov	r2, r3
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80089a4:	4b1a      	ldr	r3, [pc, #104]	; (8008a10 <USBD_SetConfig+0x148>)
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	4619      	mov	r1, r3
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f7ff f902 	bl	8007bb4 <USBD_SetClassConfig>
 80089b0:	4603      	mov	r3, r0
 80089b2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80089b4:	7bfb      	ldrb	r3, [r7, #15]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d00f      	beq.n	80089da <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80089ba:	6839      	ldr	r1, [r7, #0]
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 f903 	bl	8008bc8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	4619      	mov	r1, r3
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f7ff f90e 	bl	8007bec <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2202      	movs	r2, #2
 80089d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80089d8:	e014      	b.n	8008a04 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 f9bf 	bl	8008d5e <USBD_CtlSendStatus>
      break;
 80089e0:	e010      	b.n	8008a04 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 f9bb 	bl	8008d5e <USBD_CtlSendStatus>
      break;
 80089e8:	e00c      	b.n	8008a04 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80089ea:	6839      	ldr	r1, [r7, #0]
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 f8eb 	bl	8008bc8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80089f2:	4b07      	ldr	r3, [pc, #28]	; (8008a10 <USBD_SetConfig+0x148>)
 80089f4:	781b      	ldrb	r3, [r3, #0]
 80089f6:	4619      	mov	r1, r3
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f7ff f8f7 	bl	8007bec <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80089fe:	2303      	movs	r3, #3
 8008a00:	73fb      	strb	r3, [r7, #15]
      break;
 8008a02:	bf00      	nop
  }

  return ret;
 8008a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3710      	adds	r7, #16
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}
 8008a0e:	bf00      	nop
 8008a10:	20000370 	.word	0x20000370

08008a14 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b082      	sub	sp, #8
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	88db      	ldrh	r3, [r3, #6]
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	d004      	beq.n	8008a30 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008a26:	6839      	ldr	r1, [r7, #0]
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 f8cd 	bl	8008bc8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008a2e:	e023      	b.n	8008a78 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	2b02      	cmp	r3, #2
 8008a3a:	dc02      	bgt.n	8008a42 <USBD_GetConfig+0x2e>
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	dc03      	bgt.n	8008a48 <USBD_GetConfig+0x34>
 8008a40:	e015      	b.n	8008a6e <USBD_GetConfig+0x5a>
 8008a42:	2b03      	cmp	r3, #3
 8008a44:	d00b      	beq.n	8008a5e <USBD_GetConfig+0x4a>
 8008a46:	e012      	b.n	8008a6e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	3308      	adds	r3, #8
 8008a52:	2201      	movs	r2, #1
 8008a54:	4619      	mov	r1, r3
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 f927 	bl	8008caa <USBD_CtlSendData>
        break;
 8008a5c:	e00c      	b.n	8008a78 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	3304      	adds	r3, #4
 8008a62:	2201      	movs	r2, #1
 8008a64:	4619      	mov	r1, r3
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 f91f 	bl	8008caa <USBD_CtlSendData>
        break;
 8008a6c:	e004      	b.n	8008a78 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008a6e:	6839      	ldr	r1, [r7, #0]
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f000 f8a9 	bl	8008bc8 <USBD_CtlError>
        break;
 8008a76:	bf00      	nop
}
 8008a78:	bf00      	nop
 8008a7a:	3708      	adds	r7, #8
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b082      	sub	sp, #8
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a90:	b2db      	uxtb	r3, r3
 8008a92:	3b01      	subs	r3, #1
 8008a94:	2b02      	cmp	r3, #2
 8008a96:	d81e      	bhi.n	8008ad6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	88db      	ldrh	r3, [r3, #6]
 8008a9c:	2b02      	cmp	r3, #2
 8008a9e:	d004      	beq.n	8008aaa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008aa0:	6839      	ldr	r1, [r7, #0]
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 f890 	bl	8008bc8 <USBD_CtlError>
        break;
 8008aa8:	e01a      	b.n	8008ae0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2201      	movs	r2, #1
 8008aae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d005      	beq.n	8008ac6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	68db      	ldr	r3, [r3, #12]
 8008abe:	f043 0202 	orr.w	r2, r3, #2
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	330c      	adds	r3, #12
 8008aca:	2202      	movs	r2, #2
 8008acc:	4619      	mov	r1, r3
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f000 f8eb 	bl	8008caa <USBD_CtlSendData>
      break;
 8008ad4:	e004      	b.n	8008ae0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008ad6:	6839      	ldr	r1, [r7, #0]
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f000 f875 	bl	8008bc8 <USBD_CtlError>
      break;
 8008ade:	bf00      	nop
  }
}
 8008ae0:	bf00      	nop
 8008ae2:	3708      	adds	r7, #8
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	885b      	ldrh	r3, [r3, #2]
 8008af6:	2b01      	cmp	r3, #1
 8008af8:	d106      	bne.n	8008b08 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2201      	movs	r2, #1
 8008afe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 f92b 	bl	8008d5e <USBD_CtlSendStatus>
  }
}
 8008b08:	bf00      	nop
 8008b0a:	3708      	adds	r7, #8
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}

08008b10 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b082      	sub	sp, #8
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b20:	b2db      	uxtb	r3, r3
 8008b22:	3b01      	subs	r3, #1
 8008b24:	2b02      	cmp	r3, #2
 8008b26:	d80b      	bhi.n	8008b40 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	885b      	ldrh	r3, [r3, #2]
 8008b2c:	2b01      	cmp	r3, #1
 8008b2e:	d10c      	bne.n	8008b4a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2200      	movs	r2, #0
 8008b34:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 f910 	bl	8008d5e <USBD_CtlSendStatus>
      }
      break;
 8008b3e:	e004      	b.n	8008b4a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008b40:	6839      	ldr	r1, [r7, #0]
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 f840 	bl	8008bc8 <USBD_CtlError>
      break;
 8008b48:	e000      	b.n	8008b4c <USBD_ClrFeature+0x3c>
      break;
 8008b4a:	bf00      	nop
  }
}
 8008b4c:	bf00      	nop
 8008b4e:	3708      	adds	r7, #8
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b084      	sub	sp, #16
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	781a      	ldrb	r2, [r3, #0]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	781a      	ldrb	r2, [r3, #0]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008b7e:	68f8      	ldr	r0, [r7, #12]
 8008b80:	f7ff fabb 	bl	80080fa <SWAPBYTE>
 8008b84:	4603      	mov	r3, r0
 8008b86:	461a      	mov	r2, r3
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	3301      	adds	r3, #1
 8008b90:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	3301      	adds	r3, #1
 8008b96:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008b98:	68f8      	ldr	r0, [r7, #12]
 8008b9a:	f7ff faae 	bl	80080fa <SWAPBYTE>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	3301      	adds	r3, #1
 8008baa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	3301      	adds	r3, #1
 8008bb0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008bb2:	68f8      	ldr	r0, [r7, #12]
 8008bb4:	f7ff faa1 	bl	80080fa <SWAPBYTE>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	461a      	mov	r2, r3
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	80da      	strh	r2, [r3, #6]
}
 8008bc0:	bf00      	nop
 8008bc2:	3710      	adds	r7, #16
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008bd2:	2180      	movs	r1, #128	; 0x80
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 fce5 	bl	80095a4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008bda:	2100      	movs	r1, #0
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 fce1 	bl	80095a4 <USBD_LL_StallEP>
}
 8008be2:	bf00      	nop
 8008be4:	3708      	adds	r7, #8
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}

08008bea <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008bea:	b580      	push	{r7, lr}
 8008bec:	b086      	sub	sp, #24
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	60f8      	str	r0, [r7, #12]
 8008bf2:	60b9      	str	r1, [r7, #8]
 8008bf4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d036      	beq.n	8008c6e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008c04:	6938      	ldr	r0, [r7, #16]
 8008c06:	f000 f836 	bl	8008c76 <USBD_GetLen>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	3301      	adds	r3, #1
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	005b      	lsls	r3, r3, #1
 8008c12:	b29a      	uxth	r2, r3
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008c18:	7dfb      	ldrb	r3, [r7, #23]
 8008c1a:	68ba      	ldr	r2, [r7, #8]
 8008c1c:	4413      	add	r3, r2
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	7812      	ldrb	r2, [r2, #0]
 8008c22:	701a      	strb	r2, [r3, #0]
  idx++;
 8008c24:	7dfb      	ldrb	r3, [r7, #23]
 8008c26:	3301      	adds	r3, #1
 8008c28:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008c2a:	7dfb      	ldrb	r3, [r7, #23]
 8008c2c:	68ba      	ldr	r2, [r7, #8]
 8008c2e:	4413      	add	r3, r2
 8008c30:	2203      	movs	r2, #3
 8008c32:	701a      	strb	r2, [r3, #0]
  idx++;
 8008c34:	7dfb      	ldrb	r3, [r7, #23]
 8008c36:	3301      	adds	r3, #1
 8008c38:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008c3a:	e013      	b.n	8008c64 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008c3c:	7dfb      	ldrb	r3, [r7, #23]
 8008c3e:	68ba      	ldr	r2, [r7, #8]
 8008c40:	4413      	add	r3, r2
 8008c42:	693a      	ldr	r2, [r7, #16]
 8008c44:	7812      	ldrb	r2, [r2, #0]
 8008c46:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	613b      	str	r3, [r7, #16]
    idx++;
 8008c4e:	7dfb      	ldrb	r3, [r7, #23]
 8008c50:	3301      	adds	r3, #1
 8008c52:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008c54:	7dfb      	ldrb	r3, [r7, #23]
 8008c56:	68ba      	ldr	r2, [r7, #8]
 8008c58:	4413      	add	r3, r2
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	701a      	strb	r2, [r3, #0]
    idx++;
 8008c5e:	7dfb      	ldrb	r3, [r7, #23]
 8008c60:	3301      	adds	r3, #1
 8008c62:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d1e7      	bne.n	8008c3c <USBD_GetString+0x52>
 8008c6c:	e000      	b.n	8008c70 <USBD_GetString+0x86>
    return;
 8008c6e:	bf00      	nop
  }
}
 8008c70:	3718      	adds	r7, #24
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}

08008c76 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008c76:	b480      	push	{r7}
 8008c78:	b085      	sub	sp, #20
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008c86:	e005      	b.n	8008c94 <USBD_GetLen+0x1e>
  {
    len++;
 8008c88:	7bfb      	ldrb	r3, [r7, #15]
 8008c8a:	3301      	adds	r3, #1
 8008c8c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	3301      	adds	r3, #1
 8008c92:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d1f5      	bne.n	8008c88 <USBD_GetLen+0x12>
  }

  return len;
 8008c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3714      	adds	r7, #20
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr

08008caa <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008caa:	b580      	push	{r7, lr}
 8008cac:	b084      	sub	sp, #16
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	60f8      	str	r0, [r7, #12]
 8008cb2:	60b9      	str	r1, [r7, #8]
 8008cb4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2202      	movs	r2, #2
 8008cba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	687a      	ldr	r2, [r7, #4]
 8008cc8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	68ba      	ldr	r2, [r7, #8]
 8008cce:	2100      	movs	r1, #0
 8008cd0:	68f8      	ldr	r0, [r7, #12]
 8008cd2:	f000 fcf0 	bl	80096b6 <USBD_LL_Transmit>

  return USBD_OK;
 8008cd6:	2300      	movs	r3, #0
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3710      	adds	r7, #16
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b084      	sub	sp, #16
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	60f8      	str	r0, [r7, #12]
 8008ce8:	60b9      	str	r1, [r7, #8]
 8008cea:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	68ba      	ldr	r2, [r7, #8]
 8008cf0:	2100      	movs	r1, #0
 8008cf2:	68f8      	ldr	r0, [r7, #12]
 8008cf4:	f000 fcdf 	bl	80096b6 <USBD_LL_Transmit>

  return USBD_OK;
 8008cf8:	2300      	movs	r3, #0
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3710      	adds	r7, #16
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}

08008d02 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b084      	sub	sp, #16
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	60f8      	str	r0, [r7, #12]
 8008d0a:	60b9      	str	r1, [r7, #8]
 8008d0c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2203      	movs	r2, #3
 8008d12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	687a      	ldr	r2, [r7, #4]
 8008d22:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	68ba      	ldr	r2, [r7, #8]
 8008d2a:	2100      	movs	r1, #0
 8008d2c:	68f8      	ldr	r0, [r7, #12]
 8008d2e:	f000 fce3 	bl	80096f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d32:	2300      	movs	r3, #0
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3710      	adds	r7, #16
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b084      	sub	sp, #16
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	60b9      	str	r1, [r7, #8]
 8008d46:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	68ba      	ldr	r2, [r7, #8]
 8008d4c:	2100      	movs	r1, #0
 8008d4e:	68f8      	ldr	r0, [r7, #12]
 8008d50:	f000 fcd2 	bl	80096f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d54:	2300      	movs	r3, #0
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3710      	adds	r7, #16
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}

08008d5e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	b082      	sub	sp, #8
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2204      	movs	r2, #4
 8008d6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008d6e:	2300      	movs	r3, #0
 8008d70:	2200      	movs	r2, #0
 8008d72:	2100      	movs	r1, #0
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 fc9e 	bl	80096b6 <USBD_LL_Transmit>

  return USBD_OK;
 8008d7a:	2300      	movs	r3, #0
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3708      	adds	r7, #8
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2205      	movs	r2, #5
 8008d90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d94:	2300      	movs	r3, #0
 8008d96:	2200      	movs	r2, #0
 8008d98:	2100      	movs	r1, #0
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 fcac 	bl	80096f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008da0:	2300      	movs	r3, #0
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3708      	adds	r7, #8
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}
	...

08008dac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008db0:	2200      	movs	r2, #0
 8008db2:	4912      	ldr	r1, [pc, #72]	; (8008dfc <MX_USB_DEVICE_Init+0x50>)
 8008db4:	4812      	ldr	r0, [pc, #72]	; (8008e00 <MX_USB_DEVICE_Init+0x54>)
 8008db6:	f7fe fe8f 	bl	8007ad8 <USBD_Init>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d001      	beq.n	8008dc4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008dc0:	f7f8 fcc0 	bl	8001744 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008dc4:	490f      	ldr	r1, [pc, #60]	; (8008e04 <MX_USB_DEVICE_Init+0x58>)
 8008dc6:	480e      	ldr	r0, [pc, #56]	; (8008e00 <MX_USB_DEVICE_Init+0x54>)
 8008dc8:	f7fe feb6 	bl	8007b38 <USBD_RegisterClass>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d001      	beq.n	8008dd6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008dd2:	f7f8 fcb7 	bl	8001744 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008dd6:	490c      	ldr	r1, [pc, #48]	; (8008e08 <MX_USB_DEVICE_Init+0x5c>)
 8008dd8:	4809      	ldr	r0, [pc, #36]	; (8008e00 <MX_USB_DEVICE_Init+0x54>)
 8008dda:	f7fe fdd7 	bl	800798c <USBD_CDC_RegisterInterface>
 8008dde:	4603      	mov	r3, r0
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d001      	beq.n	8008de8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008de4:	f7f8 fcae 	bl	8001744 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008de8:	4805      	ldr	r0, [pc, #20]	; (8008e00 <MX_USB_DEVICE_Init+0x54>)
 8008dea:	f7fe fecc 	bl	8007b86 <USBD_Start>
 8008dee:	4603      	mov	r3, r0
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d001      	beq.n	8008df8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008df4:	f7f8 fca6 	bl	8001744 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008df8:	bf00      	nop
 8008dfa:	bd80      	pop	{r7, pc}
 8008dfc:	20000130 	.word	0x20000130
 8008e00:	20000690 	.word	0x20000690
 8008e04:	20000018 	.word	0x20000018
 8008e08:	2000011c 	.word	0x2000011c

08008e0c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008e10:	2200      	movs	r2, #0
 8008e12:	4905      	ldr	r1, [pc, #20]	; (8008e28 <CDC_Init_FS+0x1c>)
 8008e14:	4805      	ldr	r0, [pc, #20]	; (8008e2c <CDC_Init_FS+0x20>)
 8008e16:	f7fe fdce 	bl	80079b6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008e1a:	4905      	ldr	r1, [pc, #20]	; (8008e30 <CDC_Init_FS+0x24>)
 8008e1c:	4803      	ldr	r0, [pc, #12]	; (8008e2c <CDC_Init_FS+0x20>)
 8008e1e:	f7fe fde8 	bl	80079f2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008e22:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	bd80      	pop	{r7, pc}
 8008e28:	20001160 	.word	0x20001160
 8008e2c:	20000690 	.word	0x20000690
 8008e30:	20000960 	.word	0x20000960

08008e34 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008e34:	b480      	push	{r7}
 8008e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008e38:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr

08008e44 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b083      	sub	sp, #12
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	6039      	str	r1, [r7, #0]
 8008e4e:	71fb      	strb	r3, [r7, #7]
 8008e50:	4613      	mov	r3, r2
 8008e52:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008e54:	79fb      	ldrb	r3, [r7, #7]
 8008e56:	2b23      	cmp	r3, #35	; 0x23
 8008e58:	d84a      	bhi.n	8008ef0 <CDC_Control_FS+0xac>
 8008e5a:	a201      	add	r2, pc, #4	; (adr r2, 8008e60 <CDC_Control_FS+0x1c>)
 8008e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e60:	08008ef1 	.word	0x08008ef1
 8008e64:	08008ef1 	.word	0x08008ef1
 8008e68:	08008ef1 	.word	0x08008ef1
 8008e6c:	08008ef1 	.word	0x08008ef1
 8008e70:	08008ef1 	.word	0x08008ef1
 8008e74:	08008ef1 	.word	0x08008ef1
 8008e78:	08008ef1 	.word	0x08008ef1
 8008e7c:	08008ef1 	.word	0x08008ef1
 8008e80:	08008ef1 	.word	0x08008ef1
 8008e84:	08008ef1 	.word	0x08008ef1
 8008e88:	08008ef1 	.word	0x08008ef1
 8008e8c:	08008ef1 	.word	0x08008ef1
 8008e90:	08008ef1 	.word	0x08008ef1
 8008e94:	08008ef1 	.word	0x08008ef1
 8008e98:	08008ef1 	.word	0x08008ef1
 8008e9c:	08008ef1 	.word	0x08008ef1
 8008ea0:	08008ef1 	.word	0x08008ef1
 8008ea4:	08008ef1 	.word	0x08008ef1
 8008ea8:	08008ef1 	.word	0x08008ef1
 8008eac:	08008ef1 	.word	0x08008ef1
 8008eb0:	08008ef1 	.word	0x08008ef1
 8008eb4:	08008ef1 	.word	0x08008ef1
 8008eb8:	08008ef1 	.word	0x08008ef1
 8008ebc:	08008ef1 	.word	0x08008ef1
 8008ec0:	08008ef1 	.word	0x08008ef1
 8008ec4:	08008ef1 	.word	0x08008ef1
 8008ec8:	08008ef1 	.word	0x08008ef1
 8008ecc:	08008ef1 	.word	0x08008ef1
 8008ed0:	08008ef1 	.word	0x08008ef1
 8008ed4:	08008ef1 	.word	0x08008ef1
 8008ed8:	08008ef1 	.word	0x08008ef1
 8008edc:	08008ef1 	.word	0x08008ef1
 8008ee0:	08008ef1 	.word	0x08008ef1
 8008ee4:	08008ef1 	.word	0x08008ef1
 8008ee8:	08008ef1 	.word	0x08008ef1
 8008eec:	08008ef1 	.word	0x08008ef1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008ef0:	bf00      	nop
  }

  return (USBD_OK);
 8008ef2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	370c      	adds	r7, #12
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b082      	sub	sp, #8
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008f0a:	6879      	ldr	r1, [r7, #4]
 8008f0c:	4805      	ldr	r0, [pc, #20]	; (8008f24 <CDC_Receive_FS+0x24>)
 8008f0e:	f7fe fd70 	bl	80079f2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008f12:	4804      	ldr	r0, [pc, #16]	; (8008f24 <CDC_Receive_FS+0x24>)
 8008f14:	f7fe fdb6 	bl	8007a84 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008f18:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3708      	adds	r7, #8
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}
 8008f22:	bf00      	nop
 8008f24:	20000690 	.word	0x20000690

08008f28 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b084      	sub	sp, #16
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	460b      	mov	r3, r1
 8008f32:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008f34:	2300      	movs	r3, #0
 8008f36:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008f38:	4b0d      	ldr	r3, [pc, #52]	; (8008f70 <CDC_Transmit_FS+0x48>)
 8008f3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f3e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d001      	beq.n	8008f4e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	e00b      	b.n	8008f66 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008f4e:	887b      	ldrh	r3, [r7, #2]
 8008f50:	461a      	mov	r2, r3
 8008f52:	6879      	ldr	r1, [r7, #4]
 8008f54:	4806      	ldr	r0, [pc, #24]	; (8008f70 <CDC_Transmit_FS+0x48>)
 8008f56:	f7fe fd2e 	bl	80079b6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008f5a:	4805      	ldr	r0, [pc, #20]	; (8008f70 <CDC_Transmit_FS+0x48>)
 8008f5c:	f7fe fd62 	bl	8007a24 <USBD_CDC_TransmitPacket>
 8008f60:	4603      	mov	r3, r0
 8008f62:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3710      	adds	r7, #16
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}
 8008f6e:	bf00      	nop
 8008f70:	20000690 	.word	0x20000690

08008f74 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008f74:	b480      	push	{r7}
 8008f76:	b087      	sub	sp, #28
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	60f8      	str	r0, [r7, #12]
 8008f7c:	60b9      	str	r1, [r7, #8]
 8008f7e:	4613      	mov	r3, r2
 8008f80:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008f82:	2300      	movs	r3, #0
 8008f84:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008f86:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	371c      	adds	r7, #28
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f94:	4770      	bx	lr
	...

08008f98 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b083      	sub	sp, #12
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	6039      	str	r1, [r7, #0]
 8008fa2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	2212      	movs	r2, #18
 8008fa8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008faa:	4b03      	ldr	r3, [pc, #12]	; (8008fb8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	370c      	adds	r7, #12
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr
 8008fb8:	2000014c 	.word	0x2000014c

08008fbc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b083      	sub	sp, #12
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	6039      	str	r1, [r7, #0]
 8008fc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	2204      	movs	r2, #4
 8008fcc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008fce:	4b03      	ldr	r3, [pc, #12]	; (8008fdc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	370c      	adds	r7, #12
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr
 8008fdc:	20000160 	.word	0x20000160

08008fe0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	6039      	str	r1, [r7, #0]
 8008fea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008fec:	79fb      	ldrb	r3, [r7, #7]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d105      	bne.n	8008ffe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008ff2:	683a      	ldr	r2, [r7, #0]
 8008ff4:	4907      	ldr	r1, [pc, #28]	; (8009014 <USBD_FS_ProductStrDescriptor+0x34>)
 8008ff6:	4808      	ldr	r0, [pc, #32]	; (8009018 <USBD_FS_ProductStrDescriptor+0x38>)
 8008ff8:	f7ff fdf7 	bl	8008bea <USBD_GetString>
 8008ffc:	e004      	b.n	8009008 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008ffe:	683a      	ldr	r2, [r7, #0]
 8009000:	4904      	ldr	r1, [pc, #16]	; (8009014 <USBD_FS_ProductStrDescriptor+0x34>)
 8009002:	4805      	ldr	r0, [pc, #20]	; (8009018 <USBD_FS_ProductStrDescriptor+0x38>)
 8009004:	f7ff fdf1 	bl	8008bea <USBD_GetString>
  }
  return USBD_StrDesc;
 8009008:	4b02      	ldr	r3, [pc, #8]	; (8009014 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800900a:	4618      	mov	r0, r3
 800900c:	3708      	adds	r7, #8
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
 8009012:	bf00      	nop
 8009014:	20001960 	.word	0x20001960
 8009018:	0800c5b8 	.word	0x0800c5b8

0800901c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b082      	sub	sp, #8
 8009020:	af00      	add	r7, sp, #0
 8009022:	4603      	mov	r3, r0
 8009024:	6039      	str	r1, [r7, #0]
 8009026:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009028:	683a      	ldr	r2, [r7, #0]
 800902a:	4904      	ldr	r1, [pc, #16]	; (800903c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800902c:	4804      	ldr	r0, [pc, #16]	; (8009040 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800902e:	f7ff fddc 	bl	8008bea <USBD_GetString>
  return USBD_StrDesc;
 8009032:	4b02      	ldr	r3, [pc, #8]	; (800903c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009034:	4618      	mov	r0, r3
 8009036:	3708      	adds	r7, #8
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}
 800903c:	20001960 	.word	0x20001960
 8009040:	0800c5d0 	.word	0x0800c5d0

08009044 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b082      	sub	sp, #8
 8009048:	af00      	add	r7, sp, #0
 800904a:	4603      	mov	r3, r0
 800904c:	6039      	str	r1, [r7, #0]
 800904e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	221a      	movs	r2, #26
 8009054:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009056:	f000 f843 	bl	80090e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800905a:	4b02      	ldr	r3, [pc, #8]	; (8009064 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800905c:	4618      	mov	r0, r3
 800905e:	3708      	adds	r7, #8
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}
 8009064:	20000164 	.word	0x20000164

08009068 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b082      	sub	sp, #8
 800906c:	af00      	add	r7, sp, #0
 800906e:	4603      	mov	r3, r0
 8009070:	6039      	str	r1, [r7, #0]
 8009072:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009074:	79fb      	ldrb	r3, [r7, #7]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d105      	bne.n	8009086 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800907a:	683a      	ldr	r2, [r7, #0]
 800907c:	4907      	ldr	r1, [pc, #28]	; (800909c <USBD_FS_ConfigStrDescriptor+0x34>)
 800907e:	4808      	ldr	r0, [pc, #32]	; (80090a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009080:	f7ff fdb3 	bl	8008bea <USBD_GetString>
 8009084:	e004      	b.n	8009090 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009086:	683a      	ldr	r2, [r7, #0]
 8009088:	4904      	ldr	r1, [pc, #16]	; (800909c <USBD_FS_ConfigStrDescriptor+0x34>)
 800908a:	4805      	ldr	r0, [pc, #20]	; (80090a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800908c:	f7ff fdad 	bl	8008bea <USBD_GetString>
  }
  return USBD_StrDesc;
 8009090:	4b02      	ldr	r3, [pc, #8]	; (800909c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009092:	4618      	mov	r0, r3
 8009094:	3708      	adds	r7, #8
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop
 800909c:	20001960 	.word	0x20001960
 80090a0:	0800c5e4 	.word	0x0800c5e4

080090a4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b082      	sub	sp, #8
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	4603      	mov	r3, r0
 80090ac:	6039      	str	r1, [r7, #0]
 80090ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80090b0:	79fb      	ldrb	r3, [r7, #7]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d105      	bne.n	80090c2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80090b6:	683a      	ldr	r2, [r7, #0]
 80090b8:	4907      	ldr	r1, [pc, #28]	; (80090d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80090ba:	4808      	ldr	r0, [pc, #32]	; (80090dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80090bc:	f7ff fd95 	bl	8008bea <USBD_GetString>
 80090c0:	e004      	b.n	80090cc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80090c2:	683a      	ldr	r2, [r7, #0]
 80090c4:	4904      	ldr	r1, [pc, #16]	; (80090d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80090c6:	4805      	ldr	r0, [pc, #20]	; (80090dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80090c8:	f7ff fd8f 	bl	8008bea <USBD_GetString>
  }
  return USBD_StrDesc;
 80090cc:	4b02      	ldr	r3, [pc, #8]	; (80090d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3708      	adds	r7, #8
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
 80090d6:	bf00      	nop
 80090d8:	20001960 	.word	0x20001960
 80090dc:	0800c5f0 	.word	0x0800c5f0

080090e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b084      	sub	sp, #16
 80090e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80090e6:	4b0f      	ldr	r3, [pc, #60]	; (8009124 <Get_SerialNum+0x44>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80090ec:	4b0e      	ldr	r3, [pc, #56]	; (8009128 <Get_SerialNum+0x48>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80090f2:	4b0e      	ldr	r3, [pc, #56]	; (800912c <Get_SerialNum+0x4c>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80090f8:	68fa      	ldr	r2, [r7, #12]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	4413      	add	r3, r2
 80090fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d009      	beq.n	800911a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009106:	2208      	movs	r2, #8
 8009108:	4909      	ldr	r1, [pc, #36]	; (8009130 <Get_SerialNum+0x50>)
 800910a:	68f8      	ldr	r0, [r7, #12]
 800910c:	f000 f814 	bl	8009138 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009110:	2204      	movs	r2, #4
 8009112:	4908      	ldr	r1, [pc, #32]	; (8009134 <Get_SerialNum+0x54>)
 8009114:	68b8      	ldr	r0, [r7, #8]
 8009116:	f000 f80f 	bl	8009138 <IntToUnicode>
  }
}
 800911a:	bf00      	nop
 800911c:	3710      	adds	r7, #16
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
 8009122:	bf00      	nop
 8009124:	1fff7a10 	.word	0x1fff7a10
 8009128:	1fff7a14 	.word	0x1fff7a14
 800912c:	1fff7a18 	.word	0x1fff7a18
 8009130:	20000166 	.word	0x20000166
 8009134:	20000176 	.word	0x20000176

08009138 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009138:	b480      	push	{r7}
 800913a:	b087      	sub	sp, #28
 800913c:	af00      	add	r7, sp, #0
 800913e:	60f8      	str	r0, [r7, #12]
 8009140:	60b9      	str	r1, [r7, #8]
 8009142:	4613      	mov	r3, r2
 8009144:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009146:	2300      	movs	r3, #0
 8009148:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800914a:	2300      	movs	r3, #0
 800914c:	75fb      	strb	r3, [r7, #23]
 800914e:	e027      	b.n	80091a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	0f1b      	lsrs	r3, r3, #28
 8009154:	2b09      	cmp	r3, #9
 8009156:	d80b      	bhi.n	8009170 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	0f1b      	lsrs	r3, r3, #28
 800915c:	b2da      	uxtb	r2, r3
 800915e:	7dfb      	ldrb	r3, [r7, #23]
 8009160:	005b      	lsls	r3, r3, #1
 8009162:	4619      	mov	r1, r3
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	440b      	add	r3, r1
 8009168:	3230      	adds	r2, #48	; 0x30
 800916a:	b2d2      	uxtb	r2, r2
 800916c:	701a      	strb	r2, [r3, #0]
 800916e:	e00a      	b.n	8009186 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	0f1b      	lsrs	r3, r3, #28
 8009174:	b2da      	uxtb	r2, r3
 8009176:	7dfb      	ldrb	r3, [r7, #23]
 8009178:	005b      	lsls	r3, r3, #1
 800917a:	4619      	mov	r1, r3
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	440b      	add	r3, r1
 8009180:	3237      	adds	r2, #55	; 0x37
 8009182:	b2d2      	uxtb	r2, r2
 8009184:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	011b      	lsls	r3, r3, #4
 800918a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800918c:	7dfb      	ldrb	r3, [r7, #23]
 800918e:	005b      	lsls	r3, r3, #1
 8009190:	3301      	adds	r3, #1
 8009192:	68ba      	ldr	r2, [r7, #8]
 8009194:	4413      	add	r3, r2
 8009196:	2200      	movs	r2, #0
 8009198:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800919a:	7dfb      	ldrb	r3, [r7, #23]
 800919c:	3301      	adds	r3, #1
 800919e:	75fb      	strb	r3, [r7, #23]
 80091a0:	7dfa      	ldrb	r2, [r7, #23]
 80091a2:	79fb      	ldrb	r3, [r7, #7]
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d3d3      	bcc.n	8009150 <IntToUnicode+0x18>
  }
}
 80091a8:	bf00      	nop
 80091aa:	bf00      	nop
 80091ac:	371c      	adds	r7, #28
 80091ae:	46bd      	mov	sp, r7
 80091b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b4:	4770      	bx	lr
	...

080091b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b08a      	sub	sp, #40	; 0x28
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80091c0:	f107 0314 	add.w	r3, r7, #20
 80091c4:	2200      	movs	r2, #0
 80091c6:	601a      	str	r2, [r3, #0]
 80091c8:	605a      	str	r2, [r3, #4]
 80091ca:	609a      	str	r2, [r3, #8]
 80091cc:	60da      	str	r2, [r3, #12]
 80091ce:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80091d8:	d147      	bne.n	800926a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80091da:	2300      	movs	r3, #0
 80091dc:	613b      	str	r3, [r7, #16]
 80091de:	4b25      	ldr	r3, [pc, #148]	; (8009274 <HAL_PCD_MspInit+0xbc>)
 80091e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091e2:	4a24      	ldr	r2, [pc, #144]	; (8009274 <HAL_PCD_MspInit+0xbc>)
 80091e4:	f043 0301 	orr.w	r3, r3, #1
 80091e8:	6313      	str	r3, [r2, #48]	; 0x30
 80091ea:	4b22      	ldr	r3, [pc, #136]	; (8009274 <HAL_PCD_MspInit+0xbc>)
 80091ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ee:	f003 0301 	and.w	r3, r3, #1
 80091f2:	613b      	str	r3, [r7, #16]
 80091f4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80091f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80091fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80091fc:	2300      	movs	r3, #0
 80091fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009200:	2300      	movs	r3, #0
 8009202:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009204:	f107 0314 	add.w	r3, r7, #20
 8009208:	4619      	mov	r1, r3
 800920a:	481b      	ldr	r0, [pc, #108]	; (8009278 <HAL_PCD_MspInit+0xc0>)
 800920c:	f7f8 ff42 	bl	8002094 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009210:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009214:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009216:	2302      	movs	r3, #2
 8009218:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800921a:	2300      	movs	r3, #0
 800921c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800921e:	2303      	movs	r3, #3
 8009220:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009222:	230a      	movs	r3, #10
 8009224:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009226:	f107 0314 	add.w	r3, r7, #20
 800922a:	4619      	mov	r1, r3
 800922c:	4812      	ldr	r0, [pc, #72]	; (8009278 <HAL_PCD_MspInit+0xc0>)
 800922e:	f7f8 ff31 	bl	8002094 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009232:	4b10      	ldr	r3, [pc, #64]	; (8009274 <HAL_PCD_MspInit+0xbc>)
 8009234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009236:	4a0f      	ldr	r2, [pc, #60]	; (8009274 <HAL_PCD_MspInit+0xbc>)
 8009238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800923c:	6353      	str	r3, [r2, #52]	; 0x34
 800923e:	2300      	movs	r3, #0
 8009240:	60fb      	str	r3, [r7, #12]
 8009242:	4b0c      	ldr	r3, [pc, #48]	; (8009274 <HAL_PCD_MspInit+0xbc>)
 8009244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009246:	4a0b      	ldr	r2, [pc, #44]	; (8009274 <HAL_PCD_MspInit+0xbc>)
 8009248:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800924c:	6453      	str	r3, [r2, #68]	; 0x44
 800924e:	4b09      	ldr	r3, [pc, #36]	; (8009274 <HAL_PCD_MspInit+0xbc>)
 8009250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009252:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009256:	60fb      	str	r3, [r7, #12]
 8009258:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800925a:	2200      	movs	r2, #0
 800925c:	2100      	movs	r1, #0
 800925e:	2043      	movs	r0, #67	; 0x43
 8009260:	f7f8 fe4f 	bl	8001f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009264:	2043      	movs	r0, #67	; 0x43
 8009266:	f7f8 fe68 	bl	8001f3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800926a:	bf00      	nop
 800926c:	3728      	adds	r7, #40	; 0x28
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
 8009272:	bf00      	nop
 8009274:	40023800 	.word	0x40023800
 8009278:	40020000 	.word	0x40020000

0800927c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b082      	sub	sp, #8
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009290:	4619      	mov	r1, r3
 8009292:	4610      	mov	r0, r2
 8009294:	f7fe fcc2 	bl	8007c1c <USBD_LL_SetupStage>
}
 8009298:	bf00      	nop
 800929a:	3708      	adds	r7, #8
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b082      	sub	sp, #8
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	460b      	mov	r3, r1
 80092aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80092b2:	78fa      	ldrb	r2, [r7, #3]
 80092b4:	6879      	ldr	r1, [r7, #4]
 80092b6:	4613      	mov	r3, r2
 80092b8:	00db      	lsls	r3, r3, #3
 80092ba:	1a9b      	subs	r3, r3, r2
 80092bc:	009b      	lsls	r3, r3, #2
 80092be:	440b      	add	r3, r1
 80092c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80092c4:	681a      	ldr	r2, [r3, #0]
 80092c6:	78fb      	ldrb	r3, [r7, #3]
 80092c8:	4619      	mov	r1, r3
 80092ca:	f7fe fcfc 	bl	8007cc6 <USBD_LL_DataOutStage>
}
 80092ce:	bf00      	nop
 80092d0:	3708      	adds	r7, #8
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}

080092d6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092d6:	b580      	push	{r7, lr}
 80092d8:	b082      	sub	sp, #8
 80092da:	af00      	add	r7, sp, #0
 80092dc:	6078      	str	r0, [r7, #4]
 80092de:	460b      	mov	r3, r1
 80092e0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80092e8:	78fa      	ldrb	r2, [r7, #3]
 80092ea:	6879      	ldr	r1, [r7, #4]
 80092ec:	4613      	mov	r3, r2
 80092ee:	00db      	lsls	r3, r3, #3
 80092f0:	1a9b      	subs	r3, r3, r2
 80092f2:	009b      	lsls	r3, r3, #2
 80092f4:	440b      	add	r3, r1
 80092f6:	3348      	adds	r3, #72	; 0x48
 80092f8:	681a      	ldr	r2, [r3, #0]
 80092fa:	78fb      	ldrb	r3, [r7, #3]
 80092fc:	4619      	mov	r1, r3
 80092fe:	f7fe fd45 	bl	8007d8c <USBD_LL_DataInStage>
}
 8009302:	bf00      	nop
 8009304:	3708      	adds	r7, #8
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}

0800930a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800930a:	b580      	push	{r7, lr}
 800930c:	b082      	sub	sp, #8
 800930e:	af00      	add	r7, sp, #0
 8009310:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009318:	4618      	mov	r0, r3
 800931a:	f7fe fe59 	bl	8007fd0 <USBD_LL_SOF>
}
 800931e:	bf00      	nop
 8009320:	3708      	adds	r7, #8
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}

08009326 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009326:	b580      	push	{r7, lr}
 8009328:	b084      	sub	sp, #16
 800932a:	af00      	add	r7, sp, #0
 800932c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800932e:	2301      	movs	r3, #1
 8009330:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	68db      	ldr	r3, [r3, #12]
 8009336:	2b02      	cmp	r3, #2
 8009338:	d001      	beq.n	800933e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800933a:	f7f8 fa03 	bl	8001744 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009344:	7bfa      	ldrb	r2, [r7, #15]
 8009346:	4611      	mov	r1, r2
 8009348:	4618      	mov	r0, r3
 800934a:	f7fe fe03 	bl	8007f54 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009354:	4618      	mov	r0, r3
 8009356:	f7fe fdaf 	bl	8007eb8 <USBD_LL_Reset>
}
 800935a:	bf00      	nop
 800935c:	3710      	adds	r7, #16
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
	...

08009364 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b082      	sub	sp, #8
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009372:	4618      	mov	r0, r3
 8009374:	f7fe fdfe 	bl	8007f74 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	687a      	ldr	r2, [r7, #4]
 8009384:	6812      	ldr	r2, [r2, #0]
 8009386:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800938a:	f043 0301 	orr.w	r3, r3, #1
 800938e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6a1b      	ldr	r3, [r3, #32]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d005      	beq.n	80093a4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009398:	4b04      	ldr	r3, [pc, #16]	; (80093ac <HAL_PCD_SuspendCallback+0x48>)
 800939a:	691b      	ldr	r3, [r3, #16]
 800939c:	4a03      	ldr	r2, [pc, #12]	; (80093ac <HAL_PCD_SuspendCallback+0x48>)
 800939e:	f043 0306 	orr.w	r3, r3, #6
 80093a2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80093a4:	bf00      	nop
 80093a6:	3708      	adds	r7, #8
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}
 80093ac:	e000ed00 	.word	0xe000ed00

080093b0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b082      	sub	sp, #8
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80093be:	4618      	mov	r0, r3
 80093c0:	f7fe fdee 	bl	8007fa0 <USBD_LL_Resume>
}
 80093c4:	bf00      	nop
 80093c6:	3708      	adds	r7, #8
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b082      	sub	sp, #8
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	460b      	mov	r3, r1
 80093d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80093de:	78fa      	ldrb	r2, [r7, #3]
 80093e0:	4611      	mov	r1, r2
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7fe fe3c 	bl	8008060 <USBD_LL_IsoOUTIncomplete>
}
 80093e8:	bf00      	nop
 80093ea:	3708      	adds	r7, #8
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}

080093f0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b082      	sub	sp, #8
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	460b      	mov	r3, r1
 80093fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009402:	78fa      	ldrb	r2, [r7, #3]
 8009404:	4611      	mov	r1, r2
 8009406:	4618      	mov	r0, r3
 8009408:	f7fe fe04 	bl	8008014 <USBD_LL_IsoINIncomplete>
}
 800940c:	bf00      	nop
 800940e:	3708      	adds	r7, #8
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009422:	4618      	mov	r0, r3
 8009424:	f7fe fe42 	bl	80080ac <USBD_LL_DevConnected>
}
 8009428:	bf00      	nop
 800942a:	3708      	adds	r7, #8
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}

08009430 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b082      	sub	sp, #8
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800943e:	4618      	mov	r0, r3
 8009440:	f7fe fe3f 	bl	80080c2 <USBD_LL_DevDisconnected>
}
 8009444:	bf00      	nop
 8009446:	3708      	adds	r7, #8
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}

0800944c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b082      	sub	sp, #8
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d13c      	bne.n	80094d6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800945c:	4a20      	ldr	r2, [pc, #128]	; (80094e0 <USBD_LL_Init+0x94>)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	4a1e      	ldr	r2, [pc, #120]	; (80094e0 <USBD_LL_Init+0x94>)
 8009468:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800946c:	4b1c      	ldr	r3, [pc, #112]	; (80094e0 <USBD_LL_Init+0x94>)
 800946e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009472:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009474:	4b1a      	ldr	r3, [pc, #104]	; (80094e0 <USBD_LL_Init+0x94>)
 8009476:	2204      	movs	r2, #4
 8009478:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800947a:	4b19      	ldr	r3, [pc, #100]	; (80094e0 <USBD_LL_Init+0x94>)
 800947c:	2202      	movs	r2, #2
 800947e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009480:	4b17      	ldr	r3, [pc, #92]	; (80094e0 <USBD_LL_Init+0x94>)
 8009482:	2200      	movs	r2, #0
 8009484:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009486:	4b16      	ldr	r3, [pc, #88]	; (80094e0 <USBD_LL_Init+0x94>)
 8009488:	2202      	movs	r2, #2
 800948a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800948c:	4b14      	ldr	r3, [pc, #80]	; (80094e0 <USBD_LL_Init+0x94>)
 800948e:	2200      	movs	r2, #0
 8009490:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009492:	4b13      	ldr	r3, [pc, #76]	; (80094e0 <USBD_LL_Init+0x94>)
 8009494:	2200      	movs	r2, #0
 8009496:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009498:	4b11      	ldr	r3, [pc, #68]	; (80094e0 <USBD_LL_Init+0x94>)
 800949a:	2200      	movs	r2, #0
 800949c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800949e:	4b10      	ldr	r3, [pc, #64]	; (80094e0 <USBD_LL_Init+0x94>)
 80094a0:	2201      	movs	r2, #1
 80094a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80094a4:	4b0e      	ldr	r3, [pc, #56]	; (80094e0 <USBD_LL_Init+0x94>)
 80094a6:	2200      	movs	r2, #0
 80094a8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80094aa:	480d      	ldr	r0, [pc, #52]	; (80094e0 <USBD_LL_Init+0x94>)
 80094ac:	f7f9 ff8d 	bl	80033ca <HAL_PCD_Init>
 80094b0:	4603      	mov	r3, r0
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d001      	beq.n	80094ba <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80094b6:	f7f8 f945 	bl	8001744 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80094ba:	2180      	movs	r1, #128	; 0x80
 80094bc:	4808      	ldr	r0, [pc, #32]	; (80094e0 <USBD_LL_Init+0x94>)
 80094be:	f7fb f8ea 	bl	8004696 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80094c2:	2240      	movs	r2, #64	; 0x40
 80094c4:	2100      	movs	r1, #0
 80094c6:	4806      	ldr	r0, [pc, #24]	; (80094e0 <USBD_LL_Init+0x94>)
 80094c8:	f7fb f89e 	bl	8004608 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80094cc:	2280      	movs	r2, #128	; 0x80
 80094ce:	2101      	movs	r1, #1
 80094d0:	4803      	ldr	r0, [pc, #12]	; (80094e0 <USBD_LL_Init+0x94>)
 80094d2:	f7fb f899 	bl	8004608 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80094d6:	2300      	movs	r3, #0
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3708      	adds	r7, #8
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}
 80094e0:	20001b60 	.word	0x20001b60

080094e4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b084      	sub	sp, #16
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094ec:	2300      	movs	r3, #0
 80094ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094f0:	2300      	movs	r3, #0
 80094f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80094fa:	4618      	mov	r0, r3
 80094fc:	f7fa f882 	bl	8003604 <HAL_PCD_Start>
 8009500:	4603      	mov	r3, r0
 8009502:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009504:	7bfb      	ldrb	r3, [r7, #15]
 8009506:	4618      	mov	r0, r3
 8009508:	f000 f942 	bl	8009790 <USBD_Get_USB_Status>
 800950c:	4603      	mov	r3, r0
 800950e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009510:	7bbb      	ldrb	r3, [r7, #14]
}
 8009512:	4618      	mov	r0, r3
 8009514:	3710      	adds	r7, #16
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}

0800951a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800951a:	b580      	push	{r7, lr}
 800951c:	b084      	sub	sp, #16
 800951e:	af00      	add	r7, sp, #0
 8009520:	6078      	str	r0, [r7, #4]
 8009522:	4608      	mov	r0, r1
 8009524:	4611      	mov	r1, r2
 8009526:	461a      	mov	r2, r3
 8009528:	4603      	mov	r3, r0
 800952a:	70fb      	strb	r3, [r7, #3]
 800952c:	460b      	mov	r3, r1
 800952e:	70bb      	strb	r3, [r7, #2]
 8009530:	4613      	mov	r3, r2
 8009532:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009534:	2300      	movs	r3, #0
 8009536:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009538:	2300      	movs	r3, #0
 800953a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009542:	78bb      	ldrb	r3, [r7, #2]
 8009544:	883a      	ldrh	r2, [r7, #0]
 8009546:	78f9      	ldrb	r1, [r7, #3]
 8009548:	f7fa fc66 	bl	8003e18 <HAL_PCD_EP_Open>
 800954c:	4603      	mov	r3, r0
 800954e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009550:	7bfb      	ldrb	r3, [r7, #15]
 8009552:	4618      	mov	r0, r3
 8009554:	f000 f91c 	bl	8009790 <USBD_Get_USB_Status>
 8009558:	4603      	mov	r3, r0
 800955a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800955c:	7bbb      	ldrb	r3, [r7, #14]
}
 800955e:	4618      	mov	r0, r3
 8009560:	3710      	adds	r7, #16
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}

08009566 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009566:	b580      	push	{r7, lr}
 8009568:	b084      	sub	sp, #16
 800956a:	af00      	add	r7, sp, #0
 800956c:	6078      	str	r0, [r7, #4]
 800956e:	460b      	mov	r3, r1
 8009570:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009572:	2300      	movs	r3, #0
 8009574:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009576:	2300      	movs	r3, #0
 8009578:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009580:	78fa      	ldrb	r2, [r7, #3]
 8009582:	4611      	mov	r1, r2
 8009584:	4618      	mov	r0, r3
 8009586:	f7fa fcaf 	bl	8003ee8 <HAL_PCD_EP_Close>
 800958a:	4603      	mov	r3, r0
 800958c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800958e:	7bfb      	ldrb	r3, [r7, #15]
 8009590:	4618      	mov	r0, r3
 8009592:	f000 f8fd 	bl	8009790 <USBD_Get_USB_Status>
 8009596:	4603      	mov	r3, r0
 8009598:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800959a:	7bbb      	ldrb	r3, [r7, #14]
}
 800959c:	4618      	mov	r0, r3
 800959e:	3710      	adds	r7, #16
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b084      	sub	sp, #16
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	460b      	mov	r3, r1
 80095ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095b0:	2300      	movs	r3, #0
 80095b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095b4:	2300      	movs	r3, #0
 80095b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80095be:	78fa      	ldrb	r2, [r7, #3]
 80095c0:	4611      	mov	r1, r2
 80095c2:	4618      	mov	r0, r3
 80095c4:	f7fa fd87 	bl	80040d6 <HAL_PCD_EP_SetStall>
 80095c8:	4603      	mov	r3, r0
 80095ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095cc:	7bfb      	ldrb	r3, [r7, #15]
 80095ce:	4618      	mov	r0, r3
 80095d0:	f000 f8de 	bl	8009790 <USBD_Get_USB_Status>
 80095d4:	4603      	mov	r3, r0
 80095d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3710      	adds	r7, #16
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}

080095e2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095e2:	b580      	push	{r7, lr}
 80095e4:	b084      	sub	sp, #16
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	6078      	str	r0, [r7, #4]
 80095ea:	460b      	mov	r3, r1
 80095ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095ee:	2300      	movs	r3, #0
 80095f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095f2:	2300      	movs	r3, #0
 80095f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80095fc:	78fa      	ldrb	r2, [r7, #3]
 80095fe:	4611      	mov	r1, r2
 8009600:	4618      	mov	r0, r3
 8009602:	f7fa fdcc 	bl	800419e <HAL_PCD_EP_ClrStall>
 8009606:	4603      	mov	r3, r0
 8009608:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800960a:	7bfb      	ldrb	r3, [r7, #15]
 800960c:	4618      	mov	r0, r3
 800960e:	f000 f8bf 	bl	8009790 <USBD_Get_USB_Status>
 8009612:	4603      	mov	r3, r0
 8009614:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009616:	7bbb      	ldrb	r3, [r7, #14]
}
 8009618:	4618      	mov	r0, r3
 800961a:	3710      	adds	r7, #16
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}

08009620 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009620:	b480      	push	{r7}
 8009622:	b085      	sub	sp, #20
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	460b      	mov	r3, r1
 800962a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009632:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009634:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009638:	2b00      	cmp	r3, #0
 800963a:	da0b      	bge.n	8009654 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800963c:	78fb      	ldrb	r3, [r7, #3]
 800963e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009642:	68f9      	ldr	r1, [r7, #12]
 8009644:	4613      	mov	r3, r2
 8009646:	00db      	lsls	r3, r3, #3
 8009648:	1a9b      	subs	r3, r3, r2
 800964a:	009b      	lsls	r3, r3, #2
 800964c:	440b      	add	r3, r1
 800964e:	333e      	adds	r3, #62	; 0x3e
 8009650:	781b      	ldrb	r3, [r3, #0]
 8009652:	e00b      	b.n	800966c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009654:	78fb      	ldrb	r3, [r7, #3]
 8009656:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800965a:	68f9      	ldr	r1, [r7, #12]
 800965c:	4613      	mov	r3, r2
 800965e:	00db      	lsls	r3, r3, #3
 8009660:	1a9b      	subs	r3, r3, r2
 8009662:	009b      	lsls	r3, r3, #2
 8009664:	440b      	add	r3, r1
 8009666:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800966a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800966c:	4618      	mov	r0, r3
 800966e:	3714      	adds	r7, #20
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr

08009678 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	460b      	mov	r3, r1
 8009682:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009684:	2300      	movs	r3, #0
 8009686:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009688:	2300      	movs	r3, #0
 800968a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009692:	78fa      	ldrb	r2, [r7, #3]
 8009694:	4611      	mov	r1, r2
 8009696:	4618      	mov	r0, r3
 8009698:	f7fa fb99 	bl	8003dce <HAL_PCD_SetAddress>
 800969c:	4603      	mov	r3, r0
 800969e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096a0:	7bfb      	ldrb	r3, [r7, #15]
 80096a2:	4618      	mov	r0, r3
 80096a4:	f000 f874 	bl	8009790 <USBD_Get_USB_Status>
 80096a8:	4603      	mov	r3, r0
 80096aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3710      	adds	r7, #16
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}

080096b6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80096b6:	b580      	push	{r7, lr}
 80096b8:	b086      	sub	sp, #24
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	60f8      	str	r0, [r7, #12]
 80096be:	607a      	str	r2, [r7, #4]
 80096c0:	603b      	str	r3, [r7, #0]
 80096c2:	460b      	mov	r3, r1
 80096c4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096c6:	2300      	movs	r3, #0
 80096c8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096ca:	2300      	movs	r3, #0
 80096cc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80096d4:	7af9      	ldrb	r1, [r7, #11]
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	687a      	ldr	r2, [r7, #4]
 80096da:	f7fa fcb2 	bl	8004042 <HAL_PCD_EP_Transmit>
 80096de:	4603      	mov	r3, r0
 80096e0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096e2:	7dfb      	ldrb	r3, [r7, #23]
 80096e4:	4618      	mov	r0, r3
 80096e6:	f000 f853 	bl	8009790 <USBD_Get_USB_Status>
 80096ea:	4603      	mov	r3, r0
 80096ec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80096ee:	7dbb      	ldrb	r3, [r7, #22]
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3718      	adds	r7, #24
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b086      	sub	sp, #24
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	60f8      	str	r0, [r7, #12]
 8009700:	607a      	str	r2, [r7, #4]
 8009702:	603b      	str	r3, [r7, #0]
 8009704:	460b      	mov	r3, r1
 8009706:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009708:	2300      	movs	r3, #0
 800970a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800970c:	2300      	movs	r3, #0
 800970e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009716:	7af9      	ldrb	r1, [r7, #11]
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	687a      	ldr	r2, [r7, #4]
 800971c:	f7fa fc2e 	bl	8003f7c <HAL_PCD_EP_Receive>
 8009720:	4603      	mov	r3, r0
 8009722:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009724:	7dfb      	ldrb	r3, [r7, #23]
 8009726:	4618      	mov	r0, r3
 8009728:	f000 f832 	bl	8009790 <USBD_Get_USB_Status>
 800972c:	4603      	mov	r3, r0
 800972e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009730:	7dbb      	ldrb	r3, [r7, #22]
}
 8009732:	4618      	mov	r0, r3
 8009734:	3718      	adds	r7, #24
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}

0800973a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800973a:	b580      	push	{r7, lr}
 800973c:	b082      	sub	sp, #8
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
 8009742:	460b      	mov	r3, r1
 8009744:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800974c:	78fa      	ldrb	r2, [r7, #3]
 800974e:	4611      	mov	r1, r2
 8009750:	4618      	mov	r0, r3
 8009752:	f7fa fc5e 	bl	8004012 <HAL_PCD_EP_GetRxCount>
 8009756:	4603      	mov	r3, r0
}
 8009758:	4618      	mov	r0, r3
 800975a:	3708      	adds	r7, #8
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}

08009760 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009760:	b480      	push	{r7}
 8009762:	b083      	sub	sp, #12
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009768:	4b03      	ldr	r3, [pc, #12]	; (8009778 <USBD_static_malloc+0x18>)
}
 800976a:	4618      	mov	r0, r3
 800976c:	370c      	adds	r7, #12
 800976e:	46bd      	mov	sp, r7
 8009770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009774:	4770      	bx	lr
 8009776:	bf00      	nop
 8009778:	20000374 	.word	0x20000374

0800977c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800977c:	b480      	push	{r7}
 800977e:	b083      	sub	sp, #12
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]

}
 8009784:	bf00      	nop
 8009786:	370c      	adds	r7, #12
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr

08009790 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009790:	b480      	push	{r7}
 8009792:	b085      	sub	sp, #20
 8009794:	af00      	add	r7, sp, #0
 8009796:	4603      	mov	r3, r0
 8009798:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800979a:	2300      	movs	r3, #0
 800979c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800979e:	79fb      	ldrb	r3, [r7, #7]
 80097a0:	2b03      	cmp	r3, #3
 80097a2:	d817      	bhi.n	80097d4 <USBD_Get_USB_Status+0x44>
 80097a4:	a201      	add	r2, pc, #4	; (adr r2, 80097ac <USBD_Get_USB_Status+0x1c>)
 80097a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097aa:	bf00      	nop
 80097ac:	080097bd 	.word	0x080097bd
 80097b0:	080097c3 	.word	0x080097c3
 80097b4:	080097c9 	.word	0x080097c9
 80097b8:	080097cf 	.word	0x080097cf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80097bc:	2300      	movs	r3, #0
 80097be:	73fb      	strb	r3, [r7, #15]
    break;
 80097c0:	e00b      	b.n	80097da <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80097c2:	2303      	movs	r3, #3
 80097c4:	73fb      	strb	r3, [r7, #15]
    break;
 80097c6:	e008      	b.n	80097da <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80097c8:	2301      	movs	r3, #1
 80097ca:	73fb      	strb	r3, [r7, #15]
    break;
 80097cc:	e005      	b.n	80097da <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80097ce:	2303      	movs	r3, #3
 80097d0:	73fb      	strb	r3, [r7, #15]
    break;
 80097d2:	e002      	b.n	80097da <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80097d4:	2303      	movs	r3, #3
 80097d6:	73fb      	strb	r3, [r7, #15]
    break;
 80097d8:	bf00      	nop
  }
  return usb_status;
 80097da:	7bfb      	ldrb	r3, [r7, #15]
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3714      	adds	r7, #20
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr

080097e8 <__errno>:
 80097e8:	4b01      	ldr	r3, [pc, #4]	; (80097f0 <__errno+0x8>)
 80097ea:	6818      	ldr	r0, [r3, #0]
 80097ec:	4770      	bx	lr
 80097ee:	bf00      	nop
 80097f0:	20000180 	.word	0x20000180

080097f4 <__libc_init_array>:
 80097f4:	b570      	push	{r4, r5, r6, lr}
 80097f6:	4d0d      	ldr	r5, [pc, #52]	; (800982c <__libc_init_array+0x38>)
 80097f8:	4c0d      	ldr	r4, [pc, #52]	; (8009830 <__libc_init_array+0x3c>)
 80097fa:	1b64      	subs	r4, r4, r5
 80097fc:	10a4      	asrs	r4, r4, #2
 80097fe:	2600      	movs	r6, #0
 8009800:	42a6      	cmp	r6, r4
 8009802:	d109      	bne.n	8009818 <__libc_init_array+0x24>
 8009804:	4d0b      	ldr	r5, [pc, #44]	; (8009834 <__libc_init_array+0x40>)
 8009806:	4c0c      	ldr	r4, [pc, #48]	; (8009838 <__libc_init_array+0x44>)
 8009808:	f002 feb6 	bl	800c578 <_init>
 800980c:	1b64      	subs	r4, r4, r5
 800980e:	10a4      	asrs	r4, r4, #2
 8009810:	2600      	movs	r6, #0
 8009812:	42a6      	cmp	r6, r4
 8009814:	d105      	bne.n	8009822 <__libc_init_array+0x2e>
 8009816:	bd70      	pop	{r4, r5, r6, pc}
 8009818:	f855 3b04 	ldr.w	r3, [r5], #4
 800981c:	4798      	blx	r3
 800981e:	3601      	adds	r6, #1
 8009820:	e7ee      	b.n	8009800 <__libc_init_array+0xc>
 8009822:	f855 3b04 	ldr.w	r3, [r5], #4
 8009826:	4798      	blx	r3
 8009828:	3601      	adds	r6, #1
 800982a:	e7f2      	b.n	8009812 <__libc_init_array+0x1e>
 800982c:	0800ca04 	.word	0x0800ca04
 8009830:	0800ca04 	.word	0x0800ca04
 8009834:	0800ca04 	.word	0x0800ca04
 8009838:	0800ca08 	.word	0x0800ca08

0800983c <memcpy>:
 800983c:	440a      	add	r2, r1
 800983e:	4291      	cmp	r1, r2
 8009840:	f100 33ff 	add.w	r3, r0, #4294967295
 8009844:	d100      	bne.n	8009848 <memcpy+0xc>
 8009846:	4770      	bx	lr
 8009848:	b510      	push	{r4, lr}
 800984a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800984e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009852:	4291      	cmp	r1, r2
 8009854:	d1f9      	bne.n	800984a <memcpy+0xe>
 8009856:	bd10      	pop	{r4, pc}

08009858 <memset>:
 8009858:	4402      	add	r2, r0
 800985a:	4603      	mov	r3, r0
 800985c:	4293      	cmp	r3, r2
 800985e:	d100      	bne.n	8009862 <memset+0xa>
 8009860:	4770      	bx	lr
 8009862:	f803 1b01 	strb.w	r1, [r3], #1
 8009866:	e7f9      	b.n	800985c <memset+0x4>

08009868 <__cvt>:
 8009868:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800986c:	ec55 4b10 	vmov	r4, r5, d0
 8009870:	2d00      	cmp	r5, #0
 8009872:	460e      	mov	r6, r1
 8009874:	4619      	mov	r1, r3
 8009876:	462b      	mov	r3, r5
 8009878:	bfbb      	ittet	lt
 800987a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800987e:	461d      	movlt	r5, r3
 8009880:	2300      	movge	r3, #0
 8009882:	232d      	movlt	r3, #45	; 0x2d
 8009884:	700b      	strb	r3, [r1, #0]
 8009886:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009888:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800988c:	4691      	mov	r9, r2
 800988e:	f023 0820 	bic.w	r8, r3, #32
 8009892:	bfbc      	itt	lt
 8009894:	4622      	movlt	r2, r4
 8009896:	4614      	movlt	r4, r2
 8009898:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800989c:	d005      	beq.n	80098aa <__cvt+0x42>
 800989e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80098a2:	d100      	bne.n	80098a6 <__cvt+0x3e>
 80098a4:	3601      	adds	r6, #1
 80098a6:	2102      	movs	r1, #2
 80098a8:	e000      	b.n	80098ac <__cvt+0x44>
 80098aa:	2103      	movs	r1, #3
 80098ac:	ab03      	add	r3, sp, #12
 80098ae:	9301      	str	r3, [sp, #4]
 80098b0:	ab02      	add	r3, sp, #8
 80098b2:	9300      	str	r3, [sp, #0]
 80098b4:	ec45 4b10 	vmov	d0, r4, r5
 80098b8:	4653      	mov	r3, sl
 80098ba:	4632      	mov	r2, r6
 80098bc:	f000 fcec 	bl	800a298 <_dtoa_r>
 80098c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80098c4:	4607      	mov	r7, r0
 80098c6:	d102      	bne.n	80098ce <__cvt+0x66>
 80098c8:	f019 0f01 	tst.w	r9, #1
 80098cc:	d022      	beq.n	8009914 <__cvt+0xac>
 80098ce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80098d2:	eb07 0906 	add.w	r9, r7, r6
 80098d6:	d110      	bne.n	80098fa <__cvt+0x92>
 80098d8:	783b      	ldrb	r3, [r7, #0]
 80098da:	2b30      	cmp	r3, #48	; 0x30
 80098dc:	d10a      	bne.n	80098f4 <__cvt+0x8c>
 80098de:	2200      	movs	r2, #0
 80098e0:	2300      	movs	r3, #0
 80098e2:	4620      	mov	r0, r4
 80098e4:	4629      	mov	r1, r5
 80098e6:	f7f7 f8f7 	bl	8000ad8 <__aeabi_dcmpeq>
 80098ea:	b918      	cbnz	r0, 80098f4 <__cvt+0x8c>
 80098ec:	f1c6 0601 	rsb	r6, r6, #1
 80098f0:	f8ca 6000 	str.w	r6, [sl]
 80098f4:	f8da 3000 	ldr.w	r3, [sl]
 80098f8:	4499      	add	r9, r3
 80098fa:	2200      	movs	r2, #0
 80098fc:	2300      	movs	r3, #0
 80098fe:	4620      	mov	r0, r4
 8009900:	4629      	mov	r1, r5
 8009902:	f7f7 f8e9 	bl	8000ad8 <__aeabi_dcmpeq>
 8009906:	b108      	cbz	r0, 800990c <__cvt+0xa4>
 8009908:	f8cd 900c 	str.w	r9, [sp, #12]
 800990c:	2230      	movs	r2, #48	; 0x30
 800990e:	9b03      	ldr	r3, [sp, #12]
 8009910:	454b      	cmp	r3, r9
 8009912:	d307      	bcc.n	8009924 <__cvt+0xbc>
 8009914:	9b03      	ldr	r3, [sp, #12]
 8009916:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009918:	1bdb      	subs	r3, r3, r7
 800991a:	4638      	mov	r0, r7
 800991c:	6013      	str	r3, [r2, #0]
 800991e:	b004      	add	sp, #16
 8009920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009924:	1c59      	adds	r1, r3, #1
 8009926:	9103      	str	r1, [sp, #12]
 8009928:	701a      	strb	r2, [r3, #0]
 800992a:	e7f0      	b.n	800990e <__cvt+0xa6>

0800992c <__exponent>:
 800992c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800992e:	4603      	mov	r3, r0
 8009930:	2900      	cmp	r1, #0
 8009932:	bfb8      	it	lt
 8009934:	4249      	neglt	r1, r1
 8009936:	f803 2b02 	strb.w	r2, [r3], #2
 800993a:	bfb4      	ite	lt
 800993c:	222d      	movlt	r2, #45	; 0x2d
 800993e:	222b      	movge	r2, #43	; 0x2b
 8009940:	2909      	cmp	r1, #9
 8009942:	7042      	strb	r2, [r0, #1]
 8009944:	dd2a      	ble.n	800999c <__exponent+0x70>
 8009946:	f10d 0407 	add.w	r4, sp, #7
 800994a:	46a4      	mov	ip, r4
 800994c:	270a      	movs	r7, #10
 800994e:	46a6      	mov	lr, r4
 8009950:	460a      	mov	r2, r1
 8009952:	fb91 f6f7 	sdiv	r6, r1, r7
 8009956:	fb07 1516 	mls	r5, r7, r6, r1
 800995a:	3530      	adds	r5, #48	; 0x30
 800995c:	2a63      	cmp	r2, #99	; 0x63
 800995e:	f104 34ff 	add.w	r4, r4, #4294967295
 8009962:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009966:	4631      	mov	r1, r6
 8009968:	dcf1      	bgt.n	800994e <__exponent+0x22>
 800996a:	3130      	adds	r1, #48	; 0x30
 800996c:	f1ae 0502 	sub.w	r5, lr, #2
 8009970:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009974:	1c44      	adds	r4, r0, #1
 8009976:	4629      	mov	r1, r5
 8009978:	4561      	cmp	r1, ip
 800997a:	d30a      	bcc.n	8009992 <__exponent+0x66>
 800997c:	f10d 0209 	add.w	r2, sp, #9
 8009980:	eba2 020e 	sub.w	r2, r2, lr
 8009984:	4565      	cmp	r5, ip
 8009986:	bf88      	it	hi
 8009988:	2200      	movhi	r2, #0
 800998a:	4413      	add	r3, r2
 800998c:	1a18      	subs	r0, r3, r0
 800998e:	b003      	add	sp, #12
 8009990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009992:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009996:	f804 2f01 	strb.w	r2, [r4, #1]!
 800999a:	e7ed      	b.n	8009978 <__exponent+0x4c>
 800999c:	2330      	movs	r3, #48	; 0x30
 800999e:	3130      	adds	r1, #48	; 0x30
 80099a0:	7083      	strb	r3, [r0, #2]
 80099a2:	70c1      	strb	r1, [r0, #3]
 80099a4:	1d03      	adds	r3, r0, #4
 80099a6:	e7f1      	b.n	800998c <__exponent+0x60>

080099a8 <_printf_float>:
 80099a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ac:	ed2d 8b02 	vpush	{d8}
 80099b0:	b08d      	sub	sp, #52	; 0x34
 80099b2:	460c      	mov	r4, r1
 80099b4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80099b8:	4616      	mov	r6, r2
 80099ba:	461f      	mov	r7, r3
 80099bc:	4605      	mov	r5, r0
 80099be:	f001 fb4d 	bl	800b05c <_localeconv_r>
 80099c2:	f8d0 a000 	ldr.w	sl, [r0]
 80099c6:	4650      	mov	r0, sl
 80099c8:	f7f6 fc0a 	bl	80001e0 <strlen>
 80099cc:	2300      	movs	r3, #0
 80099ce:	930a      	str	r3, [sp, #40]	; 0x28
 80099d0:	6823      	ldr	r3, [r4, #0]
 80099d2:	9305      	str	r3, [sp, #20]
 80099d4:	f8d8 3000 	ldr.w	r3, [r8]
 80099d8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80099dc:	3307      	adds	r3, #7
 80099de:	f023 0307 	bic.w	r3, r3, #7
 80099e2:	f103 0208 	add.w	r2, r3, #8
 80099e6:	f8c8 2000 	str.w	r2, [r8]
 80099ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80099f2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80099f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80099fa:	9307      	str	r3, [sp, #28]
 80099fc:	f8cd 8018 	str.w	r8, [sp, #24]
 8009a00:	ee08 0a10 	vmov	s16, r0
 8009a04:	4b9f      	ldr	r3, [pc, #636]	; (8009c84 <_printf_float+0x2dc>)
 8009a06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8009a0e:	f7f7 f895 	bl	8000b3c <__aeabi_dcmpun>
 8009a12:	bb88      	cbnz	r0, 8009a78 <_printf_float+0xd0>
 8009a14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a18:	4b9a      	ldr	r3, [pc, #616]	; (8009c84 <_printf_float+0x2dc>)
 8009a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8009a1e:	f7f7 f86f 	bl	8000b00 <__aeabi_dcmple>
 8009a22:	bb48      	cbnz	r0, 8009a78 <_printf_float+0xd0>
 8009a24:	2200      	movs	r2, #0
 8009a26:	2300      	movs	r3, #0
 8009a28:	4640      	mov	r0, r8
 8009a2a:	4649      	mov	r1, r9
 8009a2c:	f7f7 f85e 	bl	8000aec <__aeabi_dcmplt>
 8009a30:	b110      	cbz	r0, 8009a38 <_printf_float+0x90>
 8009a32:	232d      	movs	r3, #45	; 0x2d
 8009a34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a38:	4b93      	ldr	r3, [pc, #588]	; (8009c88 <_printf_float+0x2e0>)
 8009a3a:	4894      	ldr	r0, [pc, #592]	; (8009c8c <_printf_float+0x2e4>)
 8009a3c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009a40:	bf94      	ite	ls
 8009a42:	4698      	movls	r8, r3
 8009a44:	4680      	movhi	r8, r0
 8009a46:	2303      	movs	r3, #3
 8009a48:	6123      	str	r3, [r4, #16]
 8009a4a:	9b05      	ldr	r3, [sp, #20]
 8009a4c:	f023 0204 	bic.w	r2, r3, #4
 8009a50:	6022      	str	r2, [r4, #0]
 8009a52:	f04f 0900 	mov.w	r9, #0
 8009a56:	9700      	str	r7, [sp, #0]
 8009a58:	4633      	mov	r3, r6
 8009a5a:	aa0b      	add	r2, sp, #44	; 0x2c
 8009a5c:	4621      	mov	r1, r4
 8009a5e:	4628      	mov	r0, r5
 8009a60:	f000 f9d8 	bl	8009e14 <_printf_common>
 8009a64:	3001      	adds	r0, #1
 8009a66:	f040 8090 	bne.w	8009b8a <_printf_float+0x1e2>
 8009a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8009a6e:	b00d      	add	sp, #52	; 0x34
 8009a70:	ecbd 8b02 	vpop	{d8}
 8009a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a78:	4642      	mov	r2, r8
 8009a7a:	464b      	mov	r3, r9
 8009a7c:	4640      	mov	r0, r8
 8009a7e:	4649      	mov	r1, r9
 8009a80:	f7f7 f85c 	bl	8000b3c <__aeabi_dcmpun>
 8009a84:	b140      	cbz	r0, 8009a98 <_printf_float+0xf0>
 8009a86:	464b      	mov	r3, r9
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	bfbc      	itt	lt
 8009a8c:	232d      	movlt	r3, #45	; 0x2d
 8009a8e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009a92:	487f      	ldr	r0, [pc, #508]	; (8009c90 <_printf_float+0x2e8>)
 8009a94:	4b7f      	ldr	r3, [pc, #508]	; (8009c94 <_printf_float+0x2ec>)
 8009a96:	e7d1      	b.n	8009a3c <_printf_float+0x94>
 8009a98:	6863      	ldr	r3, [r4, #4]
 8009a9a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009a9e:	9206      	str	r2, [sp, #24]
 8009aa0:	1c5a      	adds	r2, r3, #1
 8009aa2:	d13f      	bne.n	8009b24 <_printf_float+0x17c>
 8009aa4:	2306      	movs	r3, #6
 8009aa6:	6063      	str	r3, [r4, #4]
 8009aa8:	9b05      	ldr	r3, [sp, #20]
 8009aaa:	6861      	ldr	r1, [r4, #4]
 8009aac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	9303      	str	r3, [sp, #12]
 8009ab4:	ab0a      	add	r3, sp, #40	; 0x28
 8009ab6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009aba:	ab09      	add	r3, sp, #36	; 0x24
 8009abc:	ec49 8b10 	vmov	d0, r8, r9
 8009ac0:	9300      	str	r3, [sp, #0]
 8009ac2:	6022      	str	r2, [r4, #0]
 8009ac4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009ac8:	4628      	mov	r0, r5
 8009aca:	f7ff fecd 	bl	8009868 <__cvt>
 8009ace:	9b06      	ldr	r3, [sp, #24]
 8009ad0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ad2:	2b47      	cmp	r3, #71	; 0x47
 8009ad4:	4680      	mov	r8, r0
 8009ad6:	d108      	bne.n	8009aea <_printf_float+0x142>
 8009ad8:	1cc8      	adds	r0, r1, #3
 8009ada:	db02      	blt.n	8009ae2 <_printf_float+0x13a>
 8009adc:	6863      	ldr	r3, [r4, #4]
 8009ade:	4299      	cmp	r1, r3
 8009ae0:	dd41      	ble.n	8009b66 <_printf_float+0x1be>
 8009ae2:	f1ab 0b02 	sub.w	fp, fp, #2
 8009ae6:	fa5f fb8b 	uxtb.w	fp, fp
 8009aea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009aee:	d820      	bhi.n	8009b32 <_printf_float+0x18a>
 8009af0:	3901      	subs	r1, #1
 8009af2:	465a      	mov	r2, fp
 8009af4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009af8:	9109      	str	r1, [sp, #36]	; 0x24
 8009afa:	f7ff ff17 	bl	800992c <__exponent>
 8009afe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b00:	1813      	adds	r3, r2, r0
 8009b02:	2a01      	cmp	r2, #1
 8009b04:	4681      	mov	r9, r0
 8009b06:	6123      	str	r3, [r4, #16]
 8009b08:	dc02      	bgt.n	8009b10 <_printf_float+0x168>
 8009b0a:	6822      	ldr	r2, [r4, #0]
 8009b0c:	07d2      	lsls	r2, r2, #31
 8009b0e:	d501      	bpl.n	8009b14 <_printf_float+0x16c>
 8009b10:	3301      	adds	r3, #1
 8009b12:	6123      	str	r3, [r4, #16]
 8009b14:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d09c      	beq.n	8009a56 <_printf_float+0xae>
 8009b1c:	232d      	movs	r3, #45	; 0x2d
 8009b1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b22:	e798      	b.n	8009a56 <_printf_float+0xae>
 8009b24:	9a06      	ldr	r2, [sp, #24]
 8009b26:	2a47      	cmp	r2, #71	; 0x47
 8009b28:	d1be      	bne.n	8009aa8 <_printf_float+0x100>
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d1bc      	bne.n	8009aa8 <_printf_float+0x100>
 8009b2e:	2301      	movs	r3, #1
 8009b30:	e7b9      	b.n	8009aa6 <_printf_float+0xfe>
 8009b32:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009b36:	d118      	bne.n	8009b6a <_printf_float+0x1c2>
 8009b38:	2900      	cmp	r1, #0
 8009b3a:	6863      	ldr	r3, [r4, #4]
 8009b3c:	dd0b      	ble.n	8009b56 <_printf_float+0x1ae>
 8009b3e:	6121      	str	r1, [r4, #16]
 8009b40:	b913      	cbnz	r3, 8009b48 <_printf_float+0x1a0>
 8009b42:	6822      	ldr	r2, [r4, #0]
 8009b44:	07d0      	lsls	r0, r2, #31
 8009b46:	d502      	bpl.n	8009b4e <_printf_float+0x1a6>
 8009b48:	3301      	adds	r3, #1
 8009b4a:	440b      	add	r3, r1
 8009b4c:	6123      	str	r3, [r4, #16]
 8009b4e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009b50:	f04f 0900 	mov.w	r9, #0
 8009b54:	e7de      	b.n	8009b14 <_printf_float+0x16c>
 8009b56:	b913      	cbnz	r3, 8009b5e <_printf_float+0x1b6>
 8009b58:	6822      	ldr	r2, [r4, #0]
 8009b5a:	07d2      	lsls	r2, r2, #31
 8009b5c:	d501      	bpl.n	8009b62 <_printf_float+0x1ba>
 8009b5e:	3302      	adds	r3, #2
 8009b60:	e7f4      	b.n	8009b4c <_printf_float+0x1a4>
 8009b62:	2301      	movs	r3, #1
 8009b64:	e7f2      	b.n	8009b4c <_printf_float+0x1a4>
 8009b66:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009b6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b6c:	4299      	cmp	r1, r3
 8009b6e:	db05      	blt.n	8009b7c <_printf_float+0x1d4>
 8009b70:	6823      	ldr	r3, [r4, #0]
 8009b72:	6121      	str	r1, [r4, #16]
 8009b74:	07d8      	lsls	r0, r3, #31
 8009b76:	d5ea      	bpl.n	8009b4e <_printf_float+0x1a6>
 8009b78:	1c4b      	adds	r3, r1, #1
 8009b7a:	e7e7      	b.n	8009b4c <_printf_float+0x1a4>
 8009b7c:	2900      	cmp	r1, #0
 8009b7e:	bfd4      	ite	le
 8009b80:	f1c1 0202 	rsble	r2, r1, #2
 8009b84:	2201      	movgt	r2, #1
 8009b86:	4413      	add	r3, r2
 8009b88:	e7e0      	b.n	8009b4c <_printf_float+0x1a4>
 8009b8a:	6823      	ldr	r3, [r4, #0]
 8009b8c:	055a      	lsls	r2, r3, #21
 8009b8e:	d407      	bmi.n	8009ba0 <_printf_float+0x1f8>
 8009b90:	6923      	ldr	r3, [r4, #16]
 8009b92:	4642      	mov	r2, r8
 8009b94:	4631      	mov	r1, r6
 8009b96:	4628      	mov	r0, r5
 8009b98:	47b8      	blx	r7
 8009b9a:	3001      	adds	r0, #1
 8009b9c:	d12c      	bne.n	8009bf8 <_printf_float+0x250>
 8009b9e:	e764      	b.n	8009a6a <_printf_float+0xc2>
 8009ba0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009ba4:	f240 80e0 	bls.w	8009d68 <_printf_float+0x3c0>
 8009ba8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009bac:	2200      	movs	r2, #0
 8009bae:	2300      	movs	r3, #0
 8009bb0:	f7f6 ff92 	bl	8000ad8 <__aeabi_dcmpeq>
 8009bb4:	2800      	cmp	r0, #0
 8009bb6:	d034      	beq.n	8009c22 <_printf_float+0x27a>
 8009bb8:	4a37      	ldr	r2, [pc, #220]	; (8009c98 <_printf_float+0x2f0>)
 8009bba:	2301      	movs	r3, #1
 8009bbc:	4631      	mov	r1, r6
 8009bbe:	4628      	mov	r0, r5
 8009bc0:	47b8      	blx	r7
 8009bc2:	3001      	adds	r0, #1
 8009bc4:	f43f af51 	beq.w	8009a6a <_printf_float+0xc2>
 8009bc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	db02      	blt.n	8009bd6 <_printf_float+0x22e>
 8009bd0:	6823      	ldr	r3, [r4, #0]
 8009bd2:	07d8      	lsls	r0, r3, #31
 8009bd4:	d510      	bpl.n	8009bf8 <_printf_float+0x250>
 8009bd6:	ee18 3a10 	vmov	r3, s16
 8009bda:	4652      	mov	r2, sl
 8009bdc:	4631      	mov	r1, r6
 8009bde:	4628      	mov	r0, r5
 8009be0:	47b8      	blx	r7
 8009be2:	3001      	adds	r0, #1
 8009be4:	f43f af41 	beq.w	8009a6a <_printf_float+0xc2>
 8009be8:	f04f 0800 	mov.w	r8, #0
 8009bec:	f104 091a 	add.w	r9, r4, #26
 8009bf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bf2:	3b01      	subs	r3, #1
 8009bf4:	4543      	cmp	r3, r8
 8009bf6:	dc09      	bgt.n	8009c0c <_printf_float+0x264>
 8009bf8:	6823      	ldr	r3, [r4, #0]
 8009bfa:	079b      	lsls	r3, r3, #30
 8009bfc:	f100 8105 	bmi.w	8009e0a <_printf_float+0x462>
 8009c00:	68e0      	ldr	r0, [r4, #12]
 8009c02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c04:	4298      	cmp	r0, r3
 8009c06:	bfb8      	it	lt
 8009c08:	4618      	movlt	r0, r3
 8009c0a:	e730      	b.n	8009a6e <_printf_float+0xc6>
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	464a      	mov	r2, r9
 8009c10:	4631      	mov	r1, r6
 8009c12:	4628      	mov	r0, r5
 8009c14:	47b8      	blx	r7
 8009c16:	3001      	adds	r0, #1
 8009c18:	f43f af27 	beq.w	8009a6a <_printf_float+0xc2>
 8009c1c:	f108 0801 	add.w	r8, r8, #1
 8009c20:	e7e6      	b.n	8009bf0 <_printf_float+0x248>
 8009c22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	dc39      	bgt.n	8009c9c <_printf_float+0x2f4>
 8009c28:	4a1b      	ldr	r2, [pc, #108]	; (8009c98 <_printf_float+0x2f0>)
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	4631      	mov	r1, r6
 8009c2e:	4628      	mov	r0, r5
 8009c30:	47b8      	blx	r7
 8009c32:	3001      	adds	r0, #1
 8009c34:	f43f af19 	beq.w	8009a6a <_printf_float+0xc2>
 8009c38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c3c:	4313      	orrs	r3, r2
 8009c3e:	d102      	bne.n	8009c46 <_printf_float+0x29e>
 8009c40:	6823      	ldr	r3, [r4, #0]
 8009c42:	07d9      	lsls	r1, r3, #31
 8009c44:	d5d8      	bpl.n	8009bf8 <_printf_float+0x250>
 8009c46:	ee18 3a10 	vmov	r3, s16
 8009c4a:	4652      	mov	r2, sl
 8009c4c:	4631      	mov	r1, r6
 8009c4e:	4628      	mov	r0, r5
 8009c50:	47b8      	blx	r7
 8009c52:	3001      	adds	r0, #1
 8009c54:	f43f af09 	beq.w	8009a6a <_printf_float+0xc2>
 8009c58:	f04f 0900 	mov.w	r9, #0
 8009c5c:	f104 0a1a 	add.w	sl, r4, #26
 8009c60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c62:	425b      	negs	r3, r3
 8009c64:	454b      	cmp	r3, r9
 8009c66:	dc01      	bgt.n	8009c6c <_printf_float+0x2c4>
 8009c68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c6a:	e792      	b.n	8009b92 <_printf_float+0x1ea>
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	4652      	mov	r2, sl
 8009c70:	4631      	mov	r1, r6
 8009c72:	4628      	mov	r0, r5
 8009c74:	47b8      	blx	r7
 8009c76:	3001      	adds	r0, #1
 8009c78:	f43f aef7 	beq.w	8009a6a <_printf_float+0xc2>
 8009c7c:	f109 0901 	add.w	r9, r9, #1
 8009c80:	e7ee      	b.n	8009c60 <_printf_float+0x2b8>
 8009c82:	bf00      	nop
 8009c84:	7fefffff 	.word	0x7fefffff
 8009c88:	0800c61c 	.word	0x0800c61c
 8009c8c:	0800c620 	.word	0x0800c620
 8009c90:	0800c628 	.word	0x0800c628
 8009c94:	0800c624 	.word	0x0800c624
 8009c98:	0800c62c 	.word	0x0800c62c
 8009c9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ca0:	429a      	cmp	r2, r3
 8009ca2:	bfa8      	it	ge
 8009ca4:	461a      	movge	r2, r3
 8009ca6:	2a00      	cmp	r2, #0
 8009ca8:	4691      	mov	r9, r2
 8009caa:	dc37      	bgt.n	8009d1c <_printf_float+0x374>
 8009cac:	f04f 0b00 	mov.w	fp, #0
 8009cb0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009cb4:	f104 021a 	add.w	r2, r4, #26
 8009cb8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009cba:	9305      	str	r3, [sp, #20]
 8009cbc:	eba3 0309 	sub.w	r3, r3, r9
 8009cc0:	455b      	cmp	r3, fp
 8009cc2:	dc33      	bgt.n	8009d2c <_printf_float+0x384>
 8009cc4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	db3b      	blt.n	8009d44 <_printf_float+0x39c>
 8009ccc:	6823      	ldr	r3, [r4, #0]
 8009cce:	07da      	lsls	r2, r3, #31
 8009cd0:	d438      	bmi.n	8009d44 <_printf_float+0x39c>
 8009cd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009cd4:	9b05      	ldr	r3, [sp, #20]
 8009cd6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009cd8:	1ad3      	subs	r3, r2, r3
 8009cda:	eba2 0901 	sub.w	r9, r2, r1
 8009cde:	4599      	cmp	r9, r3
 8009ce0:	bfa8      	it	ge
 8009ce2:	4699      	movge	r9, r3
 8009ce4:	f1b9 0f00 	cmp.w	r9, #0
 8009ce8:	dc35      	bgt.n	8009d56 <_printf_float+0x3ae>
 8009cea:	f04f 0800 	mov.w	r8, #0
 8009cee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009cf2:	f104 0a1a 	add.w	sl, r4, #26
 8009cf6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009cfa:	1a9b      	subs	r3, r3, r2
 8009cfc:	eba3 0309 	sub.w	r3, r3, r9
 8009d00:	4543      	cmp	r3, r8
 8009d02:	f77f af79 	ble.w	8009bf8 <_printf_float+0x250>
 8009d06:	2301      	movs	r3, #1
 8009d08:	4652      	mov	r2, sl
 8009d0a:	4631      	mov	r1, r6
 8009d0c:	4628      	mov	r0, r5
 8009d0e:	47b8      	blx	r7
 8009d10:	3001      	adds	r0, #1
 8009d12:	f43f aeaa 	beq.w	8009a6a <_printf_float+0xc2>
 8009d16:	f108 0801 	add.w	r8, r8, #1
 8009d1a:	e7ec      	b.n	8009cf6 <_printf_float+0x34e>
 8009d1c:	4613      	mov	r3, r2
 8009d1e:	4631      	mov	r1, r6
 8009d20:	4642      	mov	r2, r8
 8009d22:	4628      	mov	r0, r5
 8009d24:	47b8      	blx	r7
 8009d26:	3001      	adds	r0, #1
 8009d28:	d1c0      	bne.n	8009cac <_printf_float+0x304>
 8009d2a:	e69e      	b.n	8009a6a <_printf_float+0xc2>
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	4631      	mov	r1, r6
 8009d30:	4628      	mov	r0, r5
 8009d32:	9205      	str	r2, [sp, #20]
 8009d34:	47b8      	blx	r7
 8009d36:	3001      	adds	r0, #1
 8009d38:	f43f ae97 	beq.w	8009a6a <_printf_float+0xc2>
 8009d3c:	9a05      	ldr	r2, [sp, #20]
 8009d3e:	f10b 0b01 	add.w	fp, fp, #1
 8009d42:	e7b9      	b.n	8009cb8 <_printf_float+0x310>
 8009d44:	ee18 3a10 	vmov	r3, s16
 8009d48:	4652      	mov	r2, sl
 8009d4a:	4631      	mov	r1, r6
 8009d4c:	4628      	mov	r0, r5
 8009d4e:	47b8      	blx	r7
 8009d50:	3001      	adds	r0, #1
 8009d52:	d1be      	bne.n	8009cd2 <_printf_float+0x32a>
 8009d54:	e689      	b.n	8009a6a <_printf_float+0xc2>
 8009d56:	9a05      	ldr	r2, [sp, #20]
 8009d58:	464b      	mov	r3, r9
 8009d5a:	4442      	add	r2, r8
 8009d5c:	4631      	mov	r1, r6
 8009d5e:	4628      	mov	r0, r5
 8009d60:	47b8      	blx	r7
 8009d62:	3001      	adds	r0, #1
 8009d64:	d1c1      	bne.n	8009cea <_printf_float+0x342>
 8009d66:	e680      	b.n	8009a6a <_printf_float+0xc2>
 8009d68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d6a:	2a01      	cmp	r2, #1
 8009d6c:	dc01      	bgt.n	8009d72 <_printf_float+0x3ca>
 8009d6e:	07db      	lsls	r3, r3, #31
 8009d70:	d538      	bpl.n	8009de4 <_printf_float+0x43c>
 8009d72:	2301      	movs	r3, #1
 8009d74:	4642      	mov	r2, r8
 8009d76:	4631      	mov	r1, r6
 8009d78:	4628      	mov	r0, r5
 8009d7a:	47b8      	blx	r7
 8009d7c:	3001      	adds	r0, #1
 8009d7e:	f43f ae74 	beq.w	8009a6a <_printf_float+0xc2>
 8009d82:	ee18 3a10 	vmov	r3, s16
 8009d86:	4652      	mov	r2, sl
 8009d88:	4631      	mov	r1, r6
 8009d8a:	4628      	mov	r0, r5
 8009d8c:	47b8      	blx	r7
 8009d8e:	3001      	adds	r0, #1
 8009d90:	f43f ae6b 	beq.w	8009a6a <_printf_float+0xc2>
 8009d94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009d98:	2200      	movs	r2, #0
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	f7f6 fe9c 	bl	8000ad8 <__aeabi_dcmpeq>
 8009da0:	b9d8      	cbnz	r0, 8009dda <_printf_float+0x432>
 8009da2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009da4:	f108 0201 	add.w	r2, r8, #1
 8009da8:	3b01      	subs	r3, #1
 8009daa:	4631      	mov	r1, r6
 8009dac:	4628      	mov	r0, r5
 8009dae:	47b8      	blx	r7
 8009db0:	3001      	adds	r0, #1
 8009db2:	d10e      	bne.n	8009dd2 <_printf_float+0x42a>
 8009db4:	e659      	b.n	8009a6a <_printf_float+0xc2>
 8009db6:	2301      	movs	r3, #1
 8009db8:	4652      	mov	r2, sl
 8009dba:	4631      	mov	r1, r6
 8009dbc:	4628      	mov	r0, r5
 8009dbe:	47b8      	blx	r7
 8009dc0:	3001      	adds	r0, #1
 8009dc2:	f43f ae52 	beq.w	8009a6a <_printf_float+0xc2>
 8009dc6:	f108 0801 	add.w	r8, r8, #1
 8009dca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dcc:	3b01      	subs	r3, #1
 8009dce:	4543      	cmp	r3, r8
 8009dd0:	dcf1      	bgt.n	8009db6 <_printf_float+0x40e>
 8009dd2:	464b      	mov	r3, r9
 8009dd4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009dd8:	e6dc      	b.n	8009b94 <_printf_float+0x1ec>
 8009dda:	f04f 0800 	mov.w	r8, #0
 8009dde:	f104 0a1a 	add.w	sl, r4, #26
 8009de2:	e7f2      	b.n	8009dca <_printf_float+0x422>
 8009de4:	2301      	movs	r3, #1
 8009de6:	4642      	mov	r2, r8
 8009de8:	e7df      	b.n	8009daa <_printf_float+0x402>
 8009dea:	2301      	movs	r3, #1
 8009dec:	464a      	mov	r2, r9
 8009dee:	4631      	mov	r1, r6
 8009df0:	4628      	mov	r0, r5
 8009df2:	47b8      	blx	r7
 8009df4:	3001      	adds	r0, #1
 8009df6:	f43f ae38 	beq.w	8009a6a <_printf_float+0xc2>
 8009dfa:	f108 0801 	add.w	r8, r8, #1
 8009dfe:	68e3      	ldr	r3, [r4, #12]
 8009e00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009e02:	1a5b      	subs	r3, r3, r1
 8009e04:	4543      	cmp	r3, r8
 8009e06:	dcf0      	bgt.n	8009dea <_printf_float+0x442>
 8009e08:	e6fa      	b.n	8009c00 <_printf_float+0x258>
 8009e0a:	f04f 0800 	mov.w	r8, #0
 8009e0e:	f104 0919 	add.w	r9, r4, #25
 8009e12:	e7f4      	b.n	8009dfe <_printf_float+0x456>

08009e14 <_printf_common>:
 8009e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e18:	4616      	mov	r6, r2
 8009e1a:	4699      	mov	r9, r3
 8009e1c:	688a      	ldr	r2, [r1, #8]
 8009e1e:	690b      	ldr	r3, [r1, #16]
 8009e20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009e24:	4293      	cmp	r3, r2
 8009e26:	bfb8      	it	lt
 8009e28:	4613      	movlt	r3, r2
 8009e2a:	6033      	str	r3, [r6, #0]
 8009e2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009e30:	4607      	mov	r7, r0
 8009e32:	460c      	mov	r4, r1
 8009e34:	b10a      	cbz	r2, 8009e3a <_printf_common+0x26>
 8009e36:	3301      	adds	r3, #1
 8009e38:	6033      	str	r3, [r6, #0]
 8009e3a:	6823      	ldr	r3, [r4, #0]
 8009e3c:	0699      	lsls	r1, r3, #26
 8009e3e:	bf42      	ittt	mi
 8009e40:	6833      	ldrmi	r3, [r6, #0]
 8009e42:	3302      	addmi	r3, #2
 8009e44:	6033      	strmi	r3, [r6, #0]
 8009e46:	6825      	ldr	r5, [r4, #0]
 8009e48:	f015 0506 	ands.w	r5, r5, #6
 8009e4c:	d106      	bne.n	8009e5c <_printf_common+0x48>
 8009e4e:	f104 0a19 	add.w	sl, r4, #25
 8009e52:	68e3      	ldr	r3, [r4, #12]
 8009e54:	6832      	ldr	r2, [r6, #0]
 8009e56:	1a9b      	subs	r3, r3, r2
 8009e58:	42ab      	cmp	r3, r5
 8009e5a:	dc26      	bgt.n	8009eaa <_printf_common+0x96>
 8009e5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009e60:	1e13      	subs	r3, r2, #0
 8009e62:	6822      	ldr	r2, [r4, #0]
 8009e64:	bf18      	it	ne
 8009e66:	2301      	movne	r3, #1
 8009e68:	0692      	lsls	r2, r2, #26
 8009e6a:	d42b      	bmi.n	8009ec4 <_printf_common+0xb0>
 8009e6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e70:	4649      	mov	r1, r9
 8009e72:	4638      	mov	r0, r7
 8009e74:	47c0      	blx	r8
 8009e76:	3001      	adds	r0, #1
 8009e78:	d01e      	beq.n	8009eb8 <_printf_common+0xa4>
 8009e7a:	6823      	ldr	r3, [r4, #0]
 8009e7c:	68e5      	ldr	r5, [r4, #12]
 8009e7e:	6832      	ldr	r2, [r6, #0]
 8009e80:	f003 0306 	and.w	r3, r3, #6
 8009e84:	2b04      	cmp	r3, #4
 8009e86:	bf08      	it	eq
 8009e88:	1aad      	subeq	r5, r5, r2
 8009e8a:	68a3      	ldr	r3, [r4, #8]
 8009e8c:	6922      	ldr	r2, [r4, #16]
 8009e8e:	bf0c      	ite	eq
 8009e90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e94:	2500      	movne	r5, #0
 8009e96:	4293      	cmp	r3, r2
 8009e98:	bfc4      	itt	gt
 8009e9a:	1a9b      	subgt	r3, r3, r2
 8009e9c:	18ed      	addgt	r5, r5, r3
 8009e9e:	2600      	movs	r6, #0
 8009ea0:	341a      	adds	r4, #26
 8009ea2:	42b5      	cmp	r5, r6
 8009ea4:	d11a      	bne.n	8009edc <_printf_common+0xc8>
 8009ea6:	2000      	movs	r0, #0
 8009ea8:	e008      	b.n	8009ebc <_printf_common+0xa8>
 8009eaa:	2301      	movs	r3, #1
 8009eac:	4652      	mov	r2, sl
 8009eae:	4649      	mov	r1, r9
 8009eb0:	4638      	mov	r0, r7
 8009eb2:	47c0      	blx	r8
 8009eb4:	3001      	adds	r0, #1
 8009eb6:	d103      	bne.n	8009ec0 <_printf_common+0xac>
 8009eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8009ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ec0:	3501      	adds	r5, #1
 8009ec2:	e7c6      	b.n	8009e52 <_printf_common+0x3e>
 8009ec4:	18e1      	adds	r1, r4, r3
 8009ec6:	1c5a      	adds	r2, r3, #1
 8009ec8:	2030      	movs	r0, #48	; 0x30
 8009eca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009ece:	4422      	add	r2, r4
 8009ed0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009ed4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ed8:	3302      	adds	r3, #2
 8009eda:	e7c7      	b.n	8009e6c <_printf_common+0x58>
 8009edc:	2301      	movs	r3, #1
 8009ede:	4622      	mov	r2, r4
 8009ee0:	4649      	mov	r1, r9
 8009ee2:	4638      	mov	r0, r7
 8009ee4:	47c0      	blx	r8
 8009ee6:	3001      	adds	r0, #1
 8009ee8:	d0e6      	beq.n	8009eb8 <_printf_common+0xa4>
 8009eea:	3601      	adds	r6, #1
 8009eec:	e7d9      	b.n	8009ea2 <_printf_common+0x8e>
	...

08009ef0 <_printf_i>:
 8009ef0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ef4:	460c      	mov	r4, r1
 8009ef6:	4691      	mov	r9, r2
 8009ef8:	7e27      	ldrb	r7, [r4, #24]
 8009efa:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009efc:	2f78      	cmp	r7, #120	; 0x78
 8009efe:	4680      	mov	r8, r0
 8009f00:	469a      	mov	sl, r3
 8009f02:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f06:	d807      	bhi.n	8009f18 <_printf_i+0x28>
 8009f08:	2f62      	cmp	r7, #98	; 0x62
 8009f0a:	d80a      	bhi.n	8009f22 <_printf_i+0x32>
 8009f0c:	2f00      	cmp	r7, #0
 8009f0e:	f000 80d8 	beq.w	800a0c2 <_printf_i+0x1d2>
 8009f12:	2f58      	cmp	r7, #88	; 0x58
 8009f14:	f000 80a3 	beq.w	800a05e <_printf_i+0x16e>
 8009f18:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009f1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009f20:	e03a      	b.n	8009f98 <_printf_i+0xa8>
 8009f22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009f26:	2b15      	cmp	r3, #21
 8009f28:	d8f6      	bhi.n	8009f18 <_printf_i+0x28>
 8009f2a:	a001      	add	r0, pc, #4	; (adr r0, 8009f30 <_printf_i+0x40>)
 8009f2c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009f30:	08009f89 	.word	0x08009f89
 8009f34:	08009f9d 	.word	0x08009f9d
 8009f38:	08009f19 	.word	0x08009f19
 8009f3c:	08009f19 	.word	0x08009f19
 8009f40:	08009f19 	.word	0x08009f19
 8009f44:	08009f19 	.word	0x08009f19
 8009f48:	08009f9d 	.word	0x08009f9d
 8009f4c:	08009f19 	.word	0x08009f19
 8009f50:	08009f19 	.word	0x08009f19
 8009f54:	08009f19 	.word	0x08009f19
 8009f58:	08009f19 	.word	0x08009f19
 8009f5c:	0800a0a9 	.word	0x0800a0a9
 8009f60:	08009fcd 	.word	0x08009fcd
 8009f64:	0800a08b 	.word	0x0800a08b
 8009f68:	08009f19 	.word	0x08009f19
 8009f6c:	08009f19 	.word	0x08009f19
 8009f70:	0800a0cb 	.word	0x0800a0cb
 8009f74:	08009f19 	.word	0x08009f19
 8009f78:	08009fcd 	.word	0x08009fcd
 8009f7c:	08009f19 	.word	0x08009f19
 8009f80:	08009f19 	.word	0x08009f19
 8009f84:	0800a093 	.word	0x0800a093
 8009f88:	680b      	ldr	r3, [r1, #0]
 8009f8a:	1d1a      	adds	r2, r3, #4
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	600a      	str	r2, [r1, #0]
 8009f90:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009f94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f98:	2301      	movs	r3, #1
 8009f9a:	e0a3      	b.n	800a0e4 <_printf_i+0x1f4>
 8009f9c:	6825      	ldr	r5, [r4, #0]
 8009f9e:	6808      	ldr	r0, [r1, #0]
 8009fa0:	062e      	lsls	r6, r5, #24
 8009fa2:	f100 0304 	add.w	r3, r0, #4
 8009fa6:	d50a      	bpl.n	8009fbe <_printf_i+0xce>
 8009fa8:	6805      	ldr	r5, [r0, #0]
 8009faa:	600b      	str	r3, [r1, #0]
 8009fac:	2d00      	cmp	r5, #0
 8009fae:	da03      	bge.n	8009fb8 <_printf_i+0xc8>
 8009fb0:	232d      	movs	r3, #45	; 0x2d
 8009fb2:	426d      	negs	r5, r5
 8009fb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fb8:	485e      	ldr	r0, [pc, #376]	; (800a134 <_printf_i+0x244>)
 8009fba:	230a      	movs	r3, #10
 8009fbc:	e019      	b.n	8009ff2 <_printf_i+0x102>
 8009fbe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009fc2:	6805      	ldr	r5, [r0, #0]
 8009fc4:	600b      	str	r3, [r1, #0]
 8009fc6:	bf18      	it	ne
 8009fc8:	b22d      	sxthne	r5, r5
 8009fca:	e7ef      	b.n	8009fac <_printf_i+0xbc>
 8009fcc:	680b      	ldr	r3, [r1, #0]
 8009fce:	6825      	ldr	r5, [r4, #0]
 8009fd0:	1d18      	adds	r0, r3, #4
 8009fd2:	6008      	str	r0, [r1, #0]
 8009fd4:	0628      	lsls	r0, r5, #24
 8009fd6:	d501      	bpl.n	8009fdc <_printf_i+0xec>
 8009fd8:	681d      	ldr	r5, [r3, #0]
 8009fda:	e002      	b.n	8009fe2 <_printf_i+0xf2>
 8009fdc:	0669      	lsls	r1, r5, #25
 8009fde:	d5fb      	bpl.n	8009fd8 <_printf_i+0xe8>
 8009fe0:	881d      	ldrh	r5, [r3, #0]
 8009fe2:	4854      	ldr	r0, [pc, #336]	; (800a134 <_printf_i+0x244>)
 8009fe4:	2f6f      	cmp	r7, #111	; 0x6f
 8009fe6:	bf0c      	ite	eq
 8009fe8:	2308      	moveq	r3, #8
 8009fea:	230a      	movne	r3, #10
 8009fec:	2100      	movs	r1, #0
 8009fee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009ff2:	6866      	ldr	r6, [r4, #4]
 8009ff4:	60a6      	str	r6, [r4, #8]
 8009ff6:	2e00      	cmp	r6, #0
 8009ff8:	bfa2      	ittt	ge
 8009ffa:	6821      	ldrge	r1, [r4, #0]
 8009ffc:	f021 0104 	bicge.w	r1, r1, #4
 800a000:	6021      	strge	r1, [r4, #0]
 800a002:	b90d      	cbnz	r5, 800a008 <_printf_i+0x118>
 800a004:	2e00      	cmp	r6, #0
 800a006:	d04d      	beq.n	800a0a4 <_printf_i+0x1b4>
 800a008:	4616      	mov	r6, r2
 800a00a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a00e:	fb03 5711 	mls	r7, r3, r1, r5
 800a012:	5dc7      	ldrb	r7, [r0, r7]
 800a014:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a018:	462f      	mov	r7, r5
 800a01a:	42bb      	cmp	r3, r7
 800a01c:	460d      	mov	r5, r1
 800a01e:	d9f4      	bls.n	800a00a <_printf_i+0x11a>
 800a020:	2b08      	cmp	r3, #8
 800a022:	d10b      	bne.n	800a03c <_printf_i+0x14c>
 800a024:	6823      	ldr	r3, [r4, #0]
 800a026:	07df      	lsls	r7, r3, #31
 800a028:	d508      	bpl.n	800a03c <_printf_i+0x14c>
 800a02a:	6923      	ldr	r3, [r4, #16]
 800a02c:	6861      	ldr	r1, [r4, #4]
 800a02e:	4299      	cmp	r1, r3
 800a030:	bfde      	ittt	le
 800a032:	2330      	movle	r3, #48	; 0x30
 800a034:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a038:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a03c:	1b92      	subs	r2, r2, r6
 800a03e:	6122      	str	r2, [r4, #16]
 800a040:	f8cd a000 	str.w	sl, [sp]
 800a044:	464b      	mov	r3, r9
 800a046:	aa03      	add	r2, sp, #12
 800a048:	4621      	mov	r1, r4
 800a04a:	4640      	mov	r0, r8
 800a04c:	f7ff fee2 	bl	8009e14 <_printf_common>
 800a050:	3001      	adds	r0, #1
 800a052:	d14c      	bne.n	800a0ee <_printf_i+0x1fe>
 800a054:	f04f 30ff 	mov.w	r0, #4294967295
 800a058:	b004      	add	sp, #16
 800a05a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a05e:	4835      	ldr	r0, [pc, #212]	; (800a134 <_printf_i+0x244>)
 800a060:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a064:	6823      	ldr	r3, [r4, #0]
 800a066:	680e      	ldr	r6, [r1, #0]
 800a068:	061f      	lsls	r7, r3, #24
 800a06a:	f856 5b04 	ldr.w	r5, [r6], #4
 800a06e:	600e      	str	r6, [r1, #0]
 800a070:	d514      	bpl.n	800a09c <_printf_i+0x1ac>
 800a072:	07d9      	lsls	r1, r3, #31
 800a074:	bf44      	itt	mi
 800a076:	f043 0320 	orrmi.w	r3, r3, #32
 800a07a:	6023      	strmi	r3, [r4, #0]
 800a07c:	b91d      	cbnz	r5, 800a086 <_printf_i+0x196>
 800a07e:	6823      	ldr	r3, [r4, #0]
 800a080:	f023 0320 	bic.w	r3, r3, #32
 800a084:	6023      	str	r3, [r4, #0]
 800a086:	2310      	movs	r3, #16
 800a088:	e7b0      	b.n	8009fec <_printf_i+0xfc>
 800a08a:	6823      	ldr	r3, [r4, #0]
 800a08c:	f043 0320 	orr.w	r3, r3, #32
 800a090:	6023      	str	r3, [r4, #0]
 800a092:	2378      	movs	r3, #120	; 0x78
 800a094:	4828      	ldr	r0, [pc, #160]	; (800a138 <_printf_i+0x248>)
 800a096:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a09a:	e7e3      	b.n	800a064 <_printf_i+0x174>
 800a09c:	065e      	lsls	r6, r3, #25
 800a09e:	bf48      	it	mi
 800a0a0:	b2ad      	uxthmi	r5, r5
 800a0a2:	e7e6      	b.n	800a072 <_printf_i+0x182>
 800a0a4:	4616      	mov	r6, r2
 800a0a6:	e7bb      	b.n	800a020 <_printf_i+0x130>
 800a0a8:	680b      	ldr	r3, [r1, #0]
 800a0aa:	6826      	ldr	r6, [r4, #0]
 800a0ac:	6960      	ldr	r0, [r4, #20]
 800a0ae:	1d1d      	adds	r5, r3, #4
 800a0b0:	600d      	str	r5, [r1, #0]
 800a0b2:	0635      	lsls	r5, r6, #24
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	d501      	bpl.n	800a0bc <_printf_i+0x1cc>
 800a0b8:	6018      	str	r0, [r3, #0]
 800a0ba:	e002      	b.n	800a0c2 <_printf_i+0x1d2>
 800a0bc:	0671      	lsls	r1, r6, #25
 800a0be:	d5fb      	bpl.n	800a0b8 <_printf_i+0x1c8>
 800a0c0:	8018      	strh	r0, [r3, #0]
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	6123      	str	r3, [r4, #16]
 800a0c6:	4616      	mov	r6, r2
 800a0c8:	e7ba      	b.n	800a040 <_printf_i+0x150>
 800a0ca:	680b      	ldr	r3, [r1, #0]
 800a0cc:	1d1a      	adds	r2, r3, #4
 800a0ce:	600a      	str	r2, [r1, #0]
 800a0d0:	681e      	ldr	r6, [r3, #0]
 800a0d2:	6862      	ldr	r2, [r4, #4]
 800a0d4:	2100      	movs	r1, #0
 800a0d6:	4630      	mov	r0, r6
 800a0d8:	f7f6 f88a 	bl	80001f0 <memchr>
 800a0dc:	b108      	cbz	r0, 800a0e2 <_printf_i+0x1f2>
 800a0de:	1b80      	subs	r0, r0, r6
 800a0e0:	6060      	str	r0, [r4, #4]
 800a0e2:	6863      	ldr	r3, [r4, #4]
 800a0e4:	6123      	str	r3, [r4, #16]
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0ec:	e7a8      	b.n	800a040 <_printf_i+0x150>
 800a0ee:	6923      	ldr	r3, [r4, #16]
 800a0f0:	4632      	mov	r2, r6
 800a0f2:	4649      	mov	r1, r9
 800a0f4:	4640      	mov	r0, r8
 800a0f6:	47d0      	blx	sl
 800a0f8:	3001      	adds	r0, #1
 800a0fa:	d0ab      	beq.n	800a054 <_printf_i+0x164>
 800a0fc:	6823      	ldr	r3, [r4, #0]
 800a0fe:	079b      	lsls	r3, r3, #30
 800a100:	d413      	bmi.n	800a12a <_printf_i+0x23a>
 800a102:	68e0      	ldr	r0, [r4, #12]
 800a104:	9b03      	ldr	r3, [sp, #12]
 800a106:	4298      	cmp	r0, r3
 800a108:	bfb8      	it	lt
 800a10a:	4618      	movlt	r0, r3
 800a10c:	e7a4      	b.n	800a058 <_printf_i+0x168>
 800a10e:	2301      	movs	r3, #1
 800a110:	4632      	mov	r2, r6
 800a112:	4649      	mov	r1, r9
 800a114:	4640      	mov	r0, r8
 800a116:	47d0      	blx	sl
 800a118:	3001      	adds	r0, #1
 800a11a:	d09b      	beq.n	800a054 <_printf_i+0x164>
 800a11c:	3501      	adds	r5, #1
 800a11e:	68e3      	ldr	r3, [r4, #12]
 800a120:	9903      	ldr	r1, [sp, #12]
 800a122:	1a5b      	subs	r3, r3, r1
 800a124:	42ab      	cmp	r3, r5
 800a126:	dcf2      	bgt.n	800a10e <_printf_i+0x21e>
 800a128:	e7eb      	b.n	800a102 <_printf_i+0x212>
 800a12a:	2500      	movs	r5, #0
 800a12c:	f104 0619 	add.w	r6, r4, #25
 800a130:	e7f5      	b.n	800a11e <_printf_i+0x22e>
 800a132:	bf00      	nop
 800a134:	0800c62e 	.word	0x0800c62e
 800a138:	0800c63f 	.word	0x0800c63f

0800a13c <siprintf>:
 800a13c:	b40e      	push	{r1, r2, r3}
 800a13e:	b500      	push	{lr}
 800a140:	b09c      	sub	sp, #112	; 0x70
 800a142:	ab1d      	add	r3, sp, #116	; 0x74
 800a144:	9002      	str	r0, [sp, #8]
 800a146:	9006      	str	r0, [sp, #24]
 800a148:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a14c:	4809      	ldr	r0, [pc, #36]	; (800a174 <siprintf+0x38>)
 800a14e:	9107      	str	r1, [sp, #28]
 800a150:	9104      	str	r1, [sp, #16]
 800a152:	4909      	ldr	r1, [pc, #36]	; (800a178 <siprintf+0x3c>)
 800a154:	f853 2b04 	ldr.w	r2, [r3], #4
 800a158:	9105      	str	r1, [sp, #20]
 800a15a:	6800      	ldr	r0, [r0, #0]
 800a15c:	9301      	str	r3, [sp, #4]
 800a15e:	a902      	add	r1, sp, #8
 800a160:	f001 fc20 	bl	800b9a4 <_svfiprintf_r>
 800a164:	9b02      	ldr	r3, [sp, #8]
 800a166:	2200      	movs	r2, #0
 800a168:	701a      	strb	r2, [r3, #0]
 800a16a:	b01c      	add	sp, #112	; 0x70
 800a16c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a170:	b003      	add	sp, #12
 800a172:	4770      	bx	lr
 800a174:	20000180 	.word	0x20000180
 800a178:	ffff0208 	.word	0xffff0208

0800a17c <quorem>:
 800a17c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a180:	6903      	ldr	r3, [r0, #16]
 800a182:	690c      	ldr	r4, [r1, #16]
 800a184:	42a3      	cmp	r3, r4
 800a186:	4607      	mov	r7, r0
 800a188:	f2c0 8081 	blt.w	800a28e <quorem+0x112>
 800a18c:	3c01      	subs	r4, #1
 800a18e:	f101 0814 	add.w	r8, r1, #20
 800a192:	f100 0514 	add.w	r5, r0, #20
 800a196:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a19a:	9301      	str	r3, [sp, #4]
 800a19c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a1a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a1a4:	3301      	adds	r3, #1
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a1ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a1b0:	fbb2 f6f3 	udiv	r6, r2, r3
 800a1b4:	d331      	bcc.n	800a21a <quorem+0x9e>
 800a1b6:	f04f 0e00 	mov.w	lr, #0
 800a1ba:	4640      	mov	r0, r8
 800a1bc:	46ac      	mov	ip, r5
 800a1be:	46f2      	mov	sl, lr
 800a1c0:	f850 2b04 	ldr.w	r2, [r0], #4
 800a1c4:	b293      	uxth	r3, r2
 800a1c6:	fb06 e303 	mla	r3, r6, r3, lr
 800a1ca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a1ce:	b29b      	uxth	r3, r3
 800a1d0:	ebaa 0303 	sub.w	r3, sl, r3
 800a1d4:	0c12      	lsrs	r2, r2, #16
 800a1d6:	f8dc a000 	ldr.w	sl, [ip]
 800a1da:	fb06 e202 	mla	r2, r6, r2, lr
 800a1de:	fa13 f38a 	uxtah	r3, r3, sl
 800a1e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a1e6:	fa1f fa82 	uxth.w	sl, r2
 800a1ea:	f8dc 2000 	ldr.w	r2, [ip]
 800a1ee:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a1f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a1f6:	b29b      	uxth	r3, r3
 800a1f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a1fc:	4581      	cmp	r9, r0
 800a1fe:	f84c 3b04 	str.w	r3, [ip], #4
 800a202:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a206:	d2db      	bcs.n	800a1c0 <quorem+0x44>
 800a208:	f855 300b 	ldr.w	r3, [r5, fp]
 800a20c:	b92b      	cbnz	r3, 800a21a <quorem+0x9e>
 800a20e:	9b01      	ldr	r3, [sp, #4]
 800a210:	3b04      	subs	r3, #4
 800a212:	429d      	cmp	r5, r3
 800a214:	461a      	mov	r2, r3
 800a216:	d32e      	bcc.n	800a276 <quorem+0xfa>
 800a218:	613c      	str	r4, [r7, #16]
 800a21a:	4638      	mov	r0, r7
 800a21c:	f001 f9ac 	bl	800b578 <__mcmp>
 800a220:	2800      	cmp	r0, #0
 800a222:	db24      	blt.n	800a26e <quorem+0xf2>
 800a224:	3601      	adds	r6, #1
 800a226:	4628      	mov	r0, r5
 800a228:	f04f 0c00 	mov.w	ip, #0
 800a22c:	f858 2b04 	ldr.w	r2, [r8], #4
 800a230:	f8d0 e000 	ldr.w	lr, [r0]
 800a234:	b293      	uxth	r3, r2
 800a236:	ebac 0303 	sub.w	r3, ip, r3
 800a23a:	0c12      	lsrs	r2, r2, #16
 800a23c:	fa13 f38e 	uxtah	r3, r3, lr
 800a240:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a244:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a248:	b29b      	uxth	r3, r3
 800a24a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a24e:	45c1      	cmp	r9, r8
 800a250:	f840 3b04 	str.w	r3, [r0], #4
 800a254:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a258:	d2e8      	bcs.n	800a22c <quorem+0xb0>
 800a25a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a25e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a262:	b922      	cbnz	r2, 800a26e <quorem+0xf2>
 800a264:	3b04      	subs	r3, #4
 800a266:	429d      	cmp	r5, r3
 800a268:	461a      	mov	r2, r3
 800a26a:	d30a      	bcc.n	800a282 <quorem+0x106>
 800a26c:	613c      	str	r4, [r7, #16]
 800a26e:	4630      	mov	r0, r6
 800a270:	b003      	add	sp, #12
 800a272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a276:	6812      	ldr	r2, [r2, #0]
 800a278:	3b04      	subs	r3, #4
 800a27a:	2a00      	cmp	r2, #0
 800a27c:	d1cc      	bne.n	800a218 <quorem+0x9c>
 800a27e:	3c01      	subs	r4, #1
 800a280:	e7c7      	b.n	800a212 <quorem+0x96>
 800a282:	6812      	ldr	r2, [r2, #0]
 800a284:	3b04      	subs	r3, #4
 800a286:	2a00      	cmp	r2, #0
 800a288:	d1f0      	bne.n	800a26c <quorem+0xf0>
 800a28a:	3c01      	subs	r4, #1
 800a28c:	e7eb      	b.n	800a266 <quorem+0xea>
 800a28e:	2000      	movs	r0, #0
 800a290:	e7ee      	b.n	800a270 <quorem+0xf4>
 800a292:	0000      	movs	r0, r0
 800a294:	0000      	movs	r0, r0
	...

0800a298 <_dtoa_r>:
 800a298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a29c:	ed2d 8b02 	vpush	{d8}
 800a2a0:	ec57 6b10 	vmov	r6, r7, d0
 800a2a4:	b095      	sub	sp, #84	; 0x54
 800a2a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a2a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a2ac:	9105      	str	r1, [sp, #20]
 800a2ae:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a2b2:	4604      	mov	r4, r0
 800a2b4:	9209      	str	r2, [sp, #36]	; 0x24
 800a2b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a2b8:	b975      	cbnz	r5, 800a2d8 <_dtoa_r+0x40>
 800a2ba:	2010      	movs	r0, #16
 800a2bc:	f000 fed6 	bl	800b06c <malloc>
 800a2c0:	4602      	mov	r2, r0
 800a2c2:	6260      	str	r0, [r4, #36]	; 0x24
 800a2c4:	b920      	cbnz	r0, 800a2d0 <_dtoa_r+0x38>
 800a2c6:	4bb2      	ldr	r3, [pc, #712]	; (800a590 <_dtoa_r+0x2f8>)
 800a2c8:	21ea      	movs	r1, #234	; 0xea
 800a2ca:	48b2      	ldr	r0, [pc, #712]	; (800a594 <_dtoa_r+0x2fc>)
 800a2cc:	f001 feea 	bl	800c0a4 <__assert_func>
 800a2d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a2d4:	6005      	str	r5, [r0, #0]
 800a2d6:	60c5      	str	r5, [r0, #12]
 800a2d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2da:	6819      	ldr	r1, [r3, #0]
 800a2dc:	b151      	cbz	r1, 800a2f4 <_dtoa_r+0x5c>
 800a2de:	685a      	ldr	r2, [r3, #4]
 800a2e0:	604a      	str	r2, [r1, #4]
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	4093      	lsls	r3, r2
 800a2e6:	608b      	str	r3, [r1, #8]
 800a2e8:	4620      	mov	r0, r4
 800a2ea:	f000 ff07 	bl	800b0fc <_Bfree>
 800a2ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	601a      	str	r2, [r3, #0]
 800a2f4:	1e3b      	subs	r3, r7, #0
 800a2f6:	bfb9      	ittee	lt
 800a2f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a2fc:	9303      	strlt	r3, [sp, #12]
 800a2fe:	2300      	movge	r3, #0
 800a300:	f8c8 3000 	strge.w	r3, [r8]
 800a304:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a308:	4ba3      	ldr	r3, [pc, #652]	; (800a598 <_dtoa_r+0x300>)
 800a30a:	bfbc      	itt	lt
 800a30c:	2201      	movlt	r2, #1
 800a30e:	f8c8 2000 	strlt.w	r2, [r8]
 800a312:	ea33 0309 	bics.w	r3, r3, r9
 800a316:	d11b      	bne.n	800a350 <_dtoa_r+0xb8>
 800a318:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a31a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a31e:	6013      	str	r3, [r2, #0]
 800a320:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a324:	4333      	orrs	r3, r6
 800a326:	f000 857a 	beq.w	800ae1e <_dtoa_r+0xb86>
 800a32a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a32c:	b963      	cbnz	r3, 800a348 <_dtoa_r+0xb0>
 800a32e:	4b9b      	ldr	r3, [pc, #620]	; (800a59c <_dtoa_r+0x304>)
 800a330:	e024      	b.n	800a37c <_dtoa_r+0xe4>
 800a332:	4b9b      	ldr	r3, [pc, #620]	; (800a5a0 <_dtoa_r+0x308>)
 800a334:	9300      	str	r3, [sp, #0]
 800a336:	3308      	adds	r3, #8
 800a338:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a33a:	6013      	str	r3, [r2, #0]
 800a33c:	9800      	ldr	r0, [sp, #0]
 800a33e:	b015      	add	sp, #84	; 0x54
 800a340:	ecbd 8b02 	vpop	{d8}
 800a344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a348:	4b94      	ldr	r3, [pc, #592]	; (800a59c <_dtoa_r+0x304>)
 800a34a:	9300      	str	r3, [sp, #0]
 800a34c:	3303      	adds	r3, #3
 800a34e:	e7f3      	b.n	800a338 <_dtoa_r+0xa0>
 800a350:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a354:	2200      	movs	r2, #0
 800a356:	ec51 0b17 	vmov	r0, r1, d7
 800a35a:	2300      	movs	r3, #0
 800a35c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a360:	f7f6 fbba 	bl	8000ad8 <__aeabi_dcmpeq>
 800a364:	4680      	mov	r8, r0
 800a366:	b158      	cbz	r0, 800a380 <_dtoa_r+0xe8>
 800a368:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a36a:	2301      	movs	r3, #1
 800a36c:	6013      	str	r3, [r2, #0]
 800a36e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a370:	2b00      	cmp	r3, #0
 800a372:	f000 8551 	beq.w	800ae18 <_dtoa_r+0xb80>
 800a376:	488b      	ldr	r0, [pc, #556]	; (800a5a4 <_dtoa_r+0x30c>)
 800a378:	6018      	str	r0, [r3, #0]
 800a37a:	1e43      	subs	r3, r0, #1
 800a37c:	9300      	str	r3, [sp, #0]
 800a37e:	e7dd      	b.n	800a33c <_dtoa_r+0xa4>
 800a380:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a384:	aa12      	add	r2, sp, #72	; 0x48
 800a386:	a913      	add	r1, sp, #76	; 0x4c
 800a388:	4620      	mov	r0, r4
 800a38a:	f001 f999 	bl	800b6c0 <__d2b>
 800a38e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a392:	4683      	mov	fp, r0
 800a394:	2d00      	cmp	r5, #0
 800a396:	d07c      	beq.n	800a492 <_dtoa_r+0x1fa>
 800a398:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a39a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a39e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a3a2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a3a6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a3aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a3ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a3b2:	4b7d      	ldr	r3, [pc, #500]	; (800a5a8 <_dtoa_r+0x310>)
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	4630      	mov	r0, r6
 800a3b8:	4639      	mov	r1, r7
 800a3ba:	f7f5 ff6d 	bl	8000298 <__aeabi_dsub>
 800a3be:	a36e      	add	r3, pc, #440	; (adr r3, 800a578 <_dtoa_r+0x2e0>)
 800a3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c4:	f7f6 f920 	bl	8000608 <__aeabi_dmul>
 800a3c8:	a36d      	add	r3, pc, #436	; (adr r3, 800a580 <_dtoa_r+0x2e8>)
 800a3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ce:	f7f5 ff65 	bl	800029c <__adddf3>
 800a3d2:	4606      	mov	r6, r0
 800a3d4:	4628      	mov	r0, r5
 800a3d6:	460f      	mov	r7, r1
 800a3d8:	f7f6 f8ac 	bl	8000534 <__aeabi_i2d>
 800a3dc:	a36a      	add	r3, pc, #424	; (adr r3, 800a588 <_dtoa_r+0x2f0>)
 800a3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e2:	f7f6 f911 	bl	8000608 <__aeabi_dmul>
 800a3e6:	4602      	mov	r2, r0
 800a3e8:	460b      	mov	r3, r1
 800a3ea:	4630      	mov	r0, r6
 800a3ec:	4639      	mov	r1, r7
 800a3ee:	f7f5 ff55 	bl	800029c <__adddf3>
 800a3f2:	4606      	mov	r6, r0
 800a3f4:	460f      	mov	r7, r1
 800a3f6:	f7f6 fbb7 	bl	8000b68 <__aeabi_d2iz>
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	4682      	mov	sl, r0
 800a3fe:	2300      	movs	r3, #0
 800a400:	4630      	mov	r0, r6
 800a402:	4639      	mov	r1, r7
 800a404:	f7f6 fb72 	bl	8000aec <__aeabi_dcmplt>
 800a408:	b148      	cbz	r0, 800a41e <_dtoa_r+0x186>
 800a40a:	4650      	mov	r0, sl
 800a40c:	f7f6 f892 	bl	8000534 <__aeabi_i2d>
 800a410:	4632      	mov	r2, r6
 800a412:	463b      	mov	r3, r7
 800a414:	f7f6 fb60 	bl	8000ad8 <__aeabi_dcmpeq>
 800a418:	b908      	cbnz	r0, 800a41e <_dtoa_r+0x186>
 800a41a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a41e:	f1ba 0f16 	cmp.w	sl, #22
 800a422:	d854      	bhi.n	800a4ce <_dtoa_r+0x236>
 800a424:	4b61      	ldr	r3, [pc, #388]	; (800a5ac <_dtoa_r+0x314>)
 800a426:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a42e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a432:	f7f6 fb5b 	bl	8000aec <__aeabi_dcmplt>
 800a436:	2800      	cmp	r0, #0
 800a438:	d04b      	beq.n	800a4d2 <_dtoa_r+0x23a>
 800a43a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a43e:	2300      	movs	r3, #0
 800a440:	930e      	str	r3, [sp, #56]	; 0x38
 800a442:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a444:	1b5d      	subs	r5, r3, r5
 800a446:	1e6b      	subs	r3, r5, #1
 800a448:	9304      	str	r3, [sp, #16]
 800a44a:	bf43      	ittte	mi
 800a44c:	2300      	movmi	r3, #0
 800a44e:	f1c5 0801 	rsbmi	r8, r5, #1
 800a452:	9304      	strmi	r3, [sp, #16]
 800a454:	f04f 0800 	movpl.w	r8, #0
 800a458:	f1ba 0f00 	cmp.w	sl, #0
 800a45c:	db3b      	blt.n	800a4d6 <_dtoa_r+0x23e>
 800a45e:	9b04      	ldr	r3, [sp, #16]
 800a460:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a464:	4453      	add	r3, sl
 800a466:	9304      	str	r3, [sp, #16]
 800a468:	2300      	movs	r3, #0
 800a46a:	9306      	str	r3, [sp, #24]
 800a46c:	9b05      	ldr	r3, [sp, #20]
 800a46e:	2b09      	cmp	r3, #9
 800a470:	d869      	bhi.n	800a546 <_dtoa_r+0x2ae>
 800a472:	2b05      	cmp	r3, #5
 800a474:	bfc4      	itt	gt
 800a476:	3b04      	subgt	r3, #4
 800a478:	9305      	strgt	r3, [sp, #20]
 800a47a:	9b05      	ldr	r3, [sp, #20]
 800a47c:	f1a3 0302 	sub.w	r3, r3, #2
 800a480:	bfcc      	ite	gt
 800a482:	2500      	movgt	r5, #0
 800a484:	2501      	movle	r5, #1
 800a486:	2b03      	cmp	r3, #3
 800a488:	d869      	bhi.n	800a55e <_dtoa_r+0x2c6>
 800a48a:	e8df f003 	tbb	[pc, r3]
 800a48e:	4e2c      	.short	0x4e2c
 800a490:	5a4c      	.short	0x5a4c
 800a492:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a496:	441d      	add	r5, r3
 800a498:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a49c:	2b20      	cmp	r3, #32
 800a49e:	bfc1      	itttt	gt
 800a4a0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a4a4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a4a8:	fa09 f303 	lslgt.w	r3, r9, r3
 800a4ac:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a4b0:	bfda      	itte	le
 800a4b2:	f1c3 0320 	rsble	r3, r3, #32
 800a4b6:	fa06 f003 	lslle.w	r0, r6, r3
 800a4ba:	4318      	orrgt	r0, r3
 800a4bc:	f7f6 f82a 	bl	8000514 <__aeabi_ui2d>
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	4606      	mov	r6, r0
 800a4c4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a4c8:	3d01      	subs	r5, #1
 800a4ca:	9310      	str	r3, [sp, #64]	; 0x40
 800a4cc:	e771      	b.n	800a3b2 <_dtoa_r+0x11a>
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	e7b6      	b.n	800a440 <_dtoa_r+0x1a8>
 800a4d2:	900e      	str	r0, [sp, #56]	; 0x38
 800a4d4:	e7b5      	b.n	800a442 <_dtoa_r+0x1aa>
 800a4d6:	f1ca 0300 	rsb	r3, sl, #0
 800a4da:	9306      	str	r3, [sp, #24]
 800a4dc:	2300      	movs	r3, #0
 800a4de:	eba8 080a 	sub.w	r8, r8, sl
 800a4e2:	930d      	str	r3, [sp, #52]	; 0x34
 800a4e4:	e7c2      	b.n	800a46c <_dtoa_r+0x1d4>
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	9308      	str	r3, [sp, #32]
 800a4ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	dc39      	bgt.n	800a564 <_dtoa_r+0x2cc>
 800a4f0:	f04f 0901 	mov.w	r9, #1
 800a4f4:	f8cd 9004 	str.w	r9, [sp, #4]
 800a4f8:	464b      	mov	r3, r9
 800a4fa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a4fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a500:	2200      	movs	r2, #0
 800a502:	6042      	str	r2, [r0, #4]
 800a504:	2204      	movs	r2, #4
 800a506:	f102 0614 	add.w	r6, r2, #20
 800a50a:	429e      	cmp	r6, r3
 800a50c:	6841      	ldr	r1, [r0, #4]
 800a50e:	d92f      	bls.n	800a570 <_dtoa_r+0x2d8>
 800a510:	4620      	mov	r0, r4
 800a512:	f000 fdb3 	bl	800b07c <_Balloc>
 800a516:	9000      	str	r0, [sp, #0]
 800a518:	2800      	cmp	r0, #0
 800a51a:	d14b      	bne.n	800a5b4 <_dtoa_r+0x31c>
 800a51c:	4b24      	ldr	r3, [pc, #144]	; (800a5b0 <_dtoa_r+0x318>)
 800a51e:	4602      	mov	r2, r0
 800a520:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a524:	e6d1      	b.n	800a2ca <_dtoa_r+0x32>
 800a526:	2301      	movs	r3, #1
 800a528:	e7de      	b.n	800a4e8 <_dtoa_r+0x250>
 800a52a:	2300      	movs	r3, #0
 800a52c:	9308      	str	r3, [sp, #32]
 800a52e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a530:	eb0a 0903 	add.w	r9, sl, r3
 800a534:	f109 0301 	add.w	r3, r9, #1
 800a538:	2b01      	cmp	r3, #1
 800a53a:	9301      	str	r3, [sp, #4]
 800a53c:	bfb8      	it	lt
 800a53e:	2301      	movlt	r3, #1
 800a540:	e7dd      	b.n	800a4fe <_dtoa_r+0x266>
 800a542:	2301      	movs	r3, #1
 800a544:	e7f2      	b.n	800a52c <_dtoa_r+0x294>
 800a546:	2501      	movs	r5, #1
 800a548:	2300      	movs	r3, #0
 800a54a:	9305      	str	r3, [sp, #20]
 800a54c:	9508      	str	r5, [sp, #32]
 800a54e:	f04f 39ff 	mov.w	r9, #4294967295
 800a552:	2200      	movs	r2, #0
 800a554:	f8cd 9004 	str.w	r9, [sp, #4]
 800a558:	2312      	movs	r3, #18
 800a55a:	9209      	str	r2, [sp, #36]	; 0x24
 800a55c:	e7cf      	b.n	800a4fe <_dtoa_r+0x266>
 800a55e:	2301      	movs	r3, #1
 800a560:	9308      	str	r3, [sp, #32]
 800a562:	e7f4      	b.n	800a54e <_dtoa_r+0x2b6>
 800a564:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a568:	f8cd 9004 	str.w	r9, [sp, #4]
 800a56c:	464b      	mov	r3, r9
 800a56e:	e7c6      	b.n	800a4fe <_dtoa_r+0x266>
 800a570:	3101      	adds	r1, #1
 800a572:	6041      	str	r1, [r0, #4]
 800a574:	0052      	lsls	r2, r2, #1
 800a576:	e7c6      	b.n	800a506 <_dtoa_r+0x26e>
 800a578:	636f4361 	.word	0x636f4361
 800a57c:	3fd287a7 	.word	0x3fd287a7
 800a580:	8b60c8b3 	.word	0x8b60c8b3
 800a584:	3fc68a28 	.word	0x3fc68a28
 800a588:	509f79fb 	.word	0x509f79fb
 800a58c:	3fd34413 	.word	0x3fd34413
 800a590:	0800c65d 	.word	0x0800c65d
 800a594:	0800c674 	.word	0x0800c674
 800a598:	7ff00000 	.word	0x7ff00000
 800a59c:	0800c659 	.word	0x0800c659
 800a5a0:	0800c650 	.word	0x0800c650
 800a5a4:	0800c62d 	.word	0x0800c62d
 800a5a8:	3ff80000 	.word	0x3ff80000
 800a5ac:	0800c7d0 	.word	0x0800c7d0
 800a5b0:	0800c6d3 	.word	0x0800c6d3
 800a5b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5b6:	9a00      	ldr	r2, [sp, #0]
 800a5b8:	601a      	str	r2, [r3, #0]
 800a5ba:	9b01      	ldr	r3, [sp, #4]
 800a5bc:	2b0e      	cmp	r3, #14
 800a5be:	f200 80ad 	bhi.w	800a71c <_dtoa_r+0x484>
 800a5c2:	2d00      	cmp	r5, #0
 800a5c4:	f000 80aa 	beq.w	800a71c <_dtoa_r+0x484>
 800a5c8:	f1ba 0f00 	cmp.w	sl, #0
 800a5cc:	dd36      	ble.n	800a63c <_dtoa_r+0x3a4>
 800a5ce:	4ac3      	ldr	r2, [pc, #780]	; (800a8dc <_dtoa_r+0x644>)
 800a5d0:	f00a 030f 	and.w	r3, sl, #15
 800a5d4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a5d8:	ed93 7b00 	vldr	d7, [r3]
 800a5dc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a5e0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a5e4:	eeb0 8a47 	vmov.f32	s16, s14
 800a5e8:	eef0 8a67 	vmov.f32	s17, s15
 800a5ec:	d016      	beq.n	800a61c <_dtoa_r+0x384>
 800a5ee:	4bbc      	ldr	r3, [pc, #752]	; (800a8e0 <_dtoa_r+0x648>)
 800a5f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a5f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a5f8:	f7f6 f930 	bl	800085c <__aeabi_ddiv>
 800a5fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a600:	f007 070f 	and.w	r7, r7, #15
 800a604:	2503      	movs	r5, #3
 800a606:	4eb6      	ldr	r6, [pc, #728]	; (800a8e0 <_dtoa_r+0x648>)
 800a608:	b957      	cbnz	r7, 800a620 <_dtoa_r+0x388>
 800a60a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a60e:	ec53 2b18 	vmov	r2, r3, d8
 800a612:	f7f6 f923 	bl	800085c <__aeabi_ddiv>
 800a616:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a61a:	e029      	b.n	800a670 <_dtoa_r+0x3d8>
 800a61c:	2502      	movs	r5, #2
 800a61e:	e7f2      	b.n	800a606 <_dtoa_r+0x36e>
 800a620:	07f9      	lsls	r1, r7, #31
 800a622:	d508      	bpl.n	800a636 <_dtoa_r+0x39e>
 800a624:	ec51 0b18 	vmov	r0, r1, d8
 800a628:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a62c:	f7f5 ffec 	bl	8000608 <__aeabi_dmul>
 800a630:	ec41 0b18 	vmov	d8, r0, r1
 800a634:	3501      	adds	r5, #1
 800a636:	107f      	asrs	r7, r7, #1
 800a638:	3608      	adds	r6, #8
 800a63a:	e7e5      	b.n	800a608 <_dtoa_r+0x370>
 800a63c:	f000 80a6 	beq.w	800a78c <_dtoa_r+0x4f4>
 800a640:	f1ca 0600 	rsb	r6, sl, #0
 800a644:	4ba5      	ldr	r3, [pc, #660]	; (800a8dc <_dtoa_r+0x644>)
 800a646:	4fa6      	ldr	r7, [pc, #664]	; (800a8e0 <_dtoa_r+0x648>)
 800a648:	f006 020f 	and.w	r2, r6, #15
 800a64c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a650:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a654:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a658:	f7f5 ffd6 	bl	8000608 <__aeabi_dmul>
 800a65c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a660:	1136      	asrs	r6, r6, #4
 800a662:	2300      	movs	r3, #0
 800a664:	2502      	movs	r5, #2
 800a666:	2e00      	cmp	r6, #0
 800a668:	f040 8085 	bne.w	800a776 <_dtoa_r+0x4de>
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d1d2      	bne.n	800a616 <_dtoa_r+0x37e>
 800a670:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a672:	2b00      	cmp	r3, #0
 800a674:	f000 808c 	beq.w	800a790 <_dtoa_r+0x4f8>
 800a678:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a67c:	4b99      	ldr	r3, [pc, #612]	; (800a8e4 <_dtoa_r+0x64c>)
 800a67e:	2200      	movs	r2, #0
 800a680:	4630      	mov	r0, r6
 800a682:	4639      	mov	r1, r7
 800a684:	f7f6 fa32 	bl	8000aec <__aeabi_dcmplt>
 800a688:	2800      	cmp	r0, #0
 800a68a:	f000 8081 	beq.w	800a790 <_dtoa_r+0x4f8>
 800a68e:	9b01      	ldr	r3, [sp, #4]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d07d      	beq.n	800a790 <_dtoa_r+0x4f8>
 800a694:	f1b9 0f00 	cmp.w	r9, #0
 800a698:	dd3c      	ble.n	800a714 <_dtoa_r+0x47c>
 800a69a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a69e:	9307      	str	r3, [sp, #28]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	4b91      	ldr	r3, [pc, #580]	; (800a8e8 <_dtoa_r+0x650>)
 800a6a4:	4630      	mov	r0, r6
 800a6a6:	4639      	mov	r1, r7
 800a6a8:	f7f5 ffae 	bl	8000608 <__aeabi_dmul>
 800a6ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6b0:	3501      	adds	r5, #1
 800a6b2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a6b6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a6ba:	4628      	mov	r0, r5
 800a6bc:	f7f5 ff3a 	bl	8000534 <__aeabi_i2d>
 800a6c0:	4632      	mov	r2, r6
 800a6c2:	463b      	mov	r3, r7
 800a6c4:	f7f5 ffa0 	bl	8000608 <__aeabi_dmul>
 800a6c8:	4b88      	ldr	r3, [pc, #544]	; (800a8ec <_dtoa_r+0x654>)
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	f7f5 fde6 	bl	800029c <__adddf3>
 800a6d0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a6d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6d8:	9303      	str	r3, [sp, #12]
 800a6da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d15c      	bne.n	800a79a <_dtoa_r+0x502>
 800a6e0:	4b83      	ldr	r3, [pc, #524]	; (800a8f0 <_dtoa_r+0x658>)
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	4630      	mov	r0, r6
 800a6e6:	4639      	mov	r1, r7
 800a6e8:	f7f5 fdd6 	bl	8000298 <__aeabi_dsub>
 800a6ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a6f0:	4606      	mov	r6, r0
 800a6f2:	460f      	mov	r7, r1
 800a6f4:	f7f6 fa18 	bl	8000b28 <__aeabi_dcmpgt>
 800a6f8:	2800      	cmp	r0, #0
 800a6fa:	f040 8296 	bne.w	800ac2a <_dtoa_r+0x992>
 800a6fe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a702:	4630      	mov	r0, r6
 800a704:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a708:	4639      	mov	r1, r7
 800a70a:	f7f6 f9ef 	bl	8000aec <__aeabi_dcmplt>
 800a70e:	2800      	cmp	r0, #0
 800a710:	f040 8288 	bne.w	800ac24 <_dtoa_r+0x98c>
 800a714:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a718:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a71c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a71e:	2b00      	cmp	r3, #0
 800a720:	f2c0 8158 	blt.w	800a9d4 <_dtoa_r+0x73c>
 800a724:	f1ba 0f0e 	cmp.w	sl, #14
 800a728:	f300 8154 	bgt.w	800a9d4 <_dtoa_r+0x73c>
 800a72c:	4b6b      	ldr	r3, [pc, #428]	; (800a8dc <_dtoa_r+0x644>)
 800a72e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a732:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a738:	2b00      	cmp	r3, #0
 800a73a:	f280 80e3 	bge.w	800a904 <_dtoa_r+0x66c>
 800a73e:	9b01      	ldr	r3, [sp, #4]
 800a740:	2b00      	cmp	r3, #0
 800a742:	f300 80df 	bgt.w	800a904 <_dtoa_r+0x66c>
 800a746:	f040 826d 	bne.w	800ac24 <_dtoa_r+0x98c>
 800a74a:	4b69      	ldr	r3, [pc, #420]	; (800a8f0 <_dtoa_r+0x658>)
 800a74c:	2200      	movs	r2, #0
 800a74e:	4640      	mov	r0, r8
 800a750:	4649      	mov	r1, r9
 800a752:	f7f5 ff59 	bl	8000608 <__aeabi_dmul>
 800a756:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a75a:	f7f6 f9db 	bl	8000b14 <__aeabi_dcmpge>
 800a75e:	9e01      	ldr	r6, [sp, #4]
 800a760:	4637      	mov	r7, r6
 800a762:	2800      	cmp	r0, #0
 800a764:	f040 8243 	bne.w	800abee <_dtoa_r+0x956>
 800a768:	9d00      	ldr	r5, [sp, #0]
 800a76a:	2331      	movs	r3, #49	; 0x31
 800a76c:	f805 3b01 	strb.w	r3, [r5], #1
 800a770:	f10a 0a01 	add.w	sl, sl, #1
 800a774:	e23f      	b.n	800abf6 <_dtoa_r+0x95e>
 800a776:	07f2      	lsls	r2, r6, #31
 800a778:	d505      	bpl.n	800a786 <_dtoa_r+0x4ee>
 800a77a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a77e:	f7f5 ff43 	bl	8000608 <__aeabi_dmul>
 800a782:	3501      	adds	r5, #1
 800a784:	2301      	movs	r3, #1
 800a786:	1076      	asrs	r6, r6, #1
 800a788:	3708      	adds	r7, #8
 800a78a:	e76c      	b.n	800a666 <_dtoa_r+0x3ce>
 800a78c:	2502      	movs	r5, #2
 800a78e:	e76f      	b.n	800a670 <_dtoa_r+0x3d8>
 800a790:	9b01      	ldr	r3, [sp, #4]
 800a792:	f8cd a01c 	str.w	sl, [sp, #28]
 800a796:	930c      	str	r3, [sp, #48]	; 0x30
 800a798:	e78d      	b.n	800a6b6 <_dtoa_r+0x41e>
 800a79a:	9900      	ldr	r1, [sp, #0]
 800a79c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a79e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a7a0:	4b4e      	ldr	r3, [pc, #312]	; (800a8dc <_dtoa_r+0x644>)
 800a7a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a7a6:	4401      	add	r1, r0
 800a7a8:	9102      	str	r1, [sp, #8]
 800a7aa:	9908      	ldr	r1, [sp, #32]
 800a7ac:	eeb0 8a47 	vmov.f32	s16, s14
 800a7b0:	eef0 8a67 	vmov.f32	s17, s15
 800a7b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7b8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a7bc:	2900      	cmp	r1, #0
 800a7be:	d045      	beq.n	800a84c <_dtoa_r+0x5b4>
 800a7c0:	494c      	ldr	r1, [pc, #304]	; (800a8f4 <_dtoa_r+0x65c>)
 800a7c2:	2000      	movs	r0, #0
 800a7c4:	f7f6 f84a 	bl	800085c <__aeabi_ddiv>
 800a7c8:	ec53 2b18 	vmov	r2, r3, d8
 800a7cc:	f7f5 fd64 	bl	8000298 <__aeabi_dsub>
 800a7d0:	9d00      	ldr	r5, [sp, #0]
 800a7d2:	ec41 0b18 	vmov	d8, r0, r1
 800a7d6:	4639      	mov	r1, r7
 800a7d8:	4630      	mov	r0, r6
 800a7da:	f7f6 f9c5 	bl	8000b68 <__aeabi_d2iz>
 800a7de:	900c      	str	r0, [sp, #48]	; 0x30
 800a7e0:	f7f5 fea8 	bl	8000534 <__aeabi_i2d>
 800a7e4:	4602      	mov	r2, r0
 800a7e6:	460b      	mov	r3, r1
 800a7e8:	4630      	mov	r0, r6
 800a7ea:	4639      	mov	r1, r7
 800a7ec:	f7f5 fd54 	bl	8000298 <__aeabi_dsub>
 800a7f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a7f2:	3330      	adds	r3, #48	; 0x30
 800a7f4:	f805 3b01 	strb.w	r3, [r5], #1
 800a7f8:	ec53 2b18 	vmov	r2, r3, d8
 800a7fc:	4606      	mov	r6, r0
 800a7fe:	460f      	mov	r7, r1
 800a800:	f7f6 f974 	bl	8000aec <__aeabi_dcmplt>
 800a804:	2800      	cmp	r0, #0
 800a806:	d165      	bne.n	800a8d4 <_dtoa_r+0x63c>
 800a808:	4632      	mov	r2, r6
 800a80a:	463b      	mov	r3, r7
 800a80c:	4935      	ldr	r1, [pc, #212]	; (800a8e4 <_dtoa_r+0x64c>)
 800a80e:	2000      	movs	r0, #0
 800a810:	f7f5 fd42 	bl	8000298 <__aeabi_dsub>
 800a814:	ec53 2b18 	vmov	r2, r3, d8
 800a818:	f7f6 f968 	bl	8000aec <__aeabi_dcmplt>
 800a81c:	2800      	cmp	r0, #0
 800a81e:	f040 80b9 	bne.w	800a994 <_dtoa_r+0x6fc>
 800a822:	9b02      	ldr	r3, [sp, #8]
 800a824:	429d      	cmp	r5, r3
 800a826:	f43f af75 	beq.w	800a714 <_dtoa_r+0x47c>
 800a82a:	4b2f      	ldr	r3, [pc, #188]	; (800a8e8 <_dtoa_r+0x650>)
 800a82c:	ec51 0b18 	vmov	r0, r1, d8
 800a830:	2200      	movs	r2, #0
 800a832:	f7f5 fee9 	bl	8000608 <__aeabi_dmul>
 800a836:	4b2c      	ldr	r3, [pc, #176]	; (800a8e8 <_dtoa_r+0x650>)
 800a838:	ec41 0b18 	vmov	d8, r0, r1
 800a83c:	2200      	movs	r2, #0
 800a83e:	4630      	mov	r0, r6
 800a840:	4639      	mov	r1, r7
 800a842:	f7f5 fee1 	bl	8000608 <__aeabi_dmul>
 800a846:	4606      	mov	r6, r0
 800a848:	460f      	mov	r7, r1
 800a84a:	e7c4      	b.n	800a7d6 <_dtoa_r+0x53e>
 800a84c:	ec51 0b17 	vmov	r0, r1, d7
 800a850:	f7f5 feda 	bl	8000608 <__aeabi_dmul>
 800a854:	9b02      	ldr	r3, [sp, #8]
 800a856:	9d00      	ldr	r5, [sp, #0]
 800a858:	930c      	str	r3, [sp, #48]	; 0x30
 800a85a:	ec41 0b18 	vmov	d8, r0, r1
 800a85e:	4639      	mov	r1, r7
 800a860:	4630      	mov	r0, r6
 800a862:	f7f6 f981 	bl	8000b68 <__aeabi_d2iz>
 800a866:	9011      	str	r0, [sp, #68]	; 0x44
 800a868:	f7f5 fe64 	bl	8000534 <__aeabi_i2d>
 800a86c:	4602      	mov	r2, r0
 800a86e:	460b      	mov	r3, r1
 800a870:	4630      	mov	r0, r6
 800a872:	4639      	mov	r1, r7
 800a874:	f7f5 fd10 	bl	8000298 <__aeabi_dsub>
 800a878:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a87a:	3330      	adds	r3, #48	; 0x30
 800a87c:	f805 3b01 	strb.w	r3, [r5], #1
 800a880:	9b02      	ldr	r3, [sp, #8]
 800a882:	429d      	cmp	r5, r3
 800a884:	4606      	mov	r6, r0
 800a886:	460f      	mov	r7, r1
 800a888:	f04f 0200 	mov.w	r2, #0
 800a88c:	d134      	bne.n	800a8f8 <_dtoa_r+0x660>
 800a88e:	4b19      	ldr	r3, [pc, #100]	; (800a8f4 <_dtoa_r+0x65c>)
 800a890:	ec51 0b18 	vmov	r0, r1, d8
 800a894:	f7f5 fd02 	bl	800029c <__adddf3>
 800a898:	4602      	mov	r2, r0
 800a89a:	460b      	mov	r3, r1
 800a89c:	4630      	mov	r0, r6
 800a89e:	4639      	mov	r1, r7
 800a8a0:	f7f6 f942 	bl	8000b28 <__aeabi_dcmpgt>
 800a8a4:	2800      	cmp	r0, #0
 800a8a6:	d175      	bne.n	800a994 <_dtoa_r+0x6fc>
 800a8a8:	ec53 2b18 	vmov	r2, r3, d8
 800a8ac:	4911      	ldr	r1, [pc, #68]	; (800a8f4 <_dtoa_r+0x65c>)
 800a8ae:	2000      	movs	r0, #0
 800a8b0:	f7f5 fcf2 	bl	8000298 <__aeabi_dsub>
 800a8b4:	4602      	mov	r2, r0
 800a8b6:	460b      	mov	r3, r1
 800a8b8:	4630      	mov	r0, r6
 800a8ba:	4639      	mov	r1, r7
 800a8bc:	f7f6 f916 	bl	8000aec <__aeabi_dcmplt>
 800a8c0:	2800      	cmp	r0, #0
 800a8c2:	f43f af27 	beq.w	800a714 <_dtoa_r+0x47c>
 800a8c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a8c8:	1e6b      	subs	r3, r5, #1
 800a8ca:	930c      	str	r3, [sp, #48]	; 0x30
 800a8cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a8d0:	2b30      	cmp	r3, #48	; 0x30
 800a8d2:	d0f8      	beq.n	800a8c6 <_dtoa_r+0x62e>
 800a8d4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a8d8:	e04a      	b.n	800a970 <_dtoa_r+0x6d8>
 800a8da:	bf00      	nop
 800a8dc:	0800c7d0 	.word	0x0800c7d0
 800a8e0:	0800c7a8 	.word	0x0800c7a8
 800a8e4:	3ff00000 	.word	0x3ff00000
 800a8e8:	40240000 	.word	0x40240000
 800a8ec:	401c0000 	.word	0x401c0000
 800a8f0:	40140000 	.word	0x40140000
 800a8f4:	3fe00000 	.word	0x3fe00000
 800a8f8:	4baf      	ldr	r3, [pc, #700]	; (800abb8 <_dtoa_r+0x920>)
 800a8fa:	f7f5 fe85 	bl	8000608 <__aeabi_dmul>
 800a8fe:	4606      	mov	r6, r0
 800a900:	460f      	mov	r7, r1
 800a902:	e7ac      	b.n	800a85e <_dtoa_r+0x5c6>
 800a904:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a908:	9d00      	ldr	r5, [sp, #0]
 800a90a:	4642      	mov	r2, r8
 800a90c:	464b      	mov	r3, r9
 800a90e:	4630      	mov	r0, r6
 800a910:	4639      	mov	r1, r7
 800a912:	f7f5 ffa3 	bl	800085c <__aeabi_ddiv>
 800a916:	f7f6 f927 	bl	8000b68 <__aeabi_d2iz>
 800a91a:	9002      	str	r0, [sp, #8]
 800a91c:	f7f5 fe0a 	bl	8000534 <__aeabi_i2d>
 800a920:	4642      	mov	r2, r8
 800a922:	464b      	mov	r3, r9
 800a924:	f7f5 fe70 	bl	8000608 <__aeabi_dmul>
 800a928:	4602      	mov	r2, r0
 800a92a:	460b      	mov	r3, r1
 800a92c:	4630      	mov	r0, r6
 800a92e:	4639      	mov	r1, r7
 800a930:	f7f5 fcb2 	bl	8000298 <__aeabi_dsub>
 800a934:	9e02      	ldr	r6, [sp, #8]
 800a936:	9f01      	ldr	r7, [sp, #4]
 800a938:	3630      	adds	r6, #48	; 0x30
 800a93a:	f805 6b01 	strb.w	r6, [r5], #1
 800a93e:	9e00      	ldr	r6, [sp, #0]
 800a940:	1bae      	subs	r6, r5, r6
 800a942:	42b7      	cmp	r7, r6
 800a944:	4602      	mov	r2, r0
 800a946:	460b      	mov	r3, r1
 800a948:	d137      	bne.n	800a9ba <_dtoa_r+0x722>
 800a94a:	f7f5 fca7 	bl	800029c <__adddf3>
 800a94e:	4642      	mov	r2, r8
 800a950:	464b      	mov	r3, r9
 800a952:	4606      	mov	r6, r0
 800a954:	460f      	mov	r7, r1
 800a956:	f7f6 f8e7 	bl	8000b28 <__aeabi_dcmpgt>
 800a95a:	b9c8      	cbnz	r0, 800a990 <_dtoa_r+0x6f8>
 800a95c:	4642      	mov	r2, r8
 800a95e:	464b      	mov	r3, r9
 800a960:	4630      	mov	r0, r6
 800a962:	4639      	mov	r1, r7
 800a964:	f7f6 f8b8 	bl	8000ad8 <__aeabi_dcmpeq>
 800a968:	b110      	cbz	r0, 800a970 <_dtoa_r+0x6d8>
 800a96a:	9b02      	ldr	r3, [sp, #8]
 800a96c:	07d9      	lsls	r1, r3, #31
 800a96e:	d40f      	bmi.n	800a990 <_dtoa_r+0x6f8>
 800a970:	4620      	mov	r0, r4
 800a972:	4659      	mov	r1, fp
 800a974:	f000 fbc2 	bl	800b0fc <_Bfree>
 800a978:	2300      	movs	r3, #0
 800a97a:	702b      	strb	r3, [r5, #0]
 800a97c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a97e:	f10a 0001 	add.w	r0, sl, #1
 800a982:	6018      	str	r0, [r3, #0]
 800a984:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a986:	2b00      	cmp	r3, #0
 800a988:	f43f acd8 	beq.w	800a33c <_dtoa_r+0xa4>
 800a98c:	601d      	str	r5, [r3, #0]
 800a98e:	e4d5      	b.n	800a33c <_dtoa_r+0xa4>
 800a990:	f8cd a01c 	str.w	sl, [sp, #28]
 800a994:	462b      	mov	r3, r5
 800a996:	461d      	mov	r5, r3
 800a998:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a99c:	2a39      	cmp	r2, #57	; 0x39
 800a99e:	d108      	bne.n	800a9b2 <_dtoa_r+0x71a>
 800a9a0:	9a00      	ldr	r2, [sp, #0]
 800a9a2:	429a      	cmp	r2, r3
 800a9a4:	d1f7      	bne.n	800a996 <_dtoa_r+0x6fe>
 800a9a6:	9a07      	ldr	r2, [sp, #28]
 800a9a8:	9900      	ldr	r1, [sp, #0]
 800a9aa:	3201      	adds	r2, #1
 800a9ac:	9207      	str	r2, [sp, #28]
 800a9ae:	2230      	movs	r2, #48	; 0x30
 800a9b0:	700a      	strb	r2, [r1, #0]
 800a9b2:	781a      	ldrb	r2, [r3, #0]
 800a9b4:	3201      	adds	r2, #1
 800a9b6:	701a      	strb	r2, [r3, #0]
 800a9b8:	e78c      	b.n	800a8d4 <_dtoa_r+0x63c>
 800a9ba:	4b7f      	ldr	r3, [pc, #508]	; (800abb8 <_dtoa_r+0x920>)
 800a9bc:	2200      	movs	r2, #0
 800a9be:	f7f5 fe23 	bl	8000608 <__aeabi_dmul>
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	4606      	mov	r6, r0
 800a9c8:	460f      	mov	r7, r1
 800a9ca:	f7f6 f885 	bl	8000ad8 <__aeabi_dcmpeq>
 800a9ce:	2800      	cmp	r0, #0
 800a9d0:	d09b      	beq.n	800a90a <_dtoa_r+0x672>
 800a9d2:	e7cd      	b.n	800a970 <_dtoa_r+0x6d8>
 800a9d4:	9a08      	ldr	r2, [sp, #32]
 800a9d6:	2a00      	cmp	r2, #0
 800a9d8:	f000 80c4 	beq.w	800ab64 <_dtoa_r+0x8cc>
 800a9dc:	9a05      	ldr	r2, [sp, #20]
 800a9de:	2a01      	cmp	r2, #1
 800a9e0:	f300 80a8 	bgt.w	800ab34 <_dtoa_r+0x89c>
 800a9e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a9e6:	2a00      	cmp	r2, #0
 800a9e8:	f000 80a0 	beq.w	800ab2c <_dtoa_r+0x894>
 800a9ec:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a9f0:	9e06      	ldr	r6, [sp, #24]
 800a9f2:	4645      	mov	r5, r8
 800a9f4:	9a04      	ldr	r2, [sp, #16]
 800a9f6:	2101      	movs	r1, #1
 800a9f8:	441a      	add	r2, r3
 800a9fa:	4620      	mov	r0, r4
 800a9fc:	4498      	add	r8, r3
 800a9fe:	9204      	str	r2, [sp, #16]
 800aa00:	f000 fc38 	bl	800b274 <__i2b>
 800aa04:	4607      	mov	r7, r0
 800aa06:	2d00      	cmp	r5, #0
 800aa08:	dd0b      	ble.n	800aa22 <_dtoa_r+0x78a>
 800aa0a:	9b04      	ldr	r3, [sp, #16]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	dd08      	ble.n	800aa22 <_dtoa_r+0x78a>
 800aa10:	42ab      	cmp	r3, r5
 800aa12:	9a04      	ldr	r2, [sp, #16]
 800aa14:	bfa8      	it	ge
 800aa16:	462b      	movge	r3, r5
 800aa18:	eba8 0803 	sub.w	r8, r8, r3
 800aa1c:	1aed      	subs	r5, r5, r3
 800aa1e:	1ad3      	subs	r3, r2, r3
 800aa20:	9304      	str	r3, [sp, #16]
 800aa22:	9b06      	ldr	r3, [sp, #24]
 800aa24:	b1fb      	cbz	r3, 800aa66 <_dtoa_r+0x7ce>
 800aa26:	9b08      	ldr	r3, [sp, #32]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	f000 809f 	beq.w	800ab6c <_dtoa_r+0x8d4>
 800aa2e:	2e00      	cmp	r6, #0
 800aa30:	dd11      	ble.n	800aa56 <_dtoa_r+0x7be>
 800aa32:	4639      	mov	r1, r7
 800aa34:	4632      	mov	r2, r6
 800aa36:	4620      	mov	r0, r4
 800aa38:	f000 fcd8 	bl	800b3ec <__pow5mult>
 800aa3c:	465a      	mov	r2, fp
 800aa3e:	4601      	mov	r1, r0
 800aa40:	4607      	mov	r7, r0
 800aa42:	4620      	mov	r0, r4
 800aa44:	f000 fc2c 	bl	800b2a0 <__multiply>
 800aa48:	4659      	mov	r1, fp
 800aa4a:	9007      	str	r0, [sp, #28]
 800aa4c:	4620      	mov	r0, r4
 800aa4e:	f000 fb55 	bl	800b0fc <_Bfree>
 800aa52:	9b07      	ldr	r3, [sp, #28]
 800aa54:	469b      	mov	fp, r3
 800aa56:	9b06      	ldr	r3, [sp, #24]
 800aa58:	1b9a      	subs	r2, r3, r6
 800aa5a:	d004      	beq.n	800aa66 <_dtoa_r+0x7ce>
 800aa5c:	4659      	mov	r1, fp
 800aa5e:	4620      	mov	r0, r4
 800aa60:	f000 fcc4 	bl	800b3ec <__pow5mult>
 800aa64:	4683      	mov	fp, r0
 800aa66:	2101      	movs	r1, #1
 800aa68:	4620      	mov	r0, r4
 800aa6a:	f000 fc03 	bl	800b274 <__i2b>
 800aa6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	4606      	mov	r6, r0
 800aa74:	dd7c      	ble.n	800ab70 <_dtoa_r+0x8d8>
 800aa76:	461a      	mov	r2, r3
 800aa78:	4601      	mov	r1, r0
 800aa7a:	4620      	mov	r0, r4
 800aa7c:	f000 fcb6 	bl	800b3ec <__pow5mult>
 800aa80:	9b05      	ldr	r3, [sp, #20]
 800aa82:	2b01      	cmp	r3, #1
 800aa84:	4606      	mov	r6, r0
 800aa86:	dd76      	ble.n	800ab76 <_dtoa_r+0x8de>
 800aa88:	2300      	movs	r3, #0
 800aa8a:	9306      	str	r3, [sp, #24]
 800aa8c:	6933      	ldr	r3, [r6, #16]
 800aa8e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800aa92:	6918      	ldr	r0, [r3, #16]
 800aa94:	f000 fb9e 	bl	800b1d4 <__hi0bits>
 800aa98:	f1c0 0020 	rsb	r0, r0, #32
 800aa9c:	9b04      	ldr	r3, [sp, #16]
 800aa9e:	4418      	add	r0, r3
 800aaa0:	f010 001f 	ands.w	r0, r0, #31
 800aaa4:	f000 8086 	beq.w	800abb4 <_dtoa_r+0x91c>
 800aaa8:	f1c0 0320 	rsb	r3, r0, #32
 800aaac:	2b04      	cmp	r3, #4
 800aaae:	dd7f      	ble.n	800abb0 <_dtoa_r+0x918>
 800aab0:	f1c0 001c 	rsb	r0, r0, #28
 800aab4:	9b04      	ldr	r3, [sp, #16]
 800aab6:	4403      	add	r3, r0
 800aab8:	4480      	add	r8, r0
 800aaba:	4405      	add	r5, r0
 800aabc:	9304      	str	r3, [sp, #16]
 800aabe:	f1b8 0f00 	cmp.w	r8, #0
 800aac2:	dd05      	ble.n	800aad0 <_dtoa_r+0x838>
 800aac4:	4659      	mov	r1, fp
 800aac6:	4642      	mov	r2, r8
 800aac8:	4620      	mov	r0, r4
 800aaca:	f000 fce9 	bl	800b4a0 <__lshift>
 800aace:	4683      	mov	fp, r0
 800aad0:	9b04      	ldr	r3, [sp, #16]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	dd05      	ble.n	800aae2 <_dtoa_r+0x84a>
 800aad6:	4631      	mov	r1, r6
 800aad8:	461a      	mov	r2, r3
 800aada:	4620      	mov	r0, r4
 800aadc:	f000 fce0 	bl	800b4a0 <__lshift>
 800aae0:	4606      	mov	r6, r0
 800aae2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d069      	beq.n	800abbc <_dtoa_r+0x924>
 800aae8:	4631      	mov	r1, r6
 800aaea:	4658      	mov	r0, fp
 800aaec:	f000 fd44 	bl	800b578 <__mcmp>
 800aaf0:	2800      	cmp	r0, #0
 800aaf2:	da63      	bge.n	800abbc <_dtoa_r+0x924>
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	4659      	mov	r1, fp
 800aaf8:	220a      	movs	r2, #10
 800aafa:	4620      	mov	r0, r4
 800aafc:	f000 fb20 	bl	800b140 <__multadd>
 800ab00:	9b08      	ldr	r3, [sp, #32]
 800ab02:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab06:	4683      	mov	fp, r0
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	f000 818f 	beq.w	800ae2c <_dtoa_r+0xb94>
 800ab0e:	4639      	mov	r1, r7
 800ab10:	2300      	movs	r3, #0
 800ab12:	220a      	movs	r2, #10
 800ab14:	4620      	mov	r0, r4
 800ab16:	f000 fb13 	bl	800b140 <__multadd>
 800ab1a:	f1b9 0f00 	cmp.w	r9, #0
 800ab1e:	4607      	mov	r7, r0
 800ab20:	f300 808e 	bgt.w	800ac40 <_dtoa_r+0x9a8>
 800ab24:	9b05      	ldr	r3, [sp, #20]
 800ab26:	2b02      	cmp	r3, #2
 800ab28:	dc50      	bgt.n	800abcc <_dtoa_r+0x934>
 800ab2a:	e089      	b.n	800ac40 <_dtoa_r+0x9a8>
 800ab2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ab2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ab32:	e75d      	b.n	800a9f0 <_dtoa_r+0x758>
 800ab34:	9b01      	ldr	r3, [sp, #4]
 800ab36:	1e5e      	subs	r6, r3, #1
 800ab38:	9b06      	ldr	r3, [sp, #24]
 800ab3a:	42b3      	cmp	r3, r6
 800ab3c:	bfbf      	itttt	lt
 800ab3e:	9b06      	ldrlt	r3, [sp, #24]
 800ab40:	9606      	strlt	r6, [sp, #24]
 800ab42:	1af2      	sublt	r2, r6, r3
 800ab44:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800ab46:	bfb6      	itet	lt
 800ab48:	189b      	addlt	r3, r3, r2
 800ab4a:	1b9e      	subge	r6, r3, r6
 800ab4c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800ab4e:	9b01      	ldr	r3, [sp, #4]
 800ab50:	bfb8      	it	lt
 800ab52:	2600      	movlt	r6, #0
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	bfb5      	itete	lt
 800ab58:	eba8 0503 	sublt.w	r5, r8, r3
 800ab5c:	9b01      	ldrge	r3, [sp, #4]
 800ab5e:	2300      	movlt	r3, #0
 800ab60:	4645      	movge	r5, r8
 800ab62:	e747      	b.n	800a9f4 <_dtoa_r+0x75c>
 800ab64:	9e06      	ldr	r6, [sp, #24]
 800ab66:	9f08      	ldr	r7, [sp, #32]
 800ab68:	4645      	mov	r5, r8
 800ab6a:	e74c      	b.n	800aa06 <_dtoa_r+0x76e>
 800ab6c:	9a06      	ldr	r2, [sp, #24]
 800ab6e:	e775      	b.n	800aa5c <_dtoa_r+0x7c4>
 800ab70:	9b05      	ldr	r3, [sp, #20]
 800ab72:	2b01      	cmp	r3, #1
 800ab74:	dc18      	bgt.n	800aba8 <_dtoa_r+0x910>
 800ab76:	9b02      	ldr	r3, [sp, #8]
 800ab78:	b9b3      	cbnz	r3, 800aba8 <_dtoa_r+0x910>
 800ab7a:	9b03      	ldr	r3, [sp, #12]
 800ab7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab80:	b9a3      	cbnz	r3, 800abac <_dtoa_r+0x914>
 800ab82:	9b03      	ldr	r3, [sp, #12]
 800ab84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ab88:	0d1b      	lsrs	r3, r3, #20
 800ab8a:	051b      	lsls	r3, r3, #20
 800ab8c:	b12b      	cbz	r3, 800ab9a <_dtoa_r+0x902>
 800ab8e:	9b04      	ldr	r3, [sp, #16]
 800ab90:	3301      	adds	r3, #1
 800ab92:	9304      	str	r3, [sp, #16]
 800ab94:	f108 0801 	add.w	r8, r8, #1
 800ab98:	2301      	movs	r3, #1
 800ab9a:	9306      	str	r3, [sp, #24]
 800ab9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	f47f af74 	bne.w	800aa8c <_dtoa_r+0x7f4>
 800aba4:	2001      	movs	r0, #1
 800aba6:	e779      	b.n	800aa9c <_dtoa_r+0x804>
 800aba8:	2300      	movs	r3, #0
 800abaa:	e7f6      	b.n	800ab9a <_dtoa_r+0x902>
 800abac:	9b02      	ldr	r3, [sp, #8]
 800abae:	e7f4      	b.n	800ab9a <_dtoa_r+0x902>
 800abb0:	d085      	beq.n	800aabe <_dtoa_r+0x826>
 800abb2:	4618      	mov	r0, r3
 800abb4:	301c      	adds	r0, #28
 800abb6:	e77d      	b.n	800aab4 <_dtoa_r+0x81c>
 800abb8:	40240000 	.word	0x40240000
 800abbc:	9b01      	ldr	r3, [sp, #4]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	dc38      	bgt.n	800ac34 <_dtoa_r+0x99c>
 800abc2:	9b05      	ldr	r3, [sp, #20]
 800abc4:	2b02      	cmp	r3, #2
 800abc6:	dd35      	ble.n	800ac34 <_dtoa_r+0x99c>
 800abc8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800abcc:	f1b9 0f00 	cmp.w	r9, #0
 800abd0:	d10d      	bne.n	800abee <_dtoa_r+0x956>
 800abd2:	4631      	mov	r1, r6
 800abd4:	464b      	mov	r3, r9
 800abd6:	2205      	movs	r2, #5
 800abd8:	4620      	mov	r0, r4
 800abda:	f000 fab1 	bl	800b140 <__multadd>
 800abde:	4601      	mov	r1, r0
 800abe0:	4606      	mov	r6, r0
 800abe2:	4658      	mov	r0, fp
 800abe4:	f000 fcc8 	bl	800b578 <__mcmp>
 800abe8:	2800      	cmp	r0, #0
 800abea:	f73f adbd 	bgt.w	800a768 <_dtoa_r+0x4d0>
 800abee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abf0:	9d00      	ldr	r5, [sp, #0]
 800abf2:	ea6f 0a03 	mvn.w	sl, r3
 800abf6:	f04f 0800 	mov.w	r8, #0
 800abfa:	4631      	mov	r1, r6
 800abfc:	4620      	mov	r0, r4
 800abfe:	f000 fa7d 	bl	800b0fc <_Bfree>
 800ac02:	2f00      	cmp	r7, #0
 800ac04:	f43f aeb4 	beq.w	800a970 <_dtoa_r+0x6d8>
 800ac08:	f1b8 0f00 	cmp.w	r8, #0
 800ac0c:	d005      	beq.n	800ac1a <_dtoa_r+0x982>
 800ac0e:	45b8      	cmp	r8, r7
 800ac10:	d003      	beq.n	800ac1a <_dtoa_r+0x982>
 800ac12:	4641      	mov	r1, r8
 800ac14:	4620      	mov	r0, r4
 800ac16:	f000 fa71 	bl	800b0fc <_Bfree>
 800ac1a:	4639      	mov	r1, r7
 800ac1c:	4620      	mov	r0, r4
 800ac1e:	f000 fa6d 	bl	800b0fc <_Bfree>
 800ac22:	e6a5      	b.n	800a970 <_dtoa_r+0x6d8>
 800ac24:	2600      	movs	r6, #0
 800ac26:	4637      	mov	r7, r6
 800ac28:	e7e1      	b.n	800abee <_dtoa_r+0x956>
 800ac2a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ac2c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ac30:	4637      	mov	r7, r6
 800ac32:	e599      	b.n	800a768 <_dtoa_r+0x4d0>
 800ac34:	9b08      	ldr	r3, [sp, #32]
 800ac36:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	f000 80fd 	beq.w	800ae3a <_dtoa_r+0xba2>
 800ac40:	2d00      	cmp	r5, #0
 800ac42:	dd05      	ble.n	800ac50 <_dtoa_r+0x9b8>
 800ac44:	4639      	mov	r1, r7
 800ac46:	462a      	mov	r2, r5
 800ac48:	4620      	mov	r0, r4
 800ac4a:	f000 fc29 	bl	800b4a0 <__lshift>
 800ac4e:	4607      	mov	r7, r0
 800ac50:	9b06      	ldr	r3, [sp, #24]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d05c      	beq.n	800ad10 <_dtoa_r+0xa78>
 800ac56:	6879      	ldr	r1, [r7, #4]
 800ac58:	4620      	mov	r0, r4
 800ac5a:	f000 fa0f 	bl	800b07c <_Balloc>
 800ac5e:	4605      	mov	r5, r0
 800ac60:	b928      	cbnz	r0, 800ac6e <_dtoa_r+0x9d6>
 800ac62:	4b80      	ldr	r3, [pc, #512]	; (800ae64 <_dtoa_r+0xbcc>)
 800ac64:	4602      	mov	r2, r0
 800ac66:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ac6a:	f7ff bb2e 	b.w	800a2ca <_dtoa_r+0x32>
 800ac6e:	693a      	ldr	r2, [r7, #16]
 800ac70:	3202      	adds	r2, #2
 800ac72:	0092      	lsls	r2, r2, #2
 800ac74:	f107 010c 	add.w	r1, r7, #12
 800ac78:	300c      	adds	r0, #12
 800ac7a:	f7fe fddf 	bl	800983c <memcpy>
 800ac7e:	2201      	movs	r2, #1
 800ac80:	4629      	mov	r1, r5
 800ac82:	4620      	mov	r0, r4
 800ac84:	f000 fc0c 	bl	800b4a0 <__lshift>
 800ac88:	9b00      	ldr	r3, [sp, #0]
 800ac8a:	3301      	adds	r3, #1
 800ac8c:	9301      	str	r3, [sp, #4]
 800ac8e:	9b00      	ldr	r3, [sp, #0]
 800ac90:	444b      	add	r3, r9
 800ac92:	9307      	str	r3, [sp, #28]
 800ac94:	9b02      	ldr	r3, [sp, #8]
 800ac96:	f003 0301 	and.w	r3, r3, #1
 800ac9a:	46b8      	mov	r8, r7
 800ac9c:	9306      	str	r3, [sp, #24]
 800ac9e:	4607      	mov	r7, r0
 800aca0:	9b01      	ldr	r3, [sp, #4]
 800aca2:	4631      	mov	r1, r6
 800aca4:	3b01      	subs	r3, #1
 800aca6:	4658      	mov	r0, fp
 800aca8:	9302      	str	r3, [sp, #8]
 800acaa:	f7ff fa67 	bl	800a17c <quorem>
 800acae:	4603      	mov	r3, r0
 800acb0:	3330      	adds	r3, #48	; 0x30
 800acb2:	9004      	str	r0, [sp, #16]
 800acb4:	4641      	mov	r1, r8
 800acb6:	4658      	mov	r0, fp
 800acb8:	9308      	str	r3, [sp, #32]
 800acba:	f000 fc5d 	bl	800b578 <__mcmp>
 800acbe:	463a      	mov	r2, r7
 800acc0:	4681      	mov	r9, r0
 800acc2:	4631      	mov	r1, r6
 800acc4:	4620      	mov	r0, r4
 800acc6:	f000 fc73 	bl	800b5b0 <__mdiff>
 800acca:	68c2      	ldr	r2, [r0, #12]
 800accc:	9b08      	ldr	r3, [sp, #32]
 800acce:	4605      	mov	r5, r0
 800acd0:	bb02      	cbnz	r2, 800ad14 <_dtoa_r+0xa7c>
 800acd2:	4601      	mov	r1, r0
 800acd4:	4658      	mov	r0, fp
 800acd6:	f000 fc4f 	bl	800b578 <__mcmp>
 800acda:	9b08      	ldr	r3, [sp, #32]
 800acdc:	4602      	mov	r2, r0
 800acde:	4629      	mov	r1, r5
 800ace0:	4620      	mov	r0, r4
 800ace2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800ace6:	f000 fa09 	bl	800b0fc <_Bfree>
 800acea:	9b05      	ldr	r3, [sp, #20]
 800acec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800acee:	9d01      	ldr	r5, [sp, #4]
 800acf0:	ea43 0102 	orr.w	r1, r3, r2
 800acf4:	9b06      	ldr	r3, [sp, #24]
 800acf6:	430b      	orrs	r3, r1
 800acf8:	9b08      	ldr	r3, [sp, #32]
 800acfa:	d10d      	bne.n	800ad18 <_dtoa_r+0xa80>
 800acfc:	2b39      	cmp	r3, #57	; 0x39
 800acfe:	d029      	beq.n	800ad54 <_dtoa_r+0xabc>
 800ad00:	f1b9 0f00 	cmp.w	r9, #0
 800ad04:	dd01      	ble.n	800ad0a <_dtoa_r+0xa72>
 800ad06:	9b04      	ldr	r3, [sp, #16]
 800ad08:	3331      	adds	r3, #49	; 0x31
 800ad0a:	9a02      	ldr	r2, [sp, #8]
 800ad0c:	7013      	strb	r3, [r2, #0]
 800ad0e:	e774      	b.n	800abfa <_dtoa_r+0x962>
 800ad10:	4638      	mov	r0, r7
 800ad12:	e7b9      	b.n	800ac88 <_dtoa_r+0x9f0>
 800ad14:	2201      	movs	r2, #1
 800ad16:	e7e2      	b.n	800acde <_dtoa_r+0xa46>
 800ad18:	f1b9 0f00 	cmp.w	r9, #0
 800ad1c:	db06      	blt.n	800ad2c <_dtoa_r+0xa94>
 800ad1e:	9905      	ldr	r1, [sp, #20]
 800ad20:	ea41 0909 	orr.w	r9, r1, r9
 800ad24:	9906      	ldr	r1, [sp, #24]
 800ad26:	ea59 0101 	orrs.w	r1, r9, r1
 800ad2a:	d120      	bne.n	800ad6e <_dtoa_r+0xad6>
 800ad2c:	2a00      	cmp	r2, #0
 800ad2e:	ddec      	ble.n	800ad0a <_dtoa_r+0xa72>
 800ad30:	4659      	mov	r1, fp
 800ad32:	2201      	movs	r2, #1
 800ad34:	4620      	mov	r0, r4
 800ad36:	9301      	str	r3, [sp, #4]
 800ad38:	f000 fbb2 	bl	800b4a0 <__lshift>
 800ad3c:	4631      	mov	r1, r6
 800ad3e:	4683      	mov	fp, r0
 800ad40:	f000 fc1a 	bl	800b578 <__mcmp>
 800ad44:	2800      	cmp	r0, #0
 800ad46:	9b01      	ldr	r3, [sp, #4]
 800ad48:	dc02      	bgt.n	800ad50 <_dtoa_r+0xab8>
 800ad4a:	d1de      	bne.n	800ad0a <_dtoa_r+0xa72>
 800ad4c:	07da      	lsls	r2, r3, #31
 800ad4e:	d5dc      	bpl.n	800ad0a <_dtoa_r+0xa72>
 800ad50:	2b39      	cmp	r3, #57	; 0x39
 800ad52:	d1d8      	bne.n	800ad06 <_dtoa_r+0xa6e>
 800ad54:	9a02      	ldr	r2, [sp, #8]
 800ad56:	2339      	movs	r3, #57	; 0x39
 800ad58:	7013      	strb	r3, [r2, #0]
 800ad5a:	462b      	mov	r3, r5
 800ad5c:	461d      	mov	r5, r3
 800ad5e:	3b01      	subs	r3, #1
 800ad60:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ad64:	2a39      	cmp	r2, #57	; 0x39
 800ad66:	d050      	beq.n	800ae0a <_dtoa_r+0xb72>
 800ad68:	3201      	adds	r2, #1
 800ad6a:	701a      	strb	r2, [r3, #0]
 800ad6c:	e745      	b.n	800abfa <_dtoa_r+0x962>
 800ad6e:	2a00      	cmp	r2, #0
 800ad70:	dd03      	ble.n	800ad7a <_dtoa_r+0xae2>
 800ad72:	2b39      	cmp	r3, #57	; 0x39
 800ad74:	d0ee      	beq.n	800ad54 <_dtoa_r+0xabc>
 800ad76:	3301      	adds	r3, #1
 800ad78:	e7c7      	b.n	800ad0a <_dtoa_r+0xa72>
 800ad7a:	9a01      	ldr	r2, [sp, #4]
 800ad7c:	9907      	ldr	r1, [sp, #28]
 800ad7e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ad82:	428a      	cmp	r2, r1
 800ad84:	d02a      	beq.n	800addc <_dtoa_r+0xb44>
 800ad86:	4659      	mov	r1, fp
 800ad88:	2300      	movs	r3, #0
 800ad8a:	220a      	movs	r2, #10
 800ad8c:	4620      	mov	r0, r4
 800ad8e:	f000 f9d7 	bl	800b140 <__multadd>
 800ad92:	45b8      	cmp	r8, r7
 800ad94:	4683      	mov	fp, r0
 800ad96:	f04f 0300 	mov.w	r3, #0
 800ad9a:	f04f 020a 	mov.w	r2, #10
 800ad9e:	4641      	mov	r1, r8
 800ada0:	4620      	mov	r0, r4
 800ada2:	d107      	bne.n	800adb4 <_dtoa_r+0xb1c>
 800ada4:	f000 f9cc 	bl	800b140 <__multadd>
 800ada8:	4680      	mov	r8, r0
 800adaa:	4607      	mov	r7, r0
 800adac:	9b01      	ldr	r3, [sp, #4]
 800adae:	3301      	adds	r3, #1
 800adb0:	9301      	str	r3, [sp, #4]
 800adb2:	e775      	b.n	800aca0 <_dtoa_r+0xa08>
 800adb4:	f000 f9c4 	bl	800b140 <__multadd>
 800adb8:	4639      	mov	r1, r7
 800adba:	4680      	mov	r8, r0
 800adbc:	2300      	movs	r3, #0
 800adbe:	220a      	movs	r2, #10
 800adc0:	4620      	mov	r0, r4
 800adc2:	f000 f9bd 	bl	800b140 <__multadd>
 800adc6:	4607      	mov	r7, r0
 800adc8:	e7f0      	b.n	800adac <_dtoa_r+0xb14>
 800adca:	f1b9 0f00 	cmp.w	r9, #0
 800adce:	9a00      	ldr	r2, [sp, #0]
 800add0:	bfcc      	ite	gt
 800add2:	464d      	movgt	r5, r9
 800add4:	2501      	movle	r5, #1
 800add6:	4415      	add	r5, r2
 800add8:	f04f 0800 	mov.w	r8, #0
 800addc:	4659      	mov	r1, fp
 800adde:	2201      	movs	r2, #1
 800ade0:	4620      	mov	r0, r4
 800ade2:	9301      	str	r3, [sp, #4]
 800ade4:	f000 fb5c 	bl	800b4a0 <__lshift>
 800ade8:	4631      	mov	r1, r6
 800adea:	4683      	mov	fp, r0
 800adec:	f000 fbc4 	bl	800b578 <__mcmp>
 800adf0:	2800      	cmp	r0, #0
 800adf2:	dcb2      	bgt.n	800ad5a <_dtoa_r+0xac2>
 800adf4:	d102      	bne.n	800adfc <_dtoa_r+0xb64>
 800adf6:	9b01      	ldr	r3, [sp, #4]
 800adf8:	07db      	lsls	r3, r3, #31
 800adfa:	d4ae      	bmi.n	800ad5a <_dtoa_r+0xac2>
 800adfc:	462b      	mov	r3, r5
 800adfe:	461d      	mov	r5, r3
 800ae00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae04:	2a30      	cmp	r2, #48	; 0x30
 800ae06:	d0fa      	beq.n	800adfe <_dtoa_r+0xb66>
 800ae08:	e6f7      	b.n	800abfa <_dtoa_r+0x962>
 800ae0a:	9a00      	ldr	r2, [sp, #0]
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	d1a5      	bne.n	800ad5c <_dtoa_r+0xac4>
 800ae10:	f10a 0a01 	add.w	sl, sl, #1
 800ae14:	2331      	movs	r3, #49	; 0x31
 800ae16:	e779      	b.n	800ad0c <_dtoa_r+0xa74>
 800ae18:	4b13      	ldr	r3, [pc, #76]	; (800ae68 <_dtoa_r+0xbd0>)
 800ae1a:	f7ff baaf 	b.w	800a37c <_dtoa_r+0xe4>
 800ae1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	f47f aa86 	bne.w	800a332 <_dtoa_r+0x9a>
 800ae26:	4b11      	ldr	r3, [pc, #68]	; (800ae6c <_dtoa_r+0xbd4>)
 800ae28:	f7ff baa8 	b.w	800a37c <_dtoa_r+0xe4>
 800ae2c:	f1b9 0f00 	cmp.w	r9, #0
 800ae30:	dc03      	bgt.n	800ae3a <_dtoa_r+0xba2>
 800ae32:	9b05      	ldr	r3, [sp, #20]
 800ae34:	2b02      	cmp	r3, #2
 800ae36:	f73f aec9 	bgt.w	800abcc <_dtoa_r+0x934>
 800ae3a:	9d00      	ldr	r5, [sp, #0]
 800ae3c:	4631      	mov	r1, r6
 800ae3e:	4658      	mov	r0, fp
 800ae40:	f7ff f99c 	bl	800a17c <quorem>
 800ae44:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ae48:	f805 3b01 	strb.w	r3, [r5], #1
 800ae4c:	9a00      	ldr	r2, [sp, #0]
 800ae4e:	1aaa      	subs	r2, r5, r2
 800ae50:	4591      	cmp	r9, r2
 800ae52:	ddba      	ble.n	800adca <_dtoa_r+0xb32>
 800ae54:	4659      	mov	r1, fp
 800ae56:	2300      	movs	r3, #0
 800ae58:	220a      	movs	r2, #10
 800ae5a:	4620      	mov	r0, r4
 800ae5c:	f000 f970 	bl	800b140 <__multadd>
 800ae60:	4683      	mov	fp, r0
 800ae62:	e7eb      	b.n	800ae3c <_dtoa_r+0xba4>
 800ae64:	0800c6d3 	.word	0x0800c6d3
 800ae68:	0800c62c 	.word	0x0800c62c
 800ae6c:	0800c650 	.word	0x0800c650

0800ae70 <std>:
 800ae70:	2300      	movs	r3, #0
 800ae72:	b510      	push	{r4, lr}
 800ae74:	4604      	mov	r4, r0
 800ae76:	e9c0 3300 	strd	r3, r3, [r0]
 800ae7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae7e:	6083      	str	r3, [r0, #8]
 800ae80:	8181      	strh	r1, [r0, #12]
 800ae82:	6643      	str	r3, [r0, #100]	; 0x64
 800ae84:	81c2      	strh	r2, [r0, #14]
 800ae86:	6183      	str	r3, [r0, #24]
 800ae88:	4619      	mov	r1, r3
 800ae8a:	2208      	movs	r2, #8
 800ae8c:	305c      	adds	r0, #92	; 0x5c
 800ae8e:	f7fe fce3 	bl	8009858 <memset>
 800ae92:	4b05      	ldr	r3, [pc, #20]	; (800aea8 <std+0x38>)
 800ae94:	6263      	str	r3, [r4, #36]	; 0x24
 800ae96:	4b05      	ldr	r3, [pc, #20]	; (800aeac <std+0x3c>)
 800ae98:	62a3      	str	r3, [r4, #40]	; 0x28
 800ae9a:	4b05      	ldr	r3, [pc, #20]	; (800aeb0 <std+0x40>)
 800ae9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ae9e:	4b05      	ldr	r3, [pc, #20]	; (800aeb4 <std+0x44>)
 800aea0:	6224      	str	r4, [r4, #32]
 800aea2:	6323      	str	r3, [r4, #48]	; 0x30
 800aea4:	bd10      	pop	{r4, pc}
 800aea6:	bf00      	nop
 800aea8:	0800be79 	.word	0x0800be79
 800aeac:	0800be9b 	.word	0x0800be9b
 800aeb0:	0800bed3 	.word	0x0800bed3
 800aeb4:	0800bef7 	.word	0x0800bef7

0800aeb8 <_cleanup_r>:
 800aeb8:	4901      	ldr	r1, [pc, #4]	; (800aec0 <_cleanup_r+0x8>)
 800aeba:	f000 b8af 	b.w	800b01c <_fwalk_reent>
 800aebe:	bf00      	nop
 800aec0:	0800c20d 	.word	0x0800c20d

0800aec4 <__sfmoreglue>:
 800aec4:	b570      	push	{r4, r5, r6, lr}
 800aec6:	1e4a      	subs	r2, r1, #1
 800aec8:	2568      	movs	r5, #104	; 0x68
 800aeca:	4355      	muls	r5, r2
 800aecc:	460e      	mov	r6, r1
 800aece:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aed2:	f000 fcb1 	bl	800b838 <_malloc_r>
 800aed6:	4604      	mov	r4, r0
 800aed8:	b140      	cbz	r0, 800aeec <__sfmoreglue+0x28>
 800aeda:	2100      	movs	r1, #0
 800aedc:	e9c0 1600 	strd	r1, r6, [r0]
 800aee0:	300c      	adds	r0, #12
 800aee2:	60a0      	str	r0, [r4, #8]
 800aee4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aee8:	f7fe fcb6 	bl	8009858 <memset>
 800aeec:	4620      	mov	r0, r4
 800aeee:	bd70      	pop	{r4, r5, r6, pc}

0800aef0 <__sfp_lock_acquire>:
 800aef0:	4801      	ldr	r0, [pc, #4]	; (800aef8 <__sfp_lock_acquire+0x8>)
 800aef2:	f000 b8b8 	b.w	800b066 <__retarget_lock_acquire_recursive>
 800aef6:	bf00      	nop
 800aef8:	20001f70 	.word	0x20001f70

0800aefc <__sfp_lock_release>:
 800aefc:	4801      	ldr	r0, [pc, #4]	; (800af04 <__sfp_lock_release+0x8>)
 800aefe:	f000 b8b3 	b.w	800b068 <__retarget_lock_release_recursive>
 800af02:	bf00      	nop
 800af04:	20001f70 	.word	0x20001f70

0800af08 <__sinit_lock_acquire>:
 800af08:	4801      	ldr	r0, [pc, #4]	; (800af10 <__sinit_lock_acquire+0x8>)
 800af0a:	f000 b8ac 	b.w	800b066 <__retarget_lock_acquire_recursive>
 800af0e:	bf00      	nop
 800af10:	20001f6b 	.word	0x20001f6b

0800af14 <__sinit_lock_release>:
 800af14:	4801      	ldr	r0, [pc, #4]	; (800af1c <__sinit_lock_release+0x8>)
 800af16:	f000 b8a7 	b.w	800b068 <__retarget_lock_release_recursive>
 800af1a:	bf00      	nop
 800af1c:	20001f6b 	.word	0x20001f6b

0800af20 <__sinit>:
 800af20:	b510      	push	{r4, lr}
 800af22:	4604      	mov	r4, r0
 800af24:	f7ff fff0 	bl	800af08 <__sinit_lock_acquire>
 800af28:	69a3      	ldr	r3, [r4, #24]
 800af2a:	b11b      	cbz	r3, 800af34 <__sinit+0x14>
 800af2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af30:	f7ff bff0 	b.w	800af14 <__sinit_lock_release>
 800af34:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800af38:	6523      	str	r3, [r4, #80]	; 0x50
 800af3a:	4b13      	ldr	r3, [pc, #76]	; (800af88 <__sinit+0x68>)
 800af3c:	4a13      	ldr	r2, [pc, #76]	; (800af8c <__sinit+0x6c>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	62a2      	str	r2, [r4, #40]	; 0x28
 800af42:	42a3      	cmp	r3, r4
 800af44:	bf04      	itt	eq
 800af46:	2301      	moveq	r3, #1
 800af48:	61a3      	streq	r3, [r4, #24]
 800af4a:	4620      	mov	r0, r4
 800af4c:	f000 f820 	bl	800af90 <__sfp>
 800af50:	6060      	str	r0, [r4, #4]
 800af52:	4620      	mov	r0, r4
 800af54:	f000 f81c 	bl	800af90 <__sfp>
 800af58:	60a0      	str	r0, [r4, #8]
 800af5a:	4620      	mov	r0, r4
 800af5c:	f000 f818 	bl	800af90 <__sfp>
 800af60:	2200      	movs	r2, #0
 800af62:	60e0      	str	r0, [r4, #12]
 800af64:	2104      	movs	r1, #4
 800af66:	6860      	ldr	r0, [r4, #4]
 800af68:	f7ff ff82 	bl	800ae70 <std>
 800af6c:	68a0      	ldr	r0, [r4, #8]
 800af6e:	2201      	movs	r2, #1
 800af70:	2109      	movs	r1, #9
 800af72:	f7ff ff7d 	bl	800ae70 <std>
 800af76:	68e0      	ldr	r0, [r4, #12]
 800af78:	2202      	movs	r2, #2
 800af7a:	2112      	movs	r1, #18
 800af7c:	f7ff ff78 	bl	800ae70 <std>
 800af80:	2301      	movs	r3, #1
 800af82:	61a3      	str	r3, [r4, #24]
 800af84:	e7d2      	b.n	800af2c <__sinit+0xc>
 800af86:	bf00      	nop
 800af88:	0800c618 	.word	0x0800c618
 800af8c:	0800aeb9 	.word	0x0800aeb9

0800af90 <__sfp>:
 800af90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af92:	4607      	mov	r7, r0
 800af94:	f7ff ffac 	bl	800aef0 <__sfp_lock_acquire>
 800af98:	4b1e      	ldr	r3, [pc, #120]	; (800b014 <__sfp+0x84>)
 800af9a:	681e      	ldr	r6, [r3, #0]
 800af9c:	69b3      	ldr	r3, [r6, #24]
 800af9e:	b913      	cbnz	r3, 800afa6 <__sfp+0x16>
 800afa0:	4630      	mov	r0, r6
 800afa2:	f7ff ffbd 	bl	800af20 <__sinit>
 800afa6:	3648      	adds	r6, #72	; 0x48
 800afa8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800afac:	3b01      	subs	r3, #1
 800afae:	d503      	bpl.n	800afb8 <__sfp+0x28>
 800afb0:	6833      	ldr	r3, [r6, #0]
 800afb2:	b30b      	cbz	r3, 800aff8 <__sfp+0x68>
 800afb4:	6836      	ldr	r6, [r6, #0]
 800afb6:	e7f7      	b.n	800afa8 <__sfp+0x18>
 800afb8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800afbc:	b9d5      	cbnz	r5, 800aff4 <__sfp+0x64>
 800afbe:	4b16      	ldr	r3, [pc, #88]	; (800b018 <__sfp+0x88>)
 800afc0:	60e3      	str	r3, [r4, #12]
 800afc2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800afc6:	6665      	str	r5, [r4, #100]	; 0x64
 800afc8:	f000 f84c 	bl	800b064 <__retarget_lock_init_recursive>
 800afcc:	f7ff ff96 	bl	800aefc <__sfp_lock_release>
 800afd0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800afd4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800afd8:	6025      	str	r5, [r4, #0]
 800afda:	61a5      	str	r5, [r4, #24]
 800afdc:	2208      	movs	r2, #8
 800afde:	4629      	mov	r1, r5
 800afe0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800afe4:	f7fe fc38 	bl	8009858 <memset>
 800afe8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800afec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aff0:	4620      	mov	r0, r4
 800aff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aff4:	3468      	adds	r4, #104	; 0x68
 800aff6:	e7d9      	b.n	800afac <__sfp+0x1c>
 800aff8:	2104      	movs	r1, #4
 800affa:	4638      	mov	r0, r7
 800affc:	f7ff ff62 	bl	800aec4 <__sfmoreglue>
 800b000:	4604      	mov	r4, r0
 800b002:	6030      	str	r0, [r6, #0]
 800b004:	2800      	cmp	r0, #0
 800b006:	d1d5      	bne.n	800afb4 <__sfp+0x24>
 800b008:	f7ff ff78 	bl	800aefc <__sfp_lock_release>
 800b00c:	230c      	movs	r3, #12
 800b00e:	603b      	str	r3, [r7, #0]
 800b010:	e7ee      	b.n	800aff0 <__sfp+0x60>
 800b012:	bf00      	nop
 800b014:	0800c618 	.word	0x0800c618
 800b018:	ffff0001 	.word	0xffff0001

0800b01c <_fwalk_reent>:
 800b01c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b020:	4606      	mov	r6, r0
 800b022:	4688      	mov	r8, r1
 800b024:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b028:	2700      	movs	r7, #0
 800b02a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b02e:	f1b9 0901 	subs.w	r9, r9, #1
 800b032:	d505      	bpl.n	800b040 <_fwalk_reent+0x24>
 800b034:	6824      	ldr	r4, [r4, #0]
 800b036:	2c00      	cmp	r4, #0
 800b038:	d1f7      	bne.n	800b02a <_fwalk_reent+0xe>
 800b03a:	4638      	mov	r0, r7
 800b03c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b040:	89ab      	ldrh	r3, [r5, #12]
 800b042:	2b01      	cmp	r3, #1
 800b044:	d907      	bls.n	800b056 <_fwalk_reent+0x3a>
 800b046:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b04a:	3301      	adds	r3, #1
 800b04c:	d003      	beq.n	800b056 <_fwalk_reent+0x3a>
 800b04e:	4629      	mov	r1, r5
 800b050:	4630      	mov	r0, r6
 800b052:	47c0      	blx	r8
 800b054:	4307      	orrs	r7, r0
 800b056:	3568      	adds	r5, #104	; 0x68
 800b058:	e7e9      	b.n	800b02e <_fwalk_reent+0x12>
	...

0800b05c <_localeconv_r>:
 800b05c:	4800      	ldr	r0, [pc, #0]	; (800b060 <_localeconv_r+0x4>)
 800b05e:	4770      	bx	lr
 800b060:	200002d4 	.word	0x200002d4

0800b064 <__retarget_lock_init_recursive>:
 800b064:	4770      	bx	lr

0800b066 <__retarget_lock_acquire_recursive>:
 800b066:	4770      	bx	lr

0800b068 <__retarget_lock_release_recursive>:
 800b068:	4770      	bx	lr
	...

0800b06c <malloc>:
 800b06c:	4b02      	ldr	r3, [pc, #8]	; (800b078 <malloc+0xc>)
 800b06e:	4601      	mov	r1, r0
 800b070:	6818      	ldr	r0, [r3, #0]
 800b072:	f000 bbe1 	b.w	800b838 <_malloc_r>
 800b076:	bf00      	nop
 800b078:	20000180 	.word	0x20000180

0800b07c <_Balloc>:
 800b07c:	b570      	push	{r4, r5, r6, lr}
 800b07e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b080:	4604      	mov	r4, r0
 800b082:	460d      	mov	r5, r1
 800b084:	b976      	cbnz	r6, 800b0a4 <_Balloc+0x28>
 800b086:	2010      	movs	r0, #16
 800b088:	f7ff fff0 	bl	800b06c <malloc>
 800b08c:	4602      	mov	r2, r0
 800b08e:	6260      	str	r0, [r4, #36]	; 0x24
 800b090:	b920      	cbnz	r0, 800b09c <_Balloc+0x20>
 800b092:	4b18      	ldr	r3, [pc, #96]	; (800b0f4 <_Balloc+0x78>)
 800b094:	4818      	ldr	r0, [pc, #96]	; (800b0f8 <_Balloc+0x7c>)
 800b096:	2166      	movs	r1, #102	; 0x66
 800b098:	f001 f804 	bl	800c0a4 <__assert_func>
 800b09c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b0a0:	6006      	str	r6, [r0, #0]
 800b0a2:	60c6      	str	r6, [r0, #12]
 800b0a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b0a6:	68f3      	ldr	r3, [r6, #12]
 800b0a8:	b183      	cbz	r3, 800b0cc <_Balloc+0x50>
 800b0aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b0ac:	68db      	ldr	r3, [r3, #12]
 800b0ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b0b2:	b9b8      	cbnz	r0, 800b0e4 <_Balloc+0x68>
 800b0b4:	2101      	movs	r1, #1
 800b0b6:	fa01 f605 	lsl.w	r6, r1, r5
 800b0ba:	1d72      	adds	r2, r6, #5
 800b0bc:	0092      	lsls	r2, r2, #2
 800b0be:	4620      	mov	r0, r4
 800b0c0:	f000 fb5a 	bl	800b778 <_calloc_r>
 800b0c4:	b160      	cbz	r0, 800b0e0 <_Balloc+0x64>
 800b0c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b0ca:	e00e      	b.n	800b0ea <_Balloc+0x6e>
 800b0cc:	2221      	movs	r2, #33	; 0x21
 800b0ce:	2104      	movs	r1, #4
 800b0d0:	4620      	mov	r0, r4
 800b0d2:	f000 fb51 	bl	800b778 <_calloc_r>
 800b0d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b0d8:	60f0      	str	r0, [r6, #12]
 800b0da:	68db      	ldr	r3, [r3, #12]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d1e4      	bne.n	800b0aa <_Balloc+0x2e>
 800b0e0:	2000      	movs	r0, #0
 800b0e2:	bd70      	pop	{r4, r5, r6, pc}
 800b0e4:	6802      	ldr	r2, [r0, #0]
 800b0e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b0f0:	e7f7      	b.n	800b0e2 <_Balloc+0x66>
 800b0f2:	bf00      	nop
 800b0f4:	0800c65d 	.word	0x0800c65d
 800b0f8:	0800c744 	.word	0x0800c744

0800b0fc <_Bfree>:
 800b0fc:	b570      	push	{r4, r5, r6, lr}
 800b0fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b100:	4605      	mov	r5, r0
 800b102:	460c      	mov	r4, r1
 800b104:	b976      	cbnz	r6, 800b124 <_Bfree+0x28>
 800b106:	2010      	movs	r0, #16
 800b108:	f7ff ffb0 	bl	800b06c <malloc>
 800b10c:	4602      	mov	r2, r0
 800b10e:	6268      	str	r0, [r5, #36]	; 0x24
 800b110:	b920      	cbnz	r0, 800b11c <_Bfree+0x20>
 800b112:	4b09      	ldr	r3, [pc, #36]	; (800b138 <_Bfree+0x3c>)
 800b114:	4809      	ldr	r0, [pc, #36]	; (800b13c <_Bfree+0x40>)
 800b116:	218a      	movs	r1, #138	; 0x8a
 800b118:	f000 ffc4 	bl	800c0a4 <__assert_func>
 800b11c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b120:	6006      	str	r6, [r0, #0]
 800b122:	60c6      	str	r6, [r0, #12]
 800b124:	b13c      	cbz	r4, 800b136 <_Bfree+0x3a>
 800b126:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b128:	6862      	ldr	r2, [r4, #4]
 800b12a:	68db      	ldr	r3, [r3, #12]
 800b12c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b130:	6021      	str	r1, [r4, #0]
 800b132:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b136:	bd70      	pop	{r4, r5, r6, pc}
 800b138:	0800c65d 	.word	0x0800c65d
 800b13c:	0800c744 	.word	0x0800c744

0800b140 <__multadd>:
 800b140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b144:	690e      	ldr	r6, [r1, #16]
 800b146:	4607      	mov	r7, r0
 800b148:	4698      	mov	r8, r3
 800b14a:	460c      	mov	r4, r1
 800b14c:	f101 0014 	add.w	r0, r1, #20
 800b150:	2300      	movs	r3, #0
 800b152:	6805      	ldr	r5, [r0, #0]
 800b154:	b2a9      	uxth	r1, r5
 800b156:	fb02 8101 	mla	r1, r2, r1, r8
 800b15a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b15e:	0c2d      	lsrs	r5, r5, #16
 800b160:	fb02 c505 	mla	r5, r2, r5, ip
 800b164:	b289      	uxth	r1, r1
 800b166:	3301      	adds	r3, #1
 800b168:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b16c:	429e      	cmp	r6, r3
 800b16e:	f840 1b04 	str.w	r1, [r0], #4
 800b172:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b176:	dcec      	bgt.n	800b152 <__multadd+0x12>
 800b178:	f1b8 0f00 	cmp.w	r8, #0
 800b17c:	d022      	beq.n	800b1c4 <__multadd+0x84>
 800b17e:	68a3      	ldr	r3, [r4, #8]
 800b180:	42b3      	cmp	r3, r6
 800b182:	dc19      	bgt.n	800b1b8 <__multadd+0x78>
 800b184:	6861      	ldr	r1, [r4, #4]
 800b186:	4638      	mov	r0, r7
 800b188:	3101      	adds	r1, #1
 800b18a:	f7ff ff77 	bl	800b07c <_Balloc>
 800b18e:	4605      	mov	r5, r0
 800b190:	b928      	cbnz	r0, 800b19e <__multadd+0x5e>
 800b192:	4602      	mov	r2, r0
 800b194:	4b0d      	ldr	r3, [pc, #52]	; (800b1cc <__multadd+0x8c>)
 800b196:	480e      	ldr	r0, [pc, #56]	; (800b1d0 <__multadd+0x90>)
 800b198:	21b5      	movs	r1, #181	; 0xb5
 800b19a:	f000 ff83 	bl	800c0a4 <__assert_func>
 800b19e:	6922      	ldr	r2, [r4, #16]
 800b1a0:	3202      	adds	r2, #2
 800b1a2:	f104 010c 	add.w	r1, r4, #12
 800b1a6:	0092      	lsls	r2, r2, #2
 800b1a8:	300c      	adds	r0, #12
 800b1aa:	f7fe fb47 	bl	800983c <memcpy>
 800b1ae:	4621      	mov	r1, r4
 800b1b0:	4638      	mov	r0, r7
 800b1b2:	f7ff ffa3 	bl	800b0fc <_Bfree>
 800b1b6:	462c      	mov	r4, r5
 800b1b8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b1bc:	3601      	adds	r6, #1
 800b1be:	f8c3 8014 	str.w	r8, [r3, #20]
 800b1c2:	6126      	str	r6, [r4, #16]
 800b1c4:	4620      	mov	r0, r4
 800b1c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1ca:	bf00      	nop
 800b1cc:	0800c6d3 	.word	0x0800c6d3
 800b1d0:	0800c744 	.word	0x0800c744

0800b1d4 <__hi0bits>:
 800b1d4:	0c03      	lsrs	r3, r0, #16
 800b1d6:	041b      	lsls	r3, r3, #16
 800b1d8:	b9d3      	cbnz	r3, 800b210 <__hi0bits+0x3c>
 800b1da:	0400      	lsls	r0, r0, #16
 800b1dc:	2310      	movs	r3, #16
 800b1de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b1e2:	bf04      	itt	eq
 800b1e4:	0200      	lsleq	r0, r0, #8
 800b1e6:	3308      	addeq	r3, #8
 800b1e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b1ec:	bf04      	itt	eq
 800b1ee:	0100      	lsleq	r0, r0, #4
 800b1f0:	3304      	addeq	r3, #4
 800b1f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b1f6:	bf04      	itt	eq
 800b1f8:	0080      	lsleq	r0, r0, #2
 800b1fa:	3302      	addeq	r3, #2
 800b1fc:	2800      	cmp	r0, #0
 800b1fe:	db05      	blt.n	800b20c <__hi0bits+0x38>
 800b200:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b204:	f103 0301 	add.w	r3, r3, #1
 800b208:	bf08      	it	eq
 800b20a:	2320      	moveq	r3, #32
 800b20c:	4618      	mov	r0, r3
 800b20e:	4770      	bx	lr
 800b210:	2300      	movs	r3, #0
 800b212:	e7e4      	b.n	800b1de <__hi0bits+0xa>

0800b214 <__lo0bits>:
 800b214:	6803      	ldr	r3, [r0, #0]
 800b216:	f013 0207 	ands.w	r2, r3, #7
 800b21a:	4601      	mov	r1, r0
 800b21c:	d00b      	beq.n	800b236 <__lo0bits+0x22>
 800b21e:	07da      	lsls	r2, r3, #31
 800b220:	d424      	bmi.n	800b26c <__lo0bits+0x58>
 800b222:	0798      	lsls	r0, r3, #30
 800b224:	bf49      	itett	mi
 800b226:	085b      	lsrmi	r3, r3, #1
 800b228:	089b      	lsrpl	r3, r3, #2
 800b22a:	2001      	movmi	r0, #1
 800b22c:	600b      	strmi	r3, [r1, #0]
 800b22e:	bf5c      	itt	pl
 800b230:	600b      	strpl	r3, [r1, #0]
 800b232:	2002      	movpl	r0, #2
 800b234:	4770      	bx	lr
 800b236:	b298      	uxth	r0, r3
 800b238:	b9b0      	cbnz	r0, 800b268 <__lo0bits+0x54>
 800b23a:	0c1b      	lsrs	r3, r3, #16
 800b23c:	2010      	movs	r0, #16
 800b23e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b242:	bf04      	itt	eq
 800b244:	0a1b      	lsreq	r3, r3, #8
 800b246:	3008      	addeq	r0, #8
 800b248:	071a      	lsls	r2, r3, #28
 800b24a:	bf04      	itt	eq
 800b24c:	091b      	lsreq	r3, r3, #4
 800b24e:	3004      	addeq	r0, #4
 800b250:	079a      	lsls	r2, r3, #30
 800b252:	bf04      	itt	eq
 800b254:	089b      	lsreq	r3, r3, #2
 800b256:	3002      	addeq	r0, #2
 800b258:	07da      	lsls	r2, r3, #31
 800b25a:	d403      	bmi.n	800b264 <__lo0bits+0x50>
 800b25c:	085b      	lsrs	r3, r3, #1
 800b25e:	f100 0001 	add.w	r0, r0, #1
 800b262:	d005      	beq.n	800b270 <__lo0bits+0x5c>
 800b264:	600b      	str	r3, [r1, #0]
 800b266:	4770      	bx	lr
 800b268:	4610      	mov	r0, r2
 800b26a:	e7e8      	b.n	800b23e <__lo0bits+0x2a>
 800b26c:	2000      	movs	r0, #0
 800b26e:	4770      	bx	lr
 800b270:	2020      	movs	r0, #32
 800b272:	4770      	bx	lr

0800b274 <__i2b>:
 800b274:	b510      	push	{r4, lr}
 800b276:	460c      	mov	r4, r1
 800b278:	2101      	movs	r1, #1
 800b27a:	f7ff feff 	bl	800b07c <_Balloc>
 800b27e:	4602      	mov	r2, r0
 800b280:	b928      	cbnz	r0, 800b28e <__i2b+0x1a>
 800b282:	4b05      	ldr	r3, [pc, #20]	; (800b298 <__i2b+0x24>)
 800b284:	4805      	ldr	r0, [pc, #20]	; (800b29c <__i2b+0x28>)
 800b286:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b28a:	f000 ff0b 	bl	800c0a4 <__assert_func>
 800b28e:	2301      	movs	r3, #1
 800b290:	6144      	str	r4, [r0, #20]
 800b292:	6103      	str	r3, [r0, #16]
 800b294:	bd10      	pop	{r4, pc}
 800b296:	bf00      	nop
 800b298:	0800c6d3 	.word	0x0800c6d3
 800b29c:	0800c744 	.word	0x0800c744

0800b2a0 <__multiply>:
 800b2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2a4:	4614      	mov	r4, r2
 800b2a6:	690a      	ldr	r2, [r1, #16]
 800b2a8:	6923      	ldr	r3, [r4, #16]
 800b2aa:	429a      	cmp	r2, r3
 800b2ac:	bfb8      	it	lt
 800b2ae:	460b      	movlt	r3, r1
 800b2b0:	460d      	mov	r5, r1
 800b2b2:	bfbc      	itt	lt
 800b2b4:	4625      	movlt	r5, r4
 800b2b6:	461c      	movlt	r4, r3
 800b2b8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b2bc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b2c0:	68ab      	ldr	r3, [r5, #8]
 800b2c2:	6869      	ldr	r1, [r5, #4]
 800b2c4:	eb0a 0709 	add.w	r7, sl, r9
 800b2c8:	42bb      	cmp	r3, r7
 800b2ca:	b085      	sub	sp, #20
 800b2cc:	bfb8      	it	lt
 800b2ce:	3101      	addlt	r1, #1
 800b2d0:	f7ff fed4 	bl	800b07c <_Balloc>
 800b2d4:	b930      	cbnz	r0, 800b2e4 <__multiply+0x44>
 800b2d6:	4602      	mov	r2, r0
 800b2d8:	4b42      	ldr	r3, [pc, #264]	; (800b3e4 <__multiply+0x144>)
 800b2da:	4843      	ldr	r0, [pc, #268]	; (800b3e8 <__multiply+0x148>)
 800b2dc:	f240 115d 	movw	r1, #349	; 0x15d
 800b2e0:	f000 fee0 	bl	800c0a4 <__assert_func>
 800b2e4:	f100 0614 	add.w	r6, r0, #20
 800b2e8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b2ec:	4633      	mov	r3, r6
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	4543      	cmp	r3, r8
 800b2f2:	d31e      	bcc.n	800b332 <__multiply+0x92>
 800b2f4:	f105 0c14 	add.w	ip, r5, #20
 800b2f8:	f104 0314 	add.w	r3, r4, #20
 800b2fc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b300:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b304:	9202      	str	r2, [sp, #8]
 800b306:	ebac 0205 	sub.w	r2, ip, r5
 800b30a:	3a15      	subs	r2, #21
 800b30c:	f022 0203 	bic.w	r2, r2, #3
 800b310:	3204      	adds	r2, #4
 800b312:	f105 0115 	add.w	r1, r5, #21
 800b316:	458c      	cmp	ip, r1
 800b318:	bf38      	it	cc
 800b31a:	2204      	movcc	r2, #4
 800b31c:	9201      	str	r2, [sp, #4]
 800b31e:	9a02      	ldr	r2, [sp, #8]
 800b320:	9303      	str	r3, [sp, #12]
 800b322:	429a      	cmp	r2, r3
 800b324:	d808      	bhi.n	800b338 <__multiply+0x98>
 800b326:	2f00      	cmp	r7, #0
 800b328:	dc55      	bgt.n	800b3d6 <__multiply+0x136>
 800b32a:	6107      	str	r7, [r0, #16]
 800b32c:	b005      	add	sp, #20
 800b32e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b332:	f843 2b04 	str.w	r2, [r3], #4
 800b336:	e7db      	b.n	800b2f0 <__multiply+0x50>
 800b338:	f8b3 a000 	ldrh.w	sl, [r3]
 800b33c:	f1ba 0f00 	cmp.w	sl, #0
 800b340:	d020      	beq.n	800b384 <__multiply+0xe4>
 800b342:	f105 0e14 	add.w	lr, r5, #20
 800b346:	46b1      	mov	r9, r6
 800b348:	2200      	movs	r2, #0
 800b34a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b34e:	f8d9 b000 	ldr.w	fp, [r9]
 800b352:	b2a1      	uxth	r1, r4
 800b354:	fa1f fb8b 	uxth.w	fp, fp
 800b358:	fb0a b101 	mla	r1, sl, r1, fp
 800b35c:	4411      	add	r1, r2
 800b35e:	f8d9 2000 	ldr.w	r2, [r9]
 800b362:	0c24      	lsrs	r4, r4, #16
 800b364:	0c12      	lsrs	r2, r2, #16
 800b366:	fb0a 2404 	mla	r4, sl, r4, r2
 800b36a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b36e:	b289      	uxth	r1, r1
 800b370:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b374:	45f4      	cmp	ip, lr
 800b376:	f849 1b04 	str.w	r1, [r9], #4
 800b37a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b37e:	d8e4      	bhi.n	800b34a <__multiply+0xaa>
 800b380:	9901      	ldr	r1, [sp, #4]
 800b382:	5072      	str	r2, [r6, r1]
 800b384:	9a03      	ldr	r2, [sp, #12]
 800b386:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b38a:	3304      	adds	r3, #4
 800b38c:	f1b9 0f00 	cmp.w	r9, #0
 800b390:	d01f      	beq.n	800b3d2 <__multiply+0x132>
 800b392:	6834      	ldr	r4, [r6, #0]
 800b394:	f105 0114 	add.w	r1, r5, #20
 800b398:	46b6      	mov	lr, r6
 800b39a:	f04f 0a00 	mov.w	sl, #0
 800b39e:	880a      	ldrh	r2, [r1, #0]
 800b3a0:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b3a4:	fb09 b202 	mla	r2, r9, r2, fp
 800b3a8:	4492      	add	sl, r2
 800b3aa:	b2a4      	uxth	r4, r4
 800b3ac:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b3b0:	f84e 4b04 	str.w	r4, [lr], #4
 800b3b4:	f851 4b04 	ldr.w	r4, [r1], #4
 800b3b8:	f8be 2000 	ldrh.w	r2, [lr]
 800b3bc:	0c24      	lsrs	r4, r4, #16
 800b3be:	fb09 2404 	mla	r4, r9, r4, r2
 800b3c2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b3c6:	458c      	cmp	ip, r1
 800b3c8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b3cc:	d8e7      	bhi.n	800b39e <__multiply+0xfe>
 800b3ce:	9a01      	ldr	r2, [sp, #4]
 800b3d0:	50b4      	str	r4, [r6, r2]
 800b3d2:	3604      	adds	r6, #4
 800b3d4:	e7a3      	b.n	800b31e <__multiply+0x7e>
 800b3d6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d1a5      	bne.n	800b32a <__multiply+0x8a>
 800b3de:	3f01      	subs	r7, #1
 800b3e0:	e7a1      	b.n	800b326 <__multiply+0x86>
 800b3e2:	bf00      	nop
 800b3e4:	0800c6d3 	.word	0x0800c6d3
 800b3e8:	0800c744 	.word	0x0800c744

0800b3ec <__pow5mult>:
 800b3ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3f0:	4615      	mov	r5, r2
 800b3f2:	f012 0203 	ands.w	r2, r2, #3
 800b3f6:	4606      	mov	r6, r0
 800b3f8:	460f      	mov	r7, r1
 800b3fa:	d007      	beq.n	800b40c <__pow5mult+0x20>
 800b3fc:	4c25      	ldr	r4, [pc, #148]	; (800b494 <__pow5mult+0xa8>)
 800b3fe:	3a01      	subs	r2, #1
 800b400:	2300      	movs	r3, #0
 800b402:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b406:	f7ff fe9b 	bl	800b140 <__multadd>
 800b40a:	4607      	mov	r7, r0
 800b40c:	10ad      	asrs	r5, r5, #2
 800b40e:	d03d      	beq.n	800b48c <__pow5mult+0xa0>
 800b410:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b412:	b97c      	cbnz	r4, 800b434 <__pow5mult+0x48>
 800b414:	2010      	movs	r0, #16
 800b416:	f7ff fe29 	bl	800b06c <malloc>
 800b41a:	4602      	mov	r2, r0
 800b41c:	6270      	str	r0, [r6, #36]	; 0x24
 800b41e:	b928      	cbnz	r0, 800b42c <__pow5mult+0x40>
 800b420:	4b1d      	ldr	r3, [pc, #116]	; (800b498 <__pow5mult+0xac>)
 800b422:	481e      	ldr	r0, [pc, #120]	; (800b49c <__pow5mult+0xb0>)
 800b424:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b428:	f000 fe3c 	bl	800c0a4 <__assert_func>
 800b42c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b430:	6004      	str	r4, [r0, #0]
 800b432:	60c4      	str	r4, [r0, #12]
 800b434:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b438:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b43c:	b94c      	cbnz	r4, 800b452 <__pow5mult+0x66>
 800b43e:	f240 2171 	movw	r1, #625	; 0x271
 800b442:	4630      	mov	r0, r6
 800b444:	f7ff ff16 	bl	800b274 <__i2b>
 800b448:	2300      	movs	r3, #0
 800b44a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b44e:	4604      	mov	r4, r0
 800b450:	6003      	str	r3, [r0, #0]
 800b452:	f04f 0900 	mov.w	r9, #0
 800b456:	07eb      	lsls	r3, r5, #31
 800b458:	d50a      	bpl.n	800b470 <__pow5mult+0x84>
 800b45a:	4639      	mov	r1, r7
 800b45c:	4622      	mov	r2, r4
 800b45e:	4630      	mov	r0, r6
 800b460:	f7ff ff1e 	bl	800b2a0 <__multiply>
 800b464:	4639      	mov	r1, r7
 800b466:	4680      	mov	r8, r0
 800b468:	4630      	mov	r0, r6
 800b46a:	f7ff fe47 	bl	800b0fc <_Bfree>
 800b46e:	4647      	mov	r7, r8
 800b470:	106d      	asrs	r5, r5, #1
 800b472:	d00b      	beq.n	800b48c <__pow5mult+0xa0>
 800b474:	6820      	ldr	r0, [r4, #0]
 800b476:	b938      	cbnz	r0, 800b488 <__pow5mult+0x9c>
 800b478:	4622      	mov	r2, r4
 800b47a:	4621      	mov	r1, r4
 800b47c:	4630      	mov	r0, r6
 800b47e:	f7ff ff0f 	bl	800b2a0 <__multiply>
 800b482:	6020      	str	r0, [r4, #0]
 800b484:	f8c0 9000 	str.w	r9, [r0]
 800b488:	4604      	mov	r4, r0
 800b48a:	e7e4      	b.n	800b456 <__pow5mult+0x6a>
 800b48c:	4638      	mov	r0, r7
 800b48e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b492:	bf00      	nop
 800b494:	0800c898 	.word	0x0800c898
 800b498:	0800c65d 	.word	0x0800c65d
 800b49c:	0800c744 	.word	0x0800c744

0800b4a0 <__lshift>:
 800b4a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4a4:	460c      	mov	r4, r1
 800b4a6:	6849      	ldr	r1, [r1, #4]
 800b4a8:	6923      	ldr	r3, [r4, #16]
 800b4aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b4ae:	68a3      	ldr	r3, [r4, #8]
 800b4b0:	4607      	mov	r7, r0
 800b4b2:	4691      	mov	r9, r2
 800b4b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b4b8:	f108 0601 	add.w	r6, r8, #1
 800b4bc:	42b3      	cmp	r3, r6
 800b4be:	db0b      	blt.n	800b4d8 <__lshift+0x38>
 800b4c0:	4638      	mov	r0, r7
 800b4c2:	f7ff fddb 	bl	800b07c <_Balloc>
 800b4c6:	4605      	mov	r5, r0
 800b4c8:	b948      	cbnz	r0, 800b4de <__lshift+0x3e>
 800b4ca:	4602      	mov	r2, r0
 800b4cc:	4b28      	ldr	r3, [pc, #160]	; (800b570 <__lshift+0xd0>)
 800b4ce:	4829      	ldr	r0, [pc, #164]	; (800b574 <__lshift+0xd4>)
 800b4d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b4d4:	f000 fde6 	bl	800c0a4 <__assert_func>
 800b4d8:	3101      	adds	r1, #1
 800b4da:	005b      	lsls	r3, r3, #1
 800b4dc:	e7ee      	b.n	800b4bc <__lshift+0x1c>
 800b4de:	2300      	movs	r3, #0
 800b4e0:	f100 0114 	add.w	r1, r0, #20
 800b4e4:	f100 0210 	add.w	r2, r0, #16
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	4553      	cmp	r3, sl
 800b4ec:	db33      	blt.n	800b556 <__lshift+0xb6>
 800b4ee:	6920      	ldr	r0, [r4, #16]
 800b4f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b4f4:	f104 0314 	add.w	r3, r4, #20
 800b4f8:	f019 091f 	ands.w	r9, r9, #31
 800b4fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b500:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b504:	d02b      	beq.n	800b55e <__lshift+0xbe>
 800b506:	f1c9 0e20 	rsb	lr, r9, #32
 800b50a:	468a      	mov	sl, r1
 800b50c:	2200      	movs	r2, #0
 800b50e:	6818      	ldr	r0, [r3, #0]
 800b510:	fa00 f009 	lsl.w	r0, r0, r9
 800b514:	4302      	orrs	r2, r0
 800b516:	f84a 2b04 	str.w	r2, [sl], #4
 800b51a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b51e:	459c      	cmp	ip, r3
 800b520:	fa22 f20e 	lsr.w	r2, r2, lr
 800b524:	d8f3      	bhi.n	800b50e <__lshift+0x6e>
 800b526:	ebac 0304 	sub.w	r3, ip, r4
 800b52a:	3b15      	subs	r3, #21
 800b52c:	f023 0303 	bic.w	r3, r3, #3
 800b530:	3304      	adds	r3, #4
 800b532:	f104 0015 	add.w	r0, r4, #21
 800b536:	4584      	cmp	ip, r0
 800b538:	bf38      	it	cc
 800b53a:	2304      	movcc	r3, #4
 800b53c:	50ca      	str	r2, [r1, r3]
 800b53e:	b10a      	cbz	r2, 800b544 <__lshift+0xa4>
 800b540:	f108 0602 	add.w	r6, r8, #2
 800b544:	3e01      	subs	r6, #1
 800b546:	4638      	mov	r0, r7
 800b548:	612e      	str	r6, [r5, #16]
 800b54a:	4621      	mov	r1, r4
 800b54c:	f7ff fdd6 	bl	800b0fc <_Bfree>
 800b550:	4628      	mov	r0, r5
 800b552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b556:	f842 0f04 	str.w	r0, [r2, #4]!
 800b55a:	3301      	adds	r3, #1
 800b55c:	e7c5      	b.n	800b4ea <__lshift+0x4a>
 800b55e:	3904      	subs	r1, #4
 800b560:	f853 2b04 	ldr.w	r2, [r3], #4
 800b564:	f841 2f04 	str.w	r2, [r1, #4]!
 800b568:	459c      	cmp	ip, r3
 800b56a:	d8f9      	bhi.n	800b560 <__lshift+0xc0>
 800b56c:	e7ea      	b.n	800b544 <__lshift+0xa4>
 800b56e:	bf00      	nop
 800b570:	0800c6d3 	.word	0x0800c6d3
 800b574:	0800c744 	.word	0x0800c744

0800b578 <__mcmp>:
 800b578:	b530      	push	{r4, r5, lr}
 800b57a:	6902      	ldr	r2, [r0, #16]
 800b57c:	690c      	ldr	r4, [r1, #16]
 800b57e:	1b12      	subs	r2, r2, r4
 800b580:	d10e      	bne.n	800b5a0 <__mcmp+0x28>
 800b582:	f100 0314 	add.w	r3, r0, #20
 800b586:	3114      	adds	r1, #20
 800b588:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b58c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b590:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b594:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b598:	42a5      	cmp	r5, r4
 800b59a:	d003      	beq.n	800b5a4 <__mcmp+0x2c>
 800b59c:	d305      	bcc.n	800b5aa <__mcmp+0x32>
 800b59e:	2201      	movs	r2, #1
 800b5a0:	4610      	mov	r0, r2
 800b5a2:	bd30      	pop	{r4, r5, pc}
 800b5a4:	4283      	cmp	r3, r0
 800b5a6:	d3f3      	bcc.n	800b590 <__mcmp+0x18>
 800b5a8:	e7fa      	b.n	800b5a0 <__mcmp+0x28>
 800b5aa:	f04f 32ff 	mov.w	r2, #4294967295
 800b5ae:	e7f7      	b.n	800b5a0 <__mcmp+0x28>

0800b5b0 <__mdiff>:
 800b5b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5b4:	460c      	mov	r4, r1
 800b5b6:	4606      	mov	r6, r0
 800b5b8:	4611      	mov	r1, r2
 800b5ba:	4620      	mov	r0, r4
 800b5bc:	4617      	mov	r7, r2
 800b5be:	f7ff ffdb 	bl	800b578 <__mcmp>
 800b5c2:	1e05      	subs	r5, r0, #0
 800b5c4:	d110      	bne.n	800b5e8 <__mdiff+0x38>
 800b5c6:	4629      	mov	r1, r5
 800b5c8:	4630      	mov	r0, r6
 800b5ca:	f7ff fd57 	bl	800b07c <_Balloc>
 800b5ce:	b930      	cbnz	r0, 800b5de <__mdiff+0x2e>
 800b5d0:	4b39      	ldr	r3, [pc, #228]	; (800b6b8 <__mdiff+0x108>)
 800b5d2:	4602      	mov	r2, r0
 800b5d4:	f240 2132 	movw	r1, #562	; 0x232
 800b5d8:	4838      	ldr	r0, [pc, #224]	; (800b6bc <__mdiff+0x10c>)
 800b5da:	f000 fd63 	bl	800c0a4 <__assert_func>
 800b5de:	2301      	movs	r3, #1
 800b5e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b5e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5e8:	bfa4      	itt	ge
 800b5ea:	463b      	movge	r3, r7
 800b5ec:	4627      	movge	r7, r4
 800b5ee:	4630      	mov	r0, r6
 800b5f0:	6879      	ldr	r1, [r7, #4]
 800b5f2:	bfa6      	itte	ge
 800b5f4:	461c      	movge	r4, r3
 800b5f6:	2500      	movge	r5, #0
 800b5f8:	2501      	movlt	r5, #1
 800b5fa:	f7ff fd3f 	bl	800b07c <_Balloc>
 800b5fe:	b920      	cbnz	r0, 800b60a <__mdiff+0x5a>
 800b600:	4b2d      	ldr	r3, [pc, #180]	; (800b6b8 <__mdiff+0x108>)
 800b602:	4602      	mov	r2, r0
 800b604:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b608:	e7e6      	b.n	800b5d8 <__mdiff+0x28>
 800b60a:	693e      	ldr	r6, [r7, #16]
 800b60c:	60c5      	str	r5, [r0, #12]
 800b60e:	6925      	ldr	r5, [r4, #16]
 800b610:	f107 0114 	add.w	r1, r7, #20
 800b614:	f104 0914 	add.w	r9, r4, #20
 800b618:	f100 0e14 	add.w	lr, r0, #20
 800b61c:	f107 0210 	add.w	r2, r7, #16
 800b620:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b624:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b628:	46f2      	mov	sl, lr
 800b62a:	2700      	movs	r7, #0
 800b62c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b630:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b634:	fa1f f883 	uxth.w	r8, r3
 800b638:	fa17 f78b 	uxtah	r7, r7, fp
 800b63c:	0c1b      	lsrs	r3, r3, #16
 800b63e:	eba7 0808 	sub.w	r8, r7, r8
 800b642:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b646:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b64a:	fa1f f888 	uxth.w	r8, r8
 800b64e:	141f      	asrs	r7, r3, #16
 800b650:	454d      	cmp	r5, r9
 800b652:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b656:	f84a 3b04 	str.w	r3, [sl], #4
 800b65a:	d8e7      	bhi.n	800b62c <__mdiff+0x7c>
 800b65c:	1b2b      	subs	r3, r5, r4
 800b65e:	3b15      	subs	r3, #21
 800b660:	f023 0303 	bic.w	r3, r3, #3
 800b664:	3304      	adds	r3, #4
 800b666:	3415      	adds	r4, #21
 800b668:	42a5      	cmp	r5, r4
 800b66a:	bf38      	it	cc
 800b66c:	2304      	movcc	r3, #4
 800b66e:	4419      	add	r1, r3
 800b670:	4473      	add	r3, lr
 800b672:	469e      	mov	lr, r3
 800b674:	460d      	mov	r5, r1
 800b676:	4565      	cmp	r5, ip
 800b678:	d30e      	bcc.n	800b698 <__mdiff+0xe8>
 800b67a:	f10c 0203 	add.w	r2, ip, #3
 800b67e:	1a52      	subs	r2, r2, r1
 800b680:	f022 0203 	bic.w	r2, r2, #3
 800b684:	3903      	subs	r1, #3
 800b686:	458c      	cmp	ip, r1
 800b688:	bf38      	it	cc
 800b68a:	2200      	movcc	r2, #0
 800b68c:	441a      	add	r2, r3
 800b68e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b692:	b17b      	cbz	r3, 800b6b4 <__mdiff+0x104>
 800b694:	6106      	str	r6, [r0, #16]
 800b696:	e7a5      	b.n	800b5e4 <__mdiff+0x34>
 800b698:	f855 8b04 	ldr.w	r8, [r5], #4
 800b69c:	fa17 f488 	uxtah	r4, r7, r8
 800b6a0:	1422      	asrs	r2, r4, #16
 800b6a2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b6a6:	b2a4      	uxth	r4, r4
 800b6a8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b6ac:	f84e 4b04 	str.w	r4, [lr], #4
 800b6b0:	1417      	asrs	r7, r2, #16
 800b6b2:	e7e0      	b.n	800b676 <__mdiff+0xc6>
 800b6b4:	3e01      	subs	r6, #1
 800b6b6:	e7ea      	b.n	800b68e <__mdiff+0xde>
 800b6b8:	0800c6d3 	.word	0x0800c6d3
 800b6bc:	0800c744 	.word	0x0800c744

0800b6c0 <__d2b>:
 800b6c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b6c4:	4689      	mov	r9, r1
 800b6c6:	2101      	movs	r1, #1
 800b6c8:	ec57 6b10 	vmov	r6, r7, d0
 800b6cc:	4690      	mov	r8, r2
 800b6ce:	f7ff fcd5 	bl	800b07c <_Balloc>
 800b6d2:	4604      	mov	r4, r0
 800b6d4:	b930      	cbnz	r0, 800b6e4 <__d2b+0x24>
 800b6d6:	4602      	mov	r2, r0
 800b6d8:	4b25      	ldr	r3, [pc, #148]	; (800b770 <__d2b+0xb0>)
 800b6da:	4826      	ldr	r0, [pc, #152]	; (800b774 <__d2b+0xb4>)
 800b6dc:	f240 310a 	movw	r1, #778	; 0x30a
 800b6e0:	f000 fce0 	bl	800c0a4 <__assert_func>
 800b6e4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b6e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b6ec:	bb35      	cbnz	r5, 800b73c <__d2b+0x7c>
 800b6ee:	2e00      	cmp	r6, #0
 800b6f0:	9301      	str	r3, [sp, #4]
 800b6f2:	d028      	beq.n	800b746 <__d2b+0x86>
 800b6f4:	4668      	mov	r0, sp
 800b6f6:	9600      	str	r6, [sp, #0]
 800b6f8:	f7ff fd8c 	bl	800b214 <__lo0bits>
 800b6fc:	9900      	ldr	r1, [sp, #0]
 800b6fe:	b300      	cbz	r0, 800b742 <__d2b+0x82>
 800b700:	9a01      	ldr	r2, [sp, #4]
 800b702:	f1c0 0320 	rsb	r3, r0, #32
 800b706:	fa02 f303 	lsl.w	r3, r2, r3
 800b70a:	430b      	orrs	r3, r1
 800b70c:	40c2      	lsrs	r2, r0
 800b70e:	6163      	str	r3, [r4, #20]
 800b710:	9201      	str	r2, [sp, #4]
 800b712:	9b01      	ldr	r3, [sp, #4]
 800b714:	61a3      	str	r3, [r4, #24]
 800b716:	2b00      	cmp	r3, #0
 800b718:	bf14      	ite	ne
 800b71a:	2202      	movne	r2, #2
 800b71c:	2201      	moveq	r2, #1
 800b71e:	6122      	str	r2, [r4, #16]
 800b720:	b1d5      	cbz	r5, 800b758 <__d2b+0x98>
 800b722:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b726:	4405      	add	r5, r0
 800b728:	f8c9 5000 	str.w	r5, [r9]
 800b72c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b730:	f8c8 0000 	str.w	r0, [r8]
 800b734:	4620      	mov	r0, r4
 800b736:	b003      	add	sp, #12
 800b738:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b73c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b740:	e7d5      	b.n	800b6ee <__d2b+0x2e>
 800b742:	6161      	str	r1, [r4, #20]
 800b744:	e7e5      	b.n	800b712 <__d2b+0x52>
 800b746:	a801      	add	r0, sp, #4
 800b748:	f7ff fd64 	bl	800b214 <__lo0bits>
 800b74c:	9b01      	ldr	r3, [sp, #4]
 800b74e:	6163      	str	r3, [r4, #20]
 800b750:	2201      	movs	r2, #1
 800b752:	6122      	str	r2, [r4, #16]
 800b754:	3020      	adds	r0, #32
 800b756:	e7e3      	b.n	800b720 <__d2b+0x60>
 800b758:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b75c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b760:	f8c9 0000 	str.w	r0, [r9]
 800b764:	6918      	ldr	r0, [r3, #16]
 800b766:	f7ff fd35 	bl	800b1d4 <__hi0bits>
 800b76a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b76e:	e7df      	b.n	800b730 <__d2b+0x70>
 800b770:	0800c6d3 	.word	0x0800c6d3
 800b774:	0800c744 	.word	0x0800c744

0800b778 <_calloc_r>:
 800b778:	b513      	push	{r0, r1, r4, lr}
 800b77a:	434a      	muls	r2, r1
 800b77c:	4611      	mov	r1, r2
 800b77e:	9201      	str	r2, [sp, #4]
 800b780:	f000 f85a 	bl	800b838 <_malloc_r>
 800b784:	4604      	mov	r4, r0
 800b786:	b118      	cbz	r0, 800b790 <_calloc_r+0x18>
 800b788:	9a01      	ldr	r2, [sp, #4]
 800b78a:	2100      	movs	r1, #0
 800b78c:	f7fe f864 	bl	8009858 <memset>
 800b790:	4620      	mov	r0, r4
 800b792:	b002      	add	sp, #8
 800b794:	bd10      	pop	{r4, pc}
	...

0800b798 <_free_r>:
 800b798:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b79a:	2900      	cmp	r1, #0
 800b79c:	d048      	beq.n	800b830 <_free_r+0x98>
 800b79e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7a2:	9001      	str	r0, [sp, #4]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	f1a1 0404 	sub.w	r4, r1, #4
 800b7aa:	bfb8      	it	lt
 800b7ac:	18e4      	addlt	r4, r4, r3
 800b7ae:	f000 fe1d 	bl	800c3ec <__malloc_lock>
 800b7b2:	4a20      	ldr	r2, [pc, #128]	; (800b834 <_free_r+0x9c>)
 800b7b4:	9801      	ldr	r0, [sp, #4]
 800b7b6:	6813      	ldr	r3, [r2, #0]
 800b7b8:	4615      	mov	r5, r2
 800b7ba:	b933      	cbnz	r3, 800b7ca <_free_r+0x32>
 800b7bc:	6063      	str	r3, [r4, #4]
 800b7be:	6014      	str	r4, [r2, #0]
 800b7c0:	b003      	add	sp, #12
 800b7c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b7c6:	f000 be17 	b.w	800c3f8 <__malloc_unlock>
 800b7ca:	42a3      	cmp	r3, r4
 800b7cc:	d90b      	bls.n	800b7e6 <_free_r+0x4e>
 800b7ce:	6821      	ldr	r1, [r4, #0]
 800b7d0:	1862      	adds	r2, r4, r1
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	bf04      	itt	eq
 800b7d6:	681a      	ldreq	r2, [r3, #0]
 800b7d8:	685b      	ldreq	r3, [r3, #4]
 800b7da:	6063      	str	r3, [r4, #4]
 800b7dc:	bf04      	itt	eq
 800b7de:	1852      	addeq	r2, r2, r1
 800b7e0:	6022      	streq	r2, [r4, #0]
 800b7e2:	602c      	str	r4, [r5, #0]
 800b7e4:	e7ec      	b.n	800b7c0 <_free_r+0x28>
 800b7e6:	461a      	mov	r2, r3
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	b10b      	cbz	r3, 800b7f0 <_free_r+0x58>
 800b7ec:	42a3      	cmp	r3, r4
 800b7ee:	d9fa      	bls.n	800b7e6 <_free_r+0x4e>
 800b7f0:	6811      	ldr	r1, [r2, #0]
 800b7f2:	1855      	adds	r5, r2, r1
 800b7f4:	42a5      	cmp	r5, r4
 800b7f6:	d10b      	bne.n	800b810 <_free_r+0x78>
 800b7f8:	6824      	ldr	r4, [r4, #0]
 800b7fa:	4421      	add	r1, r4
 800b7fc:	1854      	adds	r4, r2, r1
 800b7fe:	42a3      	cmp	r3, r4
 800b800:	6011      	str	r1, [r2, #0]
 800b802:	d1dd      	bne.n	800b7c0 <_free_r+0x28>
 800b804:	681c      	ldr	r4, [r3, #0]
 800b806:	685b      	ldr	r3, [r3, #4]
 800b808:	6053      	str	r3, [r2, #4]
 800b80a:	4421      	add	r1, r4
 800b80c:	6011      	str	r1, [r2, #0]
 800b80e:	e7d7      	b.n	800b7c0 <_free_r+0x28>
 800b810:	d902      	bls.n	800b818 <_free_r+0x80>
 800b812:	230c      	movs	r3, #12
 800b814:	6003      	str	r3, [r0, #0]
 800b816:	e7d3      	b.n	800b7c0 <_free_r+0x28>
 800b818:	6825      	ldr	r5, [r4, #0]
 800b81a:	1961      	adds	r1, r4, r5
 800b81c:	428b      	cmp	r3, r1
 800b81e:	bf04      	itt	eq
 800b820:	6819      	ldreq	r1, [r3, #0]
 800b822:	685b      	ldreq	r3, [r3, #4]
 800b824:	6063      	str	r3, [r4, #4]
 800b826:	bf04      	itt	eq
 800b828:	1949      	addeq	r1, r1, r5
 800b82a:	6021      	streq	r1, [r4, #0]
 800b82c:	6054      	str	r4, [r2, #4]
 800b82e:	e7c7      	b.n	800b7c0 <_free_r+0x28>
 800b830:	b003      	add	sp, #12
 800b832:	bd30      	pop	{r4, r5, pc}
 800b834:	20000594 	.word	0x20000594

0800b838 <_malloc_r>:
 800b838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b83a:	1ccd      	adds	r5, r1, #3
 800b83c:	f025 0503 	bic.w	r5, r5, #3
 800b840:	3508      	adds	r5, #8
 800b842:	2d0c      	cmp	r5, #12
 800b844:	bf38      	it	cc
 800b846:	250c      	movcc	r5, #12
 800b848:	2d00      	cmp	r5, #0
 800b84a:	4606      	mov	r6, r0
 800b84c:	db01      	blt.n	800b852 <_malloc_r+0x1a>
 800b84e:	42a9      	cmp	r1, r5
 800b850:	d903      	bls.n	800b85a <_malloc_r+0x22>
 800b852:	230c      	movs	r3, #12
 800b854:	6033      	str	r3, [r6, #0]
 800b856:	2000      	movs	r0, #0
 800b858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b85a:	f000 fdc7 	bl	800c3ec <__malloc_lock>
 800b85e:	4921      	ldr	r1, [pc, #132]	; (800b8e4 <_malloc_r+0xac>)
 800b860:	680a      	ldr	r2, [r1, #0]
 800b862:	4614      	mov	r4, r2
 800b864:	b99c      	cbnz	r4, 800b88e <_malloc_r+0x56>
 800b866:	4f20      	ldr	r7, [pc, #128]	; (800b8e8 <_malloc_r+0xb0>)
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	b923      	cbnz	r3, 800b876 <_malloc_r+0x3e>
 800b86c:	4621      	mov	r1, r4
 800b86e:	4630      	mov	r0, r6
 800b870:	f000 faf2 	bl	800be58 <_sbrk_r>
 800b874:	6038      	str	r0, [r7, #0]
 800b876:	4629      	mov	r1, r5
 800b878:	4630      	mov	r0, r6
 800b87a:	f000 faed 	bl	800be58 <_sbrk_r>
 800b87e:	1c43      	adds	r3, r0, #1
 800b880:	d123      	bne.n	800b8ca <_malloc_r+0x92>
 800b882:	230c      	movs	r3, #12
 800b884:	6033      	str	r3, [r6, #0]
 800b886:	4630      	mov	r0, r6
 800b888:	f000 fdb6 	bl	800c3f8 <__malloc_unlock>
 800b88c:	e7e3      	b.n	800b856 <_malloc_r+0x1e>
 800b88e:	6823      	ldr	r3, [r4, #0]
 800b890:	1b5b      	subs	r3, r3, r5
 800b892:	d417      	bmi.n	800b8c4 <_malloc_r+0x8c>
 800b894:	2b0b      	cmp	r3, #11
 800b896:	d903      	bls.n	800b8a0 <_malloc_r+0x68>
 800b898:	6023      	str	r3, [r4, #0]
 800b89a:	441c      	add	r4, r3
 800b89c:	6025      	str	r5, [r4, #0]
 800b89e:	e004      	b.n	800b8aa <_malloc_r+0x72>
 800b8a0:	6863      	ldr	r3, [r4, #4]
 800b8a2:	42a2      	cmp	r2, r4
 800b8a4:	bf0c      	ite	eq
 800b8a6:	600b      	streq	r3, [r1, #0]
 800b8a8:	6053      	strne	r3, [r2, #4]
 800b8aa:	4630      	mov	r0, r6
 800b8ac:	f000 fda4 	bl	800c3f8 <__malloc_unlock>
 800b8b0:	f104 000b 	add.w	r0, r4, #11
 800b8b4:	1d23      	adds	r3, r4, #4
 800b8b6:	f020 0007 	bic.w	r0, r0, #7
 800b8ba:	1ac2      	subs	r2, r0, r3
 800b8bc:	d0cc      	beq.n	800b858 <_malloc_r+0x20>
 800b8be:	1a1b      	subs	r3, r3, r0
 800b8c0:	50a3      	str	r3, [r4, r2]
 800b8c2:	e7c9      	b.n	800b858 <_malloc_r+0x20>
 800b8c4:	4622      	mov	r2, r4
 800b8c6:	6864      	ldr	r4, [r4, #4]
 800b8c8:	e7cc      	b.n	800b864 <_malloc_r+0x2c>
 800b8ca:	1cc4      	adds	r4, r0, #3
 800b8cc:	f024 0403 	bic.w	r4, r4, #3
 800b8d0:	42a0      	cmp	r0, r4
 800b8d2:	d0e3      	beq.n	800b89c <_malloc_r+0x64>
 800b8d4:	1a21      	subs	r1, r4, r0
 800b8d6:	4630      	mov	r0, r6
 800b8d8:	f000 fabe 	bl	800be58 <_sbrk_r>
 800b8dc:	3001      	adds	r0, #1
 800b8de:	d1dd      	bne.n	800b89c <_malloc_r+0x64>
 800b8e0:	e7cf      	b.n	800b882 <_malloc_r+0x4a>
 800b8e2:	bf00      	nop
 800b8e4:	20000594 	.word	0x20000594
 800b8e8:	20000598 	.word	0x20000598

0800b8ec <__ssputs_r>:
 800b8ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8f0:	688e      	ldr	r6, [r1, #8]
 800b8f2:	429e      	cmp	r6, r3
 800b8f4:	4682      	mov	sl, r0
 800b8f6:	460c      	mov	r4, r1
 800b8f8:	4690      	mov	r8, r2
 800b8fa:	461f      	mov	r7, r3
 800b8fc:	d838      	bhi.n	800b970 <__ssputs_r+0x84>
 800b8fe:	898a      	ldrh	r2, [r1, #12]
 800b900:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b904:	d032      	beq.n	800b96c <__ssputs_r+0x80>
 800b906:	6825      	ldr	r5, [r4, #0]
 800b908:	6909      	ldr	r1, [r1, #16]
 800b90a:	eba5 0901 	sub.w	r9, r5, r1
 800b90e:	6965      	ldr	r5, [r4, #20]
 800b910:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b914:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b918:	3301      	adds	r3, #1
 800b91a:	444b      	add	r3, r9
 800b91c:	106d      	asrs	r5, r5, #1
 800b91e:	429d      	cmp	r5, r3
 800b920:	bf38      	it	cc
 800b922:	461d      	movcc	r5, r3
 800b924:	0553      	lsls	r3, r2, #21
 800b926:	d531      	bpl.n	800b98c <__ssputs_r+0xa0>
 800b928:	4629      	mov	r1, r5
 800b92a:	f7ff ff85 	bl	800b838 <_malloc_r>
 800b92e:	4606      	mov	r6, r0
 800b930:	b950      	cbnz	r0, 800b948 <__ssputs_r+0x5c>
 800b932:	230c      	movs	r3, #12
 800b934:	f8ca 3000 	str.w	r3, [sl]
 800b938:	89a3      	ldrh	r3, [r4, #12]
 800b93a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b93e:	81a3      	strh	r3, [r4, #12]
 800b940:	f04f 30ff 	mov.w	r0, #4294967295
 800b944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b948:	6921      	ldr	r1, [r4, #16]
 800b94a:	464a      	mov	r2, r9
 800b94c:	f7fd ff76 	bl	800983c <memcpy>
 800b950:	89a3      	ldrh	r3, [r4, #12]
 800b952:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b95a:	81a3      	strh	r3, [r4, #12]
 800b95c:	6126      	str	r6, [r4, #16]
 800b95e:	6165      	str	r5, [r4, #20]
 800b960:	444e      	add	r6, r9
 800b962:	eba5 0509 	sub.w	r5, r5, r9
 800b966:	6026      	str	r6, [r4, #0]
 800b968:	60a5      	str	r5, [r4, #8]
 800b96a:	463e      	mov	r6, r7
 800b96c:	42be      	cmp	r6, r7
 800b96e:	d900      	bls.n	800b972 <__ssputs_r+0x86>
 800b970:	463e      	mov	r6, r7
 800b972:	4632      	mov	r2, r6
 800b974:	6820      	ldr	r0, [r4, #0]
 800b976:	4641      	mov	r1, r8
 800b978:	f000 fd1e 	bl	800c3b8 <memmove>
 800b97c:	68a3      	ldr	r3, [r4, #8]
 800b97e:	6822      	ldr	r2, [r4, #0]
 800b980:	1b9b      	subs	r3, r3, r6
 800b982:	4432      	add	r2, r6
 800b984:	60a3      	str	r3, [r4, #8]
 800b986:	6022      	str	r2, [r4, #0]
 800b988:	2000      	movs	r0, #0
 800b98a:	e7db      	b.n	800b944 <__ssputs_r+0x58>
 800b98c:	462a      	mov	r2, r5
 800b98e:	f000 fd39 	bl	800c404 <_realloc_r>
 800b992:	4606      	mov	r6, r0
 800b994:	2800      	cmp	r0, #0
 800b996:	d1e1      	bne.n	800b95c <__ssputs_r+0x70>
 800b998:	6921      	ldr	r1, [r4, #16]
 800b99a:	4650      	mov	r0, sl
 800b99c:	f7ff fefc 	bl	800b798 <_free_r>
 800b9a0:	e7c7      	b.n	800b932 <__ssputs_r+0x46>
	...

0800b9a4 <_svfiprintf_r>:
 800b9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9a8:	4698      	mov	r8, r3
 800b9aa:	898b      	ldrh	r3, [r1, #12]
 800b9ac:	061b      	lsls	r3, r3, #24
 800b9ae:	b09d      	sub	sp, #116	; 0x74
 800b9b0:	4607      	mov	r7, r0
 800b9b2:	460d      	mov	r5, r1
 800b9b4:	4614      	mov	r4, r2
 800b9b6:	d50e      	bpl.n	800b9d6 <_svfiprintf_r+0x32>
 800b9b8:	690b      	ldr	r3, [r1, #16]
 800b9ba:	b963      	cbnz	r3, 800b9d6 <_svfiprintf_r+0x32>
 800b9bc:	2140      	movs	r1, #64	; 0x40
 800b9be:	f7ff ff3b 	bl	800b838 <_malloc_r>
 800b9c2:	6028      	str	r0, [r5, #0]
 800b9c4:	6128      	str	r0, [r5, #16]
 800b9c6:	b920      	cbnz	r0, 800b9d2 <_svfiprintf_r+0x2e>
 800b9c8:	230c      	movs	r3, #12
 800b9ca:	603b      	str	r3, [r7, #0]
 800b9cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b9d0:	e0d1      	b.n	800bb76 <_svfiprintf_r+0x1d2>
 800b9d2:	2340      	movs	r3, #64	; 0x40
 800b9d4:	616b      	str	r3, [r5, #20]
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	9309      	str	r3, [sp, #36]	; 0x24
 800b9da:	2320      	movs	r3, #32
 800b9dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b9e0:	f8cd 800c 	str.w	r8, [sp, #12]
 800b9e4:	2330      	movs	r3, #48	; 0x30
 800b9e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bb90 <_svfiprintf_r+0x1ec>
 800b9ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b9ee:	f04f 0901 	mov.w	r9, #1
 800b9f2:	4623      	mov	r3, r4
 800b9f4:	469a      	mov	sl, r3
 800b9f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9fa:	b10a      	cbz	r2, 800ba00 <_svfiprintf_r+0x5c>
 800b9fc:	2a25      	cmp	r2, #37	; 0x25
 800b9fe:	d1f9      	bne.n	800b9f4 <_svfiprintf_r+0x50>
 800ba00:	ebba 0b04 	subs.w	fp, sl, r4
 800ba04:	d00b      	beq.n	800ba1e <_svfiprintf_r+0x7a>
 800ba06:	465b      	mov	r3, fp
 800ba08:	4622      	mov	r2, r4
 800ba0a:	4629      	mov	r1, r5
 800ba0c:	4638      	mov	r0, r7
 800ba0e:	f7ff ff6d 	bl	800b8ec <__ssputs_r>
 800ba12:	3001      	adds	r0, #1
 800ba14:	f000 80aa 	beq.w	800bb6c <_svfiprintf_r+0x1c8>
 800ba18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba1a:	445a      	add	r2, fp
 800ba1c:	9209      	str	r2, [sp, #36]	; 0x24
 800ba1e:	f89a 3000 	ldrb.w	r3, [sl]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	f000 80a2 	beq.w	800bb6c <_svfiprintf_r+0x1c8>
 800ba28:	2300      	movs	r3, #0
 800ba2a:	f04f 32ff 	mov.w	r2, #4294967295
 800ba2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba32:	f10a 0a01 	add.w	sl, sl, #1
 800ba36:	9304      	str	r3, [sp, #16]
 800ba38:	9307      	str	r3, [sp, #28]
 800ba3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba3e:	931a      	str	r3, [sp, #104]	; 0x68
 800ba40:	4654      	mov	r4, sl
 800ba42:	2205      	movs	r2, #5
 800ba44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba48:	4851      	ldr	r0, [pc, #324]	; (800bb90 <_svfiprintf_r+0x1ec>)
 800ba4a:	f7f4 fbd1 	bl	80001f0 <memchr>
 800ba4e:	9a04      	ldr	r2, [sp, #16]
 800ba50:	b9d8      	cbnz	r0, 800ba8a <_svfiprintf_r+0xe6>
 800ba52:	06d0      	lsls	r0, r2, #27
 800ba54:	bf44      	itt	mi
 800ba56:	2320      	movmi	r3, #32
 800ba58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba5c:	0711      	lsls	r1, r2, #28
 800ba5e:	bf44      	itt	mi
 800ba60:	232b      	movmi	r3, #43	; 0x2b
 800ba62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba66:	f89a 3000 	ldrb.w	r3, [sl]
 800ba6a:	2b2a      	cmp	r3, #42	; 0x2a
 800ba6c:	d015      	beq.n	800ba9a <_svfiprintf_r+0xf6>
 800ba6e:	9a07      	ldr	r2, [sp, #28]
 800ba70:	4654      	mov	r4, sl
 800ba72:	2000      	movs	r0, #0
 800ba74:	f04f 0c0a 	mov.w	ip, #10
 800ba78:	4621      	mov	r1, r4
 800ba7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba7e:	3b30      	subs	r3, #48	; 0x30
 800ba80:	2b09      	cmp	r3, #9
 800ba82:	d94e      	bls.n	800bb22 <_svfiprintf_r+0x17e>
 800ba84:	b1b0      	cbz	r0, 800bab4 <_svfiprintf_r+0x110>
 800ba86:	9207      	str	r2, [sp, #28]
 800ba88:	e014      	b.n	800bab4 <_svfiprintf_r+0x110>
 800ba8a:	eba0 0308 	sub.w	r3, r0, r8
 800ba8e:	fa09 f303 	lsl.w	r3, r9, r3
 800ba92:	4313      	orrs	r3, r2
 800ba94:	9304      	str	r3, [sp, #16]
 800ba96:	46a2      	mov	sl, r4
 800ba98:	e7d2      	b.n	800ba40 <_svfiprintf_r+0x9c>
 800ba9a:	9b03      	ldr	r3, [sp, #12]
 800ba9c:	1d19      	adds	r1, r3, #4
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	9103      	str	r1, [sp, #12]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	bfbb      	ittet	lt
 800baa6:	425b      	neglt	r3, r3
 800baa8:	f042 0202 	orrlt.w	r2, r2, #2
 800baac:	9307      	strge	r3, [sp, #28]
 800baae:	9307      	strlt	r3, [sp, #28]
 800bab0:	bfb8      	it	lt
 800bab2:	9204      	strlt	r2, [sp, #16]
 800bab4:	7823      	ldrb	r3, [r4, #0]
 800bab6:	2b2e      	cmp	r3, #46	; 0x2e
 800bab8:	d10c      	bne.n	800bad4 <_svfiprintf_r+0x130>
 800baba:	7863      	ldrb	r3, [r4, #1]
 800babc:	2b2a      	cmp	r3, #42	; 0x2a
 800babe:	d135      	bne.n	800bb2c <_svfiprintf_r+0x188>
 800bac0:	9b03      	ldr	r3, [sp, #12]
 800bac2:	1d1a      	adds	r2, r3, #4
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	9203      	str	r2, [sp, #12]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	bfb8      	it	lt
 800bacc:	f04f 33ff 	movlt.w	r3, #4294967295
 800bad0:	3402      	adds	r4, #2
 800bad2:	9305      	str	r3, [sp, #20]
 800bad4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bba0 <_svfiprintf_r+0x1fc>
 800bad8:	7821      	ldrb	r1, [r4, #0]
 800bada:	2203      	movs	r2, #3
 800badc:	4650      	mov	r0, sl
 800bade:	f7f4 fb87 	bl	80001f0 <memchr>
 800bae2:	b140      	cbz	r0, 800baf6 <_svfiprintf_r+0x152>
 800bae4:	2340      	movs	r3, #64	; 0x40
 800bae6:	eba0 000a 	sub.w	r0, r0, sl
 800baea:	fa03 f000 	lsl.w	r0, r3, r0
 800baee:	9b04      	ldr	r3, [sp, #16]
 800baf0:	4303      	orrs	r3, r0
 800baf2:	3401      	adds	r4, #1
 800baf4:	9304      	str	r3, [sp, #16]
 800baf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bafa:	4826      	ldr	r0, [pc, #152]	; (800bb94 <_svfiprintf_r+0x1f0>)
 800bafc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb00:	2206      	movs	r2, #6
 800bb02:	f7f4 fb75 	bl	80001f0 <memchr>
 800bb06:	2800      	cmp	r0, #0
 800bb08:	d038      	beq.n	800bb7c <_svfiprintf_r+0x1d8>
 800bb0a:	4b23      	ldr	r3, [pc, #140]	; (800bb98 <_svfiprintf_r+0x1f4>)
 800bb0c:	bb1b      	cbnz	r3, 800bb56 <_svfiprintf_r+0x1b2>
 800bb0e:	9b03      	ldr	r3, [sp, #12]
 800bb10:	3307      	adds	r3, #7
 800bb12:	f023 0307 	bic.w	r3, r3, #7
 800bb16:	3308      	adds	r3, #8
 800bb18:	9303      	str	r3, [sp, #12]
 800bb1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb1c:	4433      	add	r3, r6
 800bb1e:	9309      	str	r3, [sp, #36]	; 0x24
 800bb20:	e767      	b.n	800b9f2 <_svfiprintf_r+0x4e>
 800bb22:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb26:	460c      	mov	r4, r1
 800bb28:	2001      	movs	r0, #1
 800bb2a:	e7a5      	b.n	800ba78 <_svfiprintf_r+0xd4>
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	3401      	adds	r4, #1
 800bb30:	9305      	str	r3, [sp, #20]
 800bb32:	4619      	mov	r1, r3
 800bb34:	f04f 0c0a 	mov.w	ip, #10
 800bb38:	4620      	mov	r0, r4
 800bb3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb3e:	3a30      	subs	r2, #48	; 0x30
 800bb40:	2a09      	cmp	r2, #9
 800bb42:	d903      	bls.n	800bb4c <_svfiprintf_r+0x1a8>
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d0c5      	beq.n	800bad4 <_svfiprintf_r+0x130>
 800bb48:	9105      	str	r1, [sp, #20]
 800bb4a:	e7c3      	b.n	800bad4 <_svfiprintf_r+0x130>
 800bb4c:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb50:	4604      	mov	r4, r0
 800bb52:	2301      	movs	r3, #1
 800bb54:	e7f0      	b.n	800bb38 <_svfiprintf_r+0x194>
 800bb56:	ab03      	add	r3, sp, #12
 800bb58:	9300      	str	r3, [sp, #0]
 800bb5a:	462a      	mov	r2, r5
 800bb5c:	4b0f      	ldr	r3, [pc, #60]	; (800bb9c <_svfiprintf_r+0x1f8>)
 800bb5e:	a904      	add	r1, sp, #16
 800bb60:	4638      	mov	r0, r7
 800bb62:	f7fd ff21 	bl	80099a8 <_printf_float>
 800bb66:	1c42      	adds	r2, r0, #1
 800bb68:	4606      	mov	r6, r0
 800bb6a:	d1d6      	bne.n	800bb1a <_svfiprintf_r+0x176>
 800bb6c:	89ab      	ldrh	r3, [r5, #12]
 800bb6e:	065b      	lsls	r3, r3, #25
 800bb70:	f53f af2c 	bmi.w	800b9cc <_svfiprintf_r+0x28>
 800bb74:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb76:	b01d      	add	sp, #116	; 0x74
 800bb78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb7c:	ab03      	add	r3, sp, #12
 800bb7e:	9300      	str	r3, [sp, #0]
 800bb80:	462a      	mov	r2, r5
 800bb82:	4b06      	ldr	r3, [pc, #24]	; (800bb9c <_svfiprintf_r+0x1f8>)
 800bb84:	a904      	add	r1, sp, #16
 800bb86:	4638      	mov	r0, r7
 800bb88:	f7fe f9b2 	bl	8009ef0 <_printf_i>
 800bb8c:	e7eb      	b.n	800bb66 <_svfiprintf_r+0x1c2>
 800bb8e:	bf00      	nop
 800bb90:	0800c8a4 	.word	0x0800c8a4
 800bb94:	0800c8ae 	.word	0x0800c8ae
 800bb98:	080099a9 	.word	0x080099a9
 800bb9c:	0800b8ed 	.word	0x0800b8ed
 800bba0:	0800c8aa 	.word	0x0800c8aa

0800bba4 <__sfputc_r>:
 800bba4:	6893      	ldr	r3, [r2, #8]
 800bba6:	3b01      	subs	r3, #1
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	b410      	push	{r4}
 800bbac:	6093      	str	r3, [r2, #8]
 800bbae:	da08      	bge.n	800bbc2 <__sfputc_r+0x1e>
 800bbb0:	6994      	ldr	r4, [r2, #24]
 800bbb2:	42a3      	cmp	r3, r4
 800bbb4:	db01      	blt.n	800bbba <__sfputc_r+0x16>
 800bbb6:	290a      	cmp	r1, #10
 800bbb8:	d103      	bne.n	800bbc2 <__sfputc_r+0x1e>
 800bbba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbbe:	f000 b99f 	b.w	800bf00 <__swbuf_r>
 800bbc2:	6813      	ldr	r3, [r2, #0]
 800bbc4:	1c58      	adds	r0, r3, #1
 800bbc6:	6010      	str	r0, [r2, #0]
 800bbc8:	7019      	strb	r1, [r3, #0]
 800bbca:	4608      	mov	r0, r1
 800bbcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbd0:	4770      	bx	lr

0800bbd2 <__sfputs_r>:
 800bbd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbd4:	4606      	mov	r6, r0
 800bbd6:	460f      	mov	r7, r1
 800bbd8:	4614      	mov	r4, r2
 800bbda:	18d5      	adds	r5, r2, r3
 800bbdc:	42ac      	cmp	r4, r5
 800bbde:	d101      	bne.n	800bbe4 <__sfputs_r+0x12>
 800bbe0:	2000      	movs	r0, #0
 800bbe2:	e007      	b.n	800bbf4 <__sfputs_r+0x22>
 800bbe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbe8:	463a      	mov	r2, r7
 800bbea:	4630      	mov	r0, r6
 800bbec:	f7ff ffda 	bl	800bba4 <__sfputc_r>
 800bbf0:	1c43      	adds	r3, r0, #1
 800bbf2:	d1f3      	bne.n	800bbdc <__sfputs_r+0xa>
 800bbf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bbf8 <_vfiprintf_r>:
 800bbf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbfc:	460d      	mov	r5, r1
 800bbfe:	b09d      	sub	sp, #116	; 0x74
 800bc00:	4614      	mov	r4, r2
 800bc02:	4698      	mov	r8, r3
 800bc04:	4606      	mov	r6, r0
 800bc06:	b118      	cbz	r0, 800bc10 <_vfiprintf_r+0x18>
 800bc08:	6983      	ldr	r3, [r0, #24]
 800bc0a:	b90b      	cbnz	r3, 800bc10 <_vfiprintf_r+0x18>
 800bc0c:	f7ff f988 	bl	800af20 <__sinit>
 800bc10:	4b89      	ldr	r3, [pc, #548]	; (800be38 <_vfiprintf_r+0x240>)
 800bc12:	429d      	cmp	r5, r3
 800bc14:	d11b      	bne.n	800bc4e <_vfiprintf_r+0x56>
 800bc16:	6875      	ldr	r5, [r6, #4]
 800bc18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc1a:	07d9      	lsls	r1, r3, #31
 800bc1c:	d405      	bmi.n	800bc2a <_vfiprintf_r+0x32>
 800bc1e:	89ab      	ldrh	r3, [r5, #12]
 800bc20:	059a      	lsls	r2, r3, #22
 800bc22:	d402      	bmi.n	800bc2a <_vfiprintf_r+0x32>
 800bc24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc26:	f7ff fa1e 	bl	800b066 <__retarget_lock_acquire_recursive>
 800bc2a:	89ab      	ldrh	r3, [r5, #12]
 800bc2c:	071b      	lsls	r3, r3, #28
 800bc2e:	d501      	bpl.n	800bc34 <_vfiprintf_r+0x3c>
 800bc30:	692b      	ldr	r3, [r5, #16]
 800bc32:	b9eb      	cbnz	r3, 800bc70 <_vfiprintf_r+0x78>
 800bc34:	4629      	mov	r1, r5
 800bc36:	4630      	mov	r0, r6
 800bc38:	f000 f9c6 	bl	800bfc8 <__swsetup_r>
 800bc3c:	b1c0      	cbz	r0, 800bc70 <_vfiprintf_r+0x78>
 800bc3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc40:	07dc      	lsls	r4, r3, #31
 800bc42:	d50e      	bpl.n	800bc62 <_vfiprintf_r+0x6a>
 800bc44:	f04f 30ff 	mov.w	r0, #4294967295
 800bc48:	b01d      	add	sp, #116	; 0x74
 800bc4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc4e:	4b7b      	ldr	r3, [pc, #492]	; (800be3c <_vfiprintf_r+0x244>)
 800bc50:	429d      	cmp	r5, r3
 800bc52:	d101      	bne.n	800bc58 <_vfiprintf_r+0x60>
 800bc54:	68b5      	ldr	r5, [r6, #8]
 800bc56:	e7df      	b.n	800bc18 <_vfiprintf_r+0x20>
 800bc58:	4b79      	ldr	r3, [pc, #484]	; (800be40 <_vfiprintf_r+0x248>)
 800bc5a:	429d      	cmp	r5, r3
 800bc5c:	bf08      	it	eq
 800bc5e:	68f5      	ldreq	r5, [r6, #12]
 800bc60:	e7da      	b.n	800bc18 <_vfiprintf_r+0x20>
 800bc62:	89ab      	ldrh	r3, [r5, #12]
 800bc64:	0598      	lsls	r0, r3, #22
 800bc66:	d4ed      	bmi.n	800bc44 <_vfiprintf_r+0x4c>
 800bc68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc6a:	f7ff f9fd 	bl	800b068 <__retarget_lock_release_recursive>
 800bc6e:	e7e9      	b.n	800bc44 <_vfiprintf_r+0x4c>
 800bc70:	2300      	movs	r3, #0
 800bc72:	9309      	str	r3, [sp, #36]	; 0x24
 800bc74:	2320      	movs	r3, #32
 800bc76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc7a:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc7e:	2330      	movs	r3, #48	; 0x30
 800bc80:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800be44 <_vfiprintf_r+0x24c>
 800bc84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc88:	f04f 0901 	mov.w	r9, #1
 800bc8c:	4623      	mov	r3, r4
 800bc8e:	469a      	mov	sl, r3
 800bc90:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc94:	b10a      	cbz	r2, 800bc9a <_vfiprintf_r+0xa2>
 800bc96:	2a25      	cmp	r2, #37	; 0x25
 800bc98:	d1f9      	bne.n	800bc8e <_vfiprintf_r+0x96>
 800bc9a:	ebba 0b04 	subs.w	fp, sl, r4
 800bc9e:	d00b      	beq.n	800bcb8 <_vfiprintf_r+0xc0>
 800bca0:	465b      	mov	r3, fp
 800bca2:	4622      	mov	r2, r4
 800bca4:	4629      	mov	r1, r5
 800bca6:	4630      	mov	r0, r6
 800bca8:	f7ff ff93 	bl	800bbd2 <__sfputs_r>
 800bcac:	3001      	adds	r0, #1
 800bcae:	f000 80aa 	beq.w	800be06 <_vfiprintf_r+0x20e>
 800bcb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bcb4:	445a      	add	r2, fp
 800bcb6:	9209      	str	r2, [sp, #36]	; 0x24
 800bcb8:	f89a 3000 	ldrb.w	r3, [sl]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	f000 80a2 	beq.w	800be06 <_vfiprintf_r+0x20e>
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	f04f 32ff 	mov.w	r2, #4294967295
 800bcc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bccc:	f10a 0a01 	add.w	sl, sl, #1
 800bcd0:	9304      	str	r3, [sp, #16]
 800bcd2:	9307      	str	r3, [sp, #28]
 800bcd4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bcd8:	931a      	str	r3, [sp, #104]	; 0x68
 800bcda:	4654      	mov	r4, sl
 800bcdc:	2205      	movs	r2, #5
 800bcde:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bce2:	4858      	ldr	r0, [pc, #352]	; (800be44 <_vfiprintf_r+0x24c>)
 800bce4:	f7f4 fa84 	bl	80001f0 <memchr>
 800bce8:	9a04      	ldr	r2, [sp, #16]
 800bcea:	b9d8      	cbnz	r0, 800bd24 <_vfiprintf_r+0x12c>
 800bcec:	06d1      	lsls	r1, r2, #27
 800bcee:	bf44      	itt	mi
 800bcf0:	2320      	movmi	r3, #32
 800bcf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bcf6:	0713      	lsls	r3, r2, #28
 800bcf8:	bf44      	itt	mi
 800bcfa:	232b      	movmi	r3, #43	; 0x2b
 800bcfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd00:	f89a 3000 	ldrb.w	r3, [sl]
 800bd04:	2b2a      	cmp	r3, #42	; 0x2a
 800bd06:	d015      	beq.n	800bd34 <_vfiprintf_r+0x13c>
 800bd08:	9a07      	ldr	r2, [sp, #28]
 800bd0a:	4654      	mov	r4, sl
 800bd0c:	2000      	movs	r0, #0
 800bd0e:	f04f 0c0a 	mov.w	ip, #10
 800bd12:	4621      	mov	r1, r4
 800bd14:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd18:	3b30      	subs	r3, #48	; 0x30
 800bd1a:	2b09      	cmp	r3, #9
 800bd1c:	d94e      	bls.n	800bdbc <_vfiprintf_r+0x1c4>
 800bd1e:	b1b0      	cbz	r0, 800bd4e <_vfiprintf_r+0x156>
 800bd20:	9207      	str	r2, [sp, #28]
 800bd22:	e014      	b.n	800bd4e <_vfiprintf_r+0x156>
 800bd24:	eba0 0308 	sub.w	r3, r0, r8
 800bd28:	fa09 f303 	lsl.w	r3, r9, r3
 800bd2c:	4313      	orrs	r3, r2
 800bd2e:	9304      	str	r3, [sp, #16]
 800bd30:	46a2      	mov	sl, r4
 800bd32:	e7d2      	b.n	800bcda <_vfiprintf_r+0xe2>
 800bd34:	9b03      	ldr	r3, [sp, #12]
 800bd36:	1d19      	adds	r1, r3, #4
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	9103      	str	r1, [sp, #12]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	bfbb      	ittet	lt
 800bd40:	425b      	neglt	r3, r3
 800bd42:	f042 0202 	orrlt.w	r2, r2, #2
 800bd46:	9307      	strge	r3, [sp, #28]
 800bd48:	9307      	strlt	r3, [sp, #28]
 800bd4a:	bfb8      	it	lt
 800bd4c:	9204      	strlt	r2, [sp, #16]
 800bd4e:	7823      	ldrb	r3, [r4, #0]
 800bd50:	2b2e      	cmp	r3, #46	; 0x2e
 800bd52:	d10c      	bne.n	800bd6e <_vfiprintf_r+0x176>
 800bd54:	7863      	ldrb	r3, [r4, #1]
 800bd56:	2b2a      	cmp	r3, #42	; 0x2a
 800bd58:	d135      	bne.n	800bdc6 <_vfiprintf_r+0x1ce>
 800bd5a:	9b03      	ldr	r3, [sp, #12]
 800bd5c:	1d1a      	adds	r2, r3, #4
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	9203      	str	r2, [sp, #12]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	bfb8      	it	lt
 800bd66:	f04f 33ff 	movlt.w	r3, #4294967295
 800bd6a:	3402      	adds	r4, #2
 800bd6c:	9305      	str	r3, [sp, #20]
 800bd6e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800be54 <_vfiprintf_r+0x25c>
 800bd72:	7821      	ldrb	r1, [r4, #0]
 800bd74:	2203      	movs	r2, #3
 800bd76:	4650      	mov	r0, sl
 800bd78:	f7f4 fa3a 	bl	80001f0 <memchr>
 800bd7c:	b140      	cbz	r0, 800bd90 <_vfiprintf_r+0x198>
 800bd7e:	2340      	movs	r3, #64	; 0x40
 800bd80:	eba0 000a 	sub.w	r0, r0, sl
 800bd84:	fa03 f000 	lsl.w	r0, r3, r0
 800bd88:	9b04      	ldr	r3, [sp, #16]
 800bd8a:	4303      	orrs	r3, r0
 800bd8c:	3401      	adds	r4, #1
 800bd8e:	9304      	str	r3, [sp, #16]
 800bd90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd94:	482c      	ldr	r0, [pc, #176]	; (800be48 <_vfiprintf_r+0x250>)
 800bd96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd9a:	2206      	movs	r2, #6
 800bd9c:	f7f4 fa28 	bl	80001f0 <memchr>
 800bda0:	2800      	cmp	r0, #0
 800bda2:	d03f      	beq.n	800be24 <_vfiprintf_r+0x22c>
 800bda4:	4b29      	ldr	r3, [pc, #164]	; (800be4c <_vfiprintf_r+0x254>)
 800bda6:	bb1b      	cbnz	r3, 800bdf0 <_vfiprintf_r+0x1f8>
 800bda8:	9b03      	ldr	r3, [sp, #12]
 800bdaa:	3307      	adds	r3, #7
 800bdac:	f023 0307 	bic.w	r3, r3, #7
 800bdb0:	3308      	adds	r3, #8
 800bdb2:	9303      	str	r3, [sp, #12]
 800bdb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdb6:	443b      	add	r3, r7
 800bdb8:	9309      	str	r3, [sp, #36]	; 0x24
 800bdba:	e767      	b.n	800bc8c <_vfiprintf_r+0x94>
 800bdbc:	fb0c 3202 	mla	r2, ip, r2, r3
 800bdc0:	460c      	mov	r4, r1
 800bdc2:	2001      	movs	r0, #1
 800bdc4:	e7a5      	b.n	800bd12 <_vfiprintf_r+0x11a>
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	3401      	adds	r4, #1
 800bdca:	9305      	str	r3, [sp, #20]
 800bdcc:	4619      	mov	r1, r3
 800bdce:	f04f 0c0a 	mov.w	ip, #10
 800bdd2:	4620      	mov	r0, r4
 800bdd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdd8:	3a30      	subs	r2, #48	; 0x30
 800bdda:	2a09      	cmp	r2, #9
 800bddc:	d903      	bls.n	800bde6 <_vfiprintf_r+0x1ee>
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d0c5      	beq.n	800bd6e <_vfiprintf_r+0x176>
 800bde2:	9105      	str	r1, [sp, #20]
 800bde4:	e7c3      	b.n	800bd6e <_vfiprintf_r+0x176>
 800bde6:	fb0c 2101 	mla	r1, ip, r1, r2
 800bdea:	4604      	mov	r4, r0
 800bdec:	2301      	movs	r3, #1
 800bdee:	e7f0      	b.n	800bdd2 <_vfiprintf_r+0x1da>
 800bdf0:	ab03      	add	r3, sp, #12
 800bdf2:	9300      	str	r3, [sp, #0]
 800bdf4:	462a      	mov	r2, r5
 800bdf6:	4b16      	ldr	r3, [pc, #88]	; (800be50 <_vfiprintf_r+0x258>)
 800bdf8:	a904      	add	r1, sp, #16
 800bdfa:	4630      	mov	r0, r6
 800bdfc:	f7fd fdd4 	bl	80099a8 <_printf_float>
 800be00:	4607      	mov	r7, r0
 800be02:	1c78      	adds	r0, r7, #1
 800be04:	d1d6      	bne.n	800bdb4 <_vfiprintf_r+0x1bc>
 800be06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be08:	07d9      	lsls	r1, r3, #31
 800be0a:	d405      	bmi.n	800be18 <_vfiprintf_r+0x220>
 800be0c:	89ab      	ldrh	r3, [r5, #12]
 800be0e:	059a      	lsls	r2, r3, #22
 800be10:	d402      	bmi.n	800be18 <_vfiprintf_r+0x220>
 800be12:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be14:	f7ff f928 	bl	800b068 <__retarget_lock_release_recursive>
 800be18:	89ab      	ldrh	r3, [r5, #12]
 800be1a:	065b      	lsls	r3, r3, #25
 800be1c:	f53f af12 	bmi.w	800bc44 <_vfiprintf_r+0x4c>
 800be20:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be22:	e711      	b.n	800bc48 <_vfiprintf_r+0x50>
 800be24:	ab03      	add	r3, sp, #12
 800be26:	9300      	str	r3, [sp, #0]
 800be28:	462a      	mov	r2, r5
 800be2a:	4b09      	ldr	r3, [pc, #36]	; (800be50 <_vfiprintf_r+0x258>)
 800be2c:	a904      	add	r1, sp, #16
 800be2e:	4630      	mov	r0, r6
 800be30:	f7fe f85e 	bl	8009ef0 <_printf_i>
 800be34:	e7e4      	b.n	800be00 <_vfiprintf_r+0x208>
 800be36:	bf00      	nop
 800be38:	0800c704 	.word	0x0800c704
 800be3c:	0800c724 	.word	0x0800c724
 800be40:	0800c6e4 	.word	0x0800c6e4
 800be44:	0800c8a4 	.word	0x0800c8a4
 800be48:	0800c8ae 	.word	0x0800c8ae
 800be4c:	080099a9 	.word	0x080099a9
 800be50:	0800bbd3 	.word	0x0800bbd3
 800be54:	0800c8aa 	.word	0x0800c8aa

0800be58 <_sbrk_r>:
 800be58:	b538      	push	{r3, r4, r5, lr}
 800be5a:	4d06      	ldr	r5, [pc, #24]	; (800be74 <_sbrk_r+0x1c>)
 800be5c:	2300      	movs	r3, #0
 800be5e:	4604      	mov	r4, r0
 800be60:	4608      	mov	r0, r1
 800be62:	602b      	str	r3, [r5, #0]
 800be64:	f7f5 fdf0 	bl	8001a48 <_sbrk>
 800be68:	1c43      	adds	r3, r0, #1
 800be6a:	d102      	bne.n	800be72 <_sbrk_r+0x1a>
 800be6c:	682b      	ldr	r3, [r5, #0]
 800be6e:	b103      	cbz	r3, 800be72 <_sbrk_r+0x1a>
 800be70:	6023      	str	r3, [r4, #0]
 800be72:	bd38      	pop	{r3, r4, r5, pc}
 800be74:	20001f74 	.word	0x20001f74

0800be78 <__sread>:
 800be78:	b510      	push	{r4, lr}
 800be7a:	460c      	mov	r4, r1
 800be7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be80:	f000 fae6 	bl	800c450 <_read_r>
 800be84:	2800      	cmp	r0, #0
 800be86:	bfab      	itete	ge
 800be88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800be8a:	89a3      	ldrhlt	r3, [r4, #12]
 800be8c:	181b      	addge	r3, r3, r0
 800be8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800be92:	bfac      	ite	ge
 800be94:	6563      	strge	r3, [r4, #84]	; 0x54
 800be96:	81a3      	strhlt	r3, [r4, #12]
 800be98:	bd10      	pop	{r4, pc}

0800be9a <__swrite>:
 800be9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be9e:	461f      	mov	r7, r3
 800bea0:	898b      	ldrh	r3, [r1, #12]
 800bea2:	05db      	lsls	r3, r3, #23
 800bea4:	4605      	mov	r5, r0
 800bea6:	460c      	mov	r4, r1
 800bea8:	4616      	mov	r6, r2
 800beaa:	d505      	bpl.n	800beb8 <__swrite+0x1e>
 800beac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800beb0:	2302      	movs	r3, #2
 800beb2:	2200      	movs	r2, #0
 800beb4:	f000 f9f8 	bl	800c2a8 <_lseek_r>
 800beb8:	89a3      	ldrh	r3, [r4, #12]
 800beba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bebe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bec2:	81a3      	strh	r3, [r4, #12]
 800bec4:	4632      	mov	r2, r6
 800bec6:	463b      	mov	r3, r7
 800bec8:	4628      	mov	r0, r5
 800beca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bece:	f000 b869 	b.w	800bfa4 <_write_r>

0800bed2 <__sseek>:
 800bed2:	b510      	push	{r4, lr}
 800bed4:	460c      	mov	r4, r1
 800bed6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800beda:	f000 f9e5 	bl	800c2a8 <_lseek_r>
 800bede:	1c43      	adds	r3, r0, #1
 800bee0:	89a3      	ldrh	r3, [r4, #12]
 800bee2:	bf15      	itete	ne
 800bee4:	6560      	strne	r0, [r4, #84]	; 0x54
 800bee6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800beea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800beee:	81a3      	strheq	r3, [r4, #12]
 800bef0:	bf18      	it	ne
 800bef2:	81a3      	strhne	r3, [r4, #12]
 800bef4:	bd10      	pop	{r4, pc}

0800bef6 <__sclose>:
 800bef6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800befa:	f000 b8f1 	b.w	800c0e0 <_close_r>
	...

0800bf00 <__swbuf_r>:
 800bf00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf02:	460e      	mov	r6, r1
 800bf04:	4614      	mov	r4, r2
 800bf06:	4605      	mov	r5, r0
 800bf08:	b118      	cbz	r0, 800bf12 <__swbuf_r+0x12>
 800bf0a:	6983      	ldr	r3, [r0, #24]
 800bf0c:	b90b      	cbnz	r3, 800bf12 <__swbuf_r+0x12>
 800bf0e:	f7ff f807 	bl	800af20 <__sinit>
 800bf12:	4b21      	ldr	r3, [pc, #132]	; (800bf98 <__swbuf_r+0x98>)
 800bf14:	429c      	cmp	r4, r3
 800bf16:	d12b      	bne.n	800bf70 <__swbuf_r+0x70>
 800bf18:	686c      	ldr	r4, [r5, #4]
 800bf1a:	69a3      	ldr	r3, [r4, #24]
 800bf1c:	60a3      	str	r3, [r4, #8]
 800bf1e:	89a3      	ldrh	r3, [r4, #12]
 800bf20:	071a      	lsls	r2, r3, #28
 800bf22:	d52f      	bpl.n	800bf84 <__swbuf_r+0x84>
 800bf24:	6923      	ldr	r3, [r4, #16]
 800bf26:	b36b      	cbz	r3, 800bf84 <__swbuf_r+0x84>
 800bf28:	6923      	ldr	r3, [r4, #16]
 800bf2a:	6820      	ldr	r0, [r4, #0]
 800bf2c:	1ac0      	subs	r0, r0, r3
 800bf2e:	6963      	ldr	r3, [r4, #20]
 800bf30:	b2f6      	uxtb	r6, r6
 800bf32:	4283      	cmp	r3, r0
 800bf34:	4637      	mov	r7, r6
 800bf36:	dc04      	bgt.n	800bf42 <__swbuf_r+0x42>
 800bf38:	4621      	mov	r1, r4
 800bf3a:	4628      	mov	r0, r5
 800bf3c:	f000 f966 	bl	800c20c <_fflush_r>
 800bf40:	bb30      	cbnz	r0, 800bf90 <__swbuf_r+0x90>
 800bf42:	68a3      	ldr	r3, [r4, #8]
 800bf44:	3b01      	subs	r3, #1
 800bf46:	60a3      	str	r3, [r4, #8]
 800bf48:	6823      	ldr	r3, [r4, #0]
 800bf4a:	1c5a      	adds	r2, r3, #1
 800bf4c:	6022      	str	r2, [r4, #0]
 800bf4e:	701e      	strb	r6, [r3, #0]
 800bf50:	6963      	ldr	r3, [r4, #20]
 800bf52:	3001      	adds	r0, #1
 800bf54:	4283      	cmp	r3, r0
 800bf56:	d004      	beq.n	800bf62 <__swbuf_r+0x62>
 800bf58:	89a3      	ldrh	r3, [r4, #12]
 800bf5a:	07db      	lsls	r3, r3, #31
 800bf5c:	d506      	bpl.n	800bf6c <__swbuf_r+0x6c>
 800bf5e:	2e0a      	cmp	r6, #10
 800bf60:	d104      	bne.n	800bf6c <__swbuf_r+0x6c>
 800bf62:	4621      	mov	r1, r4
 800bf64:	4628      	mov	r0, r5
 800bf66:	f000 f951 	bl	800c20c <_fflush_r>
 800bf6a:	b988      	cbnz	r0, 800bf90 <__swbuf_r+0x90>
 800bf6c:	4638      	mov	r0, r7
 800bf6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf70:	4b0a      	ldr	r3, [pc, #40]	; (800bf9c <__swbuf_r+0x9c>)
 800bf72:	429c      	cmp	r4, r3
 800bf74:	d101      	bne.n	800bf7a <__swbuf_r+0x7a>
 800bf76:	68ac      	ldr	r4, [r5, #8]
 800bf78:	e7cf      	b.n	800bf1a <__swbuf_r+0x1a>
 800bf7a:	4b09      	ldr	r3, [pc, #36]	; (800bfa0 <__swbuf_r+0xa0>)
 800bf7c:	429c      	cmp	r4, r3
 800bf7e:	bf08      	it	eq
 800bf80:	68ec      	ldreq	r4, [r5, #12]
 800bf82:	e7ca      	b.n	800bf1a <__swbuf_r+0x1a>
 800bf84:	4621      	mov	r1, r4
 800bf86:	4628      	mov	r0, r5
 800bf88:	f000 f81e 	bl	800bfc8 <__swsetup_r>
 800bf8c:	2800      	cmp	r0, #0
 800bf8e:	d0cb      	beq.n	800bf28 <__swbuf_r+0x28>
 800bf90:	f04f 37ff 	mov.w	r7, #4294967295
 800bf94:	e7ea      	b.n	800bf6c <__swbuf_r+0x6c>
 800bf96:	bf00      	nop
 800bf98:	0800c704 	.word	0x0800c704
 800bf9c:	0800c724 	.word	0x0800c724
 800bfa0:	0800c6e4 	.word	0x0800c6e4

0800bfa4 <_write_r>:
 800bfa4:	b538      	push	{r3, r4, r5, lr}
 800bfa6:	4d07      	ldr	r5, [pc, #28]	; (800bfc4 <_write_r+0x20>)
 800bfa8:	4604      	mov	r4, r0
 800bfaa:	4608      	mov	r0, r1
 800bfac:	4611      	mov	r1, r2
 800bfae:	2200      	movs	r2, #0
 800bfb0:	602a      	str	r2, [r5, #0]
 800bfb2:	461a      	mov	r2, r3
 800bfb4:	f7f5 fcf7 	bl	80019a6 <_write>
 800bfb8:	1c43      	adds	r3, r0, #1
 800bfba:	d102      	bne.n	800bfc2 <_write_r+0x1e>
 800bfbc:	682b      	ldr	r3, [r5, #0]
 800bfbe:	b103      	cbz	r3, 800bfc2 <_write_r+0x1e>
 800bfc0:	6023      	str	r3, [r4, #0]
 800bfc2:	bd38      	pop	{r3, r4, r5, pc}
 800bfc4:	20001f74 	.word	0x20001f74

0800bfc8 <__swsetup_r>:
 800bfc8:	4b32      	ldr	r3, [pc, #200]	; (800c094 <__swsetup_r+0xcc>)
 800bfca:	b570      	push	{r4, r5, r6, lr}
 800bfcc:	681d      	ldr	r5, [r3, #0]
 800bfce:	4606      	mov	r6, r0
 800bfd0:	460c      	mov	r4, r1
 800bfd2:	b125      	cbz	r5, 800bfde <__swsetup_r+0x16>
 800bfd4:	69ab      	ldr	r3, [r5, #24]
 800bfd6:	b913      	cbnz	r3, 800bfde <__swsetup_r+0x16>
 800bfd8:	4628      	mov	r0, r5
 800bfda:	f7fe ffa1 	bl	800af20 <__sinit>
 800bfde:	4b2e      	ldr	r3, [pc, #184]	; (800c098 <__swsetup_r+0xd0>)
 800bfe0:	429c      	cmp	r4, r3
 800bfe2:	d10f      	bne.n	800c004 <__swsetup_r+0x3c>
 800bfe4:	686c      	ldr	r4, [r5, #4]
 800bfe6:	89a3      	ldrh	r3, [r4, #12]
 800bfe8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bfec:	0719      	lsls	r1, r3, #28
 800bfee:	d42c      	bmi.n	800c04a <__swsetup_r+0x82>
 800bff0:	06dd      	lsls	r5, r3, #27
 800bff2:	d411      	bmi.n	800c018 <__swsetup_r+0x50>
 800bff4:	2309      	movs	r3, #9
 800bff6:	6033      	str	r3, [r6, #0]
 800bff8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bffc:	81a3      	strh	r3, [r4, #12]
 800bffe:	f04f 30ff 	mov.w	r0, #4294967295
 800c002:	e03e      	b.n	800c082 <__swsetup_r+0xba>
 800c004:	4b25      	ldr	r3, [pc, #148]	; (800c09c <__swsetup_r+0xd4>)
 800c006:	429c      	cmp	r4, r3
 800c008:	d101      	bne.n	800c00e <__swsetup_r+0x46>
 800c00a:	68ac      	ldr	r4, [r5, #8]
 800c00c:	e7eb      	b.n	800bfe6 <__swsetup_r+0x1e>
 800c00e:	4b24      	ldr	r3, [pc, #144]	; (800c0a0 <__swsetup_r+0xd8>)
 800c010:	429c      	cmp	r4, r3
 800c012:	bf08      	it	eq
 800c014:	68ec      	ldreq	r4, [r5, #12]
 800c016:	e7e6      	b.n	800bfe6 <__swsetup_r+0x1e>
 800c018:	0758      	lsls	r0, r3, #29
 800c01a:	d512      	bpl.n	800c042 <__swsetup_r+0x7a>
 800c01c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c01e:	b141      	cbz	r1, 800c032 <__swsetup_r+0x6a>
 800c020:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c024:	4299      	cmp	r1, r3
 800c026:	d002      	beq.n	800c02e <__swsetup_r+0x66>
 800c028:	4630      	mov	r0, r6
 800c02a:	f7ff fbb5 	bl	800b798 <_free_r>
 800c02e:	2300      	movs	r3, #0
 800c030:	6363      	str	r3, [r4, #52]	; 0x34
 800c032:	89a3      	ldrh	r3, [r4, #12]
 800c034:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c038:	81a3      	strh	r3, [r4, #12]
 800c03a:	2300      	movs	r3, #0
 800c03c:	6063      	str	r3, [r4, #4]
 800c03e:	6923      	ldr	r3, [r4, #16]
 800c040:	6023      	str	r3, [r4, #0]
 800c042:	89a3      	ldrh	r3, [r4, #12]
 800c044:	f043 0308 	orr.w	r3, r3, #8
 800c048:	81a3      	strh	r3, [r4, #12]
 800c04a:	6923      	ldr	r3, [r4, #16]
 800c04c:	b94b      	cbnz	r3, 800c062 <__swsetup_r+0x9a>
 800c04e:	89a3      	ldrh	r3, [r4, #12]
 800c050:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c054:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c058:	d003      	beq.n	800c062 <__swsetup_r+0x9a>
 800c05a:	4621      	mov	r1, r4
 800c05c:	4630      	mov	r0, r6
 800c05e:	f000 f959 	bl	800c314 <__smakebuf_r>
 800c062:	89a0      	ldrh	r0, [r4, #12]
 800c064:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c068:	f010 0301 	ands.w	r3, r0, #1
 800c06c:	d00a      	beq.n	800c084 <__swsetup_r+0xbc>
 800c06e:	2300      	movs	r3, #0
 800c070:	60a3      	str	r3, [r4, #8]
 800c072:	6963      	ldr	r3, [r4, #20]
 800c074:	425b      	negs	r3, r3
 800c076:	61a3      	str	r3, [r4, #24]
 800c078:	6923      	ldr	r3, [r4, #16]
 800c07a:	b943      	cbnz	r3, 800c08e <__swsetup_r+0xc6>
 800c07c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c080:	d1ba      	bne.n	800bff8 <__swsetup_r+0x30>
 800c082:	bd70      	pop	{r4, r5, r6, pc}
 800c084:	0781      	lsls	r1, r0, #30
 800c086:	bf58      	it	pl
 800c088:	6963      	ldrpl	r3, [r4, #20]
 800c08a:	60a3      	str	r3, [r4, #8]
 800c08c:	e7f4      	b.n	800c078 <__swsetup_r+0xb0>
 800c08e:	2000      	movs	r0, #0
 800c090:	e7f7      	b.n	800c082 <__swsetup_r+0xba>
 800c092:	bf00      	nop
 800c094:	20000180 	.word	0x20000180
 800c098:	0800c704 	.word	0x0800c704
 800c09c:	0800c724 	.word	0x0800c724
 800c0a0:	0800c6e4 	.word	0x0800c6e4

0800c0a4 <__assert_func>:
 800c0a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c0a6:	4614      	mov	r4, r2
 800c0a8:	461a      	mov	r2, r3
 800c0aa:	4b09      	ldr	r3, [pc, #36]	; (800c0d0 <__assert_func+0x2c>)
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	4605      	mov	r5, r0
 800c0b0:	68d8      	ldr	r0, [r3, #12]
 800c0b2:	b14c      	cbz	r4, 800c0c8 <__assert_func+0x24>
 800c0b4:	4b07      	ldr	r3, [pc, #28]	; (800c0d4 <__assert_func+0x30>)
 800c0b6:	9100      	str	r1, [sp, #0]
 800c0b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c0bc:	4906      	ldr	r1, [pc, #24]	; (800c0d8 <__assert_func+0x34>)
 800c0be:	462b      	mov	r3, r5
 800c0c0:	f000 f8e0 	bl	800c284 <fiprintf>
 800c0c4:	f000 f9e3 	bl	800c48e <abort>
 800c0c8:	4b04      	ldr	r3, [pc, #16]	; (800c0dc <__assert_func+0x38>)
 800c0ca:	461c      	mov	r4, r3
 800c0cc:	e7f3      	b.n	800c0b6 <__assert_func+0x12>
 800c0ce:	bf00      	nop
 800c0d0:	20000180 	.word	0x20000180
 800c0d4:	0800c8b5 	.word	0x0800c8b5
 800c0d8:	0800c8c2 	.word	0x0800c8c2
 800c0dc:	0800c8f0 	.word	0x0800c8f0

0800c0e0 <_close_r>:
 800c0e0:	b538      	push	{r3, r4, r5, lr}
 800c0e2:	4d06      	ldr	r5, [pc, #24]	; (800c0fc <_close_r+0x1c>)
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	4604      	mov	r4, r0
 800c0e8:	4608      	mov	r0, r1
 800c0ea:	602b      	str	r3, [r5, #0]
 800c0ec:	f7f5 fc77 	bl	80019de <_close>
 800c0f0:	1c43      	adds	r3, r0, #1
 800c0f2:	d102      	bne.n	800c0fa <_close_r+0x1a>
 800c0f4:	682b      	ldr	r3, [r5, #0]
 800c0f6:	b103      	cbz	r3, 800c0fa <_close_r+0x1a>
 800c0f8:	6023      	str	r3, [r4, #0]
 800c0fa:	bd38      	pop	{r3, r4, r5, pc}
 800c0fc:	20001f74 	.word	0x20001f74

0800c100 <__sflush_r>:
 800c100:	898a      	ldrh	r2, [r1, #12]
 800c102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c106:	4605      	mov	r5, r0
 800c108:	0710      	lsls	r0, r2, #28
 800c10a:	460c      	mov	r4, r1
 800c10c:	d458      	bmi.n	800c1c0 <__sflush_r+0xc0>
 800c10e:	684b      	ldr	r3, [r1, #4]
 800c110:	2b00      	cmp	r3, #0
 800c112:	dc05      	bgt.n	800c120 <__sflush_r+0x20>
 800c114:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c116:	2b00      	cmp	r3, #0
 800c118:	dc02      	bgt.n	800c120 <__sflush_r+0x20>
 800c11a:	2000      	movs	r0, #0
 800c11c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c120:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c122:	2e00      	cmp	r6, #0
 800c124:	d0f9      	beq.n	800c11a <__sflush_r+0x1a>
 800c126:	2300      	movs	r3, #0
 800c128:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c12c:	682f      	ldr	r7, [r5, #0]
 800c12e:	602b      	str	r3, [r5, #0]
 800c130:	d032      	beq.n	800c198 <__sflush_r+0x98>
 800c132:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c134:	89a3      	ldrh	r3, [r4, #12]
 800c136:	075a      	lsls	r2, r3, #29
 800c138:	d505      	bpl.n	800c146 <__sflush_r+0x46>
 800c13a:	6863      	ldr	r3, [r4, #4]
 800c13c:	1ac0      	subs	r0, r0, r3
 800c13e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c140:	b10b      	cbz	r3, 800c146 <__sflush_r+0x46>
 800c142:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c144:	1ac0      	subs	r0, r0, r3
 800c146:	2300      	movs	r3, #0
 800c148:	4602      	mov	r2, r0
 800c14a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c14c:	6a21      	ldr	r1, [r4, #32]
 800c14e:	4628      	mov	r0, r5
 800c150:	47b0      	blx	r6
 800c152:	1c43      	adds	r3, r0, #1
 800c154:	89a3      	ldrh	r3, [r4, #12]
 800c156:	d106      	bne.n	800c166 <__sflush_r+0x66>
 800c158:	6829      	ldr	r1, [r5, #0]
 800c15a:	291d      	cmp	r1, #29
 800c15c:	d82c      	bhi.n	800c1b8 <__sflush_r+0xb8>
 800c15e:	4a2a      	ldr	r2, [pc, #168]	; (800c208 <__sflush_r+0x108>)
 800c160:	40ca      	lsrs	r2, r1
 800c162:	07d6      	lsls	r6, r2, #31
 800c164:	d528      	bpl.n	800c1b8 <__sflush_r+0xb8>
 800c166:	2200      	movs	r2, #0
 800c168:	6062      	str	r2, [r4, #4]
 800c16a:	04d9      	lsls	r1, r3, #19
 800c16c:	6922      	ldr	r2, [r4, #16]
 800c16e:	6022      	str	r2, [r4, #0]
 800c170:	d504      	bpl.n	800c17c <__sflush_r+0x7c>
 800c172:	1c42      	adds	r2, r0, #1
 800c174:	d101      	bne.n	800c17a <__sflush_r+0x7a>
 800c176:	682b      	ldr	r3, [r5, #0]
 800c178:	b903      	cbnz	r3, 800c17c <__sflush_r+0x7c>
 800c17a:	6560      	str	r0, [r4, #84]	; 0x54
 800c17c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c17e:	602f      	str	r7, [r5, #0]
 800c180:	2900      	cmp	r1, #0
 800c182:	d0ca      	beq.n	800c11a <__sflush_r+0x1a>
 800c184:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c188:	4299      	cmp	r1, r3
 800c18a:	d002      	beq.n	800c192 <__sflush_r+0x92>
 800c18c:	4628      	mov	r0, r5
 800c18e:	f7ff fb03 	bl	800b798 <_free_r>
 800c192:	2000      	movs	r0, #0
 800c194:	6360      	str	r0, [r4, #52]	; 0x34
 800c196:	e7c1      	b.n	800c11c <__sflush_r+0x1c>
 800c198:	6a21      	ldr	r1, [r4, #32]
 800c19a:	2301      	movs	r3, #1
 800c19c:	4628      	mov	r0, r5
 800c19e:	47b0      	blx	r6
 800c1a0:	1c41      	adds	r1, r0, #1
 800c1a2:	d1c7      	bne.n	800c134 <__sflush_r+0x34>
 800c1a4:	682b      	ldr	r3, [r5, #0]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d0c4      	beq.n	800c134 <__sflush_r+0x34>
 800c1aa:	2b1d      	cmp	r3, #29
 800c1ac:	d001      	beq.n	800c1b2 <__sflush_r+0xb2>
 800c1ae:	2b16      	cmp	r3, #22
 800c1b0:	d101      	bne.n	800c1b6 <__sflush_r+0xb6>
 800c1b2:	602f      	str	r7, [r5, #0]
 800c1b4:	e7b1      	b.n	800c11a <__sflush_r+0x1a>
 800c1b6:	89a3      	ldrh	r3, [r4, #12]
 800c1b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1bc:	81a3      	strh	r3, [r4, #12]
 800c1be:	e7ad      	b.n	800c11c <__sflush_r+0x1c>
 800c1c0:	690f      	ldr	r7, [r1, #16]
 800c1c2:	2f00      	cmp	r7, #0
 800c1c4:	d0a9      	beq.n	800c11a <__sflush_r+0x1a>
 800c1c6:	0793      	lsls	r3, r2, #30
 800c1c8:	680e      	ldr	r6, [r1, #0]
 800c1ca:	bf08      	it	eq
 800c1cc:	694b      	ldreq	r3, [r1, #20]
 800c1ce:	600f      	str	r7, [r1, #0]
 800c1d0:	bf18      	it	ne
 800c1d2:	2300      	movne	r3, #0
 800c1d4:	eba6 0807 	sub.w	r8, r6, r7
 800c1d8:	608b      	str	r3, [r1, #8]
 800c1da:	f1b8 0f00 	cmp.w	r8, #0
 800c1de:	dd9c      	ble.n	800c11a <__sflush_r+0x1a>
 800c1e0:	6a21      	ldr	r1, [r4, #32]
 800c1e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c1e4:	4643      	mov	r3, r8
 800c1e6:	463a      	mov	r2, r7
 800c1e8:	4628      	mov	r0, r5
 800c1ea:	47b0      	blx	r6
 800c1ec:	2800      	cmp	r0, #0
 800c1ee:	dc06      	bgt.n	800c1fe <__sflush_r+0xfe>
 800c1f0:	89a3      	ldrh	r3, [r4, #12]
 800c1f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1f6:	81a3      	strh	r3, [r4, #12]
 800c1f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c1fc:	e78e      	b.n	800c11c <__sflush_r+0x1c>
 800c1fe:	4407      	add	r7, r0
 800c200:	eba8 0800 	sub.w	r8, r8, r0
 800c204:	e7e9      	b.n	800c1da <__sflush_r+0xda>
 800c206:	bf00      	nop
 800c208:	20400001 	.word	0x20400001

0800c20c <_fflush_r>:
 800c20c:	b538      	push	{r3, r4, r5, lr}
 800c20e:	690b      	ldr	r3, [r1, #16]
 800c210:	4605      	mov	r5, r0
 800c212:	460c      	mov	r4, r1
 800c214:	b913      	cbnz	r3, 800c21c <_fflush_r+0x10>
 800c216:	2500      	movs	r5, #0
 800c218:	4628      	mov	r0, r5
 800c21a:	bd38      	pop	{r3, r4, r5, pc}
 800c21c:	b118      	cbz	r0, 800c226 <_fflush_r+0x1a>
 800c21e:	6983      	ldr	r3, [r0, #24]
 800c220:	b90b      	cbnz	r3, 800c226 <_fflush_r+0x1a>
 800c222:	f7fe fe7d 	bl	800af20 <__sinit>
 800c226:	4b14      	ldr	r3, [pc, #80]	; (800c278 <_fflush_r+0x6c>)
 800c228:	429c      	cmp	r4, r3
 800c22a:	d11b      	bne.n	800c264 <_fflush_r+0x58>
 800c22c:	686c      	ldr	r4, [r5, #4]
 800c22e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d0ef      	beq.n	800c216 <_fflush_r+0xa>
 800c236:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c238:	07d0      	lsls	r0, r2, #31
 800c23a:	d404      	bmi.n	800c246 <_fflush_r+0x3a>
 800c23c:	0599      	lsls	r1, r3, #22
 800c23e:	d402      	bmi.n	800c246 <_fflush_r+0x3a>
 800c240:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c242:	f7fe ff10 	bl	800b066 <__retarget_lock_acquire_recursive>
 800c246:	4628      	mov	r0, r5
 800c248:	4621      	mov	r1, r4
 800c24a:	f7ff ff59 	bl	800c100 <__sflush_r>
 800c24e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c250:	07da      	lsls	r2, r3, #31
 800c252:	4605      	mov	r5, r0
 800c254:	d4e0      	bmi.n	800c218 <_fflush_r+0xc>
 800c256:	89a3      	ldrh	r3, [r4, #12]
 800c258:	059b      	lsls	r3, r3, #22
 800c25a:	d4dd      	bmi.n	800c218 <_fflush_r+0xc>
 800c25c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c25e:	f7fe ff03 	bl	800b068 <__retarget_lock_release_recursive>
 800c262:	e7d9      	b.n	800c218 <_fflush_r+0xc>
 800c264:	4b05      	ldr	r3, [pc, #20]	; (800c27c <_fflush_r+0x70>)
 800c266:	429c      	cmp	r4, r3
 800c268:	d101      	bne.n	800c26e <_fflush_r+0x62>
 800c26a:	68ac      	ldr	r4, [r5, #8]
 800c26c:	e7df      	b.n	800c22e <_fflush_r+0x22>
 800c26e:	4b04      	ldr	r3, [pc, #16]	; (800c280 <_fflush_r+0x74>)
 800c270:	429c      	cmp	r4, r3
 800c272:	bf08      	it	eq
 800c274:	68ec      	ldreq	r4, [r5, #12]
 800c276:	e7da      	b.n	800c22e <_fflush_r+0x22>
 800c278:	0800c704 	.word	0x0800c704
 800c27c:	0800c724 	.word	0x0800c724
 800c280:	0800c6e4 	.word	0x0800c6e4

0800c284 <fiprintf>:
 800c284:	b40e      	push	{r1, r2, r3}
 800c286:	b503      	push	{r0, r1, lr}
 800c288:	4601      	mov	r1, r0
 800c28a:	ab03      	add	r3, sp, #12
 800c28c:	4805      	ldr	r0, [pc, #20]	; (800c2a4 <fiprintf+0x20>)
 800c28e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c292:	6800      	ldr	r0, [r0, #0]
 800c294:	9301      	str	r3, [sp, #4]
 800c296:	f7ff fcaf 	bl	800bbf8 <_vfiprintf_r>
 800c29a:	b002      	add	sp, #8
 800c29c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c2a0:	b003      	add	sp, #12
 800c2a2:	4770      	bx	lr
 800c2a4:	20000180 	.word	0x20000180

0800c2a8 <_lseek_r>:
 800c2a8:	b538      	push	{r3, r4, r5, lr}
 800c2aa:	4d07      	ldr	r5, [pc, #28]	; (800c2c8 <_lseek_r+0x20>)
 800c2ac:	4604      	mov	r4, r0
 800c2ae:	4608      	mov	r0, r1
 800c2b0:	4611      	mov	r1, r2
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	602a      	str	r2, [r5, #0]
 800c2b6:	461a      	mov	r2, r3
 800c2b8:	f7f5 fbb8 	bl	8001a2c <_lseek>
 800c2bc:	1c43      	adds	r3, r0, #1
 800c2be:	d102      	bne.n	800c2c6 <_lseek_r+0x1e>
 800c2c0:	682b      	ldr	r3, [r5, #0]
 800c2c2:	b103      	cbz	r3, 800c2c6 <_lseek_r+0x1e>
 800c2c4:	6023      	str	r3, [r4, #0]
 800c2c6:	bd38      	pop	{r3, r4, r5, pc}
 800c2c8:	20001f74 	.word	0x20001f74

0800c2cc <__swhatbuf_r>:
 800c2cc:	b570      	push	{r4, r5, r6, lr}
 800c2ce:	460e      	mov	r6, r1
 800c2d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2d4:	2900      	cmp	r1, #0
 800c2d6:	b096      	sub	sp, #88	; 0x58
 800c2d8:	4614      	mov	r4, r2
 800c2da:	461d      	mov	r5, r3
 800c2dc:	da07      	bge.n	800c2ee <__swhatbuf_r+0x22>
 800c2de:	2300      	movs	r3, #0
 800c2e0:	602b      	str	r3, [r5, #0]
 800c2e2:	89b3      	ldrh	r3, [r6, #12]
 800c2e4:	061a      	lsls	r2, r3, #24
 800c2e6:	d410      	bmi.n	800c30a <__swhatbuf_r+0x3e>
 800c2e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2ec:	e00e      	b.n	800c30c <__swhatbuf_r+0x40>
 800c2ee:	466a      	mov	r2, sp
 800c2f0:	f000 f8d4 	bl	800c49c <_fstat_r>
 800c2f4:	2800      	cmp	r0, #0
 800c2f6:	dbf2      	blt.n	800c2de <__swhatbuf_r+0x12>
 800c2f8:	9a01      	ldr	r2, [sp, #4]
 800c2fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c2fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c302:	425a      	negs	r2, r3
 800c304:	415a      	adcs	r2, r3
 800c306:	602a      	str	r2, [r5, #0]
 800c308:	e7ee      	b.n	800c2e8 <__swhatbuf_r+0x1c>
 800c30a:	2340      	movs	r3, #64	; 0x40
 800c30c:	2000      	movs	r0, #0
 800c30e:	6023      	str	r3, [r4, #0]
 800c310:	b016      	add	sp, #88	; 0x58
 800c312:	bd70      	pop	{r4, r5, r6, pc}

0800c314 <__smakebuf_r>:
 800c314:	898b      	ldrh	r3, [r1, #12]
 800c316:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c318:	079d      	lsls	r5, r3, #30
 800c31a:	4606      	mov	r6, r0
 800c31c:	460c      	mov	r4, r1
 800c31e:	d507      	bpl.n	800c330 <__smakebuf_r+0x1c>
 800c320:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c324:	6023      	str	r3, [r4, #0]
 800c326:	6123      	str	r3, [r4, #16]
 800c328:	2301      	movs	r3, #1
 800c32a:	6163      	str	r3, [r4, #20]
 800c32c:	b002      	add	sp, #8
 800c32e:	bd70      	pop	{r4, r5, r6, pc}
 800c330:	ab01      	add	r3, sp, #4
 800c332:	466a      	mov	r2, sp
 800c334:	f7ff ffca 	bl	800c2cc <__swhatbuf_r>
 800c338:	9900      	ldr	r1, [sp, #0]
 800c33a:	4605      	mov	r5, r0
 800c33c:	4630      	mov	r0, r6
 800c33e:	f7ff fa7b 	bl	800b838 <_malloc_r>
 800c342:	b948      	cbnz	r0, 800c358 <__smakebuf_r+0x44>
 800c344:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c348:	059a      	lsls	r2, r3, #22
 800c34a:	d4ef      	bmi.n	800c32c <__smakebuf_r+0x18>
 800c34c:	f023 0303 	bic.w	r3, r3, #3
 800c350:	f043 0302 	orr.w	r3, r3, #2
 800c354:	81a3      	strh	r3, [r4, #12]
 800c356:	e7e3      	b.n	800c320 <__smakebuf_r+0xc>
 800c358:	4b0d      	ldr	r3, [pc, #52]	; (800c390 <__smakebuf_r+0x7c>)
 800c35a:	62b3      	str	r3, [r6, #40]	; 0x28
 800c35c:	89a3      	ldrh	r3, [r4, #12]
 800c35e:	6020      	str	r0, [r4, #0]
 800c360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c364:	81a3      	strh	r3, [r4, #12]
 800c366:	9b00      	ldr	r3, [sp, #0]
 800c368:	6163      	str	r3, [r4, #20]
 800c36a:	9b01      	ldr	r3, [sp, #4]
 800c36c:	6120      	str	r0, [r4, #16]
 800c36e:	b15b      	cbz	r3, 800c388 <__smakebuf_r+0x74>
 800c370:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c374:	4630      	mov	r0, r6
 800c376:	f000 f8a3 	bl	800c4c0 <_isatty_r>
 800c37a:	b128      	cbz	r0, 800c388 <__smakebuf_r+0x74>
 800c37c:	89a3      	ldrh	r3, [r4, #12]
 800c37e:	f023 0303 	bic.w	r3, r3, #3
 800c382:	f043 0301 	orr.w	r3, r3, #1
 800c386:	81a3      	strh	r3, [r4, #12]
 800c388:	89a0      	ldrh	r0, [r4, #12]
 800c38a:	4305      	orrs	r5, r0
 800c38c:	81a5      	strh	r5, [r4, #12]
 800c38e:	e7cd      	b.n	800c32c <__smakebuf_r+0x18>
 800c390:	0800aeb9 	.word	0x0800aeb9

0800c394 <__ascii_mbtowc>:
 800c394:	b082      	sub	sp, #8
 800c396:	b901      	cbnz	r1, 800c39a <__ascii_mbtowc+0x6>
 800c398:	a901      	add	r1, sp, #4
 800c39a:	b142      	cbz	r2, 800c3ae <__ascii_mbtowc+0x1a>
 800c39c:	b14b      	cbz	r3, 800c3b2 <__ascii_mbtowc+0x1e>
 800c39e:	7813      	ldrb	r3, [r2, #0]
 800c3a0:	600b      	str	r3, [r1, #0]
 800c3a2:	7812      	ldrb	r2, [r2, #0]
 800c3a4:	1e10      	subs	r0, r2, #0
 800c3a6:	bf18      	it	ne
 800c3a8:	2001      	movne	r0, #1
 800c3aa:	b002      	add	sp, #8
 800c3ac:	4770      	bx	lr
 800c3ae:	4610      	mov	r0, r2
 800c3b0:	e7fb      	b.n	800c3aa <__ascii_mbtowc+0x16>
 800c3b2:	f06f 0001 	mvn.w	r0, #1
 800c3b6:	e7f8      	b.n	800c3aa <__ascii_mbtowc+0x16>

0800c3b8 <memmove>:
 800c3b8:	4288      	cmp	r0, r1
 800c3ba:	b510      	push	{r4, lr}
 800c3bc:	eb01 0402 	add.w	r4, r1, r2
 800c3c0:	d902      	bls.n	800c3c8 <memmove+0x10>
 800c3c2:	4284      	cmp	r4, r0
 800c3c4:	4623      	mov	r3, r4
 800c3c6:	d807      	bhi.n	800c3d8 <memmove+0x20>
 800c3c8:	1e43      	subs	r3, r0, #1
 800c3ca:	42a1      	cmp	r1, r4
 800c3cc:	d008      	beq.n	800c3e0 <memmove+0x28>
 800c3ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c3d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c3d6:	e7f8      	b.n	800c3ca <memmove+0x12>
 800c3d8:	4402      	add	r2, r0
 800c3da:	4601      	mov	r1, r0
 800c3dc:	428a      	cmp	r2, r1
 800c3de:	d100      	bne.n	800c3e2 <memmove+0x2a>
 800c3e0:	bd10      	pop	{r4, pc}
 800c3e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c3e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c3ea:	e7f7      	b.n	800c3dc <memmove+0x24>

0800c3ec <__malloc_lock>:
 800c3ec:	4801      	ldr	r0, [pc, #4]	; (800c3f4 <__malloc_lock+0x8>)
 800c3ee:	f7fe be3a 	b.w	800b066 <__retarget_lock_acquire_recursive>
 800c3f2:	bf00      	nop
 800c3f4:	20001f6c 	.word	0x20001f6c

0800c3f8 <__malloc_unlock>:
 800c3f8:	4801      	ldr	r0, [pc, #4]	; (800c400 <__malloc_unlock+0x8>)
 800c3fa:	f7fe be35 	b.w	800b068 <__retarget_lock_release_recursive>
 800c3fe:	bf00      	nop
 800c400:	20001f6c 	.word	0x20001f6c

0800c404 <_realloc_r>:
 800c404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c406:	4607      	mov	r7, r0
 800c408:	4614      	mov	r4, r2
 800c40a:	460e      	mov	r6, r1
 800c40c:	b921      	cbnz	r1, 800c418 <_realloc_r+0x14>
 800c40e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c412:	4611      	mov	r1, r2
 800c414:	f7ff ba10 	b.w	800b838 <_malloc_r>
 800c418:	b922      	cbnz	r2, 800c424 <_realloc_r+0x20>
 800c41a:	f7ff f9bd 	bl	800b798 <_free_r>
 800c41e:	4625      	mov	r5, r4
 800c420:	4628      	mov	r0, r5
 800c422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c424:	f000 f85c 	bl	800c4e0 <_malloc_usable_size_r>
 800c428:	42a0      	cmp	r0, r4
 800c42a:	d20f      	bcs.n	800c44c <_realloc_r+0x48>
 800c42c:	4621      	mov	r1, r4
 800c42e:	4638      	mov	r0, r7
 800c430:	f7ff fa02 	bl	800b838 <_malloc_r>
 800c434:	4605      	mov	r5, r0
 800c436:	2800      	cmp	r0, #0
 800c438:	d0f2      	beq.n	800c420 <_realloc_r+0x1c>
 800c43a:	4631      	mov	r1, r6
 800c43c:	4622      	mov	r2, r4
 800c43e:	f7fd f9fd 	bl	800983c <memcpy>
 800c442:	4631      	mov	r1, r6
 800c444:	4638      	mov	r0, r7
 800c446:	f7ff f9a7 	bl	800b798 <_free_r>
 800c44a:	e7e9      	b.n	800c420 <_realloc_r+0x1c>
 800c44c:	4635      	mov	r5, r6
 800c44e:	e7e7      	b.n	800c420 <_realloc_r+0x1c>

0800c450 <_read_r>:
 800c450:	b538      	push	{r3, r4, r5, lr}
 800c452:	4d07      	ldr	r5, [pc, #28]	; (800c470 <_read_r+0x20>)
 800c454:	4604      	mov	r4, r0
 800c456:	4608      	mov	r0, r1
 800c458:	4611      	mov	r1, r2
 800c45a:	2200      	movs	r2, #0
 800c45c:	602a      	str	r2, [r5, #0]
 800c45e:	461a      	mov	r2, r3
 800c460:	f7f5 fa84 	bl	800196c <_read>
 800c464:	1c43      	adds	r3, r0, #1
 800c466:	d102      	bne.n	800c46e <_read_r+0x1e>
 800c468:	682b      	ldr	r3, [r5, #0]
 800c46a:	b103      	cbz	r3, 800c46e <_read_r+0x1e>
 800c46c:	6023      	str	r3, [r4, #0]
 800c46e:	bd38      	pop	{r3, r4, r5, pc}
 800c470:	20001f74 	.word	0x20001f74

0800c474 <__ascii_wctomb>:
 800c474:	b149      	cbz	r1, 800c48a <__ascii_wctomb+0x16>
 800c476:	2aff      	cmp	r2, #255	; 0xff
 800c478:	bf85      	ittet	hi
 800c47a:	238a      	movhi	r3, #138	; 0x8a
 800c47c:	6003      	strhi	r3, [r0, #0]
 800c47e:	700a      	strbls	r2, [r1, #0]
 800c480:	f04f 30ff 	movhi.w	r0, #4294967295
 800c484:	bf98      	it	ls
 800c486:	2001      	movls	r0, #1
 800c488:	4770      	bx	lr
 800c48a:	4608      	mov	r0, r1
 800c48c:	4770      	bx	lr

0800c48e <abort>:
 800c48e:	b508      	push	{r3, lr}
 800c490:	2006      	movs	r0, #6
 800c492:	f000 f855 	bl	800c540 <raise>
 800c496:	2001      	movs	r0, #1
 800c498:	f7f5 fa5e 	bl	8001958 <_exit>

0800c49c <_fstat_r>:
 800c49c:	b538      	push	{r3, r4, r5, lr}
 800c49e:	4d07      	ldr	r5, [pc, #28]	; (800c4bc <_fstat_r+0x20>)
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	4604      	mov	r4, r0
 800c4a4:	4608      	mov	r0, r1
 800c4a6:	4611      	mov	r1, r2
 800c4a8:	602b      	str	r3, [r5, #0]
 800c4aa:	f7f5 faa4 	bl	80019f6 <_fstat>
 800c4ae:	1c43      	adds	r3, r0, #1
 800c4b0:	d102      	bne.n	800c4b8 <_fstat_r+0x1c>
 800c4b2:	682b      	ldr	r3, [r5, #0]
 800c4b4:	b103      	cbz	r3, 800c4b8 <_fstat_r+0x1c>
 800c4b6:	6023      	str	r3, [r4, #0]
 800c4b8:	bd38      	pop	{r3, r4, r5, pc}
 800c4ba:	bf00      	nop
 800c4bc:	20001f74 	.word	0x20001f74

0800c4c0 <_isatty_r>:
 800c4c0:	b538      	push	{r3, r4, r5, lr}
 800c4c2:	4d06      	ldr	r5, [pc, #24]	; (800c4dc <_isatty_r+0x1c>)
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	4604      	mov	r4, r0
 800c4c8:	4608      	mov	r0, r1
 800c4ca:	602b      	str	r3, [r5, #0]
 800c4cc:	f7f5 faa3 	bl	8001a16 <_isatty>
 800c4d0:	1c43      	adds	r3, r0, #1
 800c4d2:	d102      	bne.n	800c4da <_isatty_r+0x1a>
 800c4d4:	682b      	ldr	r3, [r5, #0]
 800c4d6:	b103      	cbz	r3, 800c4da <_isatty_r+0x1a>
 800c4d8:	6023      	str	r3, [r4, #0]
 800c4da:	bd38      	pop	{r3, r4, r5, pc}
 800c4dc:	20001f74 	.word	0x20001f74

0800c4e0 <_malloc_usable_size_r>:
 800c4e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4e4:	1f18      	subs	r0, r3, #4
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	bfbc      	itt	lt
 800c4ea:	580b      	ldrlt	r3, [r1, r0]
 800c4ec:	18c0      	addlt	r0, r0, r3
 800c4ee:	4770      	bx	lr

0800c4f0 <_raise_r>:
 800c4f0:	291f      	cmp	r1, #31
 800c4f2:	b538      	push	{r3, r4, r5, lr}
 800c4f4:	4604      	mov	r4, r0
 800c4f6:	460d      	mov	r5, r1
 800c4f8:	d904      	bls.n	800c504 <_raise_r+0x14>
 800c4fa:	2316      	movs	r3, #22
 800c4fc:	6003      	str	r3, [r0, #0]
 800c4fe:	f04f 30ff 	mov.w	r0, #4294967295
 800c502:	bd38      	pop	{r3, r4, r5, pc}
 800c504:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c506:	b112      	cbz	r2, 800c50e <_raise_r+0x1e>
 800c508:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c50c:	b94b      	cbnz	r3, 800c522 <_raise_r+0x32>
 800c50e:	4620      	mov	r0, r4
 800c510:	f000 f830 	bl	800c574 <_getpid_r>
 800c514:	462a      	mov	r2, r5
 800c516:	4601      	mov	r1, r0
 800c518:	4620      	mov	r0, r4
 800c51a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c51e:	f000 b817 	b.w	800c550 <_kill_r>
 800c522:	2b01      	cmp	r3, #1
 800c524:	d00a      	beq.n	800c53c <_raise_r+0x4c>
 800c526:	1c59      	adds	r1, r3, #1
 800c528:	d103      	bne.n	800c532 <_raise_r+0x42>
 800c52a:	2316      	movs	r3, #22
 800c52c:	6003      	str	r3, [r0, #0]
 800c52e:	2001      	movs	r0, #1
 800c530:	e7e7      	b.n	800c502 <_raise_r+0x12>
 800c532:	2400      	movs	r4, #0
 800c534:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c538:	4628      	mov	r0, r5
 800c53a:	4798      	blx	r3
 800c53c:	2000      	movs	r0, #0
 800c53e:	e7e0      	b.n	800c502 <_raise_r+0x12>

0800c540 <raise>:
 800c540:	4b02      	ldr	r3, [pc, #8]	; (800c54c <raise+0xc>)
 800c542:	4601      	mov	r1, r0
 800c544:	6818      	ldr	r0, [r3, #0]
 800c546:	f7ff bfd3 	b.w	800c4f0 <_raise_r>
 800c54a:	bf00      	nop
 800c54c:	20000180 	.word	0x20000180

0800c550 <_kill_r>:
 800c550:	b538      	push	{r3, r4, r5, lr}
 800c552:	4d07      	ldr	r5, [pc, #28]	; (800c570 <_kill_r+0x20>)
 800c554:	2300      	movs	r3, #0
 800c556:	4604      	mov	r4, r0
 800c558:	4608      	mov	r0, r1
 800c55a:	4611      	mov	r1, r2
 800c55c:	602b      	str	r3, [r5, #0]
 800c55e:	f7f5 f9eb 	bl	8001938 <_kill>
 800c562:	1c43      	adds	r3, r0, #1
 800c564:	d102      	bne.n	800c56c <_kill_r+0x1c>
 800c566:	682b      	ldr	r3, [r5, #0]
 800c568:	b103      	cbz	r3, 800c56c <_kill_r+0x1c>
 800c56a:	6023      	str	r3, [r4, #0]
 800c56c:	bd38      	pop	{r3, r4, r5, pc}
 800c56e:	bf00      	nop
 800c570:	20001f74 	.word	0x20001f74

0800c574 <_getpid_r>:
 800c574:	f7f5 b9d8 	b.w	8001928 <_getpid>

0800c578 <_init>:
 800c578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c57a:	bf00      	nop
 800c57c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c57e:	bc08      	pop	{r3}
 800c580:	469e      	mov	lr, r3
 800c582:	4770      	bx	lr

0800c584 <_fini>:
 800c584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c586:	bf00      	nop
 800c588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c58a:	bc08      	pop	{r3}
 800c58c:	469e      	mov	lr, r3
 800c58e:	4770      	bx	lr
