
my_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4f8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000474  0800c698  0800c698  0001c698  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb0c  0800cb0c  00020350  2**0
                  CONTENTS
  4 .ARM          00000008  0800cb0c  0800cb0c  0001cb0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb14  0800cb14  00020350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb14  0800cb14  0001cb14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cb18  0800cb18  0001cb18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  0800cb1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c28  20000350  0800ce6c  00020350  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f78  0800ce6c  00021f78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020350  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f7a1  00000000  00000000  00020380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000443b  00000000  00000000  0003fb21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c8  00000000  00000000  00043f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001238  00000000  00000000  00045328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001abd1  00000000  00000000  00046560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b3f5  00000000  00000000  00061131  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fed3  00000000  00000000  0007c526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010c3f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062e4  00000000  00000000  0010c44c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000350 	.word	0x20000350
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c680 	.word	0x0800c680

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000354 	.word	0x20000354
 80001dc:	0800c680 	.word	0x0800c680

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <MPU6050_init>:
#include "MPU6050_mylib.h"

int8_t MPU6050_init(){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af04      	add	r7, sp, #16
	uint8_t Data_conf = 0, acc_2g = 0x00, gyro_2g=0x00;
 8000f56:	2300      	movs	r3, #0
 8000f58:	71fb      	strb	r3, [r7, #7]
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	71bb      	strb	r3, [r7, #6]
 8000f5e:	2300      	movs	r3, #0
 8000f60:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(&hi2c2, MPU6050_RA_ADRR, MPU6050_RA_WHO_AM_I, 1, &Data_conf, 1, 100);
 8000f62:	2364      	movs	r3, #100	; 0x64
 8000f64:	9302      	str	r3, [sp, #8]
 8000f66:	2301      	movs	r3, #1
 8000f68:	9301      	str	r3, [sp, #4]
 8000f6a:	1dfb      	adds	r3, r7, #7
 8000f6c:	9300      	str	r3, [sp, #0]
 8000f6e:	2301      	movs	r3, #1
 8000f70:	2275      	movs	r2, #117	; 0x75
 8000f72:	21d0      	movs	r1, #208	; 0xd0
 8000f74:	4812      	ldr	r0, [pc, #72]	; (8000fc0 <MPU6050_init+0x70>)
 8000f76:	f001 fd2b 	bl	80029d0 <HAL_I2C_Mem_Read>
	if(Data_conf != MPU6050_WHO_AM_I_DEF_VAL){
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	2b71      	cmp	r3, #113	; 0x71
 8000f7e:	d002      	beq.n	8000f86 <MPU6050_init+0x36>
		return Data_conf;
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	b25b      	sxtb	r3, r3
 8000f84:	e018      	b.n	8000fb8 <MPU6050_init+0x68>
	}
	//ustawienie czujnika na skalach +-2g i +-250 deg/s2
	HAL_I2C_Mem_Write(&hi2c2, MPU6050_RA_ADRR, MPU6050_RA_ACCEL_CONFIG, 1, &acc_2g, 1, 100);
 8000f86:	2364      	movs	r3, #100	; 0x64
 8000f88:	9302      	str	r3, [sp, #8]
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	9301      	str	r3, [sp, #4]
 8000f8e:	1dbb      	adds	r3, r7, #6
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	2301      	movs	r3, #1
 8000f94:	221c      	movs	r2, #28
 8000f96:	21d0      	movs	r1, #208	; 0xd0
 8000f98:	4809      	ldr	r0, [pc, #36]	; (8000fc0 <MPU6050_init+0x70>)
 8000f9a:	f001 fc1f 	bl	80027dc <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c2, MPU6050_RA_ADRR, MPU6050_RA_GYRO_CONFIG, 1, &gyro_2g, 1, 100);
 8000f9e:	2364      	movs	r3, #100	; 0x64
 8000fa0:	9302      	str	r3, [sp, #8]
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	9301      	str	r3, [sp, #4]
 8000fa6:	1d7b      	adds	r3, r7, #5
 8000fa8:	9300      	str	r3, [sp, #0]
 8000faa:	2301      	movs	r3, #1
 8000fac:	221b      	movs	r2, #27
 8000fae:	21d0      	movs	r1, #208	; 0xd0
 8000fb0:	4803      	ldr	r0, [pc, #12]	; (8000fc0 <MPU6050_init+0x70>)
 8000fb2:	f001 fc13 	bl	80027dc <HAL_I2C_Mem_Write>
	return 0;
 8000fb6:	2300      	movs	r3, #0
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	2000059c 	.word	0x2000059c
 8000fc4:	00000000 	.word	0x00000000

08000fc8 <MPU6050_measure>:

	Axis = ((Data[0] << 8) | Data[1]);
	return ((float)Axis*250.0)/(float) INT16_MAX;
}

void MPU6050_measure(MPU6050_data* mes){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08a      	sub	sp, #40	; 0x28
 8000fcc:	af04      	add	r7, sp, #16
 8000fce:	6078      	str	r0, [r7, #4]
	uint8_t Data [14];//bufor danych
	int16_t Axis;//zmienna pomocnicza do konwersji odczytu na wartości fizyczne

	HAL_I2C_Mem_Read(&hi2c2, MPU6050_RA_ADRR, MPU6050_ACCEL_XOUT_H_16, 1, &Data, 14, 100);//odczyt danych z czujnika
 8000fd0:	2364      	movs	r3, #100	; 0x64
 8000fd2:	9302      	str	r3, [sp, #8]
 8000fd4:	230e      	movs	r3, #14
 8000fd6:	9301      	str	r3, [sp, #4]
 8000fd8:	f107 0308 	add.w	r3, r7, #8
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	2301      	movs	r3, #1
 8000fe0:	22bb      	movs	r2, #187	; 0xbb
 8000fe2:	21d0      	movs	r1, #208	; 0xd0
 8000fe4:	4892      	ldr	r0, [pc, #584]	; (8001230 <MPU6050_measure+0x268>)
 8000fe6:	f001 fcf3 	bl	80029d0 <HAL_I2C_Mem_Read>

	//konwersja danych z akcelerometru
	Axis = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	82fb      	strh	r3, [r7, #22]
	Axis = ((Data[0] << 8) | Data[1]);//konwersja odczytu do liczby 16-to bitowej
 8000fee:	7a3b      	ldrb	r3, [r7, #8]
 8000ff0:	021b      	lsls	r3, r3, #8
 8000ff2:	b21a      	sxth	r2, r3
 8000ff4:	7a7b      	ldrb	r3, [r7, #9]
 8000ff6:	b21b      	sxth	r3, r3
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	82fb      	strh	r3, [r7, #22]
	mes->acc_x = ((float)Axis*2.0*GRAVITY)/(float)INT16_MAX;//przeliczenie odczytu na wartości fizyczne
 8000ffc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001000:	ee07 3a90 	vmov	s15, r3
 8001004:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001008:	ee17 0a90 	vmov	r0, s15
 800100c:	f7ff faa4 	bl	8000558 <__aeabi_f2d>
 8001010:	4602      	mov	r2, r0
 8001012:	460b      	mov	r3, r1
 8001014:	f7ff f942 	bl	800029c <__adddf3>
 8001018:	4602      	mov	r2, r0
 800101a:	460b      	mov	r3, r1
 800101c:	4610      	mov	r0, r2
 800101e:	4619      	mov	r1, r3
 8001020:	a37f      	add	r3, pc, #508	; (adr r3, 8001220 <MPU6050_measure+0x258>)
 8001022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001026:	f7ff faef 	bl	8000608 <__aeabi_dmul>
 800102a:	4602      	mov	r2, r0
 800102c:	460b      	mov	r3, r1
 800102e:	4610      	mov	r0, r2
 8001030:	4619      	mov	r1, r3
 8001032:	a37d      	add	r3, pc, #500	; (adr r3, 8001228 <MPU6050_measure+0x260>)
 8001034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001038:	f7ff fc10 	bl	800085c <__aeabi_ddiv>
 800103c:	4602      	mov	r2, r0
 800103e:	460b      	mov	r3, r1
 8001040:	4610      	mov	r0, r2
 8001042:	4619      	mov	r1, r3
 8001044:	f7ff fdb8 	bl	8000bb8 <__aeabi_d2f>
 8001048:	4602      	mov	r2, r0
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	601a      	str	r2, [r3, #0]

	Axis = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	82fb      	strh	r3, [r7, #22]
	Axis = ((Data[2] << 8) | Data[3]);
 8001052:	7abb      	ldrb	r3, [r7, #10]
 8001054:	021b      	lsls	r3, r3, #8
 8001056:	b21a      	sxth	r2, r3
 8001058:	7afb      	ldrb	r3, [r7, #11]
 800105a:	b21b      	sxth	r3, r3
 800105c:	4313      	orrs	r3, r2
 800105e:	82fb      	strh	r3, [r7, #22]
	mes->acc_y = ((float)Axis*2.0*GRAVITY)/(float)INT16_MAX;
 8001060:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001064:	ee07 3a90 	vmov	s15, r3
 8001068:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800106c:	ee17 0a90 	vmov	r0, s15
 8001070:	f7ff fa72 	bl	8000558 <__aeabi_f2d>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	f7ff f910 	bl	800029c <__adddf3>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	4610      	mov	r0, r2
 8001082:	4619      	mov	r1, r3
 8001084:	a366      	add	r3, pc, #408	; (adr r3, 8001220 <MPU6050_measure+0x258>)
 8001086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108a:	f7ff fabd 	bl	8000608 <__aeabi_dmul>
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	4610      	mov	r0, r2
 8001094:	4619      	mov	r1, r3
 8001096:	a364      	add	r3, pc, #400	; (adr r3, 8001228 <MPU6050_measure+0x260>)
 8001098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109c:	f7ff fbde 	bl	800085c <__aeabi_ddiv>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	4610      	mov	r0, r2
 80010a6:	4619      	mov	r1, r3
 80010a8:	f7ff fd86 	bl	8000bb8 <__aeabi_d2f>
 80010ac:	4602      	mov	r2, r0
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	605a      	str	r2, [r3, #4]

	Axis = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	82fb      	strh	r3, [r7, #22]
	Axis = ((Data[4] << 8) | Data[5]);
 80010b6:	7b3b      	ldrb	r3, [r7, #12]
 80010b8:	021b      	lsls	r3, r3, #8
 80010ba:	b21a      	sxth	r2, r3
 80010bc:	7b7b      	ldrb	r3, [r7, #13]
 80010be:	b21b      	sxth	r3, r3
 80010c0:	4313      	orrs	r3, r2
 80010c2:	82fb      	strh	r3, [r7, #22]
	mes->acc_z = ((float)Axis*2.0*GRAVITY)/(float)INT16_MAX;
 80010c4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80010c8:	ee07 3a90 	vmov	s15, r3
 80010cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010d0:	ee17 0a90 	vmov	r0, s15
 80010d4:	f7ff fa40 	bl	8000558 <__aeabi_f2d>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	f7ff f8de 	bl	800029c <__adddf3>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	4610      	mov	r0, r2
 80010e6:	4619      	mov	r1, r3
 80010e8:	a34d      	add	r3, pc, #308	; (adr r3, 8001220 <MPU6050_measure+0x258>)
 80010ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ee:	f7ff fa8b 	bl	8000608 <__aeabi_dmul>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	4610      	mov	r0, r2
 80010f8:	4619      	mov	r1, r3
 80010fa:	a34b      	add	r3, pc, #300	; (adr r3, 8001228 <MPU6050_measure+0x260>)
 80010fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001100:	f7ff fbac 	bl	800085c <__aeabi_ddiv>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
 8001108:	4610      	mov	r0, r2
 800110a:	4619      	mov	r1, r3
 800110c:	f7ff fd54 	bl	8000bb8 <__aeabi_d2f>
 8001110:	4602      	mov	r2, r0
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	609a      	str	r2, [r3, #8]

	//konwersja danych z żyroskopu
	Axis = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	82fb      	strh	r3, [r7, #22]
	Axis = ((Data[8] << 8) | Data[9]);
 800111a:	7c3b      	ldrb	r3, [r7, #16]
 800111c:	021b      	lsls	r3, r3, #8
 800111e:	b21a      	sxth	r2, r3
 8001120:	7c7b      	ldrb	r3, [r7, #17]
 8001122:	b21b      	sxth	r3, r3
 8001124:	4313      	orrs	r3, r2
 8001126:	82fb      	strh	r3, [r7, #22]
	mes->gyro_x = ((float)Axis*250.0)/(float) INT16_MAX;
 8001128:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800112c:	ee07 3a90 	vmov	s15, r3
 8001130:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001134:	ee17 0a90 	vmov	r0, s15
 8001138:	f7ff fa0e 	bl	8000558 <__aeabi_f2d>
 800113c:	f04f 0200 	mov.w	r2, #0
 8001140:	4b3c      	ldr	r3, [pc, #240]	; (8001234 <MPU6050_measure+0x26c>)
 8001142:	f7ff fa61 	bl	8000608 <__aeabi_dmul>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	4610      	mov	r0, r2
 800114c:	4619      	mov	r1, r3
 800114e:	a336      	add	r3, pc, #216	; (adr r3, 8001228 <MPU6050_measure+0x260>)
 8001150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001154:	f7ff fb82 	bl	800085c <__aeabi_ddiv>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	4610      	mov	r0, r2
 800115e:	4619      	mov	r1, r3
 8001160:	f7ff fd2a 	bl	8000bb8 <__aeabi_d2f>
 8001164:	4602      	mov	r2, r0
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	60da      	str	r2, [r3, #12]

	Axis = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	82fb      	strh	r3, [r7, #22]
	Axis = ((Data[10] << 8) | Data[11]);
 800116e:	7cbb      	ldrb	r3, [r7, #18]
 8001170:	021b      	lsls	r3, r3, #8
 8001172:	b21a      	sxth	r2, r3
 8001174:	7cfb      	ldrb	r3, [r7, #19]
 8001176:	b21b      	sxth	r3, r3
 8001178:	4313      	orrs	r3, r2
 800117a:	82fb      	strh	r3, [r7, #22]
	mes->gyro_y = ((float)Axis*250.0)/(float) INT16_MAX;
 800117c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001188:	ee17 0a90 	vmov	r0, s15
 800118c:	f7ff f9e4 	bl	8000558 <__aeabi_f2d>
 8001190:	f04f 0200 	mov.w	r2, #0
 8001194:	4b27      	ldr	r3, [pc, #156]	; (8001234 <MPU6050_measure+0x26c>)
 8001196:	f7ff fa37 	bl	8000608 <__aeabi_dmul>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	4610      	mov	r0, r2
 80011a0:	4619      	mov	r1, r3
 80011a2:	a321      	add	r3, pc, #132	; (adr r3, 8001228 <MPU6050_measure+0x260>)
 80011a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a8:	f7ff fb58 	bl	800085c <__aeabi_ddiv>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4610      	mov	r0, r2
 80011b2:	4619      	mov	r1, r3
 80011b4:	f7ff fd00 	bl	8000bb8 <__aeabi_d2f>
 80011b8:	4602      	mov	r2, r0
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	611a      	str	r2, [r3, #16]

	Axis = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	82fb      	strh	r3, [r7, #22]
	Axis = ((Data[12] << 8) | Data[13]);
 80011c2:	7d3b      	ldrb	r3, [r7, #20]
 80011c4:	021b      	lsls	r3, r3, #8
 80011c6:	b21a      	sxth	r2, r3
 80011c8:	7d7b      	ldrb	r3, [r7, #21]
 80011ca:	b21b      	sxth	r3, r3
 80011cc:	4313      	orrs	r3, r2
 80011ce:	82fb      	strh	r3, [r7, #22]
	mes->gyro_z = ((float)Axis*250.0)/(float) INT16_MAX;
 80011d0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011d4:	ee07 3a90 	vmov	s15, r3
 80011d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011dc:	ee17 0a90 	vmov	r0, s15
 80011e0:	f7ff f9ba 	bl	8000558 <__aeabi_f2d>
 80011e4:	f04f 0200 	mov.w	r2, #0
 80011e8:	4b12      	ldr	r3, [pc, #72]	; (8001234 <MPU6050_measure+0x26c>)
 80011ea:	f7ff fa0d 	bl	8000608 <__aeabi_dmul>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	4610      	mov	r0, r2
 80011f4:	4619      	mov	r1, r3
 80011f6:	a30c      	add	r3, pc, #48	; (adr r3, 8001228 <MPU6050_measure+0x260>)
 80011f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fc:	f7ff fb2e 	bl	800085c <__aeabi_ddiv>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	4610      	mov	r0, r2
 8001206:	4619      	mov	r1, r3
 8001208:	f7ff fcd6 	bl	8000bb8 <__aeabi_d2f>
 800120c:	4602      	mov	r2, r0
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	615a      	str	r2, [r3, #20]
}
 8001212:	bf00      	nop
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	f3af 8000 	nop.w
 8001220:	51eb851f 	.word	0x51eb851f
 8001224:	40239eb8 	.word	0x40239eb8
 8001228:	00000000 	.word	0x00000000
 800122c:	40dfffc0 	.word	0x40dfffc0
 8001230:	2000059c 	.word	0x2000059c
 8001234:	406f4000 	.word	0x406f4000

08001238 <MX_GPIO_Init>:
        * EXTI
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08c      	sub	sp, #48	; 0x30
 800123c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123e:	f107 031c 	add.w	r3, r7, #28
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
 800124c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	61bb      	str	r3, [r7, #24]
 8001252:	4b6a      	ldr	r3, [pc, #424]	; (80013fc <MX_GPIO_Init+0x1c4>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a69      	ldr	r2, [pc, #420]	; (80013fc <MX_GPIO_Init+0x1c4>)
 8001258:	f043 0310 	orr.w	r3, r3, #16
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b67      	ldr	r3, [pc, #412]	; (80013fc <MX_GPIO_Init+0x1c4>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0310 	and.w	r3, r3, #16
 8001266:	61bb      	str	r3, [r7, #24]
 8001268:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	617b      	str	r3, [r7, #20]
 800126e:	4b63      	ldr	r3, [pc, #396]	; (80013fc <MX_GPIO_Init+0x1c4>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a62      	ldr	r2, [pc, #392]	; (80013fc <MX_GPIO_Init+0x1c4>)
 8001274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b60      	ldr	r3, [pc, #384]	; (80013fc <MX_GPIO_Init+0x1c4>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001282:	617b      	str	r3, [r7, #20]
 8001284:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	613b      	str	r3, [r7, #16]
 800128a:	4b5c      	ldr	r3, [pc, #368]	; (80013fc <MX_GPIO_Init+0x1c4>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a5b      	ldr	r2, [pc, #364]	; (80013fc <MX_GPIO_Init+0x1c4>)
 8001290:	f043 0304 	orr.w	r3, r3, #4
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b59      	ldr	r3, [pc, #356]	; (80013fc <MX_GPIO_Init+0x1c4>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0304 	and.w	r3, r3, #4
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	4b55      	ldr	r3, [pc, #340]	; (80013fc <MX_GPIO_Init+0x1c4>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a54      	ldr	r2, [pc, #336]	; (80013fc <MX_GPIO_Init+0x1c4>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b52      	ldr	r3, [pc, #328]	; (80013fc <MX_GPIO_Init+0x1c4>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	4b4e      	ldr	r3, [pc, #312]	; (80013fc <MX_GPIO_Init+0x1c4>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a4d      	ldr	r2, [pc, #308]	; (80013fc <MX_GPIO_Init+0x1c4>)
 80012c8:	f043 0302 	orr.w	r3, r3, #2
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b4b      	ldr	r3, [pc, #300]	; (80013fc <MX_GPIO_Init+0x1c4>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	4b47      	ldr	r3, [pc, #284]	; (80013fc <MX_GPIO_Init+0x1c4>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a46      	ldr	r2, [pc, #280]	; (80013fc <MX_GPIO_Init+0x1c4>)
 80012e4:	f043 0308 	orr.w	r3, r3, #8
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b44      	ldr	r3, [pc, #272]	; (80013fc <MX_GPIO_Init+0x1c4>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0308 	and.w	r3, r3, #8
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2108      	movs	r1, #8
 80012fa:	4841      	ldr	r0, [pc, #260]	; (8001400 <MX_GPIO_Init+0x1c8>)
 80012fc:	f001 f8d2 	bl	80024a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001300:	2201      	movs	r2, #1
 8001302:	2101      	movs	r1, #1
 8001304:	483f      	ldr	r0, [pc, #252]	; (8001404 <MX_GPIO_Init+0x1cc>)
 8001306:	f001 f8cd 	bl	80024a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CSNpin_Pin|CEpin_Pin, GPIO_PIN_RESET);
 800130a:	2200      	movs	r2, #0
 800130c:	2130      	movs	r1, #48	; 0x30
 800130e:	483d      	ldr	r0, [pc, #244]	; (8001404 <MX_GPIO_Init+0x1cc>)
 8001310:	f001 f8c8 	bl	80024a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD2_Pin|LD3_Pin|LD5_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 8001314:	2200      	movs	r2, #0
 8001316:	f247 0110 	movw	r1, #28688	; 0x7010
 800131a:	483b      	ldr	r0, [pc, #236]	; (8001408 <MX_GPIO_Init+0x1d0>)
 800131c:	f001 f8c2 	bl	80024a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8001320:	2304      	movs	r3, #4
 8001322:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001324:	2300      	movs	r3, #0
 8001326:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 800132c:	f107 031c 	add.w	r3, r7, #28
 8001330:	4619      	mov	r1, r3
 8001332:	4833      	ldr	r0, [pc, #204]	; (8001400 <MX_GPIO_Init+0x1c8>)
 8001334:	f000 ff32 	bl	800219c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001338:	2308      	movs	r3, #8
 800133a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133c:	2301      	movs	r3, #1
 800133e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001344:	2300      	movs	r3, #0
 8001346:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001348:	f107 031c 	add.w	r3, r7, #28
 800134c:	4619      	mov	r1, r3
 800134e:	482c      	ldr	r0, [pc, #176]	; (8001400 <MX_GPIO_Init+0x1c8>)
 8001350:	f000 ff24 	bl	800219c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8001354:	2332      	movs	r3, #50	; 0x32
 8001356:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001358:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800135c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001362:	f107 031c 	add.w	r3, r7, #28
 8001366:	4619      	mov	r1, r3
 8001368:	4825      	ldr	r0, [pc, #148]	; (8001400 <MX_GPIO_Init+0x1c8>)
 800136a:	f000 ff17 	bl	800219c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|CSNpin_Pin|CEpin_Pin;
 800136e:	2331      	movs	r3, #49	; 0x31
 8001370:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001372:	2301      	movs	r3, #1
 8001374:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137a:	2300      	movs	r3, #0
 800137c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800137e:	f107 031c 	add.w	r3, r7, #28
 8001382:	4619      	mov	r1, r3
 8001384:	481f      	ldr	r0, [pc, #124]	; (8001404 <MX_GPIO_Init+0x1cc>)
 8001386:	f000 ff09 	bl	800219c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800138a:	2301      	movs	r3, #1
 800138c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800138e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001392:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001398:	f107 031c 	add.w	r3, r7, #28
 800139c:	4619      	mov	r1, r3
 800139e:	481b      	ldr	r0, [pc, #108]	; (800140c <MX_GPIO_Init+0x1d4>)
 80013a0:	f000 fefc 	bl	800219c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD5_Pin|Audio_RST_Pin;
 80013a4:	f247 0310 	movw	r3, #28688	; 0x7010
 80013a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013aa:	2301      	movs	r3, #1
 80013ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2300      	movs	r3, #0
 80013b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013b6:	f107 031c 	add.w	r3, r7, #28
 80013ba:	4619      	mov	r1, r3
 80013bc:	4812      	ldr	r0, [pc, #72]	; (8001408 <MX_GPIO_Init+0x1d0>)
 80013be:	f000 feed 	bl	800219c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80013c2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80013c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013c8:	2312      	movs	r3, #18
 80013ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013cc:	2301      	movs	r3, #1
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d0:	2300      	movs	r3, #0
 80013d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013d4:	2304      	movs	r3, #4
 80013d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d8:	f107 031c 	add.w	r3, r7, #28
 80013dc:	4619      	mov	r1, r3
 80013de:	480c      	ldr	r0, [pc, #48]	; (8001410 <MX_GPIO_Init+0x1d8>)
 80013e0:	f000 fedc 	bl	800219c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80013e4:	2200      	movs	r2, #0
 80013e6:	2100      	movs	r1, #0
 80013e8:	2006      	movs	r0, #6
 80013ea:	f000 fe0e 	bl	800200a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80013ee:	2006      	movs	r0, #6
 80013f0:	f000 fe27 	bl	8002042 <HAL_NVIC_EnableIRQ>

}
 80013f4:	bf00      	nop
 80013f6:	3730      	adds	r7, #48	; 0x30
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40023800 	.word	0x40023800
 8001400:	40021000 	.word	0x40021000
 8001404:	40020800 	.word	0x40020800
 8001408:	40020c00 	.word	0x40020c00
 800140c:	40020000 	.word	0x40020000
 8001410:	40020400 	.word	0x40020400

08001414 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <MX_I2C2_Init+0x50>)
 800141a:	4a13      	ldr	r2, [pc, #76]	; (8001468 <MX_I2C2_Init+0x54>)
 800141c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800141e:	4b11      	ldr	r3, [pc, #68]	; (8001464 <MX_I2C2_Init+0x50>)
 8001420:	4a12      	ldr	r2, [pc, #72]	; (800146c <MX_I2C2_Init+0x58>)
 8001422:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001424:	4b0f      	ldr	r3, [pc, #60]	; (8001464 <MX_I2C2_Init+0x50>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800142a:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <MX_I2C2_Init+0x50>)
 800142c:	2200      	movs	r2, #0
 800142e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001430:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <MX_I2C2_Init+0x50>)
 8001432:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001436:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001438:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <MX_I2C2_Init+0x50>)
 800143a:	2200      	movs	r2, #0
 800143c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800143e:	4b09      	ldr	r3, [pc, #36]	; (8001464 <MX_I2C2_Init+0x50>)
 8001440:	2200      	movs	r2, #0
 8001442:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001444:	4b07      	ldr	r3, [pc, #28]	; (8001464 <MX_I2C2_Init+0x50>)
 8001446:	2200      	movs	r2, #0
 8001448:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800144a:	4b06      	ldr	r3, [pc, #24]	; (8001464 <MX_I2C2_Init+0x50>)
 800144c:	2200      	movs	r2, #0
 800144e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001450:	4804      	ldr	r0, [pc, #16]	; (8001464 <MX_I2C2_Init+0x50>)
 8001452:	f001 f87f 	bl	8002554 <HAL_I2C_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800145c:	f000 f9f6 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}
 8001464:	2000059c 	.word	0x2000059c
 8001468:	40005800 	.word	0x40005800
 800146c:	000186a0 	.word	0x000186a0

08001470 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	; 0x28
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a21      	ldr	r2, [pc, #132]	; (8001514 <HAL_I2C_MspInit+0xa4>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d13c      	bne.n	800150c <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	4b20      	ldr	r3, [pc, #128]	; (8001518 <HAL_I2C_MspInit+0xa8>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a1f      	ldr	r2, [pc, #124]	; (8001518 <HAL_I2C_MspInit+0xa8>)
 800149c:	f043 0302 	orr.w	r3, r3, #2
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b1d      	ldr	r3, [pc, #116]	; (8001518 <HAL_I2C_MspInit+0xa8>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	613b      	str	r3, [r7, #16]
 80014ac:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014b4:	2312      	movs	r3, #18
 80014b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014bc:	2303      	movs	r3, #3
 80014be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014c0:	2304      	movs	r3, #4
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	4619      	mov	r1, r3
 80014ca:	4814      	ldr	r0, [pc, #80]	; (800151c <HAL_I2C_MspInit+0xac>)
 80014cc:	f000 fe66 	bl	800219c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014d0:	2308      	movs	r3, #8
 80014d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014d4:	2312      	movs	r3, #18
 80014d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014dc:	2303      	movs	r3, #3
 80014de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80014e0:	2309      	movs	r3, #9
 80014e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	4619      	mov	r1, r3
 80014ea:	480c      	ldr	r0, [pc, #48]	; (800151c <HAL_I2C_MspInit+0xac>)
 80014ec:	f000 fe56 	bl	800219c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014f0:	2300      	movs	r3, #0
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	4b08      	ldr	r3, [pc, #32]	; (8001518 <HAL_I2C_MspInit+0xa8>)
 80014f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f8:	4a07      	ldr	r2, [pc, #28]	; (8001518 <HAL_I2C_MspInit+0xa8>)
 80014fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001500:	4b05      	ldr	r3, [pc, #20]	; (8001518 <HAL_I2C_MspInit+0xa8>)
 8001502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001504:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800150c:	bf00      	nop
 800150e:	3728      	adds	r7, #40	; 0x28
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40005800 	.word	0x40005800
 8001518:	40023800 	.word	0x40023800
 800151c:	40020400 	.word	0x40020400

08001520 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001520:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001524:	b0aa      	sub	sp, #168	; 0xa8
 8001526:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001528:	f000 fbfe 	bl	8001d28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800152c:	f000 f926 	bl	800177c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001530:	f7ff fe82 	bl	8001238 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8001534:	f007 fcbe 	bl	8008eb4 <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 8001538:	f000 fb52 	bl	8001be0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800153c:	f000 f98c 	bl	8001858 <MX_SPI1_Init>
  MX_I2C2_Init();
 8001540:	f7ff ff68 	bl	8001414 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  uint8_t DataToSend[40] = {0}; // Tablica zawierajaca dane do wyslania
 8001544:	2300      	movs	r3, #0
 8001546:	647b      	str	r3, [r7, #68]	; 0x44
 8001548:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800154c:	2224      	movs	r2, #36	; 0x24
 800154e:	2100      	movs	r1, #0
 8001550:	4618      	mov	r0, r3
 8001552:	f008 fa05 	bl	8009960 <memset>
  uint8_t MessageLength = 0; // Zawiera dlugosc wysylanej wiadomosci
 8001556:	2300      	movs	r3, #0
 8001558:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
  const uint8_t mes_count = 10;
 800155c:	230a      	movs	r3, #10
 800155e:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a

  //struktura przechowująca dane odczytane z mierników
  MPU6050_data sensor_data, tmp_data;
  sensor_data.acc_x = 0;
 8001562:	f04f 0300 	mov.w	r3, #0
 8001566:	62fb      	str	r3, [r7, #44]	; 0x2c
  sensor_data.acc_y = 0;
 8001568:	f04f 0300 	mov.w	r3, #0
 800156c:	633b      	str	r3, [r7, #48]	; 0x30
  sensor_data.acc_z = 0;
 800156e:	f04f 0300 	mov.w	r3, #0
 8001572:	637b      	str	r3, [r7, #52]	; 0x34
  sensor_data.gyro_x = 0;
 8001574:	f04f 0300 	mov.w	r3, #0
 8001578:	63bb      	str	r3, [r7, #56]	; 0x38
  sensor_data.gyro_y = 0;
 800157a:	f04f 0300 	mov.w	r3, #0
 800157e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sensor_data.gyro_z = 0;
 8001580:	f04f 0300 	mov.w	r3, #0
 8001584:	643b      	str	r3, [r7, #64]	; 0x40

  //częstotliwość pomiarów w Hz, domyślnie 5; wartość można edytować z poziomu komputera
  uint32_t measurementsFreq = 2, prevTime = HAL_GetTick(), recVal=0;
 8001586:	2302      	movs	r3, #2
 8001588:	677b      	str	r3, [r7, #116]	; 0x74
 800158a:	f000 fc33 	bl	8001df4 <HAL_GetTick>
 800158e:	6738      	str	r0, [r7, #112]	; 0x70
 8001590:	2300      	movs	r3, #0
 8001592:	66fb      	str	r3, [r7, #108]	; 0x6c


  //inicjalizacja czujnika MPU6050
  if(MPU6050_init()!=0){
 8001594:	f7ff fcdc 	bl	8000f50 <MPU6050_init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d009      	beq.n	80015b2 <main+0x92>
	  while(1){
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800159e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015a2:	4874      	ldr	r0, [pc, #464]	; (8001774 <main+0x254>)
 80015a4:	f000 ff97 	bl	80024d6 <HAL_GPIO_TogglePin>
		  HAL_Delay(500);
 80015a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015ac:	f000 fc2e 	bl	8001e0c <HAL_Delay>
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80015b0:	e7f5      	b.n	800159e <main+0x7e>
//	if(ReceivedDataFlag == 1){
//
//		ReceivedDataFlag = 0;
//
//		if(*ReceivedData == *message) {
	  for(int i=0;i<mes_count;i++){
 80015b2:	2300      	movs	r3, #0
 80015b4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80015b6:	e03a      	b.n	800162e <main+0x10e>
		  MPU6050_measure(&tmp_data);
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff fd03 	bl	8000fc8 <MPU6050_measure>
		  sensor_data.acc_x += tmp_data.acc_x;
 80015c2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80015c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80015ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ce:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		  sensor_data.acc_y += tmp_data.acc_y;
 80015d2:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80015d6:	edd7 7a06 	vldr	s15, [r7, #24]
 80015da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015de:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		  sensor_data.acc_z += tmp_data.acc_z;
 80015e2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80015e6:	edd7 7a07 	vldr	s15, [r7, #28]
 80015ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ee:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		  sensor_data.gyro_x += tmp_data.gyro_x;
 80015f2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80015f6:	edd7 7a08 	vldr	s15, [r7, #32]
 80015fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015fe:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		  sensor_data.gyro_y += tmp_data.gyro_y;
 8001602:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001606:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800160a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800160e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		  sensor_data.gyro_z += tmp_data.gyro_z;
 8001612:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001616:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800161a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800161e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		  HAL_Delay(5);
 8001622:	2005      	movs	r0, #5
 8001624:	f000 fbf2 	bl	8001e0c <HAL_Delay>
	  for(int i=0;i<mes_count;i++){
 8001628:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800162a:	3301      	adds	r3, #1
 800162c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800162e:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8001632:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001634:	429a      	cmp	r2, r3
 8001636:	dbbf      	blt.n	80015b8 <main+0x98>
	  }
	  	  	  sensor_data.acc_x /= (float)mes_count;
 8001638:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800163c:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8001640:	ee07 3a90 	vmov	s15, r3
 8001644:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001648:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800164c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	  		  sensor_data.acc_y /= (float)mes_count;
 8001650:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8001654:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8001658:	ee07 3a90 	vmov	s15, r3
 800165c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001660:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001664:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	  		  sensor_data.acc_z /= (float)mes_count;
 8001668:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800166c:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8001670:	ee07 3a90 	vmov	s15, r3
 8001674:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001678:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800167c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	  		  sensor_data.gyro_x /= (float)mes_count;
 8001680:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8001684:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8001688:	ee07 3a90 	vmov	s15, r3
 800168c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001690:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001694:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	  		  sensor_data.gyro_y /= (float)mes_count;
 8001698:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 800169c:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 80016a0:	ee07 3a90 	vmov	s15, r3
 80016a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016ac:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	  		  sensor_data.gyro_z /= (float)mes_count;
 80016b0:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80016b4:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 80016b8:	ee07 3a90 	vmov	s15, r3
 80016bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016c4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
//	  HAL_Delay(500);
//	  		MPU6050_measure(&sensor_data);
			MessageLength = sprintf(DataToSend, "X:%0.2f Y:%0.2f Z:%0.2f X:%0.2f Y:%0.2f Z:%0.2f \n\r", sensor_data.acc_x,sensor_data.acc_y,sensor_data.acc_z,sensor_data.gyro_x,sensor_data.gyro_y,sensor_data.gyro_z);
 80016c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7fe ff44 	bl	8000558 <__aeabi_f2d>
 80016d0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80016d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7fe ff3e 	bl	8000558 <__aeabi_f2d>
 80016dc:	4604      	mov	r4, r0
 80016de:	460d      	mov	r5, r1
 80016e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7fe ff38 	bl	8000558 <__aeabi_f2d>
 80016e8:	4680      	mov	r8, r0
 80016ea:	4689      	mov	r9, r1
 80016ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7fe ff32 	bl	8000558 <__aeabi_f2d>
 80016f4:	4682      	mov	sl, r0
 80016f6:	468b      	mov	fp, r1
 80016f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7fe ff2c 	bl	8000558 <__aeabi_f2d>
 8001700:	e9c7 0100 	strd	r0, r1, [r7]
 8001704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001706:	4618      	mov	r0, r3
 8001708:	f7fe ff26 	bl	8000558 <__aeabi_f2d>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8001714:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001718:	ed97 7b00 	vldr	d7, [r7]
 800171c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001720:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001724:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001728:	e9cd 4500 	strd	r4, r5, [sp]
 800172c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001730:	4911      	ldr	r1, [pc, #68]	; (8001778 <main+0x258>)
 8001732:	f008 fd87 	bl	800a244 <siprintf>
 8001736:	4603      	mov	r3, r0
 8001738:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

			CDC_Transmit_FS(DataToSend, MessageLength);
 800173c:	f897 207b 	ldrb.w	r2, [r7, #123]	; 0x7b
 8001740:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001744:	4611      	mov	r1, r2
 8001746:	4618      	mov	r0, r3
 8001748:	f007 fc72 	bl	8009030 <CDC_Transmit_FS>

			  sensor_data.acc_x = 0;
 800174c:	f04f 0300 	mov.w	r3, #0
 8001750:	62fb      	str	r3, [r7, #44]	; 0x2c
			  sensor_data.acc_y = 0;
 8001752:	f04f 0300 	mov.w	r3, #0
 8001756:	633b      	str	r3, [r7, #48]	; 0x30
			  sensor_data.acc_z = 0;
 8001758:	f04f 0300 	mov.w	r3, #0
 800175c:	637b      	str	r3, [r7, #52]	; 0x34
			  sensor_data.gyro_x = 0;
 800175e:	f04f 0300 	mov.w	r3, #0
 8001762:	63bb      	str	r3, [r7, #56]	; 0x38
			  sensor_data.gyro_y = 0;
 8001764:	f04f 0300 	mov.w	r3, #0
 8001768:	63fb      	str	r3, [r7, #60]	; 0x3c
			  sensor_data.gyro_z = 0;
 800176a:	f04f 0300 	mov.w	r3, #0
 800176e:	643b      	str	r3, [r7, #64]	; 0x40
  {
 8001770:	e71f      	b.n	80015b2 <main+0x92>
 8001772:	bf00      	nop
 8001774:	40020c00 	.word	0x40020c00
 8001778:	0800c698 	.word	0x0800c698

0800177c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b094      	sub	sp, #80	; 0x50
 8001780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001782:	f107 0320 	add.w	r3, r7, #32
 8001786:	2230      	movs	r2, #48	; 0x30
 8001788:	2100      	movs	r1, #0
 800178a:	4618      	mov	r0, r3
 800178c:	f008 f8e8 	bl	8009960 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001790:	f107 030c 	add.w	r3, r7, #12
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a0:	2300      	movs	r3, #0
 80017a2:	60bb      	str	r3, [r7, #8]
 80017a4:	4b27      	ldr	r3, [pc, #156]	; (8001844 <SystemClock_Config+0xc8>)
 80017a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a8:	4a26      	ldr	r2, [pc, #152]	; (8001844 <SystemClock_Config+0xc8>)
 80017aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ae:	6413      	str	r3, [r2, #64]	; 0x40
 80017b0:	4b24      	ldr	r3, [pc, #144]	; (8001844 <SystemClock_Config+0xc8>)
 80017b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b8:	60bb      	str	r3, [r7, #8]
 80017ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017bc:	2300      	movs	r3, #0
 80017be:	607b      	str	r3, [r7, #4]
 80017c0:	4b21      	ldr	r3, [pc, #132]	; (8001848 <SystemClock_Config+0xcc>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a20      	ldr	r2, [pc, #128]	; (8001848 <SystemClock_Config+0xcc>)
 80017c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017ca:	6013      	str	r3, [r2, #0]
 80017cc:	4b1e      	ldr	r3, [pc, #120]	; (8001848 <SystemClock_Config+0xcc>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017d4:	607b      	str	r3, [r7, #4]
 80017d6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017d8:	2301      	movs	r3, #1
 80017da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017e2:	2302      	movs	r3, #2
 80017e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80017ec:	2304      	movs	r3, #4
 80017ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80017f0:	2348      	movs	r3, #72	; 0x48
 80017f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017f4:	2302      	movs	r3, #2
 80017f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80017f8:	2303      	movs	r3, #3
 80017fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017fc:	f107 0320 	add.w	r3, r7, #32
 8001800:	4618      	mov	r0, r3
 8001802:	f002 ffe9 	bl	80047d8 <HAL_RCC_OscConfig>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800180c:	f000 f81e 	bl	800184c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001810:	230f      	movs	r3, #15
 8001812:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001814:	2302      	movs	r3, #2
 8001816:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001818:	2300      	movs	r3, #0
 800181a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800181c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001820:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001822:	2300      	movs	r3, #0
 8001824:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001826:	f107 030c 	add.w	r3, r7, #12
 800182a:	2102      	movs	r1, #2
 800182c:	4618      	mov	r0, r3
 800182e:	f003 fa4b 	bl	8004cc8 <HAL_RCC_ClockConfig>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001838:	f000 f808 	bl	800184c <Error_Handler>
  }
}
 800183c:	bf00      	nop
 800183e:	3750      	adds	r7, #80	; 0x50
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40023800 	.word	0x40023800
 8001848:	40007000 	.word	0x40007000

0800184c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001850:	b672      	cpsid	i
}
 8001852:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001854:	e7fe      	b.n	8001854 <Error_Handler+0x8>
	...

08001858 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800185c:	4b17      	ldr	r3, [pc, #92]	; (80018bc <MX_SPI1_Init+0x64>)
 800185e:	4a18      	ldr	r2, [pc, #96]	; (80018c0 <MX_SPI1_Init+0x68>)
 8001860:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001862:	4b16      	ldr	r3, [pc, #88]	; (80018bc <MX_SPI1_Init+0x64>)
 8001864:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001868:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800186a:	4b14      	ldr	r3, [pc, #80]	; (80018bc <MX_SPI1_Init+0x64>)
 800186c:	2200      	movs	r2, #0
 800186e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001870:	4b12      	ldr	r3, [pc, #72]	; (80018bc <MX_SPI1_Init+0x64>)
 8001872:	2200      	movs	r2, #0
 8001874:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001876:	4b11      	ldr	r3, [pc, #68]	; (80018bc <MX_SPI1_Init+0x64>)
 8001878:	2200      	movs	r2, #0
 800187a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800187c:	4b0f      	ldr	r3, [pc, #60]	; (80018bc <MX_SPI1_Init+0x64>)
 800187e:	2200      	movs	r2, #0
 8001880:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001882:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <MX_SPI1_Init+0x64>)
 8001884:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001888:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800188a:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <MX_SPI1_Init+0x64>)
 800188c:	2220      	movs	r2, #32
 800188e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001890:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <MX_SPI1_Init+0x64>)
 8001892:	2200      	movs	r2, #0
 8001894:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001896:	4b09      	ldr	r3, [pc, #36]	; (80018bc <MX_SPI1_Init+0x64>)
 8001898:	2200      	movs	r2, #0
 800189a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800189c:	4b07      	ldr	r3, [pc, #28]	; (80018bc <MX_SPI1_Init+0x64>)
 800189e:	2200      	movs	r2, #0
 80018a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80018a2:	4b06      	ldr	r3, [pc, #24]	; (80018bc <MX_SPI1_Init+0x64>)
 80018a4:	220a      	movs	r2, #10
 80018a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018a8:	4804      	ldr	r0, [pc, #16]	; (80018bc <MX_SPI1_Init+0x64>)
 80018aa:	f003 fc09 	bl	80050c0 <HAL_SPI_Init>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80018b4:	f7ff ffca 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018b8:	bf00      	nop
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	200005f0 	.word	0x200005f0
 80018c0:	40013000 	.word	0x40013000

080018c4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b08a      	sub	sp, #40	; 0x28
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018cc:	f107 0314 	add.w	r3, r7, #20
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a19      	ldr	r2, [pc, #100]	; (8001948 <HAL_SPI_MspInit+0x84>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d12b      	bne.n	800193e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	613b      	str	r3, [r7, #16]
 80018ea:	4b18      	ldr	r3, [pc, #96]	; (800194c <HAL_SPI_MspInit+0x88>)
 80018ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ee:	4a17      	ldr	r2, [pc, #92]	; (800194c <HAL_SPI_MspInit+0x88>)
 80018f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018f4:	6453      	str	r3, [r2, #68]	; 0x44
 80018f6:	4b15      	ldr	r3, [pc, #84]	; (800194c <HAL_SPI_MspInit+0x88>)
 80018f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018fe:	613b      	str	r3, [r7, #16]
 8001900:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	4b11      	ldr	r3, [pc, #68]	; (800194c <HAL_SPI_MspInit+0x88>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	4a10      	ldr	r2, [pc, #64]	; (800194c <HAL_SPI_MspInit+0x88>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	6313      	str	r3, [r2, #48]	; 0x30
 8001912:	4b0e      	ldr	r3, [pc, #56]	; (800194c <HAL_SPI_MspInit+0x88>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800191e:	23e0      	movs	r3, #224	; 0xe0
 8001920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001922:	2302      	movs	r3, #2
 8001924:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192a:	2303      	movs	r3, #3
 800192c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800192e:	2305      	movs	r3, #5
 8001930:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001932:	f107 0314 	add.w	r3, r7, #20
 8001936:	4619      	mov	r1, r3
 8001938:	4805      	ldr	r0, [pc, #20]	; (8001950 <HAL_SPI_MspInit+0x8c>)
 800193a:	f000 fc2f 	bl	800219c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800193e:	bf00      	nop
 8001940:	3728      	adds	r7, #40	; 0x28
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40013000 	.word	0x40013000
 800194c:	40023800 	.word	0x40023800
 8001950:	40020000 	.word	0x40020000

08001954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	607b      	str	r3, [r7, #4]
 800195e:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <HAL_MspInit+0x4c>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	4a0f      	ldr	r2, [pc, #60]	; (80019a0 <HAL_MspInit+0x4c>)
 8001964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001968:	6453      	str	r3, [r2, #68]	; 0x44
 800196a:	4b0d      	ldr	r3, [pc, #52]	; (80019a0 <HAL_MspInit+0x4c>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001972:	607b      	str	r3, [r7, #4]
 8001974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	603b      	str	r3, [r7, #0]
 800197a:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <HAL_MspInit+0x4c>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	4a08      	ldr	r2, [pc, #32]	; (80019a0 <HAL_MspInit+0x4c>)
 8001980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001984:	6413      	str	r3, [r2, #64]	; 0x40
 8001986:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <HAL_MspInit+0x4c>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198e:	603b      	str	r3, [r7, #0]
 8001990:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001992:	2007      	movs	r0, #7
 8001994:	f000 fb2e 	bl	8001ff4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001998:	bf00      	nop
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40023800 	.word	0x40023800

080019a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <NMI_Handler+0x4>

080019aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ae:	e7fe      	b.n	80019ae <HardFault_Handler+0x4>

080019b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b4:	e7fe      	b.n	80019b4 <MemManage_Handler+0x4>

080019b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ba:	e7fe      	b.n	80019ba <BusFault_Handler+0x4>

080019bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c0:	e7fe      	b.n	80019c0 <UsageFault_Handler+0x4>

080019c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019f0:	f000 f9ec 	bl	8001dcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019f4:	bf00      	nop
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PH0_OSC_IN_Pin);
 80019fc:	2001      	movs	r0, #1
 80019fe:	f000 fd85 	bl	800250c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
	...

08001a08 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a0c:	4802      	ldr	r0, [pc, #8]	; (8001a18 <USART2_IRQHandler+0x10>)
 8001a0e:	f003 fc2d 	bl	800526c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000648 	.word	0x20000648

08001a1c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001a20:	4802      	ldr	r0, [pc, #8]	; (8001a2c <OTG_FS_IRQHandler+0x10>)
 8001a22:	f001 fea6 	bl	8003772 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20001b60 	.word	0x20001b60

08001a30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
	return 1;
 8001a34:	2301      	movs	r3, #1
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <_kill>:

int _kill(int pid, int sig)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a4a:	f007 ff51 	bl	80098f0 <__errno>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2216      	movs	r2, #22
 8001a52:	601a      	str	r2, [r3, #0]
	return -1;
 8001a54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <_exit>:

void _exit (int status)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a68:	f04f 31ff 	mov.w	r1, #4294967295
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7ff ffe7 	bl	8001a40 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a72:	e7fe      	b.n	8001a72 <_exit+0x12>

08001a74 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]
 8001a84:	e00a      	b.n	8001a9c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a86:	f3af 8000 	nop.w
 8001a8a:	4601      	mov	r1, r0
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	1c5a      	adds	r2, r3, #1
 8001a90:	60ba      	str	r2, [r7, #8]
 8001a92:	b2ca      	uxtb	r2, r1
 8001a94:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	697a      	ldr	r2, [r7, #20]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	dbf0      	blt.n	8001a86 <_read+0x12>
	}

return len;
 8001aa4:	687b      	ldr	r3, [r7, #4]
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b086      	sub	sp, #24
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	60f8      	str	r0, [r7, #12]
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]
 8001abe:	e009      	b.n	8001ad4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	1c5a      	adds	r2, r3, #1
 8001ac4:	60ba      	str	r2, [r7, #8]
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	617b      	str	r3, [r7, #20]
 8001ad4:	697a      	ldr	r2, [r7, #20]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	dbf1      	blt.n	8001ac0 <_write+0x12>
	}

	return len;
 8001adc:	687b      	ldr	r3, [r7, #4]
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3718      	adds	r7, #24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <_close>:

int _close(int file)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b083      	sub	sp, #12
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
	return -1;
 8001aee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
 8001b06:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b0e:	605a      	str	r2, [r3, #4]
	return 0;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <_isatty>:

int _isatty(int file)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
	return 1;
 8001b26:	2301      	movs	r3, #1
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
	return 0;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3714      	adds	r7, #20
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
	...

08001b50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b58:	4a14      	ldr	r2, [pc, #80]	; (8001bac <_sbrk+0x5c>)
 8001b5a:	4b15      	ldr	r3, [pc, #84]	; (8001bb0 <_sbrk+0x60>)
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b64:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <_sbrk+0x64>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d102      	bne.n	8001b72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b6c:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <_sbrk+0x64>)
 8001b6e:	4a12      	ldr	r2, [pc, #72]	; (8001bb8 <_sbrk+0x68>)
 8001b70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b72:	4b10      	ldr	r3, [pc, #64]	; (8001bb4 <_sbrk+0x64>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4413      	add	r3, r2
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d207      	bcs.n	8001b90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b80:	f007 feb6 	bl	80098f0 <__errno>
 8001b84:	4603      	mov	r3, r0
 8001b86:	220c      	movs	r2, #12
 8001b88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b8e:	e009      	b.n	8001ba4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b90:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <_sbrk+0x64>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b96:	4b07      	ldr	r3, [pc, #28]	; (8001bb4 <_sbrk+0x64>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	4a05      	ldr	r2, [pc, #20]	; (8001bb4 <_sbrk+0x64>)
 8001ba0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3718      	adds	r7, #24
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20020000 	.word	0x20020000
 8001bb0:	00000400 	.word	0x00000400
 8001bb4:	2000036c 	.word	0x2000036c
 8001bb8:	20001f78 	.word	0x20001f78

08001bbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bc0:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <SystemInit+0x20>)
 8001bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bc6:	4a05      	ldr	r2, [pc, #20]	; (8001bdc <SystemInit+0x20>)
 8001bc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001be4:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <MX_USART2_UART_Init+0x4c>)
 8001be6:	4a12      	ldr	r2, [pc, #72]	; (8001c30 <MX_USART2_UART_Init+0x50>)
 8001be8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bea:	4b10      	ldr	r3, [pc, #64]	; (8001c2c <MX_USART2_UART_Init+0x4c>)
 8001bec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bf0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bf2:	4b0e      	ldr	r3, [pc, #56]	; (8001c2c <MX_USART2_UART_Init+0x4c>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <MX_USART2_UART_Init+0x4c>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bfe:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <MX_USART2_UART_Init+0x4c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c04:	4b09      	ldr	r3, [pc, #36]	; (8001c2c <MX_USART2_UART_Init+0x4c>)
 8001c06:	220c      	movs	r2, #12
 8001c08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c0a:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <MX_USART2_UART_Init+0x4c>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c10:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <MX_USART2_UART_Init+0x4c>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c16:	4805      	ldr	r0, [pc, #20]	; (8001c2c <MX_USART2_UART_Init+0x4c>)
 8001c18:	f003 fadb 	bl	80051d2 <HAL_UART_Init>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c22:	f7ff fe13 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000648 	.word	0x20000648
 8001c30:	40004400 	.word	0x40004400

08001c34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08a      	sub	sp, #40	; 0x28
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3c:	f107 0314 	add.w	r3, r7, #20
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a1d      	ldr	r2, [pc, #116]	; (8001cc8 <HAL_UART_MspInit+0x94>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d133      	bne.n	8001cbe <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	613b      	str	r3, [r7, #16]
 8001c5a:	4b1c      	ldr	r3, [pc, #112]	; (8001ccc <HAL_UART_MspInit+0x98>)
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	4a1b      	ldr	r2, [pc, #108]	; (8001ccc <HAL_UART_MspInit+0x98>)
 8001c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c64:	6413      	str	r3, [r2, #64]	; 0x40
 8001c66:	4b19      	ldr	r3, [pc, #100]	; (8001ccc <HAL_UART_MspInit+0x98>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6e:	613b      	str	r3, [r7, #16]
 8001c70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	4b15      	ldr	r3, [pc, #84]	; (8001ccc <HAL_UART_MspInit+0x98>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	4a14      	ldr	r2, [pc, #80]	; (8001ccc <HAL_UART_MspInit+0x98>)
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	6313      	str	r3, [r2, #48]	; 0x30
 8001c82:	4b12      	ldr	r3, [pc, #72]	; (8001ccc <HAL_UART_MspInit+0x98>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c8e:	230c      	movs	r3, #12
 8001c90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c92:	2302      	movs	r3, #2
 8001c94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c9e:	2307      	movs	r3, #7
 8001ca0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca2:	f107 0314 	add.w	r3, r7, #20
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4809      	ldr	r0, [pc, #36]	; (8001cd0 <HAL_UART_MspInit+0x9c>)
 8001caa:	f000 fa77 	bl	800219c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	2026      	movs	r0, #38	; 0x26
 8001cb4:	f000 f9a9 	bl	800200a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001cb8:	2026      	movs	r0, #38	; 0x26
 8001cba:	f000 f9c2 	bl	8002042 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001cbe:	bf00      	nop
 8001cc0:	3728      	adds	r7, #40	; 0x28
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40004400 	.word	0x40004400
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	40020000 	.word	0x40020000

08001cd4 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:   ldr   sp, =_estack    		 /* set stack pointer */
 8001cd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cd8:	480d      	ldr	r0, [pc, #52]	; (8001d10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cda:	490e      	ldr	r1, [pc, #56]	; (8001d14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cdc:	4a0e      	ldr	r2, [pc, #56]	; (8001d18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ce0:	e002      	b.n	8001ce8 <LoopCopyDataInit>

08001ce2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ce2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ce4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ce6:	3304      	adds	r3, #4

08001ce8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ce8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cec:	d3f9      	bcc.n	8001ce2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cee:	4a0b      	ldr	r2, [pc, #44]	; (8001d1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001cf0:	4c0b      	ldr	r4, [pc, #44]	; (8001d20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cf4:	e001      	b.n	8001cfa <LoopFillZerobss>

08001cf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cf8:	3204      	adds	r2, #4

08001cfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cfc:	d3fb      	bcc.n	8001cf6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001cfe:	f7ff ff5d 	bl	8001bbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d02:	f007 fdfb 	bl	80098fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d06:	f7ff fc0b 	bl	8001520 <main>
  bx  lr    
 8001d0a:	4770      	bx	lr
Reset_Handler:   ldr   sp, =_estack    		 /* set stack pointer */
 8001d0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d14:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 8001d18:	0800cb1c 	.word	0x0800cb1c
  ldr r2, =_sbss
 8001d1c:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 8001d20:	20001f78 	.word	0x20001f78

08001d24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d24:	e7fe      	b.n	8001d24 <ADC_IRQHandler>
	...

08001d28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d2c:	4b0e      	ldr	r3, [pc, #56]	; (8001d68 <HAL_Init+0x40>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a0d      	ldr	r2, [pc, #52]	; (8001d68 <HAL_Init+0x40>)
 8001d32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d38:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <HAL_Init+0x40>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a0a      	ldr	r2, [pc, #40]	; (8001d68 <HAL_Init+0x40>)
 8001d3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d44:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <HAL_Init+0x40>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a07      	ldr	r2, [pc, #28]	; (8001d68 <HAL_Init+0x40>)
 8001d4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d50:	2003      	movs	r0, #3
 8001d52:	f000 f94f 	bl	8001ff4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d56:	2000      	movs	r0, #0
 8001d58:	f000 f808 	bl	8001d6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d5c:	f7ff fdfa 	bl	8001954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40023c00 	.word	0x40023c00

08001d6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d74:	4b12      	ldr	r3, [pc, #72]	; (8001dc0 <HAL_InitTick+0x54>)
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <HAL_InitTick+0x58>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f000 f967 	bl	800205e <HAL_SYSTICK_Config>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e00e      	b.n	8001db8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b0f      	cmp	r3, #15
 8001d9e:	d80a      	bhi.n	8001db6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001da0:	2200      	movs	r2, #0
 8001da2:	6879      	ldr	r1, [r7, #4]
 8001da4:	f04f 30ff 	mov.w	r0, #4294967295
 8001da8:	f000 f92f 	bl	800200a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dac:	4a06      	ldr	r2, [pc, #24]	; (8001dc8 <HAL_InitTick+0x5c>)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001db2:	2300      	movs	r3, #0
 8001db4:	e000      	b.n	8001db8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	20000000 	.word	0x20000000
 8001dc4:	20000008 	.word	0x20000008
 8001dc8:	20000004 	.word	0x20000004

08001dcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dd0:	4b06      	ldr	r3, [pc, #24]	; (8001dec <HAL_IncTick+0x20>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <HAL_IncTick+0x24>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4413      	add	r3, r2
 8001ddc:	4a04      	ldr	r2, [pc, #16]	; (8001df0 <HAL_IncTick+0x24>)
 8001dde:	6013      	str	r3, [r2, #0]
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	20000008 	.word	0x20000008
 8001df0:	2000068c 	.word	0x2000068c

08001df4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  return uwTick;
 8001df8:	4b03      	ldr	r3, [pc, #12]	; (8001e08 <HAL_GetTick+0x14>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	2000068c 	.word	0x2000068c

08001e0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e14:	f7ff ffee 	bl	8001df4 <HAL_GetTick>
 8001e18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e24:	d005      	beq.n	8001e32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e26:	4b0a      	ldr	r3, [pc, #40]	; (8001e50 <HAL_Delay+0x44>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	4413      	add	r3, r2
 8001e30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e32:	bf00      	nop
 8001e34:	f7ff ffde 	bl	8001df4 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d8f7      	bhi.n	8001e34 <HAL_Delay+0x28>
  {
  }
}
 8001e44:	bf00      	nop
 8001e46:	bf00      	nop
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000008 	.word	0x20000008

08001e54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e64:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <__NVIC_SetPriorityGrouping+0x44>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e6a:	68ba      	ldr	r2, [r7, #8]
 8001e6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e70:	4013      	ands	r3, r2
 8001e72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e86:	4a04      	ldr	r2, [pc, #16]	; (8001e98 <__NVIC_SetPriorityGrouping+0x44>)
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	60d3      	str	r3, [r2, #12]
}
 8001e8c:	bf00      	nop
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	e000ed00 	.word	0xe000ed00

08001e9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ea0:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	0a1b      	lsrs	r3, r3, #8
 8001ea6:	f003 0307 	and.w	r3, r3, #7
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	e000ed00 	.word	0xe000ed00

08001eb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	db0b      	blt.n	8001ee2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eca:	79fb      	ldrb	r3, [r7, #7]
 8001ecc:	f003 021f 	and.w	r2, r3, #31
 8001ed0:	4907      	ldr	r1, [pc, #28]	; (8001ef0 <__NVIC_EnableIRQ+0x38>)
 8001ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed6:	095b      	lsrs	r3, r3, #5
 8001ed8:	2001      	movs	r0, #1
 8001eda:	fa00 f202 	lsl.w	r2, r0, r2
 8001ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	e000e100 	.word	0xe000e100

08001ef4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	6039      	str	r1, [r7, #0]
 8001efe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	db0a      	blt.n	8001f1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	490c      	ldr	r1, [pc, #48]	; (8001f40 <__NVIC_SetPriority+0x4c>)
 8001f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f12:	0112      	lsls	r2, r2, #4
 8001f14:	b2d2      	uxtb	r2, r2
 8001f16:	440b      	add	r3, r1
 8001f18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f1c:	e00a      	b.n	8001f34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	4908      	ldr	r1, [pc, #32]	; (8001f44 <__NVIC_SetPriority+0x50>)
 8001f24:	79fb      	ldrb	r3, [r7, #7]
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	3b04      	subs	r3, #4
 8001f2c:	0112      	lsls	r2, r2, #4
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	440b      	add	r3, r1
 8001f32:	761a      	strb	r2, [r3, #24]
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	e000e100 	.word	0xe000e100
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b089      	sub	sp, #36	; 0x24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f1c3 0307 	rsb	r3, r3, #7
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	bf28      	it	cs
 8001f66:	2304      	movcs	r3, #4
 8001f68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	2b06      	cmp	r3, #6
 8001f70:	d902      	bls.n	8001f78 <NVIC_EncodePriority+0x30>
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	3b03      	subs	r3, #3
 8001f76:	e000      	b.n	8001f7a <NVIC_EncodePriority+0x32>
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43da      	mvns	r2, r3
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	401a      	ands	r2, r3
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f90:	f04f 31ff 	mov.w	r1, #4294967295
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9a:	43d9      	mvns	r1, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa0:	4313      	orrs	r3, r2
         );
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3724      	adds	r7, #36	; 0x24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
	...

08001fb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fc0:	d301      	bcc.n	8001fc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e00f      	b.n	8001fe6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fc6:	4a0a      	ldr	r2, [pc, #40]	; (8001ff0 <SysTick_Config+0x40>)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fce:	210f      	movs	r1, #15
 8001fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd4:	f7ff ff8e 	bl	8001ef4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fd8:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <SysTick_Config+0x40>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fde:	4b04      	ldr	r3, [pc, #16]	; (8001ff0 <SysTick_Config+0x40>)
 8001fe0:	2207      	movs	r2, #7
 8001fe2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	e000e010 	.word	0xe000e010

08001ff4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7ff ff29 	bl	8001e54 <__NVIC_SetPriorityGrouping>
}
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800200a:	b580      	push	{r7, lr}
 800200c:	b086      	sub	sp, #24
 800200e:	af00      	add	r7, sp, #0
 8002010:	4603      	mov	r3, r0
 8002012:	60b9      	str	r1, [r7, #8]
 8002014:	607a      	str	r2, [r7, #4]
 8002016:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002018:	2300      	movs	r3, #0
 800201a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800201c:	f7ff ff3e 	bl	8001e9c <__NVIC_GetPriorityGrouping>
 8002020:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	68b9      	ldr	r1, [r7, #8]
 8002026:	6978      	ldr	r0, [r7, #20]
 8002028:	f7ff ff8e 	bl	8001f48 <NVIC_EncodePriority>
 800202c:	4602      	mov	r2, r0
 800202e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002032:	4611      	mov	r1, r2
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff ff5d 	bl	8001ef4 <__NVIC_SetPriority>
}
 800203a:	bf00      	nop
 800203c:	3718      	adds	r7, #24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b082      	sub	sp, #8
 8002046:	af00      	add	r7, sp, #0
 8002048:	4603      	mov	r3, r0
 800204a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800204c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff ff31 	bl	8001eb8 <__NVIC_EnableIRQ>
}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7ff ffa2 	bl	8001fb0 <SysTick_Config>
 800206c:	4603      	mov	r3, r0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b084      	sub	sp, #16
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002082:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002084:	f7ff feb6 	bl	8001df4 <HAL_GetTick>
 8002088:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d008      	beq.n	80020a8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2280      	movs	r2, #128	; 0x80
 800209a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e052      	b.n	800214e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 0216 	bic.w	r2, r2, #22
 80020b6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	695a      	ldr	r2, [r3, #20]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020c6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d103      	bne.n	80020d8 <HAL_DMA_Abort+0x62>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d007      	beq.n	80020e8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 0208 	bic.w	r2, r2, #8
 80020e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f022 0201 	bic.w	r2, r2, #1
 80020f6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020f8:	e013      	b.n	8002122 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020fa:	f7ff fe7b 	bl	8001df4 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b05      	cmp	r3, #5
 8002106:	d90c      	bls.n	8002122 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2220      	movs	r2, #32
 800210c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2203      	movs	r2, #3
 8002112:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e015      	b.n	800214e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1e4      	bne.n	80020fa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002134:	223f      	movs	r2, #63	; 0x3f
 8002136:	409a      	lsls	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002156:	b480      	push	{r7}
 8002158:	b083      	sub	sp, #12
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d004      	beq.n	8002174 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2280      	movs	r2, #128	; 0x80
 800216e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e00c      	b.n	800218e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2205      	movs	r2, #5
 8002178:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f022 0201 	bic.w	r2, r2, #1
 800218a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
	...

0800219c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800219c:	b480      	push	{r7}
 800219e:	b089      	sub	sp, #36	; 0x24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021a6:	2300      	movs	r3, #0
 80021a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021b2:	2300      	movs	r3, #0
 80021b4:	61fb      	str	r3, [r7, #28]
 80021b6:	e159      	b.n	800246c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021b8:	2201      	movs	r2, #1
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	4013      	ands	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	f040 8148 	bne.w	8002466 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f003 0303 	and.w	r3, r3, #3
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d005      	beq.n	80021ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d130      	bne.n	8002250 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	2203      	movs	r2, #3
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	43db      	mvns	r3, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4013      	ands	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	68da      	ldr	r2, [r3, #12]
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4313      	orrs	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002224:	2201      	movs	r2, #1
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	43db      	mvns	r3, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4013      	ands	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	f003 0201 	and.w	r2, r3, #1
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4313      	orrs	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 0303 	and.w	r3, r3, #3
 8002258:	2b03      	cmp	r3, #3
 800225a:	d017      	beq.n	800228c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	2203      	movs	r2, #3
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4313      	orrs	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f003 0303 	and.w	r3, r3, #3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d123      	bne.n	80022e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	08da      	lsrs	r2, r3, #3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3208      	adds	r2, #8
 80022a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	220f      	movs	r2, #15
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	43db      	mvns	r3, r3
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4013      	ands	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	691a      	ldr	r2, [r3, #16]
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	08da      	lsrs	r2, r3, #3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	3208      	adds	r2, #8
 80022da:	69b9      	ldr	r1, [r7, #24]
 80022dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	2203      	movs	r2, #3
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4013      	ands	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 0203 	and.w	r2, r3, #3
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 80a2 	beq.w	8002466 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	4b57      	ldr	r3, [pc, #348]	; (8002484 <HAL_GPIO_Init+0x2e8>)
 8002328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232a:	4a56      	ldr	r2, [pc, #344]	; (8002484 <HAL_GPIO_Init+0x2e8>)
 800232c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002330:	6453      	str	r3, [r2, #68]	; 0x44
 8002332:	4b54      	ldr	r3, [pc, #336]	; (8002484 <HAL_GPIO_Init+0x2e8>)
 8002334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002336:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800233e:	4a52      	ldr	r2, [pc, #328]	; (8002488 <HAL_GPIO_Init+0x2ec>)
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	089b      	lsrs	r3, r3, #2
 8002344:	3302      	adds	r3, #2
 8002346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800234a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	f003 0303 	and.w	r3, r3, #3
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	220f      	movs	r2, #15
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4013      	ands	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a49      	ldr	r2, [pc, #292]	; (800248c <HAL_GPIO_Init+0x2f0>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d019      	beq.n	800239e <HAL_GPIO_Init+0x202>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a48      	ldr	r2, [pc, #288]	; (8002490 <HAL_GPIO_Init+0x2f4>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d013      	beq.n	800239a <HAL_GPIO_Init+0x1fe>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a47      	ldr	r2, [pc, #284]	; (8002494 <HAL_GPIO_Init+0x2f8>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d00d      	beq.n	8002396 <HAL_GPIO_Init+0x1fa>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a46      	ldr	r2, [pc, #280]	; (8002498 <HAL_GPIO_Init+0x2fc>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d007      	beq.n	8002392 <HAL_GPIO_Init+0x1f6>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a45      	ldr	r2, [pc, #276]	; (800249c <HAL_GPIO_Init+0x300>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d101      	bne.n	800238e <HAL_GPIO_Init+0x1f2>
 800238a:	2304      	movs	r3, #4
 800238c:	e008      	b.n	80023a0 <HAL_GPIO_Init+0x204>
 800238e:	2307      	movs	r3, #7
 8002390:	e006      	b.n	80023a0 <HAL_GPIO_Init+0x204>
 8002392:	2303      	movs	r3, #3
 8002394:	e004      	b.n	80023a0 <HAL_GPIO_Init+0x204>
 8002396:	2302      	movs	r3, #2
 8002398:	e002      	b.n	80023a0 <HAL_GPIO_Init+0x204>
 800239a:	2301      	movs	r3, #1
 800239c:	e000      	b.n	80023a0 <HAL_GPIO_Init+0x204>
 800239e:	2300      	movs	r3, #0
 80023a0:	69fa      	ldr	r2, [r7, #28]
 80023a2:	f002 0203 	and.w	r2, r2, #3
 80023a6:	0092      	lsls	r2, r2, #2
 80023a8:	4093      	lsls	r3, r2
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023b0:	4935      	ldr	r1, [pc, #212]	; (8002488 <HAL_GPIO_Init+0x2ec>)
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	089b      	lsrs	r3, r3, #2
 80023b6:	3302      	adds	r3, #2
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023be:	4b38      	ldr	r3, [pc, #224]	; (80024a0 <HAL_GPIO_Init+0x304>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	43db      	mvns	r3, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4013      	ands	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	4313      	orrs	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023e2:	4a2f      	ldr	r2, [pc, #188]	; (80024a0 <HAL_GPIO_Init+0x304>)
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80023e8:	4b2d      	ldr	r3, [pc, #180]	; (80024a0 <HAL_GPIO_Init+0x304>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	43db      	mvns	r3, r3
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4013      	ands	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d003      	beq.n	800240c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	4313      	orrs	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800240c:	4a24      	ldr	r2, [pc, #144]	; (80024a0 <HAL_GPIO_Init+0x304>)
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002412:	4b23      	ldr	r3, [pc, #140]	; (80024a0 <HAL_GPIO_Init+0x304>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	43db      	mvns	r3, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4013      	ands	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d003      	beq.n	8002436 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	4313      	orrs	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002436:	4a1a      	ldr	r2, [pc, #104]	; (80024a0 <HAL_GPIO_Init+0x304>)
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800243c:	4b18      	ldr	r3, [pc, #96]	; (80024a0 <HAL_GPIO_Init+0x304>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	43db      	mvns	r3, r3
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4013      	ands	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d003      	beq.n	8002460 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	4313      	orrs	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002460:	4a0f      	ldr	r2, [pc, #60]	; (80024a0 <HAL_GPIO_Init+0x304>)
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	3301      	adds	r3, #1
 800246a:	61fb      	str	r3, [r7, #28]
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	2b0f      	cmp	r3, #15
 8002470:	f67f aea2 	bls.w	80021b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002474:	bf00      	nop
 8002476:	bf00      	nop
 8002478:	3724      	adds	r7, #36	; 0x24
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	40023800 	.word	0x40023800
 8002488:	40013800 	.word	0x40013800
 800248c:	40020000 	.word	0x40020000
 8002490:	40020400 	.word	0x40020400
 8002494:	40020800 	.word	0x40020800
 8002498:	40020c00 	.word	0x40020c00
 800249c:	40021000 	.word	0x40021000
 80024a0:	40013c00 	.word	0x40013c00

080024a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	460b      	mov	r3, r1
 80024ae:	807b      	strh	r3, [r7, #2]
 80024b0:	4613      	mov	r3, r2
 80024b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024b4:	787b      	ldrb	r3, [r7, #1]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024ba:	887a      	ldrh	r2, [r7, #2]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024c0:	e003      	b.n	80024ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024c2:	887b      	ldrh	r3, [r7, #2]
 80024c4:	041a      	lsls	r2, r3, #16
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	619a      	str	r2, [r3, #24]
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b085      	sub	sp, #20
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
 80024de:	460b      	mov	r3, r1
 80024e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024e8:	887a      	ldrh	r2, [r7, #2]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	4013      	ands	r3, r2
 80024ee:	041a      	lsls	r2, r3, #16
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	43d9      	mvns	r1, r3
 80024f4:	887b      	ldrh	r3, [r7, #2]
 80024f6:	400b      	ands	r3, r1
 80024f8:	431a      	orrs	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	619a      	str	r2, [r3, #24]
}
 80024fe:	bf00      	nop
 8002500:	3714      	adds	r7, #20
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
	...

0800250c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	4603      	mov	r3, r0
 8002514:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002516:	4b08      	ldr	r3, [pc, #32]	; (8002538 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002518:	695a      	ldr	r2, [r3, #20]
 800251a:	88fb      	ldrh	r3, [r7, #6]
 800251c:	4013      	ands	r3, r2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d006      	beq.n	8002530 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002522:	4a05      	ldr	r2, [pc, #20]	; (8002538 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002524:	88fb      	ldrh	r3, [r7, #6]
 8002526:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002528:	88fb      	ldrh	r3, [r7, #6]
 800252a:	4618      	mov	r0, r3
 800252c:	f000 f806 	bl	800253c <HAL_GPIO_EXTI_Callback>
  }
}
 8002530:	bf00      	nop
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	40013c00 	.word	0x40013c00

0800253c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	4603      	mov	r3, r0
 8002544:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
	...

08002554 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e12b      	b.n	80027be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d106      	bne.n	8002580 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f7fe ff78 	bl	8001470 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2224      	movs	r2, #36	; 0x24
 8002584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 0201 	bic.w	r2, r2, #1
 8002596:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025b8:	f002 fd5a 	bl	8005070 <HAL_RCC_GetPCLK1Freq>
 80025bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	4a81      	ldr	r2, [pc, #516]	; (80027c8 <HAL_I2C_Init+0x274>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d807      	bhi.n	80025d8 <HAL_I2C_Init+0x84>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	4a80      	ldr	r2, [pc, #512]	; (80027cc <HAL_I2C_Init+0x278>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	bf94      	ite	ls
 80025d0:	2301      	movls	r3, #1
 80025d2:	2300      	movhi	r3, #0
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	e006      	b.n	80025e6 <HAL_I2C_Init+0x92>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	4a7d      	ldr	r2, [pc, #500]	; (80027d0 <HAL_I2C_Init+0x27c>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	bf94      	ite	ls
 80025e0:	2301      	movls	r3, #1
 80025e2:	2300      	movhi	r3, #0
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e0e7      	b.n	80027be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	4a78      	ldr	r2, [pc, #480]	; (80027d4 <HAL_I2C_Init+0x280>)
 80025f2:	fba2 2303 	umull	r2, r3, r2, r3
 80025f6:	0c9b      	lsrs	r3, r3, #18
 80025f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68ba      	ldr	r2, [r7, #8]
 800260a:	430a      	orrs	r2, r1
 800260c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	6a1b      	ldr	r3, [r3, #32]
 8002614:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	4a6a      	ldr	r2, [pc, #424]	; (80027c8 <HAL_I2C_Init+0x274>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d802      	bhi.n	8002628 <HAL_I2C_Init+0xd4>
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	3301      	adds	r3, #1
 8002626:	e009      	b.n	800263c <HAL_I2C_Init+0xe8>
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800262e:	fb02 f303 	mul.w	r3, r2, r3
 8002632:	4a69      	ldr	r2, [pc, #420]	; (80027d8 <HAL_I2C_Init+0x284>)
 8002634:	fba2 2303 	umull	r2, r3, r2, r3
 8002638:	099b      	lsrs	r3, r3, #6
 800263a:	3301      	adds	r3, #1
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	6812      	ldr	r2, [r2, #0]
 8002640:	430b      	orrs	r3, r1
 8002642:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	69db      	ldr	r3, [r3, #28]
 800264a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800264e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	495c      	ldr	r1, [pc, #368]	; (80027c8 <HAL_I2C_Init+0x274>)
 8002658:	428b      	cmp	r3, r1
 800265a:	d819      	bhi.n	8002690 <HAL_I2C_Init+0x13c>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	1e59      	subs	r1, r3, #1
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	fbb1 f3f3 	udiv	r3, r1, r3
 800266a:	1c59      	adds	r1, r3, #1
 800266c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002670:	400b      	ands	r3, r1
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00a      	beq.n	800268c <HAL_I2C_Init+0x138>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	1e59      	subs	r1, r3, #1
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	fbb1 f3f3 	udiv	r3, r1, r3
 8002684:	3301      	adds	r3, #1
 8002686:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800268a:	e051      	b.n	8002730 <HAL_I2C_Init+0x1dc>
 800268c:	2304      	movs	r3, #4
 800268e:	e04f      	b.n	8002730 <HAL_I2C_Init+0x1dc>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d111      	bne.n	80026bc <HAL_I2C_Init+0x168>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	1e58      	subs	r0, r3, #1
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6859      	ldr	r1, [r3, #4]
 80026a0:	460b      	mov	r3, r1
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	440b      	add	r3, r1
 80026a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026aa:	3301      	adds	r3, #1
 80026ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	bf0c      	ite	eq
 80026b4:	2301      	moveq	r3, #1
 80026b6:	2300      	movne	r3, #0
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	e012      	b.n	80026e2 <HAL_I2C_Init+0x18e>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	1e58      	subs	r0, r3, #1
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6859      	ldr	r1, [r3, #4]
 80026c4:	460b      	mov	r3, r1
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	440b      	add	r3, r1
 80026ca:	0099      	lsls	r1, r3, #2
 80026cc:	440b      	add	r3, r1
 80026ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80026d2:	3301      	adds	r3, #1
 80026d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026d8:	2b00      	cmp	r3, #0
 80026da:	bf0c      	ite	eq
 80026dc:	2301      	moveq	r3, #1
 80026de:	2300      	movne	r3, #0
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <HAL_I2C_Init+0x196>
 80026e6:	2301      	movs	r3, #1
 80026e8:	e022      	b.n	8002730 <HAL_I2C_Init+0x1dc>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d10e      	bne.n	8002710 <HAL_I2C_Init+0x1bc>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	1e58      	subs	r0, r3, #1
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6859      	ldr	r1, [r3, #4]
 80026fa:	460b      	mov	r3, r1
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	440b      	add	r3, r1
 8002700:	fbb0 f3f3 	udiv	r3, r0, r3
 8002704:	3301      	adds	r3, #1
 8002706:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800270a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800270e:	e00f      	b.n	8002730 <HAL_I2C_Init+0x1dc>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	1e58      	subs	r0, r3, #1
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6859      	ldr	r1, [r3, #4]
 8002718:	460b      	mov	r3, r1
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	440b      	add	r3, r1
 800271e:	0099      	lsls	r1, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	fbb0 f3f3 	udiv	r3, r0, r3
 8002726:	3301      	adds	r3, #1
 8002728:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800272c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	6809      	ldr	r1, [r1, #0]
 8002734:	4313      	orrs	r3, r2
 8002736:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	69da      	ldr	r2, [r3, #28]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	431a      	orrs	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	430a      	orrs	r2, r1
 8002752:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800275e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6911      	ldr	r1, [r2, #16]
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	68d2      	ldr	r2, [r2, #12]
 800276a:	4311      	orrs	r1, r2
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	6812      	ldr	r2, [r2, #0]
 8002770:	430b      	orrs	r3, r1
 8002772:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	695a      	ldr	r2, [r3, #20]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	431a      	orrs	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	430a      	orrs	r2, r1
 800278e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f042 0201 	orr.w	r2, r2, #1
 800279e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2220      	movs	r2, #32
 80027aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	000186a0 	.word	0x000186a0
 80027cc:	001e847f 	.word	0x001e847f
 80027d0:	003d08ff 	.word	0x003d08ff
 80027d4:	431bde83 	.word	0x431bde83
 80027d8:	10624dd3 	.word	0x10624dd3

080027dc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b088      	sub	sp, #32
 80027e0:	af02      	add	r7, sp, #8
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	4608      	mov	r0, r1
 80027e6:	4611      	mov	r1, r2
 80027e8:	461a      	mov	r2, r3
 80027ea:	4603      	mov	r3, r0
 80027ec:	817b      	strh	r3, [r7, #10]
 80027ee:	460b      	mov	r3, r1
 80027f0:	813b      	strh	r3, [r7, #8]
 80027f2:	4613      	mov	r3, r2
 80027f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027f6:	f7ff fafd 	bl	8001df4 <HAL_GetTick>
 80027fa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b20      	cmp	r3, #32
 8002806:	f040 80d9 	bne.w	80029bc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	2319      	movs	r3, #25
 8002810:	2201      	movs	r2, #1
 8002812:	496d      	ldr	r1, [pc, #436]	; (80029c8 <HAL_I2C_Mem_Write+0x1ec>)
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f000 fc7f 	bl	8003118 <I2C_WaitOnFlagUntilTimeout>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002820:	2302      	movs	r3, #2
 8002822:	e0cc      	b.n	80029be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800282a:	2b01      	cmp	r3, #1
 800282c:	d101      	bne.n	8002832 <HAL_I2C_Mem_Write+0x56>
 800282e:	2302      	movs	r3, #2
 8002830:	e0c5      	b.n	80029be <HAL_I2C_Mem_Write+0x1e2>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	2b01      	cmp	r3, #1
 8002846:	d007      	beq.n	8002858 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f042 0201 	orr.w	r2, r2, #1
 8002856:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002866:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2221      	movs	r2, #33	; 0x21
 800286c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2240      	movs	r2, #64	; 0x40
 8002874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6a3a      	ldr	r2, [r7, #32]
 8002882:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002888:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800288e:	b29a      	uxth	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	4a4d      	ldr	r2, [pc, #308]	; (80029cc <HAL_I2C_Mem_Write+0x1f0>)
 8002898:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800289a:	88f8      	ldrh	r0, [r7, #6]
 800289c:	893a      	ldrh	r2, [r7, #8]
 800289e:	8979      	ldrh	r1, [r7, #10]
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	9301      	str	r3, [sp, #4]
 80028a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	4603      	mov	r3, r0
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f000 fab6 	bl	8002e1c <I2C_RequestMemoryWrite>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d052      	beq.n	800295c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e081      	b.n	80029be <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f000 fd00 	bl	80032c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00d      	beq.n	80028e6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	d107      	bne.n	80028e2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e06b      	b.n	80029be <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ea:	781a      	ldrb	r2, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f6:	1c5a      	adds	r2, r3, #1
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002900:	3b01      	subs	r3, #1
 8002902:	b29a      	uxth	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800290c:	b29b      	uxth	r3, r3
 800290e:	3b01      	subs	r3, #1
 8002910:	b29a      	uxth	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	695b      	ldr	r3, [r3, #20]
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	2b04      	cmp	r3, #4
 8002922:	d11b      	bne.n	800295c <HAL_I2C_Mem_Write+0x180>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002928:	2b00      	cmp	r3, #0
 800292a:	d017      	beq.n	800295c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002930:	781a      	ldrb	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293c:	1c5a      	adds	r2, r3, #1
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002946:	3b01      	subs	r3, #1
 8002948:	b29a      	uxth	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002952:	b29b      	uxth	r3, r3
 8002954:	3b01      	subs	r3, #1
 8002956:	b29a      	uxth	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1aa      	bne.n	80028ba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f000 fcec 	bl	8003346 <I2C_WaitOnBTFFlagUntilTimeout>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00d      	beq.n	8002990 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002978:	2b04      	cmp	r3, #4
 800297a:	d107      	bne.n	800298c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800298a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e016      	b.n	80029be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800299e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2220      	movs	r2, #32
 80029a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80029b8:	2300      	movs	r3, #0
 80029ba:	e000      	b.n	80029be <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80029bc:	2302      	movs	r3, #2
  }
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3718      	adds	r7, #24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	00100002 	.word	0x00100002
 80029cc:	ffff0000 	.word	0xffff0000

080029d0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b08c      	sub	sp, #48	; 0x30
 80029d4:	af02      	add	r7, sp, #8
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	4608      	mov	r0, r1
 80029da:	4611      	mov	r1, r2
 80029dc:	461a      	mov	r2, r3
 80029de:	4603      	mov	r3, r0
 80029e0:	817b      	strh	r3, [r7, #10]
 80029e2:	460b      	mov	r3, r1
 80029e4:	813b      	strh	r3, [r7, #8]
 80029e6:	4613      	mov	r3, r2
 80029e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029ea:	f7ff fa03 	bl	8001df4 <HAL_GetTick>
 80029ee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b20      	cmp	r3, #32
 80029fa:	f040 8208 	bne.w	8002e0e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a00:	9300      	str	r3, [sp, #0]
 8002a02:	2319      	movs	r3, #25
 8002a04:	2201      	movs	r2, #1
 8002a06:	497b      	ldr	r1, [pc, #492]	; (8002bf4 <HAL_I2C_Mem_Read+0x224>)
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f000 fb85 	bl	8003118 <I2C_WaitOnFlagUntilTimeout>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002a14:	2302      	movs	r3, #2
 8002a16:	e1fb      	b.n	8002e10 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d101      	bne.n	8002a26 <HAL_I2C_Mem_Read+0x56>
 8002a22:	2302      	movs	r3, #2
 8002a24:	e1f4      	b.n	8002e10 <HAL_I2C_Mem_Read+0x440>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d007      	beq.n	8002a4c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f042 0201 	orr.w	r2, r2, #1
 8002a4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2222      	movs	r2, #34	; 0x22
 8002a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2240      	movs	r2, #64	; 0x40
 8002a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002a7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	4a5b      	ldr	r2, [pc, #364]	; (8002bf8 <HAL_I2C_Mem_Read+0x228>)
 8002a8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a8e:	88f8      	ldrh	r0, [r7, #6]
 8002a90:	893a      	ldrh	r2, [r7, #8]
 8002a92:	8979      	ldrh	r1, [r7, #10]
 8002a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a96:	9301      	str	r3, [sp, #4]
 8002a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f000 fa52 	bl	8002f48 <I2C_RequestMemoryRead>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e1b0      	b.n	8002e10 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d113      	bne.n	8002ade <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	623b      	str	r3, [r7, #32]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	695b      	ldr	r3, [r3, #20]
 8002ac0:	623b      	str	r3, [r7, #32]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	623b      	str	r3, [r7, #32]
 8002aca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	e184      	b.n	8002de8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d11b      	bne.n	8002b1e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002af4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002af6:	2300      	movs	r3, #0
 8002af8:	61fb      	str	r3, [r7, #28]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	695b      	ldr	r3, [r3, #20]
 8002b00:	61fb      	str	r3, [r7, #28]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	61fb      	str	r3, [r7, #28]
 8002b0a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	e164      	b.n	8002de8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d11b      	bne.n	8002b5e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b34:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b46:	2300      	movs	r3, #0
 8002b48:	61bb      	str	r3, [r7, #24]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	61bb      	str	r3, [r7, #24]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	61bb      	str	r3, [r7, #24]
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	e144      	b.n	8002de8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b5e:	2300      	movs	r3, #0
 8002b60:	617b      	str	r3, [r7, #20]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	617b      	str	r3, [r7, #20]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	617b      	str	r3, [r7, #20]
 8002b72:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002b74:	e138      	b.n	8002de8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7a:	2b03      	cmp	r3, #3
 8002b7c:	f200 80f1 	bhi.w	8002d62 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d123      	bne.n	8002bd0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b8a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	f000 fc1b 	bl	80033c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e139      	b.n	8002e10 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	691a      	ldr	r2, [r3, #16]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba6:	b2d2      	uxtb	r2, r2
 8002ba8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bae:	1c5a      	adds	r2, r3, #1
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002bce:	e10b      	b.n	8002de8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d14e      	bne.n	8002c76 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bda:	9300      	str	r3, [sp, #0]
 8002bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bde:	2200      	movs	r2, #0
 8002be0:	4906      	ldr	r1, [pc, #24]	; (8002bfc <HAL_I2C_Mem_Read+0x22c>)
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f000 fa98 	bl	8003118 <I2C_WaitOnFlagUntilTimeout>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d008      	beq.n	8002c00 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e10e      	b.n	8002e10 <HAL_I2C_Mem_Read+0x440>
 8002bf2:	bf00      	nop
 8002bf4:	00100002 	.word	0x00100002
 8002bf8:	ffff0000 	.word	0xffff0000
 8002bfc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	691a      	ldr	r2, [r3, #16]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c22:	1c5a      	adds	r2, r3, #1
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	691a      	ldr	r2, [r3, #16]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4c:	b2d2      	uxtb	r2, r2
 8002c4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	1c5a      	adds	r2, r3, #1
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c74:	e0b8      	b.n	8002de8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	9300      	str	r3, [sp, #0]
 8002c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	4966      	ldr	r1, [pc, #408]	; (8002e18 <HAL_I2C_Mem_Read+0x448>)
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f000 fa49 	bl	8003118 <I2C_WaitOnFlagUntilTimeout>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e0bf      	b.n	8002e10 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	691a      	ldr	r2, [r3, #16]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002caa:	b2d2      	uxtb	r2, r2
 8002cac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb2:	1c5a      	adds	r2, r3, #1
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	9300      	str	r3, [sp, #0]
 8002cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd8:	2200      	movs	r2, #0
 8002cda:	494f      	ldr	r1, [pc, #316]	; (8002e18 <HAL_I2C_Mem_Read+0x448>)
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f000 fa1b 	bl	8003118 <I2C_WaitOnFlagUntilTimeout>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e091      	b.n	8002e10 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cfa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	691a      	ldr	r2, [r3, #16]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d06:	b2d2      	uxtb	r2, r2
 8002d08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0e:	1c5a      	adds	r2, r3, #1
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	3b01      	subs	r3, #1
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	691a      	ldr	r2, [r3, #16]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d38:	b2d2      	uxtb	r2, r2
 8002d3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d40:	1c5a      	adds	r2, r3, #1
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d60:	e042      	b.n	8002de8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f000 fb2e 	bl	80033c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e04c      	b.n	8002e10 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	691a      	ldr	r2, [r3, #16]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d80:	b2d2      	uxtb	r2, r2
 8002d82:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d88:	1c5a      	adds	r2, r3, #1
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d92:	3b01      	subs	r3, #1
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	3b01      	subs	r3, #1
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	f003 0304 	and.w	r3, r3, #4
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	d118      	bne.n	8002de8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	691a      	ldr	r2, [r3, #16]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc0:	b2d2      	uxtb	r2, r2
 8002dc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc8:	1c5a      	adds	r2, r3, #1
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	3b01      	subs	r3, #1
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f47f aec2 	bne.w	8002b76 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2220      	movs	r2, #32
 8002df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	e000      	b.n	8002e10 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002e0e:	2302      	movs	r3, #2
  }
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3728      	adds	r7, #40	; 0x28
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	00010004 	.word	0x00010004

08002e1c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b088      	sub	sp, #32
 8002e20:	af02      	add	r7, sp, #8
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	4608      	mov	r0, r1
 8002e26:	4611      	mov	r1, r2
 8002e28:	461a      	mov	r2, r3
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	817b      	strh	r3, [r7, #10]
 8002e2e:	460b      	mov	r3, r1
 8002e30:	813b      	strh	r3, [r7, #8]
 8002e32:	4613      	mov	r3, r2
 8002e34:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e44:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	9300      	str	r3, [sp, #0]
 8002e4a:	6a3b      	ldr	r3, [r7, #32]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	f000 f960 	bl	8003118 <I2C_WaitOnFlagUntilTimeout>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00d      	beq.n	8002e7a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e6c:	d103      	bne.n	8002e76 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e74:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e05f      	b.n	8002f3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e7a:	897b      	ldrh	r3, [r7, #10]
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	461a      	mov	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e88:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8c:	6a3a      	ldr	r2, [r7, #32]
 8002e8e:	492d      	ldr	r1, [pc, #180]	; (8002f44 <I2C_RequestMemoryWrite+0x128>)
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	f000 f998 	bl	80031c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d001      	beq.n	8002ea0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e04c      	b.n	8002f3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	617b      	str	r3, [r7, #20]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	617b      	str	r3, [r7, #20]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	617b      	str	r3, [r7, #20]
 8002eb4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eb8:	6a39      	ldr	r1, [r7, #32]
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f000 fa02 	bl	80032c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00d      	beq.n	8002ee2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	2b04      	cmp	r3, #4
 8002ecc:	d107      	bne.n	8002ede <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002edc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e02b      	b.n	8002f3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ee2:	88fb      	ldrh	r3, [r7, #6]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d105      	bne.n	8002ef4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ee8:	893b      	ldrh	r3, [r7, #8]
 8002eea:	b2da      	uxtb	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	611a      	str	r2, [r3, #16]
 8002ef2:	e021      	b.n	8002f38 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ef4:	893b      	ldrh	r3, [r7, #8]
 8002ef6:	0a1b      	lsrs	r3, r3, #8
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	b2da      	uxtb	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f04:	6a39      	ldr	r1, [r7, #32]
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f000 f9dc 	bl	80032c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00d      	beq.n	8002f2e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	d107      	bne.n	8002f2a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f28:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e005      	b.n	8002f3a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f2e:	893b      	ldrh	r3, [r7, #8]
 8002f30:	b2da      	uxtb	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3718      	adds	r7, #24
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	00010002 	.word	0x00010002

08002f48 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b088      	sub	sp, #32
 8002f4c:	af02      	add	r7, sp, #8
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	4608      	mov	r0, r1
 8002f52:	4611      	mov	r1, r2
 8002f54:	461a      	mov	r2, r3
 8002f56:	4603      	mov	r3, r0
 8002f58:	817b      	strh	r3, [r7, #10]
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	813b      	strh	r3, [r7, #8]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f70:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f80:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	6a3b      	ldr	r3, [r7, #32]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f000 f8c2 	bl	8003118 <I2C_WaitOnFlagUntilTimeout>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00d      	beq.n	8002fb6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fa8:	d103      	bne.n	8002fb2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fb0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e0aa      	b.n	800310c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fb6:	897b      	ldrh	r3, [r7, #10]
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	461a      	mov	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fc4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc8:	6a3a      	ldr	r2, [r7, #32]
 8002fca:	4952      	ldr	r1, [pc, #328]	; (8003114 <I2C_RequestMemoryRead+0x1cc>)
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f000 f8fa 	bl	80031c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e097      	b.n	800310c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fdc:	2300      	movs	r3, #0
 8002fde:	617b      	str	r3, [r7, #20]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	617b      	str	r3, [r7, #20]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	617b      	str	r3, [r7, #20]
 8002ff0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ff4:	6a39      	ldr	r1, [r7, #32]
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f000 f964 	bl	80032c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00d      	beq.n	800301e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	2b04      	cmp	r3, #4
 8003008:	d107      	bne.n	800301a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003018:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e076      	b.n	800310c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800301e:	88fb      	ldrh	r3, [r7, #6]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d105      	bne.n	8003030 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003024:	893b      	ldrh	r3, [r7, #8]
 8003026:	b2da      	uxtb	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	611a      	str	r2, [r3, #16]
 800302e:	e021      	b.n	8003074 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003030:	893b      	ldrh	r3, [r7, #8]
 8003032:	0a1b      	lsrs	r3, r3, #8
 8003034:	b29b      	uxth	r3, r3
 8003036:	b2da      	uxtb	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800303e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003040:	6a39      	ldr	r1, [r7, #32]
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f000 f93e 	bl	80032c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00d      	beq.n	800306a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	2b04      	cmp	r3, #4
 8003054:	d107      	bne.n	8003066 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003064:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e050      	b.n	800310c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800306a:	893b      	ldrh	r3, [r7, #8]
 800306c:	b2da      	uxtb	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003076:	6a39      	ldr	r1, [r7, #32]
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	f000 f923 	bl	80032c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00d      	beq.n	80030a0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003088:	2b04      	cmp	r3, #4
 800308a:	d107      	bne.n	800309c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800309a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e035      	b.n	800310c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030ae:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b2:	9300      	str	r3, [sp, #0]
 80030b4:	6a3b      	ldr	r3, [r7, #32]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f000 f82b 	bl	8003118 <I2C_WaitOnFlagUntilTimeout>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00d      	beq.n	80030e4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030d6:	d103      	bne.n	80030e0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e013      	b.n	800310c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80030e4:	897b      	ldrh	r3, [r7, #10]
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	f043 0301 	orr.w	r3, r3, #1
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f6:	6a3a      	ldr	r2, [r7, #32]
 80030f8:	4906      	ldr	r1, [pc, #24]	; (8003114 <I2C_RequestMemoryRead+0x1cc>)
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f000 f863 	bl	80031c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e000      	b.n	800310c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3718      	adds	r7, #24
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	00010002 	.word	0x00010002

08003118 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	603b      	str	r3, [r7, #0]
 8003124:	4613      	mov	r3, r2
 8003126:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003128:	e025      	b.n	8003176 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003130:	d021      	beq.n	8003176 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003132:	f7fe fe5f 	bl	8001df4 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	429a      	cmp	r2, r3
 8003140:	d302      	bcc.n	8003148 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d116      	bne.n	8003176 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2220      	movs	r2, #32
 8003152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	f043 0220 	orr.w	r2, r3, #32
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e023      	b.n	80031be <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	0c1b      	lsrs	r3, r3, #16
 800317a:	b2db      	uxtb	r3, r3
 800317c:	2b01      	cmp	r3, #1
 800317e:	d10d      	bne.n	800319c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	43da      	mvns	r2, r3
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	4013      	ands	r3, r2
 800318c:	b29b      	uxth	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	bf0c      	ite	eq
 8003192:	2301      	moveq	r3, #1
 8003194:	2300      	movne	r3, #0
 8003196:	b2db      	uxtb	r3, r3
 8003198:	461a      	mov	r2, r3
 800319a:	e00c      	b.n	80031b6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	43da      	mvns	r2, r3
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	4013      	ands	r3, r2
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	bf0c      	ite	eq
 80031ae:	2301      	moveq	r3, #1
 80031b0:	2300      	movne	r3, #0
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	461a      	mov	r2, r3
 80031b6:	79fb      	ldrb	r3, [r7, #7]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d0b6      	beq.n	800312a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b084      	sub	sp, #16
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	60f8      	str	r0, [r7, #12]
 80031ce:	60b9      	str	r1, [r7, #8]
 80031d0:	607a      	str	r2, [r7, #4]
 80031d2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031d4:	e051      	b.n	800327a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031e4:	d123      	bne.n	800322e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031f4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031fe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2220      	movs	r2, #32
 800320a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	f043 0204 	orr.w	r2, r3, #4
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e046      	b.n	80032bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003234:	d021      	beq.n	800327a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003236:	f7fe fddd 	bl	8001df4 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	429a      	cmp	r2, r3
 8003244:	d302      	bcc.n	800324c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d116      	bne.n	800327a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2220      	movs	r2, #32
 8003256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	f043 0220 	orr.w	r2, r3, #32
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e020      	b.n	80032bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	0c1b      	lsrs	r3, r3, #16
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2b01      	cmp	r3, #1
 8003282:	d10c      	bne.n	800329e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	43da      	mvns	r2, r3
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	4013      	ands	r3, r2
 8003290:	b29b      	uxth	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	bf14      	ite	ne
 8003296:	2301      	movne	r3, #1
 8003298:	2300      	moveq	r3, #0
 800329a:	b2db      	uxtb	r3, r3
 800329c:	e00b      	b.n	80032b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	43da      	mvns	r2, r3
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	4013      	ands	r3, r2
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	bf14      	ite	ne
 80032b0:	2301      	movne	r3, #1
 80032b2:	2300      	moveq	r3, #0
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d18d      	bne.n	80031d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032d0:	e02d      	b.n	800332e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f000 f8ce 	bl	8003474 <I2C_IsAcknowledgeFailed>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e02d      	b.n	800333e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e8:	d021      	beq.n	800332e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ea:	f7fe fd83 	bl	8001df4 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	68ba      	ldr	r2, [r7, #8]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d302      	bcc.n	8003300 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d116      	bne.n	800332e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2220      	movs	r2, #32
 800330a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	f043 0220 	orr.w	r2, r3, #32
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e007      	b.n	800333e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003338:	2b80      	cmp	r3, #128	; 0x80
 800333a:	d1ca      	bne.n	80032d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b084      	sub	sp, #16
 800334a:	af00      	add	r7, sp, #0
 800334c:	60f8      	str	r0, [r7, #12]
 800334e:	60b9      	str	r1, [r7, #8]
 8003350:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003352:	e02d      	b.n	80033b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003354:	68f8      	ldr	r0, [r7, #12]
 8003356:	f000 f88d 	bl	8003474 <I2C_IsAcknowledgeFailed>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e02d      	b.n	80033c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800336a:	d021      	beq.n	80033b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800336c:	f7fe fd42 	bl	8001df4 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	68ba      	ldr	r2, [r7, #8]
 8003378:	429a      	cmp	r2, r3
 800337a:	d302      	bcc.n	8003382 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d116      	bne.n	80033b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2220      	movs	r2, #32
 800338c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339c:	f043 0220 	orr.w	r2, r3, #32
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e007      	b.n	80033c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	f003 0304 	and.w	r3, r3, #4
 80033ba:	2b04      	cmp	r3, #4
 80033bc:	d1ca      	bne.n	8003354 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033d4:	e042      	b.n	800345c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	695b      	ldr	r3, [r3, #20]
 80033dc:	f003 0310 	and.w	r3, r3, #16
 80033e0:	2b10      	cmp	r3, #16
 80033e2:	d119      	bne.n	8003418 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f06f 0210 	mvn.w	r2, #16
 80033ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2220      	movs	r2, #32
 80033f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e029      	b.n	800346c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003418:	f7fe fcec 	bl	8001df4 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	68ba      	ldr	r2, [r7, #8]
 8003424:	429a      	cmp	r2, r3
 8003426:	d302      	bcc.n	800342e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d116      	bne.n	800345c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2220      	movs	r2, #32
 8003438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003448:	f043 0220 	orr.w	r2, r3, #32
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e007      	b.n	800346c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003466:	2b40      	cmp	r3, #64	; 0x40
 8003468:	d1b5      	bne.n	80033d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800346a:	2300      	movs	r3, #0
}
 800346c:	4618      	mov	r0, r3
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003486:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800348a:	d11b      	bne.n	80034c4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003494:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2220      	movs	r2, #32
 80034a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b0:	f043 0204 	orr.w	r2, r3, #4
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e000      	b.n	80034c6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80034d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034d4:	b08f      	sub	sp, #60	; 0x3c
 80034d6:	af0a      	add	r7, sp, #40	; 0x28
 80034d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d101      	bne.n	80034e4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e10f      	b.n	8003704 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d106      	bne.n	8003504 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f005 fede 	bl	80092c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2203      	movs	r2, #3
 8003508:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003514:	2b00      	cmp	r3, #0
 8003516:	d102      	bne.n	800351e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4618      	mov	r0, r3
 8003524:	f002 fdd1 	bl	80060ca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	603b      	str	r3, [r7, #0]
 800352e:	687e      	ldr	r6, [r7, #4]
 8003530:	466d      	mov	r5, sp
 8003532:	f106 0410 	add.w	r4, r6, #16
 8003536:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003538:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800353a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800353c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800353e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003542:	e885 0003 	stmia.w	r5, {r0, r1}
 8003546:	1d33      	adds	r3, r6, #4
 8003548:	cb0e      	ldmia	r3, {r1, r2, r3}
 800354a:	6838      	ldr	r0, [r7, #0]
 800354c:	f002 fca8 	bl	8005ea0 <USB_CoreInit>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d005      	beq.n	8003562 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2202      	movs	r2, #2
 800355a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e0d0      	b.n	8003704 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2100      	movs	r1, #0
 8003568:	4618      	mov	r0, r3
 800356a:	f002 fdbf 	bl	80060ec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800356e:	2300      	movs	r3, #0
 8003570:	73fb      	strb	r3, [r7, #15]
 8003572:	e04a      	b.n	800360a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003574:	7bfa      	ldrb	r2, [r7, #15]
 8003576:	6879      	ldr	r1, [r7, #4]
 8003578:	4613      	mov	r3, r2
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	1a9b      	subs	r3, r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	440b      	add	r3, r1
 8003582:	333d      	adds	r3, #61	; 0x3d
 8003584:	2201      	movs	r2, #1
 8003586:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003588:	7bfa      	ldrb	r2, [r7, #15]
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	4613      	mov	r3, r2
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	1a9b      	subs	r3, r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	440b      	add	r3, r1
 8003596:	333c      	adds	r3, #60	; 0x3c
 8003598:	7bfa      	ldrb	r2, [r7, #15]
 800359a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800359c:	7bfa      	ldrb	r2, [r7, #15]
 800359e:	7bfb      	ldrb	r3, [r7, #15]
 80035a0:	b298      	uxth	r0, r3
 80035a2:	6879      	ldr	r1, [r7, #4]
 80035a4:	4613      	mov	r3, r2
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	1a9b      	subs	r3, r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	440b      	add	r3, r1
 80035ae:	3342      	adds	r3, #66	; 0x42
 80035b0:	4602      	mov	r2, r0
 80035b2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80035b4:	7bfa      	ldrb	r2, [r7, #15]
 80035b6:	6879      	ldr	r1, [r7, #4]
 80035b8:	4613      	mov	r3, r2
 80035ba:	00db      	lsls	r3, r3, #3
 80035bc:	1a9b      	subs	r3, r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	440b      	add	r3, r1
 80035c2:	333f      	adds	r3, #63	; 0x3f
 80035c4:	2200      	movs	r2, #0
 80035c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80035c8:	7bfa      	ldrb	r2, [r7, #15]
 80035ca:	6879      	ldr	r1, [r7, #4]
 80035cc:	4613      	mov	r3, r2
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	1a9b      	subs	r3, r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	440b      	add	r3, r1
 80035d6:	3344      	adds	r3, #68	; 0x44
 80035d8:	2200      	movs	r2, #0
 80035da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80035dc:	7bfa      	ldrb	r2, [r7, #15]
 80035de:	6879      	ldr	r1, [r7, #4]
 80035e0:	4613      	mov	r3, r2
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	1a9b      	subs	r3, r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	440b      	add	r3, r1
 80035ea:	3348      	adds	r3, #72	; 0x48
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80035f0:	7bfa      	ldrb	r2, [r7, #15]
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	4613      	mov	r3, r2
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	1a9b      	subs	r3, r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	440b      	add	r3, r1
 80035fe:	3350      	adds	r3, #80	; 0x50
 8003600:	2200      	movs	r2, #0
 8003602:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003604:	7bfb      	ldrb	r3, [r7, #15]
 8003606:	3301      	adds	r3, #1
 8003608:	73fb      	strb	r3, [r7, #15]
 800360a:	7bfa      	ldrb	r2, [r7, #15]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	429a      	cmp	r2, r3
 8003612:	d3af      	bcc.n	8003574 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003614:	2300      	movs	r3, #0
 8003616:	73fb      	strb	r3, [r7, #15]
 8003618:	e044      	b.n	80036a4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800361a:	7bfa      	ldrb	r2, [r7, #15]
 800361c:	6879      	ldr	r1, [r7, #4]
 800361e:	4613      	mov	r3, r2
 8003620:	00db      	lsls	r3, r3, #3
 8003622:	1a9b      	subs	r3, r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	440b      	add	r3, r1
 8003628:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800362c:	2200      	movs	r2, #0
 800362e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003630:	7bfa      	ldrb	r2, [r7, #15]
 8003632:	6879      	ldr	r1, [r7, #4]
 8003634:	4613      	mov	r3, r2
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	1a9b      	subs	r3, r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	440b      	add	r3, r1
 800363e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003642:	7bfa      	ldrb	r2, [r7, #15]
 8003644:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003646:	7bfa      	ldrb	r2, [r7, #15]
 8003648:	6879      	ldr	r1, [r7, #4]
 800364a:	4613      	mov	r3, r2
 800364c:	00db      	lsls	r3, r3, #3
 800364e:	1a9b      	subs	r3, r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	440b      	add	r3, r1
 8003654:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003658:	2200      	movs	r2, #0
 800365a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800365c:	7bfa      	ldrb	r2, [r7, #15]
 800365e:	6879      	ldr	r1, [r7, #4]
 8003660:	4613      	mov	r3, r2
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	1a9b      	subs	r3, r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	440b      	add	r3, r1
 800366a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800366e:	2200      	movs	r2, #0
 8003670:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003672:	7bfa      	ldrb	r2, [r7, #15]
 8003674:	6879      	ldr	r1, [r7, #4]
 8003676:	4613      	mov	r3, r2
 8003678:	00db      	lsls	r3, r3, #3
 800367a:	1a9b      	subs	r3, r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	440b      	add	r3, r1
 8003680:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003684:	2200      	movs	r2, #0
 8003686:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003688:	7bfa      	ldrb	r2, [r7, #15]
 800368a:	6879      	ldr	r1, [r7, #4]
 800368c:	4613      	mov	r3, r2
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	1a9b      	subs	r3, r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	440b      	add	r3, r1
 8003696:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800369a:	2200      	movs	r2, #0
 800369c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800369e:	7bfb      	ldrb	r3, [r7, #15]
 80036a0:	3301      	adds	r3, #1
 80036a2:	73fb      	strb	r3, [r7, #15]
 80036a4:	7bfa      	ldrb	r2, [r7, #15]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d3b5      	bcc.n	800361a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	603b      	str	r3, [r7, #0]
 80036b4:	687e      	ldr	r6, [r7, #4]
 80036b6:	466d      	mov	r5, sp
 80036b8:	f106 0410 	add.w	r4, r6, #16
 80036bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80036c8:	e885 0003 	stmia.w	r5, {r0, r1}
 80036cc:	1d33      	adds	r3, r6, #4
 80036ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036d0:	6838      	ldr	r0, [r7, #0]
 80036d2:	f002 fd57 	bl	8006184 <USB_DevInit>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d005      	beq.n	80036e8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2202      	movs	r2, #2
 80036e0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e00d      	b.n	8003704 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f003 fdd3 	bl	80072a8 <USB_DevDisconnect>

  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	3714      	adds	r7, #20
 8003708:	46bd      	mov	sp, r7
 800370a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800370c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003720:	2b01      	cmp	r3, #1
 8003722:	d101      	bne.n	8003728 <HAL_PCD_Start+0x1c>
 8003724:	2302      	movs	r3, #2
 8003726:	e020      	b.n	800376a <HAL_PCD_Start+0x5e>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003734:	2b01      	cmp	r3, #1
 8003736:	d109      	bne.n	800374c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800373c:	2b01      	cmp	r3, #1
 800373e:	d005      	beq.n	800374c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003744:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4618      	mov	r0, r3
 8003752:	f002 fca9 	bl	80060a8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4618      	mov	r0, r3
 800375c:	f003 fd83 	bl	8007266 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003772:	b590      	push	{r4, r7, lr}
 8003774:	b08d      	sub	sp, #52	; 0x34
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003780:	6a3b      	ldr	r3, [r7, #32]
 8003782:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4618      	mov	r0, r3
 800378a:	f003 fe41 	bl	8007410 <USB_GetMode>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	f040 839d 	bne.w	8003ed0 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4618      	mov	r0, r3
 800379c:	f003 fda5 	bl	80072ea <USB_ReadInterrupts>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f000 8393 	beq.w	8003ece <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f003 fd9c 	bl	80072ea <USB_ReadInterrupts>
 80037b2:	4603      	mov	r3, r0
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d107      	bne.n	80037cc <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	695a      	ldr	r2, [r3, #20]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f002 0202 	and.w	r2, r2, #2
 80037ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f003 fd8a 	bl	80072ea <USB_ReadInterrupts>
 80037d6:	4603      	mov	r3, r0
 80037d8:	f003 0310 	and.w	r3, r3, #16
 80037dc:	2b10      	cmp	r3, #16
 80037de:	d161      	bne.n	80038a4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	699a      	ldr	r2, [r3, #24]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 0210 	bic.w	r2, r2, #16
 80037ee:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80037f0:	6a3b      	ldr	r3, [r7, #32]
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	f003 020f 	and.w	r2, r3, #15
 80037fc:	4613      	mov	r3, r2
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	1a9b      	subs	r3, r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	4413      	add	r3, r2
 800380c:	3304      	adds	r3, #4
 800380e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	0c5b      	lsrs	r3, r3, #17
 8003814:	f003 030f 	and.w	r3, r3, #15
 8003818:	2b02      	cmp	r3, #2
 800381a:	d124      	bne.n	8003866 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003822:	4013      	ands	r3, r2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d035      	beq.n	8003894 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	091b      	lsrs	r3, r3, #4
 8003830:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003832:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003836:	b29b      	uxth	r3, r3
 8003838:	461a      	mov	r2, r3
 800383a:	6a38      	ldr	r0, [r7, #32]
 800383c:	f003 fbc1 	bl	8006fc2 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	68da      	ldr	r2, [r3, #12]
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	091b      	lsrs	r3, r3, #4
 8003848:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800384c:	441a      	add	r2, r3
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	699a      	ldr	r2, [r3, #24]
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	091b      	lsrs	r3, r3, #4
 800385a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800385e:	441a      	add	r2, r3
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	619a      	str	r2, [r3, #24]
 8003864:	e016      	b.n	8003894 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	0c5b      	lsrs	r3, r3, #17
 800386a:	f003 030f 	and.w	r3, r3, #15
 800386e:	2b06      	cmp	r3, #6
 8003870:	d110      	bne.n	8003894 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003878:	2208      	movs	r2, #8
 800387a:	4619      	mov	r1, r3
 800387c:	6a38      	ldr	r0, [r7, #32]
 800387e:	f003 fba0 	bl	8006fc2 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	699a      	ldr	r2, [r3, #24]
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	091b      	lsrs	r3, r3, #4
 800388a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800388e:	441a      	add	r2, r3
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	699a      	ldr	r2, [r3, #24]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f042 0210 	orr.w	r2, r2, #16
 80038a2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f003 fd1e 	bl	80072ea <USB_ReadInterrupts>
 80038ae:	4603      	mov	r3, r0
 80038b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038b4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80038b8:	d16e      	bne.n	8003998 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80038ba:	2300      	movs	r3, #0
 80038bc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f003 fd24 	bl	8007310 <USB_ReadDevAllOutEpInterrupt>
 80038c8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80038ca:	e062      	b.n	8003992 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80038cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d057      	beq.n	8003986 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038dc:	b2d2      	uxtb	r2, r2
 80038de:	4611      	mov	r1, r2
 80038e0:	4618      	mov	r0, r3
 80038e2:	f003 fd49 	bl	8007378 <USB_ReadDevOutEPInterrupt>
 80038e6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00c      	beq.n	800390c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80038f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f4:	015a      	lsls	r2, r3, #5
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	4413      	add	r3, r2
 80038fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038fe:	461a      	mov	r2, r3
 8003900:	2301      	movs	r3, #1
 8003902:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003904:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 fdb0 	bl	800446c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	f003 0308 	and.w	r3, r3, #8
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00c      	beq.n	8003930 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003918:	015a      	lsls	r2, r3, #5
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	4413      	add	r3, r2
 800391e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003922:	461a      	mov	r2, r3
 8003924:	2308      	movs	r3, #8
 8003926:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003928:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 feaa 	bl	8004684 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	f003 0310 	and.w	r3, r3, #16
 8003936:	2b00      	cmp	r3, #0
 8003938:	d008      	beq.n	800394c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800393a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393c:	015a      	lsls	r2, r3, #5
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	4413      	add	r3, r2
 8003942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003946:	461a      	mov	r2, r3
 8003948:	2310      	movs	r3, #16
 800394a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	f003 0320 	and.w	r3, r3, #32
 8003952:	2b00      	cmp	r3, #0
 8003954:	d008      	beq.n	8003968 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003958:	015a      	lsls	r2, r3, #5
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	4413      	add	r3, r2
 800395e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003962:	461a      	mov	r2, r3
 8003964:	2320      	movs	r3, #32
 8003966:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d009      	beq.n	8003986 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003974:	015a      	lsls	r2, r3, #5
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	4413      	add	r3, r2
 800397a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800397e:	461a      	mov	r2, r3
 8003980:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003984:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003988:	3301      	adds	r3, #1
 800398a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800398c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398e:	085b      	lsrs	r3, r3, #1
 8003990:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003994:	2b00      	cmp	r3, #0
 8003996:	d199      	bne.n	80038cc <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4618      	mov	r0, r3
 800399e:	f003 fca4 	bl	80072ea <USB_ReadInterrupts>
 80039a2:	4603      	mov	r3, r0
 80039a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039ac:	f040 80c0 	bne.w	8003b30 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f003 fcc5 	bl	8007344 <USB_ReadDevAllInEpInterrupt>
 80039ba:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80039bc:	2300      	movs	r3, #0
 80039be:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80039c0:	e0b2      	b.n	8003b28 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80039c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c4:	f003 0301 	and.w	r3, r3, #1
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f000 80a7 	beq.w	8003b1c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039d4:	b2d2      	uxtb	r2, r2
 80039d6:	4611      	mov	r1, r2
 80039d8:	4618      	mov	r0, r3
 80039da:	f003 fceb 	bl	80073b4 <USB_ReadDevInEPInterrupt>
 80039de:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d057      	beq.n	8003a9a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ec:	f003 030f 	and.w	r3, r3, #15
 80039f0:	2201      	movs	r2, #1
 80039f2:	fa02 f303 	lsl.w	r3, r2, r3
 80039f6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	43db      	mvns	r3, r3
 8003a04:	69f9      	ldr	r1, [r7, #28]
 8003a06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a10:	015a      	lsls	r2, r3, #5
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	4413      	add	r3, r2
 8003a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d132      	bne.n	8003a8e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003a28:	6879      	ldr	r1, [r7, #4]
 8003a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	00db      	lsls	r3, r3, #3
 8003a30:	1a9b      	subs	r3, r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	440b      	add	r3, r1
 8003a36:	3348      	adds	r3, #72	; 0x48
 8003a38:	6819      	ldr	r1, [r3, #0]
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a3e:	4613      	mov	r3, r2
 8003a40:	00db      	lsls	r3, r3, #3
 8003a42:	1a9b      	subs	r3, r3, r2
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	4403      	add	r3, r0
 8003a48:	3344      	adds	r3, #68	; 0x44
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4419      	add	r1, r3
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a52:	4613      	mov	r3, r2
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	1a9b      	subs	r3, r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	4403      	add	r3, r0
 8003a5c:	3348      	adds	r3, #72	; 0x48
 8003a5e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d113      	bne.n	8003a8e <HAL_PCD_IRQHandler+0x31c>
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	00db      	lsls	r3, r3, #3
 8003a6e:	1a9b      	subs	r3, r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	440b      	add	r3, r1
 8003a74:	3350      	adds	r3, #80	; 0x50
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d108      	bne.n	8003a8e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6818      	ldr	r0, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003a86:	461a      	mov	r2, r3
 8003a88:	2101      	movs	r1, #1
 8003a8a:	f003 fcf3 	bl	8007474 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	4619      	mov	r1, r3
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f005 fca2 	bl	80093de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	f003 0308 	and.w	r3, r3, #8
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d008      	beq.n	8003ab6 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa6:	015a      	lsls	r2, r3, #5
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	4413      	add	r3, r2
 8003aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	2308      	movs	r3, #8
 8003ab4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	f003 0310 	and.w	r3, r3, #16
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d008      	beq.n	8003ad2 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac2:	015a      	lsls	r2, r3, #5
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003acc:	461a      	mov	r2, r3
 8003ace:	2310      	movs	r3, #16
 8003ad0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d008      	beq.n	8003aee <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	015a      	lsls	r2, r3, #5
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ae8:	461a      	mov	r2, r3
 8003aea:	2340      	movs	r3, #64	; 0x40
 8003aec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d008      	beq.n	8003b0a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afa:	015a      	lsls	r2, r3, #5
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	4413      	add	r3, r2
 8003b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b04:	461a      	mov	r2, r3
 8003b06:	2302      	movs	r3, #2
 8003b08:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d003      	beq.n	8003b1c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003b14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 fc1b 	bl	8004352 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1e:	3301      	adds	r3, #1
 8003b20:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b24:	085b      	lsrs	r3, r3, #1
 8003b26:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	f47f af49 	bne.w	80039c2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f003 fbd8 	bl	80072ea <USB_ReadInterrupts>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b44:	d122      	bne.n	8003b8c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	69fa      	ldr	r2, [r7, #28]
 8003b50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b54:	f023 0301 	bic.w	r3, r3, #1
 8003b58:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d108      	bne.n	8003b76 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 fe26 	bl	80047c0 <HAL_PCDEx_LPM_Callback>
 8003b74:	e002      	b.n	8003b7c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f005 fc9e 	bl	80094b8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	695a      	ldr	r2, [r3, #20]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003b8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f003 fbaa 	bl	80072ea <USB_ReadInterrupts>
 8003b96:	4603      	mov	r3, r0
 8003b98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ba0:	d112      	bne.n	8003bc8 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d102      	bne.n	8003bb8 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f005 fc5a 	bl	800946c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	695a      	ldr	r2, [r3, #20]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003bc6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f003 fb8c 	bl	80072ea <USB_ReadInterrupts>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bdc:	f040 80c7 	bne.w	8003d6e <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	69fa      	ldr	r2, [r7, #28]
 8003bea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bee:	f023 0301 	bic.w	r3, r3, #1
 8003bf2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2110      	movs	r1, #16
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f002 fc26 	bl	800644c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c00:	2300      	movs	r3, #0
 8003c02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c04:	e056      	b.n	8003cb4 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c08:	015a      	lsls	r2, r3, #5
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c12:	461a      	mov	r2, r3
 8003c14:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c18:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c1c:	015a      	lsls	r2, r3, #5
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	4413      	add	r3, r2
 8003c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c2a:	0151      	lsls	r1, r2, #5
 8003c2c:	69fa      	ldr	r2, [r7, #28]
 8003c2e:	440a      	add	r2, r1
 8003c30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c34:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c38:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c3c:	015a      	lsls	r2, r3, #5
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	4413      	add	r3, r2
 8003c42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c4a:	0151      	lsls	r1, r2, #5
 8003c4c:	69fa      	ldr	r2, [r7, #28]
 8003c4e:	440a      	add	r2, r1
 8003c50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c54:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c58:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c5c:	015a      	lsls	r2, r3, #5
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	4413      	add	r3, r2
 8003c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c66:	461a      	mov	r2, r3
 8003c68:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c6c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c70:	015a      	lsls	r2, r3, #5
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	4413      	add	r3, r2
 8003c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c7e:	0151      	lsls	r1, r2, #5
 8003c80:	69fa      	ldr	r2, [r7, #28]
 8003c82:	440a      	add	r2, r1
 8003c84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c88:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c8c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c90:	015a      	lsls	r2, r3, #5
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	4413      	add	r3, r2
 8003c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c9e:	0151      	lsls	r1, r2, #5
 8003ca0:	69fa      	ldr	r2, [r7, #28]
 8003ca2:	440a      	add	r2, r1
 8003ca4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ca8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003cac:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d3a3      	bcc.n	8003c06 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cc4:	69db      	ldr	r3, [r3, #28]
 8003cc6:	69fa      	ldr	r2, [r7, #28]
 8003cc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ccc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003cd0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d016      	beq.n	8003d08 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ce0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ce4:	69fa      	ldr	r2, [r7, #28]
 8003ce6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cea:	f043 030b 	orr.w	r3, r3, #11
 8003cee:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfa:	69fa      	ldr	r2, [r7, #28]
 8003cfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d00:	f043 030b 	orr.w	r3, r3, #11
 8003d04:	6453      	str	r3, [r2, #68]	; 0x44
 8003d06:	e015      	b.n	8003d34 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d0e:	695b      	ldr	r3, [r3, #20]
 8003d10:	69fa      	ldr	r2, [r7, #28]
 8003d12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d16:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003d1a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003d1e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	69fa      	ldr	r2, [r7, #28]
 8003d2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d2e:	f043 030b 	orr.w	r3, r3, #11
 8003d32:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	69fa      	ldr	r2, [r7, #28]
 8003d3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d42:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003d46:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6818      	ldr	r0, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d58:	461a      	mov	r2, r3
 8003d5a:	f003 fb8b 	bl	8007474 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	695a      	ldr	r2, [r3, #20]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003d6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f003 fab9 	bl	80072ea <USB_ReadInterrupts>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d82:	d124      	bne.n	8003dce <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f003 fb4f 	bl	800742c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f002 fbb7 	bl	8006506 <USB_GetDevSpeed>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681c      	ldr	r4, [r3, #0]
 8003da4:	f001 f958 	bl	8005058 <HAL_RCC_GetHCLKFreq>
 8003da8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	461a      	mov	r2, r3
 8003db2:	4620      	mov	r0, r4
 8003db4:	f002 f8d6 	bl	8005f64 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f005 fb38 	bl	800942e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	695a      	ldr	r2, [r3, #20]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003dcc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f003 fa89 	bl	80072ea <USB_ReadInterrupts>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	f003 0308 	and.w	r3, r3, #8
 8003dde:	2b08      	cmp	r3, #8
 8003de0:	d10a      	bne.n	8003df8 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f005 fb15 	bl	8009412 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	695a      	ldr	r2, [r3, #20]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f002 0208 	and.w	r2, r2, #8
 8003df6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f003 fa74 	bl	80072ea <USB_ReadInterrupts>
 8003e02:	4603      	mov	r3, r0
 8003e04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e0c:	d10f      	bne.n	8003e2e <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	4619      	mov	r1, r3
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f005 fb6d 	bl	80094f8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	695a      	ldr	r2, [r3, #20]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003e2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f003 fa59 	bl	80072ea <USB_ReadInterrupts>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e42:	d10f      	bne.n	8003e64 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003e44:	2300      	movs	r3, #0
 8003e46:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f005 fb40 	bl	80094d4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	695a      	ldr	r2, [r3, #20]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003e62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f003 fa3e 	bl	80072ea <USB_ReadInterrupts>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e78:	d10a      	bne.n	8003e90 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f005 fb4e 	bl	800951c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	695a      	ldr	r2, [r3, #20]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003e8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4618      	mov	r0, r3
 8003e96:	f003 fa28 	bl	80072ea <USB_ReadInterrupts>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	f003 0304 	and.w	r3, r3, #4
 8003ea0:	2b04      	cmp	r3, #4
 8003ea2:	d115      	bne.n	8003ed0 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	f003 0304 	and.w	r3, r3, #4
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d002      	beq.n	8003ebc <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f005 fb3e 	bl	8009538 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6859      	ldr	r1, [r3, #4]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	69ba      	ldr	r2, [r7, #24]
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	605a      	str	r2, [r3, #4]
 8003ecc:	e000      	b.n	8003ed0 <HAL_PCD_IRQHandler+0x75e>
      return;
 8003ece:	bf00      	nop
    }
  }
}
 8003ed0:	3734      	adds	r7, #52	; 0x34
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd90      	pop	{r4, r7, pc}

08003ed6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b082      	sub	sp, #8
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
 8003ede:	460b      	mov	r3, r1
 8003ee0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d101      	bne.n	8003ef0 <HAL_PCD_SetAddress+0x1a>
 8003eec:	2302      	movs	r3, #2
 8003eee:	e013      	b.n	8003f18 <HAL_PCD_SetAddress+0x42>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	78fa      	ldrb	r2, [r7, #3]
 8003efc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	78fa      	ldrb	r2, [r7, #3]
 8003f06:	4611      	mov	r1, r2
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f003 f986 	bl	800721a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3708      	adds	r7, #8
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	4608      	mov	r0, r1
 8003f2a:	4611      	mov	r1, r2
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	4603      	mov	r3, r0
 8003f30:	70fb      	strb	r3, [r7, #3]
 8003f32:	460b      	mov	r3, r1
 8003f34:	803b      	strh	r3, [r7, #0]
 8003f36:	4613      	mov	r3, r2
 8003f38:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	da0f      	bge.n	8003f66 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f46:	78fb      	ldrb	r3, [r7, #3]
 8003f48:	f003 020f 	and.w	r2, r3, #15
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	1a9b      	subs	r3, r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	3338      	adds	r3, #56	; 0x38
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	4413      	add	r3, r2
 8003f5a:	3304      	adds	r3, #4
 8003f5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2201      	movs	r2, #1
 8003f62:	705a      	strb	r2, [r3, #1]
 8003f64:	e00f      	b.n	8003f86 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f66:	78fb      	ldrb	r3, [r7, #3]
 8003f68:	f003 020f 	and.w	r2, r3, #15
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	1a9b      	subs	r3, r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	3304      	adds	r3, #4
 8003f7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003f86:	78fb      	ldrb	r3, [r7, #3]
 8003f88:	f003 030f 	and.w	r3, r3, #15
 8003f8c:	b2da      	uxtb	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003f92:	883a      	ldrh	r2, [r7, #0]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	78ba      	ldrb	r2, [r7, #2]
 8003f9c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	785b      	ldrb	r3, [r3, #1]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d004      	beq.n	8003fb0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003fb0:	78bb      	ldrb	r3, [r7, #2]
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d102      	bne.n	8003fbc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d101      	bne.n	8003fca <HAL_PCD_EP_Open+0xaa>
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	e00e      	b.n	8003fe8 <HAL_PCD_EP_Open+0xc8>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68f9      	ldr	r1, [r7, #12]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f002 fab9 	bl	8006550 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003fe6:	7afb      	ldrb	r3, [r7, #11]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3710      	adds	r7, #16
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ffc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004000:	2b00      	cmp	r3, #0
 8004002:	da0f      	bge.n	8004024 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004004:	78fb      	ldrb	r3, [r7, #3]
 8004006:	f003 020f 	and.w	r2, r3, #15
 800400a:	4613      	mov	r3, r2
 800400c:	00db      	lsls	r3, r3, #3
 800400e:	1a9b      	subs	r3, r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	3338      	adds	r3, #56	; 0x38
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	4413      	add	r3, r2
 8004018:	3304      	adds	r3, #4
 800401a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2201      	movs	r2, #1
 8004020:	705a      	strb	r2, [r3, #1]
 8004022:	e00f      	b.n	8004044 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004024:	78fb      	ldrb	r3, [r7, #3]
 8004026:	f003 020f 	and.w	r2, r3, #15
 800402a:	4613      	mov	r3, r2
 800402c:	00db      	lsls	r3, r3, #3
 800402e:	1a9b      	subs	r3, r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	4413      	add	r3, r2
 800403a:	3304      	adds	r3, #4
 800403c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004044:	78fb      	ldrb	r3, [r7, #3]
 8004046:	f003 030f 	and.w	r3, r3, #15
 800404a:	b2da      	uxtb	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004056:	2b01      	cmp	r3, #1
 8004058:	d101      	bne.n	800405e <HAL_PCD_EP_Close+0x6e>
 800405a:	2302      	movs	r3, #2
 800405c:	e00e      	b.n	800407c <HAL_PCD_EP_Close+0x8c>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68f9      	ldr	r1, [r7, #12]
 800406c:	4618      	mov	r0, r3
 800406e:	f002 faf7 	bl	8006660 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b086      	sub	sp, #24
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	607a      	str	r2, [r7, #4]
 800408e:	603b      	str	r3, [r7, #0]
 8004090:	460b      	mov	r3, r1
 8004092:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004094:	7afb      	ldrb	r3, [r7, #11]
 8004096:	f003 020f 	and.w	r2, r3, #15
 800409a:	4613      	mov	r3, r2
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	1a9b      	subs	r3, r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	4413      	add	r3, r2
 80040aa:	3304      	adds	r3, #4
 80040ac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	2200      	movs	r2, #0
 80040be:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	2200      	movs	r2, #0
 80040c4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040c6:	7afb      	ldrb	r3, [r7, #11]
 80040c8:	f003 030f 	and.w	r3, r3, #15
 80040cc:	b2da      	uxtb	r2, r3
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d102      	bne.n	80040e0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80040e0:	7afb      	ldrb	r3, [r7, #11]
 80040e2:	f003 030f 	and.w	r3, r3, #15
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d109      	bne.n	80040fe <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6818      	ldr	r0, [r3, #0]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	461a      	mov	r2, r3
 80040f6:	6979      	ldr	r1, [r7, #20]
 80040f8:	f002 fdd2 	bl	8006ca0 <USB_EP0StartXfer>
 80040fc:	e008      	b.n	8004110 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6818      	ldr	r0, [r3, #0]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	b2db      	uxtb	r3, r3
 8004108:	461a      	mov	r2, r3
 800410a:	6979      	ldr	r1, [r7, #20]
 800410c:	f002 fb84 	bl	8006818 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3718      	adds	r7, #24
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800411a:	b480      	push	{r7}
 800411c:	b083      	sub	sp, #12
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
 8004122:	460b      	mov	r3, r1
 8004124:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004126:	78fb      	ldrb	r3, [r7, #3]
 8004128:	f003 020f 	and.w	r2, r3, #15
 800412c:	6879      	ldr	r1, [r7, #4]
 800412e:	4613      	mov	r3, r2
 8004130:	00db      	lsls	r3, r3, #3
 8004132:	1a9b      	subs	r3, r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	440b      	add	r3, r1
 8004138:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800413c:	681b      	ldr	r3, [r3, #0]
}
 800413e:	4618      	mov	r0, r3
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800414a:	b580      	push	{r7, lr}
 800414c:	b086      	sub	sp, #24
 800414e:	af00      	add	r7, sp, #0
 8004150:	60f8      	str	r0, [r7, #12]
 8004152:	607a      	str	r2, [r7, #4]
 8004154:	603b      	str	r3, [r7, #0]
 8004156:	460b      	mov	r3, r1
 8004158:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800415a:	7afb      	ldrb	r3, [r7, #11]
 800415c:	f003 020f 	and.w	r2, r3, #15
 8004160:	4613      	mov	r3, r2
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	1a9b      	subs	r3, r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	3338      	adds	r3, #56	; 0x38
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	4413      	add	r3, r2
 800416e:	3304      	adds	r3, #4
 8004170:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	2200      	movs	r2, #0
 8004182:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	2201      	movs	r2, #1
 8004188:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800418a:	7afb      	ldrb	r3, [r7, #11]
 800418c:	f003 030f 	and.w	r3, r3, #15
 8004190:	b2da      	uxtb	r2, r3
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d102      	bne.n	80041a4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80041a4:	7afb      	ldrb	r3, [r7, #11]
 80041a6:	f003 030f 	and.w	r3, r3, #15
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d109      	bne.n	80041c2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6818      	ldr	r0, [r3, #0]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	461a      	mov	r2, r3
 80041ba:	6979      	ldr	r1, [r7, #20]
 80041bc:	f002 fd70 	bl	8006ca0 <USB_EP0StartXfer>
 80041c0:	e008      	b.n	80041d4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6818      	ldr	r0, [r3, #0]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	461a      	mov	r2, r3
 80041ce:	6979      	ldr	r1, [r7, #20]
 80041d0:	f002 fb22 	bl	8006818 <USB_EPStartXfer>
  }

  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3718      	adds	r7, #24
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b084      	sub	sp, #16
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
 80041e6:	460b      	mov	r3, r1
 80041e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80041ea:	78fb      	ldrb	r3, [r7, #3]
 80041ec:	f003 020f 	and.w	r2, r3, #15
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d901      	bls.n	80041fc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e050      	b.n	800429e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80041fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004200:	2b00      	cmp	r3, #0
 8004202:	da0f      	bge.n	8004224 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004204:	78fb      	ldrb	r3, [r7, #3]
 8004206:	f003 020f 	and.w	r2, r3, #15
 800420a:	4613      	mov	r3, r2
 800420c:	00db      	lsls	r3, r3, #3
 800420e:	1a9b      	subs	r3, r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	3338      	adds	r3, #56	; 0x38
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	4413      	add	r3, r2
 8004218:	3304      	adds	r3, #4
 800421a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2201      	movs	r2, #1
 8004220:	705a      	strb	r2, [r3, #1]
 8004222:	e00d      	b.n	8004240 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004224:	78fa      	ldrb	r2, [r7, #3]
 8004226:	4613      	mov	r3, r2
 8004228:	00db      	lsls	r3, r3, #3
 800422a:	1a9b      	subs	r3, r3, r2
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	4413      	add	r3, r2
 8004236:	3304      	adds	r3, #4
 8004238:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2201      	movs	r2, #1
 8004244:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004246:	78fb      	ldrb	r3, [r7, #3]
 8004248:	f003 030f 	and.w	r3, r3, #15
 800424c:	b2da      	uxtb	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004258:	2b01      	cmp	r3, #1
 800425a:	d101      	bne.n	8004260 <HAL_PCD_EP_SetStall+0x82>
 800425c:	2302      	movs	r3, #2
 800425e:	e01e      	b.n	800429e <HAL_PCD_EP_SetStall+0xc0>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68f9      	ldr	r1, [r7, #12]
 800426e:	4618      	mov	r0, r3
 8004270:	f002 feff 	bl	8007072 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004274:	78fb      	ldrb	r3, [r7, #3]
 8004276:	f003 030f 	and.w	r3, r3, #15
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10a      	bne.n	8004294 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6818      	ldr	r0, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	b2d9      	uxtb	r1, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800428e:	461a      	mov	r2, r3
 8004290:	f003 f8f0 	bl	8007474 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3710      	adds	r7, #16
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b084      	sub	sp, #16
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
 80042ae:	460b      	mov	r3, r1
 80042b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80042b2:	78fb      	ldrb	r3, [r7, #3]
 80042b4:	f003 020f 	and.w	r2, r3, #15
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d901      	bls.n	80042c4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e042      	b.n	800434a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80042c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	da0f      	bge.n	80042ec <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042cc:	78fb      	ldrb	r3, [r7, #3]
 80042ce:	f003 020f 	and.w	r2, r3, #15
 80042d2:	4613      	mov	r3, r2
 80042d4:	00db      	lsls	r3, r3, #3
 80042d6:	1a9b      	subs	r3, r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	3338      	adds	r3, #56	; 0x38
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	4413      	add	r3, r2
 80042e0:	3304      	adds	r3, #4
 80042e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2201      	movs	r2, #1
 80042e8:	705a      	strb	r2, [r3, #1]
 80042ea:	e00f      	b.n	800430c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042ec:	78fb      	ldrb	r3, [r7, #3]
 80042ee:	f003 020f 	and.w	r2, r3, #15
 80042f2:	4613      	mov	r3, r2
 80042f4:	00db      	lsls	r3, r3, #3
 80042f6:	1a9b      	subs	r3, r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	4413      	add	r3, r2
 8004302:	3304      	adds	r3, #4
 8004304:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004312:	78fb      	ldrb	r3, [r7, #3]
 8004314:	f003 030f 	and.w	r3, r3, #15
 8004318:	b2da      	uxtb	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004324:	2b01      	cmp	r3, #1
 8004326:	d101      	bne.n	800432c <HAL_PCD_EP_ClrStall+0x86>
 8004328:	2302      	movs	r3, #2
 800432a:	e00e      	b.n	800434a <HAL_PCD_EP_ClrStall+0xa4>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68f9      	ldr	r1, [r7, #12]
 800433a:	4618      	mov	r0, r3
 800433c:	f002 ff07 	bl	800714e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b08a      	sub	sp, #40	; 0x28
 8004356:	af02      	add	r7, sp, #8
 8004358:	6078      	str	r0, [r7, #4]
 800435a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004366:	683a      	ldr	r2, [r7, #0]
 8004368:	4613      	mov	r3, r2
 800436a:	00db      	lsls	r3, r3, #3
 800436c:	1a9b      	subs	r3, r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	3338      	adds	r3, #56	; 0x38
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	4413      	add	r3, r2
 8004376:	3304      	adds	r3, #4
 8004378:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	699a      	ldr	r2, [r3, #24]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	429a      	cmp	r2, r3
 8004384:	d901      	bls.n	800438a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e06c      	b.n	8004464 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	695a      	ldr	r2, [r3, #20]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	69fa      	ldr	r2, [r7, #28]
 800439c:	429a      	cmp	r2, r3
 800439e:	d902      	bls.n	80043a6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	3303      	adds	r3, #3
 80043aa:	089b      	lsrs	r3, r3, #2
 80043ac:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80043ae:	e02b      	b.n	8004408 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	695a      	ldr	r2, [r3, #20]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	69fa      	ldr	r2, [r7, #28]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d902      	bls.n	80043cc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	3303      	adds	r3, #3
 80043d0:	089b      	lsrs	r3, r3, #2
 80043d2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	68d9      	ldr	r1, [r3, #12]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	b2da      	uxtb	r2, r3
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	9300      	str	r3, [sp, #0]
 80043e8:	4603      	mov	r3, r0
 80043ea:	6978      	ldr	r0, [r7, #20]
 80043ec:	f002 fdab 	bl	8006f46 <USB_WritePacket>

    ep->xfer_buff  += len;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	68da      	ldr	r2, [r3, #12]
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	441a      	add	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	699a      	ldr	r2, [r3, #24]
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	441a      	add	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	015a      	lsls	r2, r3, #5
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	4413      	add	r3, r2
 8004410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	b29b      	uxth	r3, r3
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	429a      	cmp	r2, r3
 800441c:	d809      	bhi.n	8004432 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	699a      	ldr	r2, [r3, #24]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004426:	429a      	cmp	r2, r3
 8004428:	d203      	bcs.n	8004432 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1be      	bne.n	80043b0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	695a      	ldr	r2, [r3, #20]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	429a      	cmp	r2, r3
 800443c:	d811      	bhi.n	8004462 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	f003 030f 	and.w	r3, r3, #15
 8004444:	2201      	movs	r2, #1
 8004446:	fa02 f303 	lsl.w	r3, r2, r3
 800444a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004452:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	43db      	mvns	r3, r3
 8004458:	6939      	ldr	r1, [r7, #16]
 800445a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800445e:	4013      	ands	r3, r2
 8004460:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3720      	adds	r7, #32
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	333c      	adds	r3, #60	; 0x3c
 8004484:	3304      	adds	r3, #4
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	015a      	lsls	r2, r3, #5
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	4413      	add	r3, r2
 8004492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	f040 80a0 	bne.w	80045e4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	f003 0308 	and.w	r3, r3, #8
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d015      	beq.n	80044da <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	4a72      	ldr	r2, [pc, #456]	; (800467c <PCD_EP_OutXfrComplete_int+0x210>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	f240 80dd 	bls.w	8004672 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f000 80d7 	beq.w	8004672 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	015a      	lsls	r2, r3, #5
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	4413      	add	r3, r2
 80044cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044d0:	461a      	mov	r2, r3
 80044d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044d6:	6093      	str	r3, [r2, #8]
 80044d8:	e0cb      	b.n	8004672 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	f003 0320 	and.w	r3, r3, #32
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d009      	beq.n	80044f8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	015a      	lsls	r2, r3, #5
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	4413      	add	r3, r2
 80044ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f0:	461a      	mov	r2, r3
 80044f2:	2320      	movs	r3, #32
 80044f4:	6093      	str	r3, [r2, #8]
 80044f6:	e0bc      	b.n	8004672 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80044fe:	2b00      	cmp	r3, #0
 8004500:	f040 80b7 	bne.w	8004672 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	4a5d      	ldr	r2, [pc, #372]	; (800467c <PCD_EP_OutXfrComplete_int+0x210>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d90f      	bls.n	800452c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00a      	beq.n	800452c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	015a      	lsls	r2, r3, #5
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	4413      	add	r3, r2
 800451e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004522:	461a      	mov	r2, r3
 8004524:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004528:	6093      	str	r3, [r2, #8]
 800452a:	e0a2      	b.n	8004672 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800452c:	6879      	ldr	r1, [r7, #4]
 800452e:	683a      	ldr	r2, [r7, #0]
 8004530:	4613      	mov	r3, r2
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	1a9b      	subs	r3, r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	440b      	add	r3, r1
 800453a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800453e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	0159      	lsls	r1, r3, #5
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	440b      	add	r3, r1
 8004548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004552:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	683a      	ldr	r2, [r7, #0]
 8004558:	4613      	mov	r3, r2
 800455a:	00db      	lsls	r3, r3, #3
 800455c:	1a9b      	subs	r3, r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	4403      	add	r3, r0
 8004562:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004566:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004568:	6879      	ldr	r1, [r7, #4]
 800456a:	683a      	ldr	r2, [r7, #0]
 800456c:	4613      	mov	r3, r2
 800456e:	00db      	lsls	r3, r3, #3
 8004570:	1a9b      	subs	r3, r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	440b      	add	r3, r1
 8004576:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800457a:	6819      	ldr	r1, [r3, #0]
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	4613      	mov	r3, r2
 8004582:	00db      	lsls	r3, r3, #3
 8004584:	1a9b      	subs	r3, r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4403      	add	r3, r0
 800458a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4419      	add	r1, r3
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	683a      	ldr	r2, [r7, #0]
 8004596:	4613      	mov	r3, r2
 8004598:	00db      	lsls	r3, r3, #3
 800459a:	1a9b      	subs	r3, r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	4403      	add	r3, r0
 80045a0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80045a4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d114      	bne.n	80045d6 <PCD_EP_OutXfrComplete_int+0x16a>
 80045ac:	6879      	ldr	r1, [r7, #4]
 80045ae:	683a      	ldr	r2, [r7, #0]
 80045b0:	4613      	mov	r3, r2
 80045b2:	00db      	lsls	r3, r3, #3
 80045b4:	1a9b      	subs	r3, r3, r2
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	440b      	add	r3, r1
 80045ba:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d108      	bne.n	80045d6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6818      	ldr	r0, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80045ce:	461a      	mov	r2, r3
 80045d0:	2101      	movs	r1, #1
 80045d2:	f002 ff4f 	bl	8007474 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	4619      	mov	r1, r3
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f004 fee3 	bl	80093a8 <HAL_PCD_DataOutStageCallback>
 80045e2:	e046      	b.n	8004672 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	4a26      	ldr	r2, [pc, #152]	; (8004680 <PCD_EP_OutXfrComplete_int+0x214>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d124      	bne.n	8004636 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00a      	beq.n	800460c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	015a      	lsls	r2, r3, #5
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	4413      	add	r3, r2
 80045fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004602:	461a      	mov	r2, r3
 8004604:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004608:	6093      	str	r3, [r2, #8]
 800460a:	e032      	b.n	8004672 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	f003 0320 	and.w	r3, r3, #32
 8004612:	2b00      	cmp	r3, #0
 8004614:	d008      	beq.n	8004628 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	015a      	lsls	r2, r3, #5
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	4413      	add	r3, r2
 800461e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004622:	461a      	mov	r2, r3
 8004624:	2320      	movs	r3, #32
 8004626:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	b2db      	uxtb	r3, r3
 800462c:	4619      	mov	r1, r3
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f004 feba 	bl	80093a8 <HAL_PCD_DataOutStageCallback>
 8004634:	e01d      	b.n	8004672 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d114      	bne.n	8004666 <PCD_EP_OutXfrComplete_int+0x1fa>
 800463c:	6879      	ldr	r1, [r7, #4]
 800463e:	683a      	ldr	r2, [r7, #0]
 8004640:	4613      	mov	r3, r2
 8004642:	00db      	lsls	r3, r3, #3
 8004644:	1a9b      	subs	r3, r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	440b      	add	r3, r1
 800464a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d108      	bne.n	8004666 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6818      	ldr	r0, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800465e:	461a      	mov	r2, r3
 8004660:	2100      	movs	r1, #0
 8004662:	f002 ff07 	bl	8007474 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	b2db      	uxtb	r3, r3
 800466a:	4619      	mov	r1, r3
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f004 fe9b 	bl	80093a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3718      	adds	r7, #24
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	4f54300a 	.word	0x4f54300a
 8004680:	4f54310a 	.word	0x4f54310a

08004684 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	333c      	adds	r3, #60	; 0x3c
 800469c:	3304      	adds	r3, #4
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	015a      	lsls	r2, r3, #5
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	4413      	add	r3, r2
 80046aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	4a15      	ldr	r2, [pc, #84]	; (800470c <PCD_EP_OutSetupPacket_int+0x88>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d90e      	bls.n	80046d8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d009      	beq.n	80046d8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	015a      	lsls	r2, r3, #5
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	4413      	add	r3, r2
 80046cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046d0:	461a      	mov	r2, r3
 80046d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046d6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f004 fe53 	bl	8009384 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	4a0a      	ldr	r2, [pc, #40]	; (800470c <PCD_EP_OutSetupPacket_int+0x88>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d90c      	bls.n	8004700 <PCD_EP_OutSetupPacket_int+0x7c>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d108      	bne.n	8004700 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6818      	ldr	r0, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80046f8:	461a      	mov	r2, r3
 80046fa:	2101      	movs	r1, #1
 80046fc:	f002 feba 	bl	8007474 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3718      	adds	r7, #24
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	4f54300a 	.word	0x4f54300a

08004710 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	460b      	mov	r3, r1
 800471a:	70fb      	strb	r3, [r7, #3]
 800471c:	4613      	mov	r3, r2
 800471e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004726:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004728:	78fb      	ldrb	r3, [r7, #3]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d107      	bne.n	800473e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800472e:	883b      	ldrh	r3, [r7, #0]
 8004730:	0419      	lsls	r1, r3, #16
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68ba      	ldr	r2, [r7, #8]
 8004738:	430a      	orrs	r2, r1
 800473a:	629a      	str	r2, [r3, #40]	; 0x28
 800473c:	e028      	b.n	8004790 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004744:	0c1b      	lsrs	r3, r3, #16
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	4413      	add	r3, r2
 800474a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800474c:	2300      	movs	r3, #0
 800474e:	73fb      	strb	r3, [r7, #15]
 8004750:	e00d      	b.n	800476e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	7bfb      	ldrb	r3, [r7, #15]
 8004758:	3340      	adds	r3, #64	; 0x40
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4413      	add	r3, r2
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	0c1b      	lsrs	r3, r3, #16
 8004762:	68ba      	ldr	r2, [r7, #8]
 8004764:	4413      	add	r3, r2
 8004766:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004768:	7bfb      	ldrb	r3, [r7, #15]
 800476a:	3301      	adds	r3, #1
 800476c:	73fb      	strb	r3, [r7, #15]
 800476e:	7bfa      	ldrb	r2, [r7, #15]
 8004770:	78fb      	ldrb	r3, [r7, #3]
 8004772:	3b01      	subs	r3, #1
 8004774:	429a      	cmp	r2, r3
 8004776:	d3ec      	bcc.n	8004752 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004778:	883b      	ldrh	r3, [r7, #0]
 800477a:	0418      	lsls	r0, r3, #16
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6819      	ldr	r1, [r3, #0]
 8004780:	78fb      	ldrb	r3, [r7, #3]
 8004782:	3b01      	subs	r3, #1
 8004784:	68ba      	ldr	r2, [r7, #8]
 8004786:	4302      	orrs	r2, r0
 8004788:	3340      	adds	r3, #64	; 0x40
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	440b      	add	r3, r1
 800478e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3714      	adds	r7, #20
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr

0800479e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800479e:	b480      	push	{r7}
 80047a0:	b083      	sub	sp, #12
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
 80047a6:	460b      	mov	r3, r1
 80047a8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	887a      	ldrh	r2, [r7, #2]
 80047b0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	460b      	mov	r3, r1
 80047ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b086      	sub	sp, #24
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e264      	b.n	8004cb4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d075      	beq.n	80048e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047f6:	4ba3      	ldr	r3, [pc, #652]	; (8004a84 <HAL_RCC_OscConfig+0x2ac>)
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f003 030c 	and.w	r3, r3, #12
 80047fe:	2b04      	cmp	r3, #4
 8004800:	d00c      	beq.n	800481c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004802:	4ba0      	ldr	r3, [pc, #640]	; (8004a84 <HAL_RCC_OscConfig+0x2ac>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800480a:	2b08      	cmp	r3, #8
 800480c:	d112      	bne.n	8004834 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800480e:	4b9d      	ldr	r3, [pc, #628]	; (8004a84 <HAL_RCC_OscConfig+0x2ac>)
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004816:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800481a:	d10b      	bne.n	8004834 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800481c:	4b99      	ldr	r3, [pc, #612]	; (8004a84 <HAL_RCC_OscConfig+0x2ac>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d05b      	beq.n	80048e0 <HAL_RCC_OscConfig+0x108>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d157      	bne.n	80048e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e23f      	b.n	8004cb4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800483c:	d106      	bne.n	800484c <HAL_RCC_OscConfig+0x74>
 800483e:	4b91      	ldr	r3, [pc, #580]	; (8004a84 <HAL_RCC_OscConfig+0x2ac>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a90      	ldr	r2, [pc, #576]	; (8004a84 <HAL_RCC_OscConfig+0x2ac>)
 8004844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004848:	6013      	str	r3, [r2, #0]
 800484a:	e01d      	b.n	8004888 <HAL_RCC_OscConfig+0xb0>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004854:	d10c      	bne.n	8004870 <HAL_RCC_OscConfig+0x98>
 8004856:	4b8b      	ldr	r3, [pc, #556]	; (8004a84 <HAL_RCC_OscConfig+0x2ac>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a8a      	ldr	r2, [pc, #552]	; (8004a84 <HAL_RCC_OscConfig+0x2ac>)
 800485c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004860:	6013      	str	r3, [r2, #0]
 8004862:	4b88      	ldr	r3, [pc, #544]	; (8004a84 <HAL_RCC_OscConfig+0x2ac>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a87      	ldr	r2, [pc, #540]	; (8004a84 <HAL_RCC_OscConfig+0x2ac>)
 8004868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800486c:	6013      	str	r3, [r2, #0]
 800486e:	e00b      	b.n	8004888 <HAL_RCC_OscConfig+0xb0>
 8004870:	4b84      	ldr	r3, [pc, #528]	; (8004a84 <HAL_RCC_OscConfig+0x2ac>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a83      	ldr	r2, [pc, #524]	; (8004a84 <HAL_RCC_OscConfig+0x2ac>)
 8004876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800487a:	6013      	str	r3, [r2, #0]
 800487c:	4b81      	ldr	r3, [pc, #516]	; (8004a84 <HAL_RCC_OscConfig+0x2ac>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a80      	ldr	r2, [pc, #512]	; (8004a84 <HAL_RCC_OscConfig+0x2ac>)
 8004882:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004886:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d013      	beq.n	80048b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004890:	f7fd fab0 	bl	8001df4 <HAL_GetTick>
 8004894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004896:	e008      	b.n	80048aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004898:	f7fd faac 	bl	8001df4 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b64      	cmp	r3, #100	; 0x64
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e204      	b.n	8004cb4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048aa:	4b76      	ldr	r3, [pc, #472]	; (8004a84 <HAL_RCC_OscConfig+0x2ac>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d0f0      	beq.n	8004898 <HAL_RCC_OscConfig+0xc0>
 80048b6:	e014      	b.n	80048e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b8:	f7fd fa9c 	bl	8001df4 <HAL_GetTick>
 80048bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048be:	e008      	b.n	80048d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048c0:	f7fd fa98 	bl	8001df4 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	2b64      	cmp	r3, #100	; 0x64
 80048cc:	d901      	bls.n	80048d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e1f0      	b.n	8004cb4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048d2:	4b6c      	ldr	r3, [pc, #432]	; (8004a84 <HAL_RCC_OscConfig+0x2ac>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1f0      	bne.n	80048c0 <HAL_RCC_OscConfig+0xe8>
 80048de:	e000      	b.n	80048e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d063      	beq.n	80049b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048ee:	4b65      	ldr	r3, [pc, #404]	; (8004a84 <HAL_RCC_OscConfig+0x2ac>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f003 030c 	and.w	r3, r3, #12
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00b      	beq.n	8004912 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048fa:	4b62      	ldr	r3, [pc, #392]	; (8004a84 <HAL_RCC_OscConfig+0x2ac>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004902:	2b08      	cmp	r3, #8
 8004904:	d11c      	bne.n	8004940 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004906:	4b5f      	ldr	r3, [pc, #380]	; (8004a84 <HAL_RCC_OscConfig+0x2ac>)
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d116      	bne.n	8004940 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004912:	4b5c      	ldr	r3, [pc, #368]	; (8004a84 <HAL_RCC_OscConfig+0x2ac>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d005      	beq.n	800492a <HAL_RCC_OscConfig+0x152>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d001      	beq.n	800492a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e1c4      	b.n	8004cb4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800492a:	4b56      	ldr	r3, [pc, #344]	; (8004a84 <HAL_RCC_OscConfig+0x2ac>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	00db      	lsls	r3, r3, #3
 8004938:	4952      	ldr	r1, [pc, #328]	; (8004a84 <HAL_RCC_OscConfig+0x2ac>)
 800493a:	4313      	orrs	r3, r2
 800493c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800493e:	e03a      	b.n	80049b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d020      	beq.n	800498a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004948:	4b4f      	ldr	r3, [pc, #316]	; (8004a88 <HAL_RCC_OscConfig+0x2b0>)
 800494a:	2201      	movs	r2, #1
 800494c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800494e:	f7fd fa51 	bl	8001df4 <HAL_GetTick>
 8004952:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004954:	e008      	b.n	8004968 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004956:	f7fd fa4d 	bl	8001df4 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	2b02      	cmp	r3, #2
 8004962:	d901      	bls.n	8004968 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e1a5      	b.n	8004cb4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004968:	4b46      	ldr	r3, [pc, #280]	; (8004a84 <HAL_RCC_OscConfig+0x2ac>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d0f0      	beq.n	8004956 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004974:	4b43      	ldr	r3, [pc, #268]	; (8004a84 <HAL_RCC_OscConfig+0x2ac>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	00db      	lsls	r3, r3, #3
 8004982:	4940      	ldr	r1, [pc, #256]	; (8004a84 <HAL_RCC_OscConfig+0x2ac>)
 8004984:	4313      	orrs	r3, r2
 8004986:	600b      	str	r3, [r1, #0]
 8004988:	e015      	b.n	80049b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800498a:	4b3f      	ldr	r3, [pc, #252]	; (8004a88 <HAL_RCC_OscConfig+0x2b0>)
 800498c:	2200      	movs	r2, #0
 800498e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004990:	f7fd fa30 	bl	8001df4 <HAL_GetTick>
 8004994:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004996:	e008      	b.n	80049aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004998:	f7fd fa2c 	bl	8001df4 <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d901      	bls.n	80049aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e184      	b.n	8004cb4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049aa:	4b36      	ldr	r3, [pc, #216]	; (8004a84 <HAL_RCC_OscConfig+0x2ac>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1f0      	bne.n	8004998 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0308 	and.w	r3, r3, #8
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d030      	beq.n	8004a24 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d016      	beq.n	80049f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049ca:	4b30      	ldr	r3, [pc, #192]	; (8004a8c <HAL_RCC_OscConfig+0x2b4>)
 80049cc:	2201      	movs	r2, #1
 80049ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d0:	f7fd fa10 	bl	8001df4 <HAL_GetTick>
 80049d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049d6:	e008      	b.n	80049ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049d8:	f7fd fa0c 	bl	8001df4 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d901      	bls.n	80049ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e164      	b.n	8004cb4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049ea:	4b26      	ldr	r3, [pc, #152]	; (8004a84 <HAL_RCC_OscConfig+0x2ac>)
 80049ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d0f0      	beq.n	80049d8 <HAL_RCC_OscConfig+0x200>
 80049f6:	e015      	b.n	8004a24 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049f8:	4b24      	ldr	r3, [pc, #144]	; (8004a8c <HAL_RCC_OscConfig+0x2b4>)
 80049fa:	2200      	movs	r2, #0
 80049fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049fe:	f7fd f9f9 	bl	8001df4 <HAL_GetTick>
 8004a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a04:	e008      	b.n	8004a18 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a06:	f7fd f9f5 	bl	8001df4 <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d901      	bls.n	8004a18 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e14d      	b.n	8004cb4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a18:	4b1a      	ldr	r3, [pc, #104]	; (8004a84 <HAL_RCC_OscConfig+0x2ac>)
 8004a1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a1c:	f003 0302 	and.w	r3, r3, #2
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1f0      	bne.n	8004a06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0304 	and.w	r3, r3, #4
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f000 80a0 	beq.w	8004b72 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a32:	2300      	movs	r3, #0
 8004a34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a36:	4b13      	ldr	r3, [pc, #76]	; (8004a84 <HAL_RCC_OscConfig+0x2ac>)
 8004a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10f      	bne.n	8004a62 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a42:	2300      	movs	r3, #0
 8004a44:	60bb      	str	r3, [r7, #8]
 8004a46:	4b0f      	ldr	r3, [pc, #60]	; (8004a84 <HAL_RCC_OscConfig+0x2ac>)
 8004a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4a:	4a0e      	ldr	r2, [pc, #56]	; (8004a84 <HAL_RCC_OscConfig+0x2ac>)
 8004a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a50:	6413      	str	r3, [r2, #64]	; 0x40
 8004a52:	4b0c      	ldr	r3, [pc, #48]	; (8004a84 <HAL_RCC_OscConfig+0x2ac>)
 8004a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a5a:	60bb      	str	r3, [r7, #8]
 8004a5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a62:	4b0b      	ldr	r3, [pc, #44]	; (8004a90 <HAL_RCC_OscConfig+0x2b8>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d121      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a6e:	4b08      	ldr	r3, [pc, #32]	; (8004a90 <HAL_RCC_OscConfig+0x2b8>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a07      	ldr	r2, [pc, #28]	; (8004a90 <HAL_RCC_OscConfig+0x2b8>)
 8004a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a7a:	f7fd f9bb 	bl	8001df4 <HAL_GetTick>
 8004a7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a80:	e011      	b.n	8004aa6 <HAL_RCC_OscConfig+0x2ce>
 8004a82:	bf00      	nop
 8004a84:	40023800 	.word	0x40023800
 8004a88:	42470000 	.word	0x42470000
 8004a8c:	42470e80 	.word	0x42470e80
 8004a90:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a94:	f7fd f9ae 	bl	8001df4 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e106      	b.n	8004cb4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aa6:	4b85      	ldr	r3, [pc, #532]	; (8004cbc <HAL_RCC_OscConfig+0x4e4>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d0f0      	beq.n	8004a94 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d106      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x2f0>
 8004aba:	4b81      	ldr	r3, [pc, #516]	; (8004cc0 <HAL_RCC_OscConfig+0x4e8>)
 8004abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004abe:	4a80      	ldr	r2, [pc, #512]	; (8004cc0 <HAL_RCC_OscConfig+0x4e8>)
 8004ac0:	f043 0301 	orr.w	r3, r3, #1
 8004ac4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ac6:	e01c      	b.n	8004b02 <HAL_RCC_OscConfig+0x32a>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	2b05      	cmp	r3, #5
 8004ace:	d10c      	bne.n	8004aea <HAL_RCC_OscConfig+0x312>
 8004ad0:	4b7b      	ldr	r3, [pc, #492]	; (8004cc0 <HAL_RCC_OscConfig+0x4e8>)
 8004ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad4:	4a7a      	ldr	r2, [pc, #488]	; (8004cc0 <HAL_RCC_OscConfig+0x4e8>)
 8004ad6:	f043 0304 	orr.w	r3, r3, #4
 8004ada:	6713      	str	r3, [r2, #112]	; 0x70
 8004adc:	4b78      	ldr	r3, [pc, #480]	; (8004cc0 <HAL_RCC_OscConfig+0x4e8>)
 8004ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae0:	4a77      	ldr	r2, [pc, #476]	; (8004cc0 <HAL_RCC_OscConfig+0x4e8>)
 8004ae2:	f043 0301 	orr.w	r3, r3, #1
 8004ae6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ae8:	e00b      	b.n	8004b02 <HAL_RCC_OscConfig+0x32a>
 8004aea:	4b75      	ldr	r3, [pc, #468]	; (8004cc0 <HAL_RCC_OscConfig+0x4e8>)
 8004aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aee:	4a74      	ldr	r2, [pc, #464]	; (8004cc0 <HAL_RCC_OscConfig+0x4e8>)
 8004af0:	f023 0301 	bic.w	r3, r3, #1
 8004af4:	6713      	str	r3, [r2, #112]	; 0x70
 8004af6:	4b72      	ldr	r3, [pc, #456]	; (8004cc0 <HAL_RCC_OscConfig+0x4e8>)
 8004af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004afa:	4a71      	ldr	r2, [pc, #452]	; (8004cc0 <HAL_RCC_OscConfig+0x4e8>)
 8004afc:	f023 0304 	bic.w	r3, r3, #4
 8004b00:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d015      	beq.n	8004b36 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b0a:	f7fd f973 	bl	8001df4 <HAL_GetTick>
 8004b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b10:	e00a      	b.n	8004b28 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b12:	f7fd f96f 	bl	8001df4 <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d901      	bls.n	8004b28 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e0c5      	b.n	8004cb4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b28:	4b65      	ldr	r3, [pc, #404]	; (8004cc0 <HAL_RCC_OscConfig+0x4e8>)
 8004b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b2c:	f003 0302 	and.w	r3, r3, #2
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d0ee      	beq.n	8004b12 <HAL_RCC_OscConfig+0x33a>
 8004b34:	e014      	b.n	8004b60 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b36:	f7fd f95d 	bl	8001df4 <HAL_GetTick>
 8004b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b3c:	e00a      	b.n	8004b54 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b3e:	f7fd f959 	bl	8001df4 <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d901      	bls.n	8004b54 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e0af      	b.n	8004cb4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b54:	4b5a      	ldr	r3, [pc, #360]	; (8004cc0 <HAL_RCC_OscConfig+0x4e8>)
 8004b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b58:	f003 0302 	and.w	r3, r3, #2
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d1ee      	bne.n	8004b3e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b60:	7dfb      	ldrb	r3, [r7, #23]
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d105      	bne.n	8004b72 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b66:	4b56      	ldr	r3, [pc, #344]	; (8004cc0 <HAL_RCC_OscConfig+0x4e8>)
 8004b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6a:	4a55      	ldr	r2, [pc, #340]	; (8004cc0 <HAL_RCC_OscConfig+0x4e8>)
 8004b6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b70:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	f000 809b 	beq.w	8004cb2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b7c:	4b50      	ldr	r3, [pc, #320]	; (8004cc0 <HAL_RCC_OscConfig+0x4e8>)
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f003 030c 	and.w	r3, r3, #12
 8004b84:	2b08      	cmp	r3, #8
 8004b86:	d05c      	beq.n	8004c42 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	699b      	ldr	r3, [r3, #24]
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d141      	bne.n	8004c14 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b90:	4b4c      	ldr	r3, [pc, #304]	; (8004cc4 <HAL_RCC_OscConfig+0x4ec>)
 8004b92:	2200      	movs	r2, #0
 8004b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b96:	f7fd f92d 	bl	8001df4 <HAL_GetTick>
 8004b9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b9c:	e008      	b.n	8004bb0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b9e:	f7fd f929 	bl	8001df4 <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d901      	bls.n	8004bb0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e081      	b.n	8004cb4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bb0:	4b43      	ldr	r3, [pc, #268]	; (8004cc0 <HAL_RCC_OscConfig+0x4e8>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d1f0      	bne.n	8004b9e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	69da      	ldr	r2, [r3, #28]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a1b      	ldr	r3, [r3, #32]
 8004bc4:	431a      	orrs	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bca:	019b      	lsls	r3, r3, #6
 8004bcc:	431a      	orrs	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd2:	085b      	lsrs	r3, r3, #1
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	041b      	lsls	r3, r3, #16
 8004bd8:	431a      	orrs	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bde:	061b      	lsls	r3, r3, #24
 8004be0:	4937      	ldr	r1, [pc, #220]	; (8004cc0 <HAL_RCC_OscConfig+0x4e8>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004be6:	4b37      	ldr	r3, [pc, #220]	; (8004cc4 <HAL_RCC_OscConfig+0x4ec>)
 8004be8:	2201      	movs	r2, #1
 8004bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bec:	f7fd f902 	bl	8001df4 <HAL_GetTick>
 8004bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bf2:	e008      	b.n	8004c06 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bf4:	f7fd f8fe 	bl	8001df4 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d901      	bls.n	8004c06 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e056      	b.n	8004cb4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c06:	4b2e      	ldr	r3, [pc, #184]	; (8004cc0 <HAL_RCC_OscConfig+0x4e8>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d0f0      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x41c>
 8004c12:	e04e      	b.n	8004cb2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c14:	4b2b      	ldr	r3, [pc, #172]	; (8004cc4 <HAL_RCC_OscConfig+0x4ec>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c1a:	f7fd f8eb 	bl	8001df4 <HAL_GetTick>
 8004c1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c20:	e008      	b.n	8004c34 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c22:	f7fd f8e7 	bl	8001df4 <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d901      	bls.n	8004c34 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e03f      	b.n	8004cb4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c34:	4b22      	ldr	r3, [pc, #136]	; (8004cc0 <HAL_RCC_OscConfig+0x4e8>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d1f0      	bne.n	8004c22 <HAL_RCC_OscConfig+0x44a>
 8004c40:	e037      	b.n	8004cb2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	699b      	ldr	r3, [r3, #24]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d101      	bne.n	8004c4e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e032      	b.n	8004cb4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c4e:	4b1c      	ldr	r3, [pc, #112]	; (8004cc0 <HAL_RCC_OscConfig+0x4e8>)
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d028      	beq.n	8004cae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d121      	bne.n	8004cae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d11a      	bne.n	8004cae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c7e:	4013      	ands	r3, r2
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c84:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d111      	bne.n	8004cae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c94:	085b      	lsrs	r3, r3, #1
 8004c96:	3b01      	subs	r3, #1
 8004c98:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d107      	bne.n	8004cae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d001      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e000      	b.n	8004cb4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3718      	adds	r7, #24
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	40007000 	.word	0x40007000
 8004cc0:	40023800 	.word	0x40023800
 8004cc4:	42470060 	.word	0x42470060

08004cc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d101      	bne.n	8004cdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e0cc      	b.n	8004e76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cdc:	4b68      	ldr	r3, [pc, #416]	; (8004e80 <HAL_RCC_ClockConfig+0x1b8>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0307 	and.w	r3, r3, #7
 8004ce4:	683a      	ldr	r2, [r7, #0]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d90c      	bls.n	8004d04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cea:	4b65      	ldr	r3, [pc, #404]	; (8004e80 <HAL_RCC_ClockConfig+0x1b8>)
 8004cec:	683a      	ldr	r2, [r7, #0]
 8004cee:	b2d2      	uxtb	r2, r2
 8004cf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cf2:	4b63      	ldr	r3, [pc, #396]	; (8004e80 <HAL_RCC_ClockConfig+0x1b8>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0307 	and.w	r3, r3, #7
 8004cfa:	683a      	ldr	r2, [r7, #0]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d001      	beq.n	8004d04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e0b8      	b.n	8004e76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0302 	and.w	r3, r3, #2
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d020      	beq.n	8004d52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0304 	and.w	r3, r3, #4
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d005      	beq.n	8004d28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d1c:	4b59      	ldr	r3, [pc, #356]	; (8004e84 <HAL_RCC_ClockConfig+0x1bc>)
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	4a58      	ldr	r2, [pc, #352]	; (8004e84 <HAL_RCC_ClockConfig+0x1bc>)
 8004d22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0308 	and.w	r3, r3, #8
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d005      	beq.n	8004d40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d34:	4b53      	ldr	r3, [pc, #332]	; (8004e84 <HAL_RCC_ClockConfig+0x1bc>)
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	4a52      	ldr	r2, [pc, #328]	; (8004e84 <HAL_RCC_ClockConfig+0x1bc>)
 8004d3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d40:	4b50      	ldr	r3, [pc, #320]	; (8004e84 <HAL_RCC_ClockConfig+0x1bc>)
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	494d      	ldr	r1, [pc, #308]	; (8004e84 <HAL_RCC_ClockConfig+0x1bc>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d044      	beq.n	8004de8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d107      	bne.n	8004d76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d66:	4b47      	ldr	r3, [pc, #284]	; (8004e84 <HAL_RCC_ClockConfig+0x1bc>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d119      	bne.n	8004da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e07f      	b.n	8004e76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d003      	beq.n	8004d86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d82:	2b03      	cmp	r3, #3
 8004d84:	d107      	bne.n	8004d96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d86:	4b3f      	ldr	r3, [pc, #252]	; (8004e84 <HAL_RCC_ClockConfig+0x1bc>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d109      	bne.n	8004da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e06f      	b.n	8004e76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d96:	4b3b      	ldr	r3, [pc, #236]	; (8004e84 <HAL_RCC_ClockConfig+0x1bc>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d101      	bne.n	8004da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e067      	b.n	8004e76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004da6:	4b37      	ldr	r3, [pc, #220]	; (8004e84 <HAL_RCC_ClockConfig+0x1bc>)
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f023 0203 	bic.w	r2, r3, #3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	4934      	ldr	r1, [pc, #208]	; (8004e84 <HAL_RCC_ClockConfig+0x1bc>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004db8:	f7fd f81c 	bl	8001df4 <HAL_GetTick>
 8004dbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dbe:	e00a      	b.n	8004dd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dc0:	f7fd f818 	bl	8001df4 <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d901      	bls.n	8004dd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e04f      	b.n	8004e76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dd6:	4b2b      	ldr	r3, [pc, #172]	; (8004e84 <HAL_RCC_ClockConfig+0x1bc>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f003 020c 	and.w	r2, r3, #12
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d1eb      	bne.n	8004dc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004de8:	4b25      	ldr	r3, [pc, #148]	; (8004e80 <HAL_RCC_ClockConfig+0x1b8>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0307 	and.w	r3, r3, #7
 8004df0:	683a      	ldr	r2, [r7, #0]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d20c      	bcs.n	8004e10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004df6:	4b22      	ldr	r3, [pc, #136]	; (8004e80 <HAL_RCC_ClockConfig+0x1b8>)
 8004df8:	683a      	ldr	r2, [r7, #0]
 8004dfa:	b2d2      	uxtb	r2, r2
 8004dfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dfe:	4b20      	ldr	r3, [pc, #128]	; (8004e80 <HAL_RCC_ClockConfig+0x1b8>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0307 	and.w	r3, r3, #7
 8004e06:	683a      	ldr	r2, [r7, #0]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d001      	beq.n	8004e10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e032      	b.n	8004e76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0304 	and.w	r3, r3, #4
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d008      	beq.n	8004e2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e1c:	4b19      	ldr	r3, [pc, #100]	; (8004e84 <HAL_RCC_ClockConfig+0x1bc>)
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	4916      	ldr	r1, [pc, #88]	; (8004e84 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0308 	and.w	r3, r3, #8
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d009      	beq.n	8004e4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e3a:	4b12      	ldr	r3, [pc, #72]	; (8004e84 <HAL_RCC_ClockConfig+0x1bc>)
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	00db      	lsls	r3, r3, #3
 8004e48:	490e      	ldr	r1, [pc, #56]	; (8004e84 <HAL_RCC_ClockConfig+0x1bc>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e4e:	f000 f821 	bl	8004e94 <HAL_RCC_GetSysClockFreq>
 8004e52:	4602      	mov	r2, r0
 8004e54:	4b0b      	ldr	r3, [pc, #44]	; (8004e84 <HAL_RCC_ClockConfig+0x1bc>)
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	091b      	lsrs	r3, r3, #4
 8004e5a:	f003 030f 	and.w	r3, r3, #15
 8004e5e:	490a      	ldr	r1, [pc, #40]	; (8004e88 <HAL_RCC_ClockConfig+0x1c0>)
 8004e60:	5ccb      	ldrb	r3, [r1, r3]
 8004e62:	fa22 f303 	lsr.w	r3, r2, r3
 8004e66:	4a09      	ldr	r2, [pc, #36]	; (8004e8c <HAL_RCC_ClockConfig+0x1c4>)
 8004e68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e6a:	4b09      	ldr	r3, [pc, #36]	; (8004e90 <HAL_RCC_ClockConfig+0x1c8>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f7fc ff7c 	bl	8001d6c <HAL_InitTick>

  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3710      	adds	r7, #16
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	40023c00 	.word	0x40023c00
 8004e84:	40023800 	.word	0x40023800
 8004e88:	0800c714 	.word	0x0800c714
 8004e8c:	20000000 	.word	0x20000000
 8004e90:	20000004 	.word	0x20000004

08004e94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e94:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004e98:	b084      	sub	sp, #16
 8004e9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	607b      	str	r3, [r7, #4]
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	60fb      	str	r3, [r7, #12]
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004eac:	4b67      	ldr	r3, [pc, #412]	; (800504c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	f003 030c 	and.w	r3, r3, #12
 8004eb4:	2b08      	cmp	r3, #8
 8004eb6:	d00d      	beq.n	8004ed4 <HAL_RCC_GetSysClockFreq+0x40>
 8004eb8:	2b08      	cmp	r3, #8
 8004eba:	f200 80bd 	bhi.w	8005038 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d002      	beq.n	8004ec8 <HAL_RCC_GetSysClockFreq+0x34>
 8004ec2:	2b04      	cmp	r3, #4
 8004ec4:	d003      	beq.n	8004ece <HAL_RCC_GetSysClockFreq+0x3a>
 8004ec6:	e0b7      	b.n	8005038 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ec8:	4b61      	ldr	r3, [pc, #388]	; (8005050 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004eca:	60bb      	str	r3, [r7, #8]
       break;
 8004ecc:	e0b7      	b.n	800503e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ece:	4b61      	ldr	r3, [pc, #388]	; (8005054 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004ed0:	60bb      	str	r3, [r7, #8]
      break;
 8004ed2:	e0b4      	b.n	800503e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ed4:	4b5d      	ldr	r3, [pc, #372]	; (800504c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004edc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ede:	4b5b      	ldr	r3, [pc, #364]	; (800504c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d04d      	beq.n	8004f86 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eea:	4b58      	ldr	r3, [pc, #352]	; (800504c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	099b      	lsrs	r3, r3, #6
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	f04f 0300 	mov.w	r3, #0
 8004ef6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004efa:	f04f 0100 	mov.w	r1, #0
 8004efe:	ea02 0800 	and.w	r8, r2, r0
 8004f02:	ea03 0901 	and.w	r9, r3, r1
 8004f06:	4640      	mov	r0, r8
 8004f08:	4649      	mov	r1, r9
 8004f0a:	f04f 0200 	mov.w	r2, #0
 8004f0e:	f04f 0300 	mov.w	r3, #0
 8004f12:	014b      	lsls	r3, r1, #5
 8004f14:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004f18:	0142      	lsls	r2, r0, #5
 8004f1a:	4610      	mov	r0, r2
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	ebb0 0008 	subs.w	r0, r0, r8
 8004f22:	eb61 0109 	sbc.w	r1, r1, r9
 8004f26:	f04f 0200 	mov.w	r2, #0
 8004f2a:	f04f 0300 	mov.w	r3, #0
 8004f2e:	018b      	lsls	r3, r1, #6
 8004f30:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004f34:	0182      	lsls	r2, r0, #6
 8004f36:	1a12      	subs	r2, r2, r0
 8004f38:	eb63 0301 	sbc.w	r3, r3, r1
 8004f3c:	f04f 0000 	mov.w	r0, #0
 8004f40:	f04f 0100 	mov.w	r1, #0
 8004f44:	00d9      	lsls	r1, r3, #3
 8004f46:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f4a:	00d0      	lsls	r0, r2, #3
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	460b      	mov	r3, r1
 8004f50:	eb12 0208 	adds.w	r2, r2, r8
 8004f54:	eb43 0309 	adc.w	r3, r3, r9
 8004f58:	f04f 0000 	mov.w	r0, #0
 8004f5c:	f04f 0100 	mov.w	r1, #0
 8004f60:	0259      	lsls	r1, r3, #9
 8004f62:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004f66:	0250      	lsls	r0, r2, #9
 8004f68:	4602      	mov	r2, r0
 8004f6a:	460b      	mov	r3, r1
 8004f6c:	4610      	mov	r0, r2
 8004f6e:	4619      	mov	r1, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	461a      	mov	r2, r3
 8004f74:	f04f 0300 	mov.w	r3, #0
 8004f78:	f7fb fe6e 	bl	8000c58 <__aeabi_uldivmod>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	460b      	mov	r3, r1
 8004f80:	4613      	mov	r3, r2
 8004f82:	60fb      	str	r3, [r7, #12]
 8004f84:	e04a      	b.n	800501c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f86:	4b31      	ldr	r3, [pc, #196]	; (800504c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	099b      	lsrs	r3, r3, #6
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	f04f 0300 	mov.w	r3, #0
 8004f92:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004f96:	f04f 0100 	mov.w	r1, #0
 8004f9a:	ea02 0400 	and.w	r4, r2, r0
 8004f9e:	ea03 0501 	and.w	r5, r3, r1
 8004fa2:	4620      	mov	r0, r4
 8004fa4:	4629      	mov	r1, r5
 8004fa6:	f04f 0200 	mov.w	r2, #0
 8004faa:	f04f 0300 	mov.w	r3, #0
 8004fae:	014b      	lsls	r3, r1, #5
 8004fb0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004fb4:	0142      	lsls	r2, r0, #5
 8004fb6:	4610      	mov	r0, r2
 8004fb8:	4619      	mov	r1, r3
 8004fba:	1b00      	subs	r0, r0, r4
 8004fbc:	eb61 0105 	sbc.w	r1, r1, r5
 8004fc0:	f04f 0200 	mov.w	r2, #0
 8004fc4:	f04f 0300 	mov.w	r3, #0
 8004fc8:	018b      	lsls	r3, r1, #6
 8004fca:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004fce:	0182      	lsls	r2, r0, #6
 8004fd0:	1a12      	subs	r2, r2, r0
 8004fd2:	eb63 0301 	sbc.w	r3, r3, r1
 8004fd6:	f04f 0000 	mov.w	r0, #0
 8004fda:	f04f 0100 	mov.w	r1, #0
 8004fde:	00d9      	lsls	r1, r3, #3
 8004fe0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004fe4:	00d0      	lsls	r0, r2, #3
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	460b      	mov	r3, r1
 8004fea:	1912      	adds	r2, r2, r4
 8004fec:	eb45 0303 	adc.w	r3, r5, r3
 8004ff0:	f04f 0000 	mov.w	r0, #0
 8004ff4:	f04f 0100 	mov.w	r1, #0
 8004ff8:	0299      	lsls	r1, r3, #10
 8004ffa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004ffe:	0290      	lsls	r0, r2, #10
 8005000:	4602      	mov	r2, r0
 8005002:	460b      	mov	r3, r1
 8005004:	4610      	mov	r0, r2
 8005006:	4619      	mov	r1, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	461a      	mov	r2, r3
 800500c:	f04f 0300 	mov.w	r3, #0
 8005010:	f7fb fe22 	bl	8000c58 <__aeabi_uldivmod>
 8005014:	4602      	mov	r2, r0
 8005016:	460b      	mov	r3, r1
 8005018:	4613      	mov	r3, r2
 800501a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800501c:	4b0b      	ldr	r3, [pc, #44]	; (800504c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	0c1b      	lsrs	r3, r3, #16
 8005022:	f003 0303 	and.w	r3, r3, #3
 8005026:	3301      	adds	r3, #1
 8005028:	005b      	lsls	r3, r3, #1
 800502a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	fbb2 f3f3 	udiv	r3, r2, r3
 8005034:	60bb      	str	r3, [r7, #8]
      break;
 8005036:	e002      	b.n	800503e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005038:	4b05      	ldr	r3, [pc, #20]	; (8005050 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800503a:	60bb      	str	r3, [r7, #8]
      break;
 800503c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800503e:	68bb      	ldr	r3, [r7, #8]
}
 8005040:	4618      	mov	r0, r3
 8005042:	3710      	adds	r7, #16
 8005044:	46bd      	mov	sp, r7
 8005046:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800504a:	bf00      	nop
 800504c:	40023800 	.word	0x40023800
 8005050:	00f42400 	.word	0x00f42400
 8005054:	007a1200 	.word	0x007a1200

08005058 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005058:	b480      	push	{r7}
 800505a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800505c:	4b03      	ldr	r3, [pc, #12]	; (800506c <HAL_RCC_GetHCLKFreq+0x14>)
 800505e:	681b      	ldr	r3, [r3, #0]
}
 8005060:	4618      	mov	r0, r3
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	20000000 	.word	0x20000000

08005070 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005074:	f7ff fff0 	bl	8005058 <HAL_RCC_GetHCLKFreq>
 8005078:	4602      	mov	r2, r0
 800507a:	4b05      	ldr	r3, [pc, #20]	; (8005090 <HAL_RCC_GetPCLK1Freq+0x20>)
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	0a9b      	lsrs	r3, r3, #10
 8005080:	f003 0307 	and.w	r3, r3, #7
 8005084:	4903      	ldr	r1, [pc, #12]	; (8005094 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005086:	5ccb      	ldrb	r3, [r1, r3]
 8005088:	fa22 f303 	lsr.w	r3, r2, r3
}
 800508c:	4618      	mov	r0, r3
 800508e:	bd80      	pop	{r7, pc}
 8005090:	40023800 	.word	0x40023800
 8005094:	0800c724 	.word	0x0800c724

08005098 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800509c:	f7ff ffdc 	bl	8005058 <HAL_RCC_GetHCLKFreq>
 80050a0:	4602      	mov	r2, r0
 80050a2:	4b05      	ldr	r3, [pc, #20]	; (80050b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	0b5b      	lsrs	r3, r3, #13
 80050a8:	f003 0307 	and.w	r3, r3, #7
 80050ac:	4903      	ldr	r1, [pc, #12]	; (80050bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80050ae:	5ccb      	ldrb	r3, [r1, r3]
 80050b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	40023800 	.word	0x40023800
 80050bc:	0800c724 	.word	0x0800c724

080050c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d101      	bne.n	80050d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e07b      	b.n	80051ca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d108      	bne.n	80050ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050e2:	d009      	beq.n	80050f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	61da      	str	r2, [r3, #28]
 80050ea:	e005      	b.n	80050f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d106      	bne.n	8005118 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f7fc fbd6 	bl	80018c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2202      	movs	r2, #2
 800511c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800512e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005140:	431a      	orrs	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800514a:	431a      	orrs	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	f003 0302 	and.w	r3, r3, #2
 8005154:	431a      	orrs	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	f003 0301 	and.w	r3, r3, #1
 800515e:	431a      	orrs	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005168:	431a      	orrs	r2, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	69db      	ldr	r3, [r3, #28]
 800516e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005172:	431a      	orrs	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a1b      	ldr	r3, [r3, #32]
 8005178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800517c:	ea42 0103 	orr.w	r1, r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005184:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	430a      	orrs	r2, r1
 800518e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	0c1b      	lsrs	r3, r3, #16
 8005196:	f003 0104 	and.w	r1, r3, #4
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519e:	f003 0210 	and.w	r2, r3, #16
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	430a      	orrs	r2, r1
 80051a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	69da      	ldr	r2, [r3, #28]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3708      	adds	r7, #8
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b082      	sub	sp, #8
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d101      	bne.n	80051e4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e03f      	b.n	8005264 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d106      	bne.n	80051fe <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f7fc fd1b 	bl	8001c34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2224      	movs	r2, #36	; 0x24
 8005202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68da      	ldr	r2, [r3, #12]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005214:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 fc7a 	bl	8005b10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	691a      	ldr	r2, [r3, #16]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800522a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	695a      	ldr	r2, [r3, #20]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800523a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68da      	ldr	r2, [r3, #12]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800524a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2220      	movs	r2, #32
 8005256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2220      	movs	r2, #32
 800525e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005262:	2300      	movs	r3, #0
}
 8005264:	4618      	mov	r0, r3
 8005266:	3708      	adds	r7, #8
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b0ba      	sub	sp, #232	; 0xe8
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005292:	2300      	movs	r3, #0
 8005294:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005298:	2300      	movs	r3, #0
 800529a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800529e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052a2:	f003 030f 	and.w	r3, r3, #15
 80052a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80052aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d10f      	bne.n	80052d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052b6:	f003 0320 	and.w	r3, r3, #32
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d009      	beq.n	80052d2 <HAL_UART_IRQHandler+0x66>
 80052be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052c2:	f003 0320 	and.w	r3, r3, #32
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d003      	beq.n	80052d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 fb65 	bl	800599a <UART_Receive_IT>
      return;
 80052d0:	e256      	b.n	8005780 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80052d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	f000 80de 	beq.w	8005498 <HAL_UART_IRQHandler+0x22c>
 80052dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052e0:	f003 0301 	and.w	r3, r3, #1
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d106      	bne.n	80052f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80052e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052ec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f000 80d1 	beq.w	8005498 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80052f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00b      	beq.n	800531a <HAL_UART_IRQHandler+0xae>
 8005302:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800530a:	2b00      	cmp	r3, #0
 800530c:	d005      	beq.n	800531a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005312:	f043 0201 	orr.w	r2, r3, #1
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800531a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800531e:	f003 0304 	and.w	r3, r3, #4
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00b      	beq.n	800533e <HAL_UART_IRQHandler+0xd2>
 8005326:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800532a:	f003 0301 	and.w	r3, r3, #1
 800532e:	2b00      	cmp	r3, #0
 8005330:	d005      	beq.n	800533e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005336:	f043 0202 	orr.w	r2, r3, #2
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800533e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005342:	f003 0302 	and.w	r3, r3, #2
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00b      	beq.n	8005362 <HAL_UART_IRQHandler+0xf6>
 800534a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800534e:	f003 0301 	and.w	r3, r3, #1
 8005352:	2b00      	cmp	r3, #0
 8005354:	d005      	beq.n	8005362 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535a:	f043 0204 	orr.w	r2, r3, #4
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005366:	f003 0308 	and.w	r3, r3, #8
 800536a:	2b00      	cmp	r3, #0
 800536c:	d011      	beq.n	8005392 <HAL_UART_IRQHandler+0x126>
 800536e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005372:	f003 0320 	and.w	r3, r3, #32
 8005376:	2b00      	cmp	r3, #0
 8005378:	d105      	bne.n	8005386 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800537a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800537e:	f003 0301 	and.w	r3, r3, #1
 8005382:	2b00      	cmp	r3, #0
 8005384:	d005      	beq.n	8005392 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538a:	f043 0208 	orr.w	r2, r3, #8
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005396:	2b00      	cmp	r3, #0
 8005398:	f000 81ed 	beq.w	8005776 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800539c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053a0:	f003 0320 	and.w	r3, r3, #32
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d008      	beq.n	80053ba <HAL_UART_IRQHandler+0x14e>
 80053a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053ac:	f003 0320 	and.w	r3, r3, #32
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d002      	beq.n	80053ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 faf0 	bl	800599a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c4:	2b40      	cmp	r3, #64	; 0x40
 80053c6:	bf0c      	ite	eq
 80053c8:	2301      	moveq	r3, #1
 80053ca:	2300      	movne	r3, #0
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d6:	f003 0308 	and.w	r3, r3, #8
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d103      	bne.n	80053e6 <HAL_UART_IRQHandler+0x17a>
 80053de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d04f      	beq.n	8005486 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f9f8 	bl	80057dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	695b      	ldr	r3, [r3, #20]
 80053f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f6:	2b40      	cmp	r3, #64	; 0x40
 80053f8:	d141      	bne.n	800547e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	3314      	adds	r3, #20
 8005400:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005404:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005408:	e853 3f00 	ldrex	r3, [r3]
 800540c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005410:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005414:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005418:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	3314      	adds	r3, #20
 8005422:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005426:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800542a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005432:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005436:	e841 2300 	strex	r3, r2, [r1]
 800543a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800543e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1d9      	bne.n	80053fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544a:	2b00      	cmp	r3, #0
 800544c:	d013      	beq.n	8005476 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005452:	4a7d      	ldr	r2, [pc, #500]	; (8005648 <HAL_UART_IRQHandler+0x3dc>)
 8005454:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545a:	4618      	mov	r0, r3
 800545c:	f7fc fe7b 	bl	8002156 <HAL_DMA_Abort_IT>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d016      	beq.n	8005494 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005470:	4610      	mov	r0, r2
 8005472:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005474:	e00e      	b.n	8005494 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 f99a 	bl	80057b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800547c:	e00a      	b.n	8005494 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 f996 	bl	80057b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005484:	e006      	b.n	8005494 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 f992 	bl	80057b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005492:	e170      	b.n	8005776 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005494:	bf00      	nop
    return;
 8005496:	e16e      	b.n	8005776 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800549c:	2b01      	cmp	r3, #1
 800549e:	f040 814a 	bne.w	8005736 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80054a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054a6:	f003 0310 	and.w	r3, r3, #16
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f000 8143 	beq.w	8005736 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80054b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054b4:	f003 0310 	and.w	r3, r3, #16
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	f000 813c 	beq.w	8005736 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80054be:	2300      	movs	r3, #0
 80054c0:	60bb      	str	r3, [r7, #8]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	60bb      	str	r3, [r7, #8]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	60bb      	str	r3, [r7, #8]
 80054d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054de:	2b40      	cmp	r3, #64	; 0x40
 80054e0:	f040 80b4 	bne.w	800564c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80054f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	f000 8140 	beq.w	800577a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80054fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005502:	429a      	cmp	r2, r3
 8005504:	f080 8139 	bcs.w	800577a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800550e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005514:	69db      	ldr	r3, [r3, #28]
 8005516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800551a:	f000 8088 	beq.w	800562e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	330c      	adds	r3, #12
 8005524:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005528:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800552c:	e853 3f00 	ldrex	r3, [r3]
 8005530:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005534:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005538:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800553c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	330c      	adds	r3, #12
 8005546:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800554a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800554e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005552:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005556:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800555a:	e841 2300 	strex	r3, r2, [r1]
 800555e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005562:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1d9      	bne.n	800551e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	3314      	adds	r3, #20
 8005570:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005572:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005574:	e853 3f00 	ldrex	r3, [r3]
 8005578:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800557a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800557c:	f023 0301 	bic.w	r3, r3, #1
 8005580:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	3314      	adds	r3, #20
 800558a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800558e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005592:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005594:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005596:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800559a:	e841 2300 	strex	r3, r2, [r1]
 800559e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80055a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1e1      	bne.n	800556a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	3314      	adds	r3, #20
 80055ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055b0:	e853 3f00 	ldrex	r3, [r3]
 80055b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80055b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	3314      	adds	r3, #20
 80055c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80055ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80055cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80055d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80055d2:	e841 2300 	strex	r3, r2, [r1]
 80055d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80055d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d1e3      	bne.n	80055a6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2220      	movs	r2, #32
 80055e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	330c      	adds	r3, #12
 80055f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055f6:	e853 3f00 	ldrex	r3, [r3]
 80055fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80055fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055fe:	f023 0310 	bic.w	r3, r3, #16
 8005602:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	330c      	adds	r3, #12
 800560c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005610:	65ba      	str	r2, [r7, #88]	; 0x58
 8005612:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005614:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005616:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005618:	e841 2300 	strex	r3, r2, [r1]
 800561c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800561e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005620:	2b00      	cmp	r3, #0
 8005622:	d1e3      	bne.n	80055ec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005628:	4618      	mov	r0, r3
 800562a:	f7fc fd24 	bl	8002076 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005636:	b29b      	uxth	r3, r3
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	b29b      	uxth	r3, r3
 800563c:	4619      	mov	r1, r3
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f8c0 	bl	80057c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005644:	e099      	b.n	800577a <HAL_UART_IRQHandler+0x50e>
 8005646:	bf00      	nop
 8005648:	080058a3 	.word	0x080058a3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005654:	b29b      	uxth	r3, r3
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005660:	b29b      	uxth	r3, r3
 8005662:	2b00      	cmp	r3, #0
 8005664:	f000 808b 	beq.w	800577e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005668:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800566c:	2b00      	cmp	r3, #0
 800566e:	f000 8086 	beq.w	800577e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	330c      	adds	r3, #12
 8005678:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567c:	e853 3f00 	ldrex	r3, [r3]
 8005680:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005684:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005688:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	330c      	adds	r3, #12
 8005692:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005696:	647a      	str	r2, [r7, #68]	; 0x44
 8005698:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800569c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800569e:	e841 2300 	strex	r3, r2, [r1]
 80056a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80056a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1e3      	bne.n	8005672 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	3314      	adds	r3, #20
 80056b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b4:	e853 3f00 	ldrex	r3, [r3]
 80056b8:	623b      	str	r3, [r7, #32]
   return(result);
 80056ba:	6a3b      	ldr	r3, [r7, #32]
 80056bc:	f023 0301 	bic.w	r3, r3, #1
 80056c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	3314      	adds	r3, #20
 80056ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80056ce:	633a      	str	r2, [r7, #48]	; 0x30
 80056d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056d6:	e841 2300 	strex	r3, r2, [r1]
 80056da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80056dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1e3      	bne.n	80056aa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2220      	movs	r2, #32
 80056e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	330c      	adds	r3, #12
 80056f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	e853 3f00 	ldrex	r3, [r3]
 80056fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f023 0310 	bic.w	r3, r3, #16
 8005706:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	330c      	adds	r3, #12
 8005710:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005714:	61fa      	str	r2, [r7, #28]
 8005716:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005718:	69b9      	ldr	r1, [r7, #24]
 800571a:	69fa      	ldr	r2, [r7, #28]
 800571c:	e841 2300 	strex	r3, r2, [r1]
 8005720:	617b      	str	r3, [r7, #20]
   return(result);
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1e3      	bne.n	80056f0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005728:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800572c:	4619      	mov	r1, r3
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 f848 	bl	80057c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005734:	e023      	b.n	800577e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800573a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800573e:	2b00      	cmp	r3, #0
 8005740:	d009      	beq.n	8005756 <HAL_UART_IRQHandler+0x4ea>
 8005742:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800574a:	2b00      	cmp	r3, #0
 800574c:	d003      	beq.n	8005756 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 f8bb 	bl	80058ca <UART_Transmit_IT>
    return;
 8005754:	e014      	b.n	8005780 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800575a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00e      	beq.n	8005780 <HAL_UART_IRQHandler+0x514>
 8005762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800576a:	2b00      	cmp	r3, #0
 800576c:	d008      	beq.n	8005780 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 f8fb 	bl	800596a <UART_EndTransmit_IT>
    return;
 8005774:	e004      	b.n	8005780 <HAL_UART_IRQHandler+0x514>
    return;
 8005776:	bf00      	nop
 8005778:	e002      	b.n	8005780 <HAL_UART_IRQHandler+0x514>
      return;
 800577a:	bf00      	nop
 800577c:	e000      	b.n	8005780 <HAL_UART_IRQHandler+0x514>
      return;
 800577e:	bf00      	nop
  }
}
 8005780:	37e8      	adds	r7, #232	; 0xe8
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop

08005788 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	460b      	mov	r3, r1
 80057ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057dc:	b480      	push	{r7}
 80057de:	b095      	sub	sp, #84	; 0x54
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	330c      	adds	r3, #12
 80057ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ee:	e853 3f00 	ldrex	r3, [r3]
 80057f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80057f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	330c      	adds	r3, #12
 8005802:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005804:	643a      	str	r2, [r7, #64]	; 0x40
 8005806:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005808:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800580a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800580c:	e841 2300 	strex	r3, r2, [r1]
 8005810:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005814:	2b00      	cmp	r3, #0
 8005816:	d1e5      	bne.n	80057e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	3314      	adds	r3, #20
 800581e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005820:	6a3b      	ldr	r3, [r7, #32]
 8005822:	e853 3f00 	ldrex	r3, [r3]
 8005826:	61fb      	str	r3, [r7, #28]
   return(result);
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	f023 0301 	bic.w	r3, r3, #1
 800582e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	3314      	adds	r3, #20
 8005836:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005838:	62fa      	str	r2, [r7, #44]	; 0x2c
 800583a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800583e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005840:	e841 2300 	strex	r3, r2, [r1]
 8005844:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1e5      	bne.n	8005818 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005850:	2b01      	cmp	r3, #1
 8005852:	d119      	bne.n	8005888 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	330c      	adds	r3, #12
 800585a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	e853 3f00 	ldrex	r3, [r3]
 8005862:	60bb      	str	r3, [r7, #8]
   return(result);
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	f023 0310 	bic.w	r3, r3, #16
 800586a:	647b      	str	r3, [r7, #68]	; 0x44
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	330c      	adds	r3, #12
 8005872:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005874:	61ba      	str	r2, [r7, #24]
 8005876:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005878:	6979      	ldr	r1, [r7, #20]
 800587a:	69ba      	ldr	r2, [r7, #24]
 800587c:	e841 2300 	strex	r3, r2, [r1]
 8005880:	613b      	str	r3, [r7, #16]
   return(result);
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1e5      	bne.n	8005854 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2220      	movs	r2, #32
 800588c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005896:	bf00      	nop
 8005898:	3754      	adds	r7, #84	; 0x54
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr

080058a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80058a2:	b580      	push	{r7, lr}
 80058a4:	b084      	sub	sp, #16
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2200      	movs	r2, #0
 80058b4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058bc:	68f8      	ldr	r0, [r7, #12]
 80058be:	f7ff ff77 	bl	80057b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058c2:	bf00      	nop
 80058c4:	3710      	adds	r7, #16
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80058ca:	b480      	push	{r7}
 80058cc:	b085      	sub	sp, #20
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	2b21      	cmp	r3, #33	; 0x21
 80058dc:	d13e      	bne.n	800595c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058e6:	d114      	bne.n	8005912 <UART_Transmit_IT+0x48>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d110      	bne.n	8005912 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a1b      	ldr	r3, [r3, #32]
 80058f4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	881b      	ldrh	r3, [r3, #0]
 80058fa:	461a      	mov	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005904:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a1b      	ldr	r3, [r3, #32]
 800590a:	1c9a      	adds	r2, r3, #2
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	621a      	str	r2, [r3, #32]
 8005910:	e008      	b.n	8005924 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a1b      	ldr	r3, [r3, #32]
 8005916:	1c59      	adds	r1, r3, #1
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	6211      	str	r1, [r2, #32]
 800591c:	781a      	ldrb	r2, [r3, #0]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005928:	b29b      	uxth	r3, r3
 800592a:	3b01      	subs	r3, #1
 800592c:	b29b      	uxth	r3, r3
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	4619      	mov	r1, r3
 8005932:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005934:	2b00      	cmp	r3, #0
 8005936:	d10f      	bne.n	8005958 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68da      	ldr	r2, [r3, #12]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005946:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68da      	ldr	r2, [r3, #12]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005956:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005958:	2300      	movs	r3, #0
 800595a:	e000      	b.n	800595e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800595c:	2302      	movs	r3, #2
  }
}
 800595e:	4618      	mov	r0, r3
 8005960:	3714      	adds	r7, #20
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr

0800596a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800596a:	b580      	push	{r7, lr}
 800596c:	b082      	sub	sp, #8
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68da      	ldr	r2, [r3, #12]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005980:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2220      	movs	r2, #32
 8005986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f7ff fefc 	bl	8005788 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3708      	adds	r7, #8
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800599a:	b580      	push	{r7, lr}
 800599c:	b08c      	sub	sp, #48	; 0x30
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	2b22      	cmp	r3, #34	; 0x22
 80059ac:	f040 80ab 	bne.w	8005b06 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059b8:	d117      	bne.n	80059ea <UART_Receive_IT+0x50>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d113      	bne.n	80059ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80059c2:	2300      	movs	r3, #0
 80059c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059d8:	b29a      	uxth	r2, r3
 80059da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e2:	1c9a      	adds	r2, r3, #2
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	629a      	str	r2, [r3, #40]	; 0x28
 80059e8:	e026      	b.n	8005a38 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80059f0:	2300      	movs	r3, #0
 80059f2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059fc:	d007      	beq.n	8005a0e <UART_Receive_IT+0x74>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d10a      	bne.n	8005a1c <UART_Receive_IT+0x82>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d106      	bne.n	8005a1c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	b2da      	uxtb	r2, r3
 8005a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a18:	701a      	strb	r2, [r3, #0]
 8005a1a:	e008      	b.n	8005a2e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a28:	b2da      	uxtb	r2, r3
 8005a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a2c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a32:	1c5a      	adds	r2, r3, #1
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	4619      	mov	r1, r3
 8005a46:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d15a      	bne.n	8005b02 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68da      	ldr	r2, [r3, #12]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f022 0220 	bic.w	r2, r2, #32
 8005a5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68da      	ldr	r2, [r3, #12]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	695a      	ldr	r2, [r3, #20]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f022 0201 	bic.w	r2, r2, #1
 8005a7a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2220      	movs	r2, #32
 8005a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d135      	bne.n	8005af8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	330c      	adds	r3, #12
 8005a98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	e853 3f00 	ldrex	r3, [r3]
 8005aa0:	613b      	str	r3, [r7, #16]
   return(result);
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	f023 0310 	bic.w	r3, r3, #16
 8005aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	330c      	adds	r3, #12
 8005ab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ab2:	623a      	str	r2, [r7, #32]
 8005ab4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab6:	69f9      	ldr	r1, [r7, #28]
 8005ab8:	6a3a      	ldr	r2, [r7, #32]
 8005aba:	e841 2300 	strex	r3, r2, [r1]
 8005abe:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1e5      	bne.n	8005a92 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 0310 	and.w	r3, r3, #16
 8005ad0:	2b10      	cmp	r3, #16
 8005ad2:	d10a      	bne.n	8005aea <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	60fb      	str	r3, [r7, #12]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	60fb      	str	r3, [r7, #12]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	60fb      	str	r3, [r7, #12]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005aee:	4619      	mov	r1, r3
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f7ff fe67 	bl	80057c4 <HAL_UARTEx_RxEventCallback>
 8005af6:	e002      	b.n	8005afe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f7ff fe4f 	bl	800579c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005afe:	2300      	movs	r3, #0
 8005b00:	e002      	b.n	8005b08 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005b02:	2300      	movs	r3, #0
 8005b04:	e000      	b.n	8005b08 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005b06:	2302      	movs	r3, #2
  }
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3730      	adds	r7, #48	; 0x30
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b14:	b09f      	sub	sp, #124	; 0x7c
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005b24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b26:	68d9      	ldr	r1, [r3, #12]
 8005b28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	ea40 0301 	orr.w	r3, r0, r1
 8005b30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b34:	689a      	ldr	r2, [r3, #8]
 8005b36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	431a      	orrs	r2, r3
 8005b3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b3e:	695b      	ldr	r3, [r3, #20]
 8005b40:	431a      	orrs	r2, r3
 8005b42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b44:	69db      	ldr	r3, [r3, #28]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005b4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005b54:	f021 010c 	bic.w	r1, r1, #12
 8005b58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b5e:	430b      	orrs	r3, r1
 8005b60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	695b      	ldr	r3, [r3, #20]
 8005b68:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005b6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b6e:	6999      	ldr	r1, [r3, #24]
 8005b70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	ea40 0301 	orr.w	r3, r0, r1
 8005b78:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	4bc5      	ldr	r3, [pc, #788]	; (8005e94 <UART_SetConfig+0x384>)
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d004      	beq.n	8005b8e <UART_SetConfig+0x7e>
 8005b84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	4bc3      	ldr	r3, [pc, #780]	; (8005e98 <UART_SetConfig+0x388>)
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d103      	bne.n	8005b96 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b8e:	f7ff fa83 	bl	8005098 <HAL_RCC_GetPCLK2Freq>
 8005b92:	6778      	str	r0, [r7, #116]	; 0x74
 8005b94:	e002      	b.n	8005b9c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b96:	f7ff fa6b 	bl	8005070 <HAL_RCC_GetPCLK1Freq>
 8005b9a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b9e:	69db      	ldr	r3, [r3, #28]
 8005ba0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ba4:	f040 80b6 	bne.w	8005d14 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ba8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005baa:	461c      	mov	r4, r3
 8005bac:	f04f 0500 	mov.w	r5, #0
 8005bb0:	4622      	mov	r2, r4
 8005bb2:	462b      	mov	r3, r5
 8005bb4:	1891      	adds	r1, r2, r2
 8005bb6:	6439      	str	r1, [r7, #64]	; 0x40
 8005bb8:	415b      	adcs	r3, r3
 8005bba:	647b      	str	r3, [r7, #68]	; 0x44
 8005bbc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005bc0:	1912      	adds	r2, r2, r4
 8005bc2:	eb45 0303 	adc.w	r3, r5, r3
 8005bc6:	f04f 0000 	mov.w	r0, #0
 8005bca:	f04f 0100 	mov.w	r1, #0
 8005bce:	00d9      	lsls	r1, r3, #3
 8005bd0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005bd4:	00d0      	lsls	r0, r2, #3
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	460b      	mov	r3, r1
 8005bda:	1911      	adds	r1, r2, r4
 8005bdc:	6639      	str	r1, [r7, #96]	; 0x60
 8005bde:	416b      	adcs	r3, r5
 8005be0:	667b      	str	r3, [r7, #100]	; 0x64
 8005be2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	461a      	mov	r2, r3
 8005be8:	f04f 0300 	mov.w	r3, #0
 8005bec:	1891      	adds	r1, r2, r2
 8005bee:	63b9      	str	r1, [r7, #56]	; 0x38
 8005bf0:	415b      	adcs	r3, r3
 8005bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bf4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005bf8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005bfc:	f7fb f82c 	bl	8000c58 <__aeabi_uldivmod>
 8005c00:	4602      	mov	r2, r0
 8005c02:	460b      	mov	r3, r1
 8005c04:	4ba5      	ldr	r3, [pc, #660]	; (8005e9c <UART_SetConfig+0x38c>)
 8005c06:	fba3 2302 	umull	r2, r3, r3, r2
 8005c0a:	095b      	lsrs	r3, r3, #5
 8005c0c:	011e      	lsls	r6, r3, #4
 8005c0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c10:	461c      	mov	r4, r3
 8005c12:	f04f 0500 	mov.w	r5, #0
 8005c16:	4622      	mov	r2, r4
 8005c18:	462b      	mov	r3, r5
 8005c1a:	1891      	adds	r1, r2, r2
 8005c1c:	6339      	str	r1, [r7, #48]	; 0x30
 8005c1e:	415b      	adcs	r3, r3
 8005c20:	637b      	str	r3, [r7, #52]	; 0x34
 8005c22:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005c26:	1912      	adds	r2, r2, r4
 8005c28:	eb45 0303 	adc.w	r3, r5, r3
 8005c2c:	f04f 0000 	mov.w	r0, #0
 8005c30:	f04f 0100 	mov.w	r1, #0
 8005c34:	00d9      	lsls	r1, r3, #3
 8005c36:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c3a:	00d0      	lsls	r0, r2, #3
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	460b      	mov	r3, r1
 8005c40:	1911      	adds	r1, r2, r4
 8005c42:	65b9      	str	r1, [r7, #88]	; 0x58
 8005c44:	416b      	adcs	r3, r5
 8005c46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	f04f 0300 	mov.w	r3, #0
 8005c52:	1891      	adds	r1, r2, r2
 8005c54:	62b9      	str	r1, [r7, #40]	; 0x28
 8005c56:	415b      	adcs	r3, r3
 8005c58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c5e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005c62:	f7fa fff9 	bl	8000c58 <__aeabi_uldivmod>
 8005c66:	4602      	mov	r2, r0
 8005c68:	460b      	mov	r3, r1
 8005c6a:	4b8c      	ldr	r3, [pc, #560]	; (8005e9c <UART_SetConfig+0x38c>)
 8005c6c:	fba3 1302 	umull	r1, r3, r3, r2
 8005c70:	095b      	lsrs	r3, r3, #5
 8005c72:	2164      	movs	r1, #100	; 0x64
 8005c74:	fb01 f303 	mul.w	r3, r1, r3
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	00db      	lsls	r3, r3, #3
 8005c7c:	3332      	adds	r3, #50	; 0x32
 8005c7e:	4a87      	ldr	r2, [pc, #540]	; (8005e9c <UART_SetConfig+0x38c>)
 8005c80:	fba2 2303 	umull	r2, r3, r2, r3
 8005c84:	095b      	lsrs	r3, r3, #5
 8005c86:	005b      	lsls	r3, r3, #1
 8005c88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c8c:	441e      	add	r6, r3
 8005c8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c90:	4618      	mov	r0, r3
 8005c92:	f04f 0100 	mov.w	r1, #0
 8005c96:	4602      	mov	r2, r0
 8005c98:	460b      	mov	r3, r1
 8005c9a:	1894      	adds	r4, r2, r2
 8005c9c:	623c      	str	r4, [r7, #32]
 8005c9e:	415b      	adcs	r3, r3
 8005ca0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ca2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ca6:	1812      	adds	r2, r2, r0
 8005ca8:	eb41 0303 	adc.w	r3, r1, r3
 8005cac:	f04f 0400 	mov.w	r4, #0
 8005cb0:	f04f 0500 	mov.w	r5, #0
 8005cb4:	00dd      	lsls	r5, r3, #3
 8005cb6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005cba:	00d4      	lsls	r4, r2, #3
 8005cbc:	4622      	mov	r2, r4
 8005cbe:	462b      	mov	r3, r5
 8005cc0:	1814      	adds	r4, r2, r0
 8005cc2:	653c      	str	r4, [r7, #80]	; 0x50
 8005cc4:	414b      	adcs	r3, r1
 8005cc6:	657b      	str	r3, [r7, #84]	; 0x54
 8005cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	461a      	mov	r2, r3
 8005cce:	f04f 0300 	mov.w	r3, #0
 8005cd2:	1891      	adds	r1, r2, r2
 8005cd4:	61b9      	str	r1, [r7, #24]
 8005cd6:	415b      	adcs	r3, r3
 8005cd8:	61fb      	str	r3, [r7, #28]
 8005cda:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005cde:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005ce2:	f7fa ffb9 	bl	8000c58 <__aeabi_uldivmod>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	460b      	mov	r3, r1
 8005cea:	4b6c      	ldr	r3, [pc, #432]	; (8005e9c <UART_SetConfig+0x38c>)
 8005cec:	fba3 1302 	umull	r1, r3, r3, r2
 8005cf0:	095b      	lsrs	r3, r3, #5
 8005cf2:	2164      	movs	r1, #100	; 0x64
 8005cf4:	fb01 f303 	mul.w	r3, r1, r3
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	00db      	lsls	r3, r3, #3
 8005cfc:	3332      	adds	r3, #50	; 0x32
 8005cfe:	4a67      	ldr	r2, [pc, #412]	; (8005e9c <UART_SetConfig+0x38c>)
 8005d00:	fba2 2303 	umull	r2, r3, r2, r3
 8005d04:	095b      	lsrs	r3, r3, #5
 8005d06:	f003 0207 	and.w	r2, r3, #7
 8005d0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4432      	add	r2, r6
 8005d10:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d12:	e0b9      	b.n	8005e88 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d16:	461c      	mov	r4, r3
 8005d18:	f04f 0500 	mov.w	r5, #0
 8005d1c:	4622      	mov	r2, r4
 8005d1e:	462b      	mov	r3, r5
 8005d20:	1891      	adds	r1, r2, r2
 8005d22:	6139      	str	r1, [r7, #16]
 8005d24:	415b      	adcs	r3, r3
 8005d26:	617b      	str	r3, [r7, #20]
 8005d28:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005d2c:	1912      	adds	r2, r2, r4
 8005d2e:	eb45 0303 	adc.w	r3, r5, r3
 8005d32:	f04f 0000 	mov.w	r0, #0
 8005d36:	f04f 0100 	mov.w	r1, #0
 8005d3a:	00d9      	lsls	r1, r3, #3
 8005d3c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d40:	00d0      	lsls	r0, r2, #3
 8005d42:	4602      	mov	r2, r0
 8005d44:	460b      	mov	r3, r1
 8005d46:	eb12 0804 	adds.w	r8, r2, r4
 8005d4a:	eb43 0905 	adc.w	r9, r3, r5
 8005d4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	4618      	mov	r0, r3
 8005d54:	f04f 0100 	mov.w	r1, #0
 8005d58:	f04f 0200 	mov.w	r2, #0
 8005d5c:	f04f 0300 	mov.w	r3, #0
 8005d60:	008b      	lsls	r3, r1, #2
 8005d62:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005d66:	0082      	lsls	r2, r0, #2
 8005d68:	4640      	mov	r0, r8
 8005d6a:	4649      	mov	r1, r9
 8005d6c:	f7fa ff74 	bl	8000c58 <__aeabi_uldivmod>
 8005d70:	4602      	mov	r2, r0
 8005d72:	460b      	mov	r3, r1
 8005d74:	4b49      	ldr	r3, [pc, #292]	; (8005e9c <UART_SetConfig+0x38c>)
 8005d76:	fba3 2302 	umull	r2, r3, r3, r2
 8005d7a:	095b      	lsrs	r3, r3, #5
 8005d7c:	011e      	lsls	r6, r3, #4
 8005d7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d80:	4618      	mov	r0, r3
 8005d82:	f04f 0100 	mov.w	r1, #0
 8005d86:	4602      	mov	r2, r0
 8005d88:	460b      	mov	r3, r1
 8005d8a:	1894      	adds	r4, r2, r2
 8005d8c:	60bc      	str	r4, [r7, #8]
 8005d8e:	415b      	adcs	r3, r3
 8005d90:	60fb      	str	r3, [r7, #12]
 8005d92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d96:	1812      	adds	r2, r2, r0
 8005d98:	eb41 0303 	adc.w	r3, r1, r3
 8005d9c:	f04f 0400 	mov.w	r4, #0
 8005da0:	f04f 0500 	mov.w	r5, #0
 8005da4:	00dd      	lsls	r5, r3, #3
 8005da6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005daa:	00d4      	lsls	r4, r2, #3
 8005dac:	4622      	mov	r2, r4
 8005dae:	462b      	mov	r3, r5
 8005db0:	1814      	adds	r4, r2, r0
 8005db2:	64bc      	str	r4, [r7, #72]	; 0x48
 8005db4:	414b      	adcs	r3, r1
 8005db6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f04f 0100 	mov.w	r1, #0
 8005dc2:	f04f 0200 	mov.w	r2, #0
 8005dc6:	f04f 0300 	mov.w	r3, #0
 8005dca:	008b      	lsls	r3, r1, #2
 8005dcc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005dd0:	0082      	lsls	r2, r0, #2
 8005dd2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005dd6:	f7fa ff3f 	bl	8000c58 <__aeabi_uldivmod>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	460b      	mov	r3, r1
 8005dde:	4b2f      	ldr	r3, [pc, #188]	; (8005e9c <UART_SetConfig+0x38c>)
 8005de0:	fba3 1302 	umull	r1, r3, r3, r2
 8005de4:	095b      	lsrs	r3, r3, #5
 8005de6:	2164      	movs	r1, #100	; 0x64
 8005de8:	fb01 f303 	mul.w	r3, r1, r3
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	011b      	lsls	r3, r3, #4
 8005df0:	3332      	adds	r3, #50	; 0x32
 8005df2:	4a2a      	ldr	r2, [pc, #168]	; (8005e9c <UART_SetConfig+0x38c>)
 8005df4:	fba2 2303 	umull	r2, r3, r2, r3
 8005df8:	095b      	lsrs	r3, r3, #5
 8005dfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005dfe:	441e      	add	r6, r3
 8005e00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e02:	4618      	mov	r0, r3
 8005e04:	f04f 0100 	mov.w	r1, #0
 8005e08:	4602      	mov	r2, r0
 8005e0a:	460b      	mov	r3, r1
 8005e0c:	1894      	adds	r4, r2, r2
 8005e0e:	603c      	str	r4, [r7, #0]
 8005e10:	415b      	adcs	r3, r3
 8005e12:	607b      	str	r3, [r7, #4]
 8005e14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e18:	1812      	adds	r2, r2, r0
 8005e1a:	eb41 0303 	adc.w	r3, r1, r3
 8005e1e:	f04f 0400 	mov.w	r4, #0
 8005e22:	f04f 0500 	mov.w	r5, #0
 8005e26:	00dd      	lsls	r5, r3, #3
 8005e28:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005e2c:	00d4      	lsls	r4, r2, #3
 8005e2e:	4622      	mov	r2, r4
 8005e30:	462b      	mov	r3, r5
 8005e32:	eb12 0a00 	adds.w	sl, r2, r0
 8005e36:	eb43 0b01 	adc.w	fp, r3, r1
 8005e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f04f 0100 	mov.w	r1, #0
 8005e44:	f04f 0200 	mov.w	r2, #0
 8005e48:	f04f 0300 	mov.w	r3, #0
 8005e4c:	008b      	lsls	r3, r1, #2
 8005e4e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005e52:	0082      	lsls	r2, r0, #2
 8005e54:	4650      	mov	r0, sl
 8005e56:	4659      	mov	r1, fp
 8005e58:	f7fa fefe 	bl	8000c58 <__aeabi_uldivmod>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	460b      	mov	r3, r1
 8005e60:	4b0e      	ldr	r3, [pc, #56]	; (8005e9c <UART_SetConfig+0x38c>)
 8005e62:	fba3 1302 	umull	r1, r3, r3, r2
 8005e66:	095b      	lsrs	r3, r3, #5
 8005e68:	2164      	movs	r1, #100	; 0x64
 8005e6a:	fb01 f303 	mul.w	r3, r1, r3
 8005e6e:	1ad3      	subs	r3, r2, r3
 8005e70:	011b      	lsls	r3, r3, #4
 8005e72:	3332      	adds	r3, #50	; 0x32
 8005e74:	4a09      	ldr	r2, [pc, #36]	; (8005e9c <UART_SetConfig+0x38c>)
 8005e76:	fba2 2303 	umull	r2, r3, r2, r3
 8005e7a:	095b      	lsrs	r3, r3, #5
 8005e7c:	f003 020f 	and.w	r2, r3, #15
 8005e80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4432      	add	r2, r6
 8005e86:	609a      	str	r2, [r3, #8]
}
 8005e88:	bf00      	nop
 8005e8a:	377c      	adds	r7, #124	; 0x7c
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e92:	bf00      	nop
 8005e94:	40011000 	.word	0x40011000
 8005e98:	40011400 	.word	0x40011400
 8005e9c:	51eb851f 	.word	0x51eb851f

08005ea0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ea0:	b084      	sub	sp, #16
 8005ea2:	b580      	push	{r7, lr}
 8005ea4:	b084      	sub	sp, #16
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
 8005eaa:	f107 001c 	add.w	r0, r7, #28
 8005eae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d122      	bne.n	8005efe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ebc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005ecc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005ee0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d105      	bne.n	8005ef2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f001 fb1c 	bl	8007530 <USB_CoreReset>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	73fb      	strb	r3, [r7, #15]
 8005efc:	e01a      	b.n	8005f34 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f001 fb10 	bl	8007530 <USB_CoreReset>
 8005f10:	4603      	mov	r3, r0
 8005f12:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005f14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d106      	bne.n	8005f28 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f1e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	639a      	str	r2, [r3, #56]	; 0x38
 8005f26:	e005      	b.n	8005f34 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d10b      	bne.n	8005f52 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	f043 0206 	orr.w	r2, r3, #6
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	f043 0220 	orr.w	r2, r3, #32
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3710      	adds	r7, #16
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f5e:	b004      	add	sp, #16
 8005f60:	4770      	bx	lr
	...

08005f64 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b087      	sub	sp, #28
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	4613      	mov	r3, r2
 8005f70:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005f72:	79fb      	ldrb	r3, [r7, #7]
 8005f74:	2b02      	cmp	r3, #2
 8005f76:	d165      	bne.n	8006044 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	4a41      	ldr	r2, [pc, #260]	; (8006080 <USB_SetTurnaroundTime+0x11c>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d906      	bls.n	8005f8e <USB_SetTurnaroundTime+0x2a>
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	4a40      	ldr	r2, [pc, #256]	; (8006084 <USB_SetTurnaroundTime+0x120>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d202      	bcs.n	8005f8e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005f88:	230f      	movs	r3, #15
 8005f8a:	617b      	str	r3, [r7, #20]
 8005f8c:	e062      	b.n	8006054 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	4a3c      	ldr	r2, [pc, #240]	; (8006084 <USB_SetTurnaroundTime+0x120>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d306      	bcc.n	8005fa4 <USB_SetTurnaroundTime+0x40>
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	4a3b      	ldr	r2, [pc, #236]	; (8006088 <USB_SetTurnaroundTime+0x124>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d202      	bcs.n	8005fa4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005f9e:	230e      	movs	r3, #14
 8005fa0:	617b      	str	r3, [r7, #20]
 8005fa2:	e057      	b.n	8006054 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	4a38      	ldr	r2, [pc, #224]	; (8006088 <USB_SetTurnaroundTime+0x124>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d306      	bcc.n	8005fba <USB_SetTurnaroundTime+0x56>
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	4a37      	ldr	r2, [pc, #220]	; (800608c <USB_SetTurnaroundTime+0x128>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d202      	bcs.n	8005fba <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005fb4:	230d      	movs	r3, #13
 8005fb6:	617b      	str	r3, [r7, #20]
 8005fb8:	e04c      	b.n	8006054 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	4a33      	ldr	r2, [pc, #204]	; (800608c <USB_SetTurnaroundTime+0x128>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d306      	bcc.n	8005fd0 <USB_SetTurnaroundTime+0x6c>
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	4a32      	ldr	r2, [pc, #200]	; (8006090 <USB_SetTurnaroundTime+0x12c>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d802      	bhi.n	8005fd0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005fca:	230c      	movs	r3, #12
 8005fcc:	617b      	str	r3, [r7, #20]
 8005fce:	e041      	b.n	8006054 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	4a2f      	ldr	r2, [pc, #188]	; (8006090 <USB_SetTurnaroundTime+0x12c>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d906      	bls.n	8005fe6 <USB_SetTurnaroundTime+0x82>
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	4a2e      	ldr	r2, [pc, #184]	; (8006094 <USB_SetTurnaroundTime+0x130>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d802      	bhi.n	8005fe6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005fe0:	230b      	movs	r3, #11
 8005fe2:	617b      	str	r3, [r7, #20]
 8005fe4:	e036      	b.n	8006054 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	4a2a      	ldr	r2, [pc, #168]	; (8006094 <USB_SetTurnaroundTime+0x130>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d906      	bls.n	8005ffc <USB_SetTurnaroundTime+0x98>
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	4a29      	ldr	r2, [pc, #164]	; (8006098 <USB_SetTurnaroundTime+0x134>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d802      	bhi.n	8005ffc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005ff6:	230a      	movs	r3, #10
 8005ff8:	617b      	str	r3, [r7, #20]
 8005ffa:	e02b      	b.n	8006054 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	4a26      	ldr	r2, [pc, #152]	; (8006098 <USB_SetTurnaroundTime+0x134>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d906      	bls.n	8006012 <USB_SetTurnaroundTime+0xae>
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	4a25      	ldr	r2, [pc, #148]	; (800609c <USB_SetTurnaroundTime+0x138>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d202      	bcs.n	8006012 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800600c:	2309      	movs	r3, #9
 800600e:	617b      	str	r3, [r7, #20]
 8006010:	e020      	b.n	8006054 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	4a21      	ldr	r2, [pc, #132]	; (800609c <USB_SetTurnaroundTime+0x138>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d306      	bcc.n	8006028 <USB_SetTurnaroundTime+0xc4>
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	4a20      	ldr	r2, [pc, #128]	; (80060a0 <USB_SetTurnaroundTime+0x13c>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d802      	bhi.n	8006028 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006022:	2308      	movs	r3, #8
 8006024:	617b      	str	r3, [r7, #20]
 8006026:	e015      	b.n	8006054 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	4a1d      	ldr	r2, [pc, #116]	; (80060a0 <USB_SetTurnaroundTime+0x13c>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d906      	bls.n	800603e <USB_SetTurnaroundTime+0xda>
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	4a1c      	ldr	r2, [pc, #112]	; (80060a4 <USB_SetTurnaroundTime+0x140>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d202      	bcs.n	800603e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006038:	2307      	movs	r3, #7
 800603a:	617b      	str	r3, [r7, #20]
 800603c:	e00a      	b.n	8006054 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800603e:	2306      	movs	r3, #6
 8006040:	617b      	str	r3, [r7, #20]
 8006042:	e007      	b.n	8006054 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006044:	79fb      	ldrb	r3, [r7, #7]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d102      	bne.n	8006050 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800604a:	2309      	movs	r3, #9
 800604c:	617b      	str	r3, [r7, #20]
 800604e:	e001      	b.n	8006054 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006050:	2309      	movs	r3, #9
 8006052:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	68da      	ldr	r2, [r3, #12]
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	029b      	lsls	r3, r3, #10
 8006068:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800606c:	431a      	orrs	r2, r3
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	371c      	adds	r7, #28
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr
 8006080:	00d8acbf 	.word	0x00d8acbf
 8006084:	00e4e1c0 	.word	0x00e4e1c0
 8006088:	00f42400 	.word	0x00f42400
 800608c:	01067380 	.word	0x01067380
 8006090:	011a499f 	.word	0x011a499f
 8006094:	01312cff 	.word	0x01312cff
 8006098:	014ca43f 	.word	0x014ca43f
 800609c:	016e3600 	.word	0x016e3600
 80060a0:	01a6ab1f 	.word	0x01a6ab1f
 80060a4:	01e84800 	.word	0x01e84800

080060a8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	f043 0201 	orr.w	r2, r3, #1
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	370c      	adds	r7, #12
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr

080060ca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060ca:	b480      	push	{r7}
 80060cc:	b083      	sub	sp, #12
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	f023 0201 	bic.w	r2, r3, #1
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060de:	2300      	movs	r3, #0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	460b      	mov	r3, r1
 80060f6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80060f8:	2300      	movs	r3, #0
 80060fa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006108:	78fb      	ldrb	r3, [r7, #3]
 800610a:	2b01      	cmp	r3, #1
 800610c:	d115      	bne.n	800613a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800611a:	2001      	movs	r0, #1
 800611c:	f7fb fe76 	bl	8001e0c <HAL_Delay>
      ms++;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	3301      	adds	r3, #1
 8006124:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f001 f972 	bl	8007410 <USB_GetMode>
 800612c:	4603      	mov	r3, r0
 800612e:	2b01      	cmp	r3, #1
 8006130:	d01e      	beq.n	8006170 <USB_SetCurrentMode+0x84>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2b31      	cmp	r3, #49	; 0x31
 8006136:	d9f0      	bls.n	800611a <USB_SetCurrentMode+0x2e>
 8006138:	e01a      	b.n	8006170 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800613a:	78fb      	ldrb	r3, [r7, #3]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d115      	bne.n	800616c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800614c:	2001      	movs	r0, #1
 800614e:	f7fb fe5d 	bl	8001e0c <HAL_Delay>
      ms++;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	3301      	adds	r3, #1
 8006156:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f001 f959 	bl	8007410 <USB_GetMode>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d005      	beq.n	8006170 <USB_SetCurrentMode+0x84>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2b31      	cmp	r3, #49	; 0x31
 8006168:	d9f0      	bls.n	800614c <USB_SetCurrentMode+0x60>
 800616a:	e001      	b.n	8006170 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	e005      	b.n	800617c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2b32      	cmp	r3, #50	; 0x32
 8006174:	d101      	bne.n	800617a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e000      	b.n	800617c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	4618      	mov	r0, r3
 800617e:	3710      	adds	r7, #16
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006184:	b084      	sub	sp, #16
 8006186:	b580      	push	{r7, lr}
 8006188:	b086      	sub	sp, #24
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
 800618e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006192:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006196:	2300      	movs	r3, #0
 8006198:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800619e:	2300      	movs	r3, #0
 80061a0:	613b      	str	r3, [r7, #16]
 80061a2:	e009      	b.n	80061b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	3340      	adds	r3, #64	; 0x40
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	4413      	add	r3, r2
 80061ae:	2200      	movs	r2, #0
 80061b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	3301      	adds	r3, #1
 80061b6:	613b      	str	r3, [r7, #16]
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	2b0e      	cmp	r3, #14
 80061bc:	d9f2      	bls.n	80061a4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80061be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d11c      	bne.n	80061fe <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061d2:	f043 0302 	orr.w	r3, r3, #2
 80061d6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061dc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	639a      	str	r2, [r3, #56]	; 0x38
 80061fc:	e00b      	b.n	8006216 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006202:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800621c:	461a      	mov	r2, r3
 800621e:	2300      	movs	r3, #0
 8006220:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006228:	4619      	mov	r1, r3
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006230:	461a      	mov	r2, r3
 8006232:	680b      	ldr	r3, [r1, #0]
 8006234:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006238:	2b01      	cmp	r3, #1
 800623a:	d10c      	bne.n	8006256 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800623c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800623e:	2b00      	cmp	r3, #0
 8006240:	d104      	bne.n	800624c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006242:	2100      	movs	r1, #0
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 f945 	bl	80064d4 <USB_SetDevSpeed>
 800624a:	e008      	b.n	800625e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800624c:	2101      	movs	r1, #1
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 f940 	bl	80064d4 <USB_SetDevSpeed>
 8006254:	e003      	b.n	800625e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006256:	2103      	movs	r1, #3
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 f93b 	bl	80064d4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800625e:	2110      	movs	r1, #16
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 f8f3 	bl	800644c <USB_FlushTxFifo>
 8006266:	4603      	mov	r3, r0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d001      	beq.n	8006270 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 f90f 	bl	8006494 <USB_FlushRxFifo>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d001      	beq.n	8006280 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006286:	461a      	mov	r2, r3
 8006288:	2300      	movs	r3, #0
 800628a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006292:	461a      	mov	r2, r3
 8006294:	2300      	movs	r3, #0
 8006296:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800629e:	461a      	mov	r2, r3
 80062a0:	2300      	movs	r3, #0
 80062a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062a4:	2300      	movs	r3, #0
 80062a6:	613b      	str	r3, [r7, #16]
 80062a8:	e043      	b.n	8006332 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	015a      	lsls	r2, r3, #5
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	4413      	add	r3, r2
 80062b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062c0:	d118      	bne.n	80062f4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d10a      	bne.n	80062de <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	015a      	lsls	r2, r3, #5
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	4413      	add	r3, r2
 80062d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062d4:	461a      	mov	r2, r3
 80062d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80062da:	6013      	str	r3, [r2, #0]
 80062dc:	e013      	b.n	8006306 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	015a      	lsls	r2, r3, #5
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	4413      	add	r3, r2
 80062e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ea:	461a      	mov	r2, r3
 80062ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80062f0:	6013      	str	r3, [r2, #0]
 80062f2:	e008      	b.n	8006306 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	015a      	lsls	r2, r3, #5
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	4413      	add	r3, r2
 80062fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006300:	461a      	mov	r2, r3
 8006302:	2300      	movs	r3, #0
 8006304:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	015a      	lsls	r2, r3, #5
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	4413      	add	r3, r2
 800630e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006312:	461a      	mov	r2, r3
 8006314:	2300      	movs	r3, #0
 8006316:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	015a      	lsls	r2, r3, #5
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	4413      	add	r3, r2
 8006320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006324:	461a      	mov	r2, r3
 8006326:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800632a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	3301      	adds	r3, #1
 8006330:	613b      	str	r3, [r7, #16]
 8006332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006334:	693a      	ldr	r2, [r7, #16]
 8006336:	429a      	cmp	r2, r3
 8006338:	d3b7      	bcc.n	80062aa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800633a:	2300      	movs	r3, #0
 800633c:	613b      	str	r3, [r7, #16]
 800633e:	e043      	b.n	80063c8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	015a      	lsls	r2, r3, #5
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	4413      	add	r3, r2
 8006348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006352:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006356:	d118      	bne.n	800638a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d10a      	bne.n	8006374 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	015a      	lsls	r2, r3, #5
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	4413      	add	r3, r2
 8006366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800636a:	461a      	mov	r2, r3
 800636c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006370:	6013      	str	r3, [r2, #0]
 8006372:	e013      	b.n	800639c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	015a      	lsls	r2, r3, #5
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	4413      	add	r3, r2
 800637c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006380:	461a      	mov	r2, r3
 8006382:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006386:	6013      	str	r3, [r2, #0]
 8006388:	e008      	b.n	800639c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	015a      	lsls	r2, r3, #5
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	4413      	add	r3, r2
 8006392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006396:	461a      	mov	r2, r3
 8006398:	2300      	movs	r3, #0
 800639a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	015a      	lsls	r2, r3, #5
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	4413      	add	r3, r2
 80063a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a8:	461a      	mov	r2, r3
 80063aa:	2300      	movs	r3, #0
 80063ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	015a      	lsls	r2, r3, #5
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	4413      	add	r3, r2
 80063b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063ba:	461a      	mov	r2, r3
 80063bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80063c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	3301      	adds	r3, #1
 80063c6:	613b      	str	r3, [r7, #16]
 80063c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ca:	693a      	ldr	r2, [r7, #16]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d3b7      	bcc.n	8006340 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	68fa      	ldr	r2, [r7, #12]
 80063da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063e2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80063f0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80063f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d105      	bne.n	8006404 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	699b      	ldr	r3, [r3, #24]
 80063fc:	f043 0210 	orr.w	r2, r3, #16
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	699a      	ldr	r2, [r3, #24]
 8006408:	4b0f      	ldr	r3, [pc, #60]	; (8006448 <USB_DevInit+0x2c4>)
 800640a:	4313      	orrs	r3, r2
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006412:	2b00      	cmp	r3, #0
 8006414:	d005      	beq.n	8006422 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	699b      	ldr	r3, [r3, #24]
 800641a:	f043 0208 	orr.w	r2, r3, #8
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006424:	2b01      	cmp	r3, #1
 8006426:	d107      	bne.n	8006438 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	699b      	ldr	r3, [r3, #24]
 800642c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006430:	f043 0304 	orr.w	r3, r3, #4
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006438:	7dfb      	ldrb	r3, [r7, #23]
}
 800643a:	4618      	mov	r0, r3
 800643c:	3718      	adds	r7, #24
 800643e:	46bd      	mov	sp, r7
 8006440:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006444:	b004      	add	sp, #16
 8006446:	4770      	bx	lr
 8006448:	803c3800 	.word	0x803c3800

0800644c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800644c:	b480      	push	{r7}
 800644e:	b085      	sub	sp, #20
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006456:	2300      	movs	r3, #0
 8006458:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	019b      	lsls	r3, r3, #6
 800645e:	f043 0220 	orr.w	r2, r3, #32
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	3301      	adds	r3, #1
 800646a:	60fb      	str	r3, [r7, #12]
 800646c:	4a08      	ldr	r2, [pc, #32]	; (8006490 <USB_FlushTxFifo+0x44>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d901      	bls.n	8006476 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8006472:	2303      	movs	r3, #3
 8006474:	e006      	b.n	8006484 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	f003 0320 	and.w	r3, r3, #32
 800647e:	2b20      	cmp	r3, #32
 8006480:	d0f1      	beq.n	8006466 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006482:	2300      	movs	r3, #0
}
 8006484:	4618      	mov	r0, r3
 8006486:	3714      	adds	r7, #20
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr
 8006490:	00030d40 	.word	0x00030d40

08006494 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006494:	b480      	push	{r7}
 8006496:	b085      	sub	sp, #20
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800649c:	2300      	movs	r3, #0
 800649e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2210      	movs	r2, #16
 80064a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	3301      	adds	r3, #1
 80064aa:	60fb      	str	r3, [r7, #12]
 80064ac:	4a08      	ldr	r2, [pc, #32]	; (80064d0 <USB_FlushRxFifo+0x3c>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d901      	bls.n	80064b6 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80064b2:	2303      	movs	r3, #3
 80064b4:	e006      	b.n	80064c4 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	f003 0310 	and.w	r3, r3, #16
 80064be:	2b10      	cmp	r3, #16
 80064c0:	d0f1      	beq.n	80064a6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80064c2:	2300      	movs	r3, #0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3714      	adds	r7, #20
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr
 80064d0:	00030d40 	.word	0x00030d40

080064d4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b085      	sub	sp, #20
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	460b      	mov	r3, r1
 80064de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	78fb      	ldrb	r3, [r7, #3]
 80064ee:	68f9      	ldr	r1, [r7, #12]
 80064f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064f4:	4313      	orrs	r3, r2
 80064f6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3714      	adds	r7, #20
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr

08006506 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006506:	b480      	push	{r7}
 8006508:	b087      	sub	sp, #28
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	f003 0306 	and.w	r3, r3, #6
 800651e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d102      	bne.n	800652c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006526:	2300      	movs	r3, #0
 8006528:	75fb      	strb	r3, [r7, #23]
 800652a:	e00a      	b.n	8006542 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2b02      	cmp	r3, #2
 8006530:	d002      	beq.n	8006538 <USB_GetDevSpeed+0x32>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2b06      	cmp	r3, #6
 8006536:	d102      	bne.n	800653e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006538:	2302      	movs	r3, #2
 800653a:	75fb      	strb	r3, [r7, #23]
 800653c:	e001      	b.n	8006542 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800653e:	230f      	movs	r3, #15
 8006540:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006542:	7dfb      	ldrb	r3, [r7, #23]
}
 8006544:	4618      	mov	r0, r3
 8006546:	371c      	adds	r7, #28
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006550:	b480      	push	{r7}
 8006552:	b085      	sub	sp, #20
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	785b      	ldrb	r3, [r3, #1]
 8006568:	2b01      	cmp	r3, #1
 800656a:	d13a      	bne.n	80065e2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006572:	69da      	ldr	r2, [r3, #28]
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	f003 030f 	and.w	r3, r3, #15
 800657c:	2101      	movs	r1, #1
 800657e:	fa01 f303 	lsl.w	r3, r1, r3
 8006582:	b29b      	uxth	r3, r3
 8006584:	68f9      	ldr	r1, [r7, #12]
 8006586:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800658a:	4313      	orrs	r3, r2
 800658c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	015a      	lsls	r2, r3, #5
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	4413      	add	r3, r2
 8006596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d155      	bne.n	8006650 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	015a      	lsls	r2, r3, #5
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	4413      	add	r3, r2
 80065ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	78db      	ldrb	r3, [r3, #3]
 80065be:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80065c0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	059b      	lsls	r3, r3, #22
 80065c6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80065c8:	4313      	orrs	r3, r2
 80065ca:	68ba      	ldr	r2, [r7, #8]
 80065cc:	0151      	lsls	r1, r2, #5
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	440a      	add	r2, r1
 80065d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065de:	6013      	str	r3, [r2, #0]
 80065e0:	e036      	b.n	8006650 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065e8:	69da      	ldr	r2, [r3, #28]
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	f003 030f 	and.w	r3, r3, #15
 80065f2:	2101      	movs	r1, #1
 80065f4:	fa01 f303 	lsl.w	r3, r1, r3
 80065f8:	041b      	lsls	r3, r3, #16
 80065fa:	68f9      	ldr	r1, [r7, #12]
 80065fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006600:	4313      	orrs	r3, r2
 8006602:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	015a      	lsls	r2, r3, #5
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	4413      	add	r3, r2
 800660c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006616:	2b00      	cmp	r3, #0
 8006618:	d11a      	bne.n	8006650 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	015a      	lsls	r2, r3, #5
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	4413      	add	r3, r2
 8006622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	78db      	ldrb	r3, [r3, #3]
 8006634:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006636:	430b      	orrs	r3, r1
 8006638:	4313      	orrs	r3, r2
 800663a:	68ba      	ldr	r2, [r7, #8]
 800663c:	0151      	lsls	r1, r2, #5
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	440a      	add	r2, r1
 8006642:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800664a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800664e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3714      	adds	r7, #20
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr
	...

08006660 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006660:	b480      	push	{r7}
 8006662:	b085      	sub	sp, #20
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	785b      	ldrb	r3, [r3, #1]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d161      	bne.n	8006740 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	015a      	lsls	r2, r3, #5
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	4413      	add	r3, r2
 8006684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800668e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006692:	d11f      	bne.n	80066d4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	015a      	lsls	r2, r3, #5
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	4413      	add	r3, r2
 800669c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68ba      	ldr	r2, [r7, #8]
 80066a4:	0151      	lsls	r1, r2, #5
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	440a      	add	r2, r1
 80066aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80066b2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	015a      	lsls	r2, r3, #5
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	4413      	add	r3, r2
 80066bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	68ba      	ldr	r2, [r7, #8]
 80066c4:	0151      	lsls	r1, r2, #5
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	440a      	add	r2, r1
 80066ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	f003 030f 	and.w	r3, r3, #15
 80066e4:	2101      	movs	r1, #1
 80066e6:	fa01 f303 	lsl.w	r3, r1, r3
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	43db      	mvns	r3, r3
 80066ee:	68f9      	ldr	r1, [r7, #12]
 80066f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066f4:	4013      	ands	r3, r2
 80066f6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066fe:	69da      	ldr	r2, [r3, #28]
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	f003 030f 	and.w	r3, r3, #15
 8006708:	2101      	movs	r1, #1
 800670a:	fa01 f303 	lsl.w	r3, r1, r3
 800670e:	b29b      	uxth	r3, r3
 8006710:	43db      	mvns	r3, r3
 8006712:	68f9      	ldr	r1, [r7, #12]
 8006714:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006718:	4013      	ands	r3, r2
 800671a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	015a      	lsls	r2, r3, #5
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	4413      	add	r3, r2
 8006724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	0159      	lsls	r1, r3, #5
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	440b      	add	r3, r1
 8006732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006736:	4619      	mov	r1, r3
 8006738:	4b35      	ldr	r3, [pc, #212]	; (8006810 <USB_DeactivateEndpoint+0x1b0>)
 800673a:	4013      	ands	r3, r2
 800673c:	600b      	str	r3, [r1, #0]
 800673e:	e060      	b.n	8006802 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	015a      	lsls	r2, r3, #5
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	4413      	add	r3, r2
 8006748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006752:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006756:	d11f      	bne.n	8006798 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	015a      	lsls	r2, r3, #5
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	4413      	add	r3, r2
 8006760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	68ba      	ldr	r2, [r7, #8]
 8006768:	0151      	lsls	r1, r2, #5
 800676a:	68fa      	ldr	r2, [r7, #12]
 800676c:	440a      	add	r2, r1
 800676e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006772:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006776:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	015a      	lsls	r2, r3, #5
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	4413      	add	r3, r2
 8006780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68ba      	ldr	r2, [r7, #8]
 8006788:	0151      	lsls	r1, r2, #5
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	440a      	add	r2, r1
 800678e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006792:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006796:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800679e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	f003 030f 	and.w	r3, r3, #15
 80067a8:	2101      	movs	r1, #1
 80067aa:	fa01 f303 	lsl.w	r3, r1, r3
 80067ae:	041b      	lsls	r3, r3, #16
 80067b0:	43db      	mvns	r3, r3
 80067b2:	68f9      	ldr	r1, [r7, #12]
 80067b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067b8:	4013      	ands	r3, r2
 80067ba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067c2:	69da      	ldr	r2, [r3, #28]
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	f003 030f 	and.w	r3, r3, #15
 80067cc:	2101      	movs	r1, #1
 80067ce:	fa01 f303 	lsl.w	r3, r1, r3
 80067d2:	041b      	lsls	r3, r3, #16
 80067d4:	43db      	mvns	r3, r3
 80067d6:	68f9      	ldr	r1, [r7, #12]
 80067d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067dc:	4013      	ands	r3, r2
 80067de:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	015a      	lsls	r2, r3, #5
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	4413      	add	r3, r2
 80067e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	0159      	lsls	r1, r3, #5
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	440b      	add	r3, r1
 80067f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067fa:	4619      	mov	r1, r3
 80067fc:	4b05      	ldr	r3, [pc, #20]	; (8006814 <USB_DeactivateEndpoint+0x1b4>)
 80067fe:	4013      	ands	r3, r2
 8006800:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	3714      	adds	r7, #20
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr
 8006810:	ec337800 	.word	0xec337800
 8006814:	eff37800 	.word	0xeff37800

08006818 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b08a      	sub	sp, #40	; 0x28
 800681c:	af02      	add	r7, sp, #8
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	4613      	mov	r3, r2
 8006824:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	785b      	ldrb	r3, [r3, #1]
 8006834:	2b01      	cmp	r3, #1
 8006836:	f040 815c 	bne.w	8006af2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	695b      	ldr	r3, [r3, #20]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d132      	bne.n	80068a8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	015a      	lsls	r2, r3, #5
 8006846:	69fb      	ldr	r3, [r7, #28]
 8006848:	4413      	add	r3, r2
 800684a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	69ba      	ldr	r2, [r7, #24]
 8006852:	0151      	lsls	r1, r2, #5
 8006854:	69fa      	ldr	r2, [r7, #28]
 8006856:	440a      	add	r2, r1
 8006858:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800685c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006860:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006864:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	015a      	lsls	r2, r3, #5
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	4413      	add	r3, r2
 800686e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	69ba      	ldr	r2, [r7, #24]
 8006876:	0151      	lsls	r1, r2, #5
 8006878:	69fa      	ldr	r2, [r7, #28]
 800687a:	440a      	add	r2, r1
 800687c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006880:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006884:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	015a      	lsls	r2, r3, #5
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	4413      	add	r3, r2
 800688e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	69ba      	ldr	r2, [r7, #24]
 8006896:	0151      	lsls	r1, r2, #5
 8006898:	69fa      	ldr	r2, [r7, #28]
 800689a:	440a      	add	r2, r1
 800689c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068a0:	0cdb      	lsrs	r3, r3, #19
 80068a2:	04db      	lsls	r3, r3, #19
 80068a4:	6113      	str	r3, [r2, #16]
 80068a6:	e074      	b.n	8006992 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	015a      	lsls	r2, r3, #5
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	4413      	add	r3, r2
 80068b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	69ba      	ldr	r2, [r7, #24]
 80068b8:	0151      	lsls	r1, r2, #5
 80068ba:	69fa      	ldr	r2, [r7, #28]
 80068bc:	440a      	add	r2, r1
 80068be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068c2:	0cdb      	lsrs	r3, r3, #19
 80068c4:	04db      	lsls	r3, r3, #19
 80068c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	015a      	lsls	r2, r3, #5
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	4413      	add	r3, r2
 80068d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	69ba      	ldr	r2, [r7, #24]
 80068d8:	0151      	lsls	r1, r2, #5
 80068da:	69fa      	ldr	r2, [r7, #28]
 80068dc:	440a      	add	r2, r1
 80068de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068e2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80068e6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80068ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	015a      	lsls	r2, r3, #5
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	4413      	add	r3, r2
 80068f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068f8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	6959      	ldr	r1, [r3, #20]
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	440b      	add	r3, r1
 8006904:	1e59      	subs	r1, r3, #1
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	fbb1 f3f3 	udiv	r3, r1, r3
 800690e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006910:	4b9d      	ldr	r3, [pc, #628]	; (8006b88 <USB_EPStartXfer+0x370>)
 8006912:	400b      	ands	r3, r1
 8006914:	69b9      	ldr	r1, [r7, #24]
 8006916:	0148      	lsls	r0, r1, #5
 8006918:	69f9      	ldr	r1, [r7, #28]
 800691a:	4401      	add	r1, r0
 800691c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006920:	4313      	orrs	r3, r2
 8006922:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006924:	69bb      	ldr	r3, [r7, #24]
 8006926:	015a      	lsls	r2, r3, #5
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	4413      	add	r3, r2
 800692c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006930:	691a      	ldr	r2, [r3, #16]
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	695b      	ldr	r3, [r3, #20]
 8006936:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800693a:	69b9      	ldr	r1, [r7, #24]
 800693c:	0148      	lsls	r0, r1, #5
 800693e:	69f9      	ldr	r1, [r7, #28]
 8006940:	4401      	add	r1, r0
 8006942:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006946:	4313      	orrs	r3, r2
 8006948:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	78db      	ldrb	r3, [r3, #3]
 800694e:	2b01      	cmp	r3, #1
 8006950:	d11f      	bne.n	8006992 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	015a      	lsls	r2, r3, #5
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	4413      	add	r3, r2
 800695a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800695e:	691b      	ldr	r3, [r3, #16]
 8006960:	69ba      	ldr	r2, [r7, #24]
 8006962:	0151      	lsls	r1, r2, #5
 8006964:	69fa      	ldr	r2, [r7, #28]
 8006966:	440a      	add	r2, r1
 8006968:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800696c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006970:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	015a      	lsls	r2, r3, #5
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	4413      	add	r3, r2
 800697a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	69ba      	ldr	r2, [r7, #24]
 8006982:	0151      	lsls	r1, r2, #5
 8006984:	69fa      	ldr	r2, [r7, #28]
 8006986:	440a      	add	r2, r1
 8006988:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800698c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006990:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006992:	79fb      	ldrb	r3, [r7, #7]
 8006994:	2b01      	cmp	r3, #1
 8006996:	d14b      	bne.n	8006a30 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	691b      	ldr	r3, [r3, #16]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d009      	beq.n	80069b4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	015a      	lsls	r2, r3, #5
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	4413      	add	r3, r2
 80069a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069ac:	461a      	mov	r2, r3
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	78db      	ldrb	r3, [r3, #3]
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d128      	bne.n	8006a0e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d110      	bne.n	80069ee <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	015a      	lsls	r2, r3, #5
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	4413      	add	r3, r2
 80069d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	69ba      	ldr	r2, [r7, #24]
 80069dc:	0151      	lsls	r1, r2, #5
 80069de:	69fa      	ldr	r2, [r7, #28]
 80069e0:	440a      	add	r2, r1
 80069e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80069ea:	6013      	str	r3, [r2, #0]
 80069ec:	e00f      	b.n	8006a0e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	015a      	lsls	r2, r3, #5
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	4413      	add	r3, r2
 80069f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	69ba      	ldr	r2, [r7, #24]
 80069fe:	0151      	lsls	r1, r2, #5
 8006a00:	69fa      	ldr	r2, [r7, #28]
 8006a02:	440a      	add	r2, r1
 8006a04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a0c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	015a      	lsls	r2, r3, #5
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	4413      	add	r3, r2
 8006a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	69ba      	ldr	r2, [r7, #24]
 8006a1e:	0151      	lsls	r1, r2, #5
 8006a20:	69fa      	ldr	r2, [r7, #28]
 8006a22:	440a      	add	r2, r1
 8006a24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a28:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a2c:	6013      	str	r3, [r2, #0]
 8006a2e:	e12f      	b.n	8006c90 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	015a      	lsls	r2, r3, #5
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	4413      	add	r3, r2
 8006a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	69ba      	ldr	r2, [r7, #24]
 8006a40:	0151      	lsls	r1, r2, #5
 8006a42:	69fa      	ldr	r2, [r7, #28]
 8006a44:	440a      	add	r2, r1
 8006a46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a4a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a4e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	78db      	ldrb	r3, [r3, #3]
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d015      	beq.n	8006a84 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	695b      	ldr	r3, [r3, #20]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	f000 8117 	beq.w	8006c90 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	f003 030f 	and.w	r3, r3, #15
 8006a72:	2101      	movs	r1, #1
 8006a74:	fa01 f303 	lsl.w	r3, r1, r3
 8006a78:	69f9      	ldr	r1, [r7, #28]
 8006a7a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	634b      	str	r3, [r1, #52]	; 0x34
 8006a82:	e105      	b.n	8006c90 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d110      	bne.n	8006ab6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	015a      	lsls	r2, r3, #5
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	4413      	add	r3, r2
 8006a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	69ba      	ldr	r2, [r7, #24]
 8006aa4:	0151      	lsls	r1, r2, #5
 8006aa6:	69fa      	ldr	r2, [r7, #28]
 8006aa8:	440a      	add	r2, r1
 8006aaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ab2:	6013      	str	r3, [r2, #0]
 8006ab4:	e00f      	b.n	8006ad6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	015a      	lsls	r2, r3, #5
 8006aba:	69fb      	ldr	r3, [r7, #28]
 8006abc:	4413      	add	r3, r2
 8006abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	69ba      	ldr	r2, [r7, #24]
 8006ac6:	0151      	lsls	r1, r2, #5
 8006ac8:	69fa      	ldr	r2, [r7, #28]
 8006aca:	440a      	add	r2, r1
 8006acc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ad4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	68d9      	ldr	r1, [r3, #12]
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	781a      	ldrb	r2, [r3, #0]
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	695b      	ldr	r3, [r3, #20]
 8006ae2:	b298      	uxth	r0, r3
 8006ae4:	79fb      	ldrb	r3, [r7, #7]
 8006ae6:	9300      	str	r3, [sp, #0]
 8006ae8:	4603      	mov	r3, r0
 8006aea:	68f8      	ldr	r0, [r7, #12]
 8006aec:	f000 fa2b 	bl	8006f46 <USB_WritePacket>
 8006af0:	e0ce      	b.n	8006c90 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	015a      	lsls	r2, r3, #5
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	4413      	add	r3, r2
 8006afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	69ba      	ldr	r2, [r7, #24]
 8006b02:	0151      	lsls	r1, r2, #5
 8006b04:	69fa      	ldr	r2, [r7, #28]
 8006b06:	440a      	add	r2, r1
 8006b08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b0c:	0cdb      	lsrs	r3, r3, #19
 8006b0e:	04db      	lsls	r3, r3, #19
 8006b10:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	015a      	lsls	r2, r3, #5
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	4413      	add	r3, r2
 8006b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b1e:	691b      	ldr	r3, [r3, #16]
 8006b20:	69ba      	ldr	r2, [r7, #24]
 8006b22:	0151      	lsls	r1, r2, #5
 8006b24:	69fa      	ldr	r2, [r7, #28]
 8006b26:	440a      	add	r2, r1
 8006b28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b2c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b30:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b34:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	695b      	ldr	r3, [r3, #20]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d126      	bne.n	8006b8c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	015a      	lsls	r2, r3, #5
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	4413      	add	r3, r2
 8006b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b4a:	691a      	ldr	r2, [r3, #16]
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b54:	69b9      	ldr	r1, [r7, #24]
 8006b56:	0148      	lsls	r0, r1, #5
 8006b58:	69f9      	ldr	r1, [r7, #28]
 8006b5a:	4401      	add	r1, r0
 8006b5c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006b60:	4313      	orrs	r3, r2
 8006b62:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	015a      	lsls	r2, r3, #5
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	69ba      	ldr	r2, [r7, #24]
 8006b74:	0151      	lsls	r1, r2, #5
 8006b76:	69fa      	ldr	r2, [r7, #28]
 8006b78:	440a      	add	r2, r1
 8006b7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b82:	6113      	str	r3, [r2, #16]
 8006b84:	e036      	b.n	8006bf4 <USB_EPStartXfer+0x3dc>
 8006b86:	bf00      	nop
 8006b88:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	695a      	ldr	r2, [r3, #20]
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	4413      	add	r3, r2
 8006b96:	1e5a      	subs	r2, r3, #1
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ba0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	015a      	lsls	r2, r3, #5
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	4413      	add	r3, r2
 8006baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bae:	691a      	ldr	r2, [r3, #16]
 8006bb0:	8afb      	ldrh	r3, [r7, #22]
 8006bb2:	04d9      	lsls	r1, r3, #19
 8006bb4:	4b39      	ldr	r3, [pc, #228]	; (8006c9c <USB_EPStartXfer+0x484>)
 8006bb6:	400b      	ands	r3, r1
 8006bb8:	69b9      	ldr	r1, [r7, #24]
 8006bba:	0148      	lsls	r0, r1, #5
 8006bbc:	69f9      	ldr	r1, [r7, #28]
 8006bbe:	4401      	add	r1, r0
 8006bc0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	015a      	lsls	r2, r3, #5
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	4413      	add	r3, r2
 8006bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bd4:	691a      	ldr	r2, [r3, #16]
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	8af9      	ldrh	r1, [r7, #22]
 8006bdc:	fb01 f303 	mul.w	r3, r1, r3
 8006be0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006be4:	69b9      	ldr	r1, [r7, #24]
 8006be6:	0148      	lsls	r0, r1, #5
 8006be8:	69f9      	ldr	r1, [r7, #28]
 8006bea:	4401      	add	r1, r0
 8006bec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006bf4:	79fb      	ldrb	r3, [r7, #7]
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d10d      	bne.n	8006c16 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d009      	beq.n	8006c16 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	68d9      	ldr	r1, [r3, #12]
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	015a      	lsls	r2, r3, #5
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	4413      	add	r3, r2
 8006c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c12:	460a      	mov	r2, r1
 8006c14:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	78db      	ldrb	r3, [r3, #3]
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d128      	bne.n	8006c70 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d110      	bne.n	8006c50 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006c2e:	69bb      	ldr	r3, [r7, #24]
 8006c30:	015a      	lsls	r2, r3, #5
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	4413      	add	r3, r2
 8006c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	69ba      	ldr	r2, [r7, #24]
 8006c3e:	0151      	lsls	r1, r2, #5
 8006c40:	69fa      	ldr	r2, [r7, #28]
 8006c42:	440a      	add	r2, r1
 8006c44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c48:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c4c:	6013      	str	r3, [r2, #0]
 8006c4e:	e00f      	b.n	8006c70 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	015a      	lsls	r2, r3, #5
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	4413      	add	r3, r2
 8006c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	69ba      	ldr	r2, [r7, #24]
 8006c60:	0151      	lsls	r1, r2, #5
 8006c62:	69fa      	ldr	r2, [r7, #28]
 8006c64:	440a      	add	r2, r1
 8006c66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c6e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	015a      	lsls	r2, r3, #5
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	4413      	add	r3, r2
 8006c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	69ba      	ldr	r2, [r7, #24]
 8006c80:	0151      	lsls	r1, r2, #5
 8006c82:	69fa      	ldr	r2, [r7, #28]
 8006c84:	440a      	add	r2, r1
 8006c86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c8a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c8e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3720      	adds	r7, #32
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	1ff80000 	.word	0x1ff80000

08006ca0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b087      	sub	sp, #28
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	4613      	mov	r3, r2
 8006cac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	785b      	ldrb	r3, [r3, #1]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	f040 80cd 	bne.w	8006e5c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	695b      	ldr	r3, [r3, #20]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d132      	bne.n	8006d30 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	015a      	lsls	r2, r3, #5
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	693a      	ldr	r2, [r7, #16]
 8006cda:	0151      	lsls	r1, r2, #5
 8006cdc:	697a      	ldr	r2, [r7, #20]
 8006cde:	440a      	add	r2, r1
 8006ce0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ce4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ce8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006cec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	015a      	lsls	r2, r3, #5
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	4413      	add	r3, r2
 8006cf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	693a      	ldr	r2, [r7, #16]
 8006cfe:	0151      	lsls	r1, r2, #5
 8006d00:	697a      	ldr	r2, [r7, #20]
 8006d02:	440a      	add	r2, r1
 8006d04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	015a      	lsls	r2, r3, #5
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	4413      	add	r3, r2
 8006d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	693a      	ldr	r2, [r7, #16]
 8006d1e:	0151      	lsls	r1, r2, #5
 8006d20:	697a      	ldr	r2, [r7, #20]
 8006d22:	440a      	add	r2, r1
 8006d24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d28:	0cdb      	lsrs	r3, r3, #19
 8006d2a:	04db      	lsls	r3, r3, #19
 8006d2c:	6113      	str	r3, [r2, #16]
 8006d2e:	e04e      	b.n	8006dce <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	015a      	lsls	r2, r3, #5
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	4413      	add	r3, r2
 8006d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d3c:	691b      	ldr	r3, [r3, #16]
 8006d3e:	693a      	ldr	r2, [r7, #16]
 8006d40:	0151      	lsls	r1, r2, #5
 8006d42:	697a      	ldr	r2, [r7, #20]
 8006d44:	440a      	add	r2, r1
 8006d46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d4a:	0cdb      	lsrs	r3, r3, #19
 8006d4c:	04db      	lsls	r3, r3, #19
 8006d4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	015a      	lsls	r2, r3, #5
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	4413      	add	r3, r2
 8006d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	693a      	ldr	r2, [r7, #16]
 8006d60:	0151      	lsls	r1, r2, #5
 8006d62:	697a      	ldr	r2, [r7, #20]
 8006d64:	440a      	add	r2, r1
 8006d66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d6a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d6e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d72:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	695a      	ldr	r2, [r3, #20]
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d903      	bls.n	8006d88 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	689a      	ldr	r2, [r3, #8]
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	015a      	lsls	r2, r3, #5
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	4413      	add	r3, r2
 8006d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d94:	691b      	ldr	r3, [r3, #16]
 8006d96:	693a      	ldr	r2, [r7, #16]
 8006d98:	0151      	lsls	r1, r2, #5
 8006d9a:	697a      	ldr	r2, [r7, #20]
 8006d9c:	440a      	add	r2, r1
 8006d9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006da2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006da6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	015a      	lsls	r2, r3, #5
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	4413      	add	r3, r2
 8006db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006db4:	691a      	ldr	r2, [r3, #16]
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	695b      	ldr	r3, [r3, #20]
 8006dba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006dbe:	6939      	ldr	r1, [r7, #16]
 8006dc0:	0148      	lsls	r0, r1, #5
 8006dc2:	6979      	ldr	r1, [r7, #20]
 8006dc4:	4401      	add	r1, r0
 8006dc6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006dce:	79fb      	ldrb	r3, [r7, #7]
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d11e      	bne.n	8006e12 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	691b      	ldr	r3, [r3, #16]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d009      	beq.n	8006df0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	015a      	lsls	r2, r3, #5
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	4413      	add	r3, r2
 8006de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006de8:	461a      	mov	r2, r3
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	015a      	lsls	r2, r3, #5
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	4413      	add	r3, r2
 8006df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	693a      	ldr	r2, [r7, #16]
 8006e00:	0151      	lsls	r1, r2, #5
 8006e02:	697a      	ldr	r2, [r7, #20]
 8006e04:	440a      	add	r2, r1
 8006e06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e0a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e0e:	6013      	str	r3, [r2, #0]
 8006e10:	e092      	b.n	8006f38 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	015a      	lsls	r2, r3, #5
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	4413      	add	r3, r2
 8006e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	693a      	ldr	r2, [r7, #16]
 8006e22:	0151      	lsls	r1, r2, #5
 8006e24:	697a      	ldr	r2, [r7, #20]
 8006e26:	440a      	add	r2, r1
 8006e28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e2c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e30:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	695b      	ldr	r3, [r3, #20]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d07e      	beq.n	8006f38 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	f003 030f 	and.w	r3, r3, #15
 8006e4a:	2101      	movs	r1, #1
 8006e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8006e50:	6979      	ldr	r1, [r7, #20]
 8006e52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e56:	4313      	orrs	r3, r2
 8006e58:	634b      	str	r3, [r1, #52]	; 0x34
 8006e5a:	e06d      	b.n	8006f38 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	015a      	lsls	r2, r3, #5
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	4413      	add	r3, r2
 8006e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	693a      	ldr	r2, [r7, #16]
 8006e6c:	0151      	lsls	r1, r2, #5
 8006e6e:	697a      	ldr	r2, [r7, #20]
 8006e70:	440a      	add	r2, r1
 8006e72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e76:	0cdb      	lsrs	r3, r3, #19
 8006e78:	04db      	lsls	r3, r3, #19
 8006e7a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	015a      	lsls	r2, r3, #5
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	4413      	add	r3, r2
 8006e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	693a      	ldr	r2, [r7, #16]
 8006e8c:	0151      	lsls	r1, r2, #5
 8006e8e:	697a      	ldr	r2, [r7, #20]
 8006e90:	440a      	add	r2, r1
 8006e92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e96:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e9a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e9e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	695b      	ldr	r3, [r3, #20]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d003      	beq.n	8006eb0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	689a      	ldr	r2, [r3, #8]
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	015a      	lsls	r2, r3, #5
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	4413      	add	r3, r2
 8006eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ebc:	691b      	ldr	r3, [r3, #16]
 8006ebe:	693a      	ldr	r2, [r7, #16]
 8006ec0:	0151      	lsls	r1, r2, #5
 8006ec2:	697a      	ldr	r2, [r7, #20]
 8006ec4:	440a      	add	r2, r1
 8006ec6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006eca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ece:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	015a      	lsls	r2, r3, #5
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	4413      	add	r3, r2
 8006ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006edc:	691a      	ldr	r2, [r3, #16]
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ee6:	6939      	ldr	r1, [r7, #16]
 8006ee8:	0148      	lsls	r0, r1, #5
 8006eea:	6979      	ldr	r1, [r7, #20]
 8006eec:	4401      	add	r1, r0
 8006eee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006ef6:	79fb      	ldrb	r3, [r7, #7]
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d10d      	bne.n	8006f18 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d009      	beq.n	8006f18 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	68d9      	ldr	r1, [r3, #12]
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	015a      	lsls	r2, r3, #5
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	4413      	add	r3, r2
 8006f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f14:	460a      	mov	r2, r1
 8006f16:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	015a      	lsls	r2, r3, #5
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	4413      	add	r3, r2
 8006f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	693a      	ldr	r2, [r7, #16]
 8006f28:	0151      	lsls	r1, r2, #5
 8006f2a:	697a      	ldr	r2, [r7, #20]
 8006f2c:	440a      	add	r2, r1
 8006f2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f32:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f36:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	371c      	adds	r7, #28
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr

08006f46 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006f46:	b480      	push	{r7}
 8006f48:	b089      	sub	sp, #36	; 0x24
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	60f8      	str	r0, [r7, #12]
 8006f4e:	60b9      	str	r1, [r7, #8]
 8006f50:	4611      	mov	r1, r2
 8006f52:	461a      	mov	r2, r3
 8006f54:	460b      	mov	r3, r1
 8006f56:	71fb      	strb	r3, [r7, #7]
 8006f58:	4613      	mov	r3, r2
 8006f5a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006f64:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d123      	bne.n	8006fb4 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006f6c:	88bb      	ldrh	r3, [r7, #4]
 8006f6e:	3303      	adds	r3, #3
 8006f70:	089b      	lsrs	r3, r3, #2
 8006f72:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006f74:	2300      	movs	r3, #0
 8006f76:	61bb      	str	r3, [r7, #24]
 8006f78:	e018      	b.n	8006fac <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006f7a:	79fb      	ldrb	r3, [r7, #7]
 8006f7c:	031a      	lsls	r2, r3, #12
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	4413      	add	r3, r2
 8006f82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f86:	461a      	mov	r2, r3
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006f8e:	69fb      	ldr	r3, [r7, #28]
 8006f90:	3301      	adds	r3, #1
 8006f92:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	3301      	adds	r3, #1
 8006f98:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	3301      	adds	r3, #1
 8006faa:	61bb      	str	r3, [r7, #24]
 8006fac:	69ba      	ldr	r2, [r7, #24]
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d3e2      	bcc.n	8006f7a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006fb4:	2300      	movs	r3, #0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3724      	adds	r7, #36	; 0x24
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr

08006fc2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006fc2:	b480      	push	{r7}
 8006fc4:	b08b      	sub	sp, #44	; 0x2c
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	60f8      	str	r0, [r7, #12]
 8006fca:	60b9      	str	r1, [r7, #8]
 8006fcc:	4613      	mov	r3, r2
 8006fce:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006fd8:	88fb      	ldrh	r3, [r7, #6]
 8006fda:	089b      	lsrs	r3, r3, #2
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006fe0:	88fb      	ldrh	r3, [r7, #6]
 8006fe2:	f003 0303 	and.w	r3, r3, #3
 8006fe6:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006fe8:	2300      	movs	r3, #0
 8006fea:	623b      	str	r3, [r7, #32]
 8006fec:	e014      	b.n	8007018 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006fee:	69bb      	ldr	r3, [r7, #24]
 8006ff0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff8:	601a      	str	r2, [r3, #0]
    pDest++;
 8006ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007002:	3301      	adds	r3, #1
 8007004:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007008:	3301      	adds	r3, #1
 800700a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800700c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700e:	3301      	adds	r3, #1
 8007010:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007012:	6a3b      	ldr	r3, [r7, #32]
 8007014:	3301      	adds	r3, #1
 8007016:	623b      	str	r3, [r7, #32]
 8007018:	6a3a      	ldr	r2, [r7, #32]
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	429a      	cmp	r2, r3
 800701e:	d3e6      	bcc.n	8006fee <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007020:	8bfb      	ldrh	r3, [r7, #30]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d01e      	beq.n	8007064 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007026:	2300      	movs	r3, #0
 8007028:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007030:	461a      	mov	r2, r3
 8007032:	f107 0310 	add.w	r3, r7, #16
 8007036:	6812      	ldr	r2, [r2, #0]
 8007038:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800703a:	693a      	ldr	r2, [r7, #16]
 800703c:	6a3b      	ldr	r3, [r7, #32]
 800703e:	b2db      	uxtb	r3, r3
 8007040:	00db      	lsls	r3, r3, #3
 8007042:	fa22 f303 	lsr.w	r3, r2, r3
 8007046:	b2da      	uxtb	r2, r3
 8007048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704a:	701a      	strb	r2, [r3, #0]
      i++;
 800704c:	6a3b      	ldr	r3, [r7, #32]
 800704e:	3301      	adds	r3, #1
 8007050:	623b      	str	r3, [r7, #32]
      pDest++;
 8007052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007054:	3301      	adds	r3, #1
 8007056:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007058:	8bfb      	ldrh	r3, [r7, #30]
 800705a:	3b01      	subs	r3, #1
 800705c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800705e:	8bfb      	ldrh	r3, [r7, #30]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d1ea      	bne.n	800703a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007066:	4618      	mov	r0, r3
 8007068:	372c      	adds	r7, #44	; 0x2c
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr

08007072 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007072:	b480      	push	{r7}
 8007074:	b085      	sub	sp, #20
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
 800707a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	785b      	ldrb	r3, [r3, #1]
 800708a:	2b01      	cmp	r3, #1
 800708c:	d12c      	bne.n	80070e8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	015a      	lsls	r2, r3, #5
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	4413      	add	r3, r2
 8007096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	2b00      	cmp	r3, #0
 800709e:	db12      	blt.n	80070c6 <USB_EPSetStall+0x54>
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d00f      	beq.n	80070c6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	015a      	lsls	r2, r3, #5
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	4413      	add	r3, r2
 80070ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	68ba      	ldr	r2, [r7, #8]
 80070b6:	0151      	lsls	r1, r2, #5
 80070b8:	68fa      	ldr	r2, [r7, #12]
 80070ba:	440a      	add	r2, r1
 80070bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80070c4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	015a      	lsls	r2, r3, #5
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	4413      	add	r3, r2
 80070ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	68ba      	ldr	r2, [r7, #8]
 80070d6:	0151      	lsls	r1, r2, #5
 80070d8:	68fa      	ldr	r2, [r7, #12]
 80070da:	440a      	add	r2, r1
 80070dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80070e4:	6013      	str	r3, [r2, #0]
 80070e6:	e02b      	b.n	8007140 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	015a      	lsls	r2, r3, #5
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	4413      	add	r3, r2
 80070f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	db12      	blt.n	8007120 <USB_EPSetStall+0xae>
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d00f      	beq.n	8007120 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	015a      	lsls	r2, r3, #5
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	4413      	add	r3, r2
 8007108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	68ba      	ldr	r2, [r7, #8]
 8007110:	0151      	lsls	r1, r2, #5
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	440a      	add	r2, r1
 8007116:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800711a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800711e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	015a      	lsls	r2, r3, #5
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	4413      	add	r3, r2
 8007128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	68ba      	ldr	r2, [r7, #8]
 8007130:	0151      	lsls	r1, r2, #5
 8007132:	68fa      	ldr	r2, [r7, #12]
 8007134:	440a      	add	r2, r1
 8007136:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800713a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800713e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007140:	2300      	movs	r3, #0
}
 8007142:	4618      	mov	r0, r3
 8007144:	3714      	adds	r7, #20
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr

0800714e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800714e:	b480      	push	{r7}
 8007150:	b085      	sub	sp, #20
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
 8007156:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	785b      	ldrb	r3, [r3, #1]
 8007166:	2b01      	cmp	r3, #1
 8007168:	d128      	bne.n	80071bc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	015a      	lsls	r2, r3, #5
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	4413      	add	r3, r2
 8007172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	68ba      	ldr	r2, [r7, #8]
 800717a:	0151      	lsls	r1, r2, #5
 800717c:	68fa      	ldr	r2, [r7, #12]
 800717e:	440a      	add	r2, r1
 8007180:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007184:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007188:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	78db      	ldrb	r3, [r3, #3]
 800718e:	2b03      	cmp	r3, #3
 8007190:	d003      	beq.n	800719a <USB_EPClearStall+0x4c>
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	78db      	ldrb	r3, [r3, #3]
 8007196:	2b02      	cmp	r3, #2
 8007198:	d138      	bne.n	800720c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	015a      	lsls	r2, r3, #5
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	4413      	add	r3, r2
 80071a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	68ba      	ldr	r2, [r7, #8]
 80071aa:	0151      	lsls	r1, r2, #5
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	440a      	add	r2, r1
 80071b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071b8:	6013      	str	r3, [r2, #0]
 80071ba:	e027      	b.n	800720c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	015a      	lsls	r2, r3, #5
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	4413      	add	r3, r2
 80071c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	68ba      	ldr	r2, [r7, #8]
 80071cc:	0151      	lsls	r1, r2, #5
 80071ce:	68fa      	ldr	r2, [r7, #12]
 80071d0:	440a      	add	r2, r1
 80071d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80071da:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	78db      	ldrb	r3, [r3, #3]
 80071e0:	2b03      	cmp	r3, #3
 80071e2:	d003      	beq.n	80071ec <USB_EPClearStall+0x9e>
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	78db      	ldrb	r3, [r3, #3]
 80071e8:	2b02      	cmp	r3, #2
 80071ea:	d10f      	bne.n	800720c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	015a      	lsls	r2, r3, #5
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	4413      	add	r3, r2
 80071f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	68ba      	ldr	r2, [r7, #8]
 80071fc:	0151      	lsls	r1, r2, #5
 80071fe:	68fa      	ldr	r2, [r7, #12]
 8007200:	440a      	add	r2, r1
 8007202:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007206:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800720a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800720c:	2300      	movs	r3, #0
}
 800720e:	4618      	mov	r0, r3
 8007210:	3714      	adds	r7, #20
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr

0800721a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800721a:	b480      	push	{r7}
 800721c:	b085      	sub	sp, #20
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
 8007222:	460b      	mov	r3, r1
 8007224:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	68fa      	ldr	r2, [r7, #12]
 8007234:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007238:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800723c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	78fb      	ldrb	r3, [r7, #3]
 8007248:	011b      	lsls	r3, r3, #4
 800724a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800724e:	68f9      	ldr	r1, [r7, #12]
 8007250:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007254:	4313      	orrs	r3, r2
 8007256:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007258:	2300      	movs	r3, #0
}
 800725a:	4618      	mov	r0, r3
 800725c:	3714      	adds	r7, #20
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr

08007266 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007266:	b480      	push	{r7}
 8007268:	b085      	sub	sp, #20
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007280:	f023 0303 	bic.w	r3, r3, #3
 8007284:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	68fa      	ldr	r2, [r7, #12]
 8007290:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007294:	f023 0302 	bic.w	r3, r3, #2
 8007298:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800729a:	2300      	movs	r3, #0
}
 800729c:	4618      	mov	r0, r3
 800729e:	3714      	adds	r7, #20
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b085      	sub	sp, #20
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	68fa      	ldr	r2, [r7, #12]
 80072be:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80072c2:	f023 0303 	bic.w	r3, r3, #3
 80072c6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	68fa      	ldr	r2, [r7, #12]
 80072d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072d6:	f043 0302 	orr.w	r3, r3, #2
 80072da:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3714      	adds	r7, #20
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr

080072ea <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80072ea:	b480      	push	{r7}
 80072ec:	b085      	sub	sp, #20
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	695b      	ldr	r3, [r3, #20]
 80072f6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	699b      	ldr	r3, [r3, #24]
 80072fc:	68fa      	ldr	r2, [r7, #12]
 80072fe:	4013      	ands	r3, r2
 8007300:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007302:	68fb      	ldr	r3, [r7, #12]
}
 8007304:	4618      	mov	r0, r3
 8007306:	3714      	adds	r7, #20
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007310:	b480      	push	{r7}
 8007312:	b085      	sub	sp, #20
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007322:	699b      	ldr	r3, [r3, #24]
 8007324:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800732c:	69db      	ldr	r3, [r3, #28]
 800732e:	68ba      	ldr	r2, [r7, #8]
 8007330:	4013      	ands	r3, r2
 8007332:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	0c1b      	lsrs	r3, r3, #16
}
 8007338:	4618      	mov	r0, r3
 800733a:	3714      	adds	r7, #20
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007344:	b480      	push	{r7}
 8007346:	b085      	sub	sp, #20
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007356:	699b      	ldr	r3, [r3, #24]
 8007358:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007360:	69db      	ldr	r3, [r3, #28]
 8007362:	68ba      	ldr	r2, [r7, #8]
 8007364:	4013      	ands	r3, r2
 8007366:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	b29b      	uxth	r3, r3
}
 800736c:	4618      	mov	r0, r3
 800736e:	3714      	adds	r7, #20
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr

08007378 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007378:	b480      	push	{r7}
 800737a:	b085      	sub	sp, #20
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	460b      	mov	r3, r1
 8007382:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007388:	78fb      	ldrb	r3, [r7, #3]
 800738a:	015a      	lsls	r2, r3, #5
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	4413      	add	r3, r2
 8007390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800739e:	695b      	ldr	r3, [r3, #20]
 80073a0:	68ba      	ldr	r2, [r7, #8]
 80073a2:	4013      	ands	r3, r2
 80073a4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80073a6:	68bb      	ldr	r3, [r7, #8]
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3714      	adds	r7, #20
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b087      	sub	sp, #28
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	460b      	mov	r3, r1
 80073be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073ca:	691b      	ldr	r3, [r3, #16]
 80073cc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073d6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80073d8:	78fb      	ldrb	r3, [r7, #3]
 80073da:	f003 030f 	and.w	r3, r3, #15
 80073de:	68fa      	ldr	r2, [r7, #12]
 80073e0:	fa22 f303 	lsr.w	r3, r2, r3
 80073e4:	01db      	lsls	r3, r3, #7
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	693a      	ldr	r2, [r7, #16]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80073ee:	78fb      	ldrb	r3, [r7, #3]
 80073f0:	015a      	lsls	r2, r3, #5
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	4413      	add	r3, r2
 80073f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	693a      	ldr	r2, [r7, #16]
 80073fe:	4013      	ands	r3, r2
 8007400:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007402:	68bb      	ldr	r3, [r7, #8]
}
 8007404:	4618      	mov	r0, r3
 8007406:	371c      	adds	r7, #28
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr

08007410 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007410:	b480      	push	{r7}
 8007412:	b083      	sub	sp, #12
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	695b      	ldr	r3, [r3, #20]
 800741c:	f003 0301 	and.w	r3, r3, #1
}
 8007420:	4618      	mov	r0, r3
 8007422:	370c      	adds	r7, #12
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800742c:	b480      	push	{r7}
 800742e:	b085      	sub	sp, #20
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007446:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800744a:	f023 0307 	bic.w	r3, r3, #7
 800744e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800745e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007462:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	3714      	adds	r7, #20
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr
	...

08007474 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007474:	b480      	push	{r7}
 8007476:	b087      	sub	sp, #28
 8007478:	af00      	add	r7, sp, #0
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	460b      	mov	r3, r1
 800747e:	607a      	str	r2, [r7, #4]
 8007480:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	333c      	adds	r3, #60	; 0x3c
 800748a:	3304      	adds	r3, #4
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	4a26      	ldr	r2, [pc, #152]	; (800752c <USB_EP0_OutStart+0xb8>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d90a      	bls.n	80074ae <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074a8:	d101      	bne.n	80074ae <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80074aa:	2300      	movs	r3, #0
 80074ac:	e037      	b.n	800751e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074b4:	461a      	mov	r2, r3
 80074b6:	2300      	movs	r3, #0
 80074b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074c0:	691b      	ldr	r3, [r3, #16]
 80074c2:	697a      	ldr	r2, [r7, #20]
 80074c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80074cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	697a      	ldr	r2, [r7, #20]
 80074d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074dc:	f043 0318 	orr.w	r3, r3, #24
 80074e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074e8:	691b      	ldr	r3, [r3, #16]
 80074ea:	697a      	ldr	r2, [r7, #20]
 80074ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074f0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80074f4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80074f6:	7afb      	ldrb	r3, [r7, #11]
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d10f      	bne.n	800751c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007502:	461a      	mov	r2, r3
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	697a      	ldr	r2, [r7, #20]
 8007512:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007516:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800751a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800751c:	2300      	movs	r3, #0
}
 800751e:	4618      	mov	r0, r3
 8007520:	371c      	adds	r7, #28
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr
 800752a:	bf00      	nop
 800752c:	4f54300a 	.word	0x4f54300a

08007530 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007530:	b480      	push	{r7}
 8007532:	b085      	sub	sp, #20
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007538:	2300      	movs	r3, #0
 800753a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	3301      	adds	r3, #1
 8007540:	60fb      	str	r3, [r7, #12]
 8007542:	4a13      	ldr	r2, [pc, #76]	; (8007590 <USB_CoreReset+0x60>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d901      	bls.n	800754c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007548:	2303      	movs	r3, #3
 800754a:	e01a      	b.n	8007582 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	691b      	ldr	r3, [r3, #16]
 8007550:	2b00      	cmp	r3, #0
 8007552:	daf3      	bge.n	800753c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007554:	2300      	movs	r3, #0
 8007556:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	691b      	ldr	r3, [r3, #16]
 800755c:	f043 0201 	orr.w	r2, r3, #1
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	3301      	adds	r3, #1
 8007568:	60fb      	str	r3, [r7, #12]
 800756a:	4a09      	ldr	r2, [pc, #36]	; (8007590 <USB_CoreReset+0x60>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d901      	bls.n	8007574 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007570:	2303      	movs	r3, #3
 8007572:	e006      	b.n	8007582 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	691b      	ldr	r3, [r3, #16]
 8007578:	f003 0301 	and.w	r3, r3, #1
 800757c:	2b01      	cmp	r3, #1
 800757e:	d0f1      	beq.n	8007564 <USB_CoreReset+0x34>

  return HAL_OK;
 8007580:	2300      	movs	r3, #0
}
 8007582:	4618      	mov	r0, r3
 8007584:	3714      	adds	r7, #20
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr
 800758e:	bf00      	nop
 8007590:	00030d40 	.word	0x00030d40

08007594 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	460b      	mov	r3, r1
 800759e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80075a0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80075a4:	f002 f960 	bl	8009868 <USBD_static_malloc>
 80075a8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d105      	bne.n	80075bc <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80075b8:	2302      	movs	r3, #2
 80075ba:	e066      	b.n	800768a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	68fa      	ldr	r2, [r7, #12]
 80075c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	7c1b      	ldrb	r3, [r3, #16]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d119      	bne.n	8007600 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80075cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075d0:	2202      	movs	r2, #2
 80075d2:	2181      	movs	r1, #129	; 0x81
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f002 f824 	bl	8009622 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2201      	movs	r2, #1
 80075de:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80075e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075e4:	2202      	movs	r2, #2
 80075e6:	2101      	movs	r1, #1
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f002 f81a 	bl	8009622 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2201      	movs	r2, #1
 80075f2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2210      	movs	r2, #16
 80075fa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80075fe:	e016      	b.n	800762e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007600:	2340      	movs	r3, #64	; 0x40
 8007602:	2202      	movs	r2, #2
 8007604:	2181      	movs	r1, #129	; 0x81
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f002 f80b 	bl	8009622 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007612:	2340      	movs	r3, #64	; 0x40
 8007614:	2202      	movs	r2, #2
 8007616:	2101      	movs	r1, #1
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f002 f802 	bl	8009622 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2201      	movs	r2, #1
 8007622:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2210      	movs	r2, #16
 800762a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800762e:	2308      	movs	r3, #8
 8007630:	2203      	movs	r2, #3
 8007632:	2182      	movs	r1, #130	; 0x82
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f001 fff4 	bl	8009622 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2201      	movs	r2, #1
 800763e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2200      	movs	r2, #0
 8007650:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2200      	movs	r2, #0
 8007658:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	7c1b      	ldrb	r3, [r3, #16]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d109      	bne.n	8007678 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800766a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800766e:	2101      	movs	r1, #1
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f002 f8c5 	bl	8009800 <USBD_LL_PrepareReceive>
 8007676:	e007      	b.n	8007688 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800767e:	2340      	movs	r3, #64	; 0x40
 8007680:	2101      	movs	r1, #1
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f002 f8bc 	bl	8009800 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	3710      	adds	r7, #16
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}

08007692 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007692:	b580      	push	{r7, lr}
 8007694:	b082      	sub	sp, #8
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
 800769a:	460b      	mov	r3, r1
 800769c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800769e:	2181      	movs	r1, #129	; 0x81
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f001 ffe4 	bl	800966e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80076ac:	2101      	movs	r1, #1
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f001 ffdd 	bl	800966e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80076bc:	2182      	movs	r1, #130	; 0x82
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f001 ffd5 	bl	800966e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d00e      	beq.n	80076fc <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076ee:	4618      	mov	r0, r3
 80076f0:	f002 f8c8 	bl	8009884 <USBD_static_free>
    pdev->pClassData = NULL;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3708      	adds	r7, #8
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
	...

08007708 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b086      	sub	sp, #24
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007718:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800771a:	2300      	movs	r3, #0
 800771c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800771e:	2300      	movs	r3, #0
 8007720:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007722:	2300      	movs	r3, #0
 8007724:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d101      	bne.n	8007730 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800772c:	2303      	movs	r3, #3
 800772e:	e0af      	b.n	8007890 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007738:	2b00      	cmp	r3, #0
 800773a:	d03f      	beq.n	80077bc <USBD_CDC_Setup+0xb4>
 800773c:	2b20      	cmp	r3, #32
 800773e:	f040 809f 	bne.w	8007880 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	88db      	ldrh	r3, [r3, #6]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d02e      	beq.n	80077a8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	b25b      	sxtb	r3, r3
 8007750:	2b00      	cmp	r3, #0
 8007752:	da16      	bge.n	8007782 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	683a      	ldr	r2, [r7, #0]
 800775e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007760:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007762:	683a      	ldr	r2, [r7, #0]
 8007764:	88d2      	ldrh	r2, [r2, #6]
 8007766:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	88db      	ldrh	r3, [r3, #6]
 800776c:	2b07      	cmp	r3, #7
 800776e:	bf28      	it	cs
 8007770:	2307      	movcs	r3, #7
 8007772:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	89fa      	ldrh	r2, [r7, #14]
 8007778:	4619      	mov	r1, r3
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f001 fb19 	bl	8008db2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007780:	e085      	b.n	800788e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	785a      	ldrb	r2, [r3, #1]
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	88db      	ldrh	r3, [r3, #6]
 8007790:	b2da      	uxtb	r2, r3
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007798:	6939      	ldr	r1, [r7, #16]
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	88db      	ldrh	r3, [r3, #6]
 800779e:	461a      	mov	r2, r3
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f001 fb32 	bl	8008e0a <USBD_CtlPrepareRx>
      break;
 80077a6:	e072      	b.n	800788e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	683a      	ldr	r2, [r7, #0]
 80077b2:	7850      	ldrb	r0, [r2, #1]
 80077b4:	2200      	movs	r2, #0
 80077b6:	6839      	ldr	r1, [r7, #0]
 80077b8:	4798      	blx	r3
      break;
 80077ba:	e068      	b.n	800788e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	785b      	ldrb	r3, [r3, #1]
 80077c0:	2b0b      	cmp	r3, #11
 80077c2:	d852      	bhi.n	800786a <USBD_CDC_Setup+0x162>
 80077c4:	a201      	add	r2, pc, #4	; (adr r2, 80077cc <USBD_CDC_Setup+0xc4>)
 80077c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ca:	bf00      	nop
 80077cc:	080077fd 	.word	0x080077fd
 80077d0:	08007879 	.word	0x08007879
 80077d4:	0800786b 	.word	0x0800786b
 80077d8:	0800786b 	.word	0x0800786b
 80077dc:	0800786b 	.word	0x0800786b
 80077e0:	0800786b 	.word	0x0800786b
 80077e4:	0800786b 	.word	0x0800786b
 80077e8:	0800786b 	.word	0x0800786b
 80077ec:	0800786b 	.word	0x0800786b
 80077f0:	0800786b 	.word	0x0800786b
 80077f4:	08007827 	.word	0x08007827
 80077f8:	08007851 	.word	0x08007851
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007802:	b2db      	uxtb	r3, r3
 8007804:	2b03      	cmp	r3, #3
 8007806:	d107      	bne.n	8007818 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007808:	f107 030a 	add.w	r3, r7, #10
 800780c:	2202      	movs	r2, #2
 800780e:	4619      	mov	r1, r3
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f001 face 	bl	8008db2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007816:	e032      	b.n	800787e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007818:	6839      	ldr	r1, [r7, #0]
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f001 fa58 	bl	8008cd0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007820:	2303      	movs	r3, #3
 8007822:	75fb      	strb	r3, [r7, #23]
          break;
 8007824:	e02b      	b.n	800787e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800782c:	b2db      	uxtb	r3, r3
 800782e:	2b03      	cmp	r3, #3
 8007830:	d107      	bne.n	8007842 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007832:	f107 030d 	add.w	r3, r7, #13
 8007836:	2201      	movs	r2, #1
 8007838:	4619      	mov	r1, r3
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f001 fab9 	bl	8008db2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007840:	e01d      	b.n	800787e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007842:	6839      	ldr	r1, [r7, #0]
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f001 fa43 	bl	8008cd0 <USBD_CtlError>
            ret = USBD_FAIL;
 800784a:	2303      	movs	r3, #3
 800784c:	75fb      	strb	r3, [r7, #23]
          break;
 800784e:	e016      	b.n	800787e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007856:	b2db      	uxtb	r3, r3
 8007858:	2b03      	cmp	r3, #3
 800785a:	d00f      	beq.n	800787c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800785c:	6839      	ldr	r1, [r7, #0]
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f001 fa36 	bl	8008cd0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007864:	2303      	movs	r3, #3
 8007866:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007868:	e008      	b.n	800787c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800786a:	6839      	ldr	r1, [r7, #0]
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f001 fa2f 	bl	8008cd0 <USBD_CtlError>
          ret = USBD_FAIL;
 8007872:	2303      	movs	r3, #3
 8007874:	75fb      	strb	r3, [r7, #23]
          break;
 8007876:	e002      	b.n	800787e <USBD_CDC_Setup+0x176>
          break;
 8007878:	bf00      	nop
 800787a:	e008      	b.n	800788e <USBD_CDC_Setup+0x186>
          break;
 800787c:	bf00      	nop
      }
      break;
 800787e:	e006      	b.n	800788e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8007880:	6839      	ldr	r1, [r7, #0]
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f001 fa24 	bl	8008cd0 <USBD_CtlError>
      ret = USBD_FAIL;
 8007888:	2303      	movs	r3, #3
 800788a:	75fb      	strb	r3, [r7, #23]
      break;
 800788c:	bf00      	nop
  }

  return (uint8_t)ret;
 800788e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007890:	4618      	mov	r0, r3
 8007892:	3718      	adds	r7, #24
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	460b      	mov	r3, r1
 80078a2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80078aa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d101      	bne.n	80078ba <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80078b6:	2303      	movs	r3, #3
 80078b8:	e04f      	b.n	800795a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078c0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80078c2:	78fa      	ldrb	r2, [r7, #3]
 80078c4:	6879      	ldr	r1, [r7, #4]
 80078c6:	4613      	mov	r3, r2
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	4413      	add	r3, r2
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	440b      	add	r3, r1
 80078d0:	3318      	adds	r3, #24
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d029      	beq.n	800792c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80078d8:	78fa      	ldrb	r2, [r7, #3]
 80078da:	6879      	ldr	r1, [r7, #4]
 80078dc:	4613      	mov	r3, r2
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	4413      	add	r3, r2
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	440b      	add	r3, r1
 80078e6:	3318      	adds	r3, #24
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	78f9      	ldrb	r1, [r7, #3]
 80078ec:	68f8      	ldr	r0, [r7, #12]
 80078ee:	460b      	mov	r3, r1
 80078f0:	00db      	lsls	r3, r3, #3
 80078f2:	1a5b      	subs	r3, r3, r1
 80078f4:	009b      	lsls	r3, r3, #2
 80078f6:	4403      	add	r3, r0
 80078f8:	3344      	adds	r3, #68	; 0x44
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	fbb2 f1f3 	udiv	r1, r2, r3
 8007900:	fb03 f301 	mul.w	r3, r3, r1
 8007904:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007906:	2b00      	cmp	r3, #0
 8007908:	d110      	bne.n	800792c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800790a:	78fa      	ldrb	r2, [r7, #3]
 800790c:	6879      	ldr	r1, [r7, #4]
 800790e:	4613      	mov	r3, r2
 8007910:	009b      	lsls	r3, r3, #2
 8007912:	4413      	add	r3, r2
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	440b      	add	r3, r1
 8007918:	3318      	adds	r3, #24
 800791a:	2200      	movs	r2, #0
 800791c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800791e:	78f9      	ldrb	r1, [r7, #3]
 8007920:	2300      	movs	r3, #0
 8007922:	2200      	movs	r2, #0
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f001 ff4a 	bl	80097be <USBD_LL_Transmit>
 800792a:	e015      	b.n	8007958 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	2200      	movs	r2, #0
 8007930:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800793a:	691b      	ldr	r3, [r3, #16]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d00b      	beq.n	8007958 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007946:	691b      	ldr	r3, [r3, #16]
 8007948:	68ba      	ldr	r2, [r7, #8]
 800794a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800794e:	68ba      	ldr	r2, [r7, #8]
 8007950:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007954:	78fa      	ldrb	r2, [r7, #3]
 8007956:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007958:	2300      	movs	r3, #0
}
 800795a:	4618      	mov	r0, r3
 800795c:	3710      	adds	r7, #16
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}

08007962 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007962:	b580      	push	{r7, lr}
 8007964:	b084      	sub	sp, #16
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
 800796a:	460b      	mov	r3, r1
 800796c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007974:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800797c:	2b00      	cmp	r3, #0
 800797e:	d101      	bne.n	8007984 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007980:	2303      	movs	r3, #3
 8007982:	e015      	b.n	80079b0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007984:	78fb      	ldrb	r3, [r7, #3]
 8007986:	4619      	mov	r1, r3
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f001 ff5a 	bl	8009842 <USBD_LL_GetRxDataSize>
 800798e:	4602      	mov	r2, r0
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800799c:	68db      	ldr	r3, [r3, #12]
 800799e:	68fa      	ldr	r2, [r7, #12]
 80079a0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80079a4:	68fa      	ldr	r2, [r7, #12]
 80079a6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80079aa:	4611      	mov	r1, r2
 80079ac:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80079ae:	2300      	movs	r3, #0
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3710      	adds	r7, #16
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079c6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d101      	bne.n	80079d2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80079ce:	2303      	movs	r3, #3
 80079d0:	e01b      	b.n	8007a0a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d015      	beq.n	8007a08 <USBD_CDC_EP0_RxReady+0x50>
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80079e2:	2bff      	cmp	r3, #255	; 0xff
 80079e4:	d010      	beq.n	8007a08 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	68fa      	ldr	r2, [r7, #12]
 80079f0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80079f4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80079f6:	68fa      	ldr	r2, [r7, #12]
 80079f8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80079fc:	b292      	uxth	r2, r2
 80079fe:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	22ff      	movs	r2, #255	; 0xff
 8007a04:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007a08:	2300      	movs	r3, #0
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
	...

08007a14 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b083      	sub	sp, #12
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2243      	movs	r2, #67	; 0x43
 8007a20:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007a22:	4b03      	ldr	r3, [pc, #12]	; (8007a30 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	370c      	adds	r7, #12
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr
 8007a30:	20000094 	.word	0x20000094

08007a34 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b083      	sub	sp, #12
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2243      	movs	r2, #67	; 0x43
 8007a40:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007a42:	4b03      	ldr	r3, [pc, #12]	; (8007a50 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	370c      	adds	r7, #12
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr
 8007a50:	20000050 	.word	0x20000050

08007a54 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2243      	movs	r2, #67	; 0x43
 8007a60:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007a62:	4b03      	ldr	r3, [pc, #12]	; (8007a70 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	370c      	adds	r7, #12
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr
 8007a70:	200000d8 	.word	0x200000d8

08007a74 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	220a      	movs	r2, #10
 8007a80:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007a82:	4b03      	ldr	r3, [pc, #12]	; (8007a90 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	370c      	adds	r7, #12
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr
 8007a90:	2000000c 	.word	0x2000000c

08007a94 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b083      	sub	sp, #12
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d101      	bne.n	8007aa8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007aa4:	2303      	movs	r3, #3
 8007aa6:	e004      	b.n	8007ab2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	683a      	ldr	r2, [r7, #0]
 8007aac:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007ab0:	2300      	movs	r3, #0
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	370c      	adds	r7, #12
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr

08007abe <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007abe:	b480      	push	{r7}
 8007ac0:	b087      	sub	sp, #28
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	60f8      	str	r0, [r7, #12]
 8007ac6:	60b9      	str	r1, [r7, #8]
 8007ac8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ad0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d101      	bne.n	8007adc <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007ad8:	2303      	movs	r3, #3
 8007ada:	e008      	b.n	8007aee <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	68ba      	ldr	r2, [r7, #8]
 8007ae0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007aec:	2300      	movs	r3, #0
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	371c      	adds	r7, #28
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr

08007afa <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007afa:	b480      	push	{r7}
 8007afc:	b085      	sub	sp, #20
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
 8007b02:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b0a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d101      	bne.n	8007b16 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8007b12:	2303      	movs	r3, #3
 8007b14:	e004      	b.n	8007b20 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	683a      	ldr	r2, [r7, #0]
 8007b1a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007b1e:	2300      	movs	r3, #0
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3714      	adds	r7, #20
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr

08007b2c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b3a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d101      	bne.n	8007b4e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007b4a:	2303      	movs	r3, #3
 8007b4c:	e01a      	b.n	8007b84 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d114      	bne.n	8007b82 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007b76:	2181      	movs	r1, #129	; 0x81
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f001 fe20 	bl	80097be <USBD_LL_Transmit>

    ret = USBD_OK;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3710      	adds	r7, #16
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b9a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d101      	bne.n	8007baa <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007ba6:	2303      	movs	r3, #3
 8007ba8:	e016      	b.n	8007bd8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	7c1b      	ldrb	r3, [r3, #16]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d109      	bne.n	8007bc6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007bb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bbc:	2101      	movs	r1, #1
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f001 fe1e 	bl	8009800 <USBD_LL_PrepareReceive>
 8007bc4:	e007      	b.n	8007bd6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007bcc:	2340      	movs	r3, #64	; 0x40
 8007bce:	2101      	movs	r1, #1
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f001 fe15 	bl	8009800 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007bd6:	2300      	movs	r3, #0
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3710      	adds	r7, #16
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b086      	sub	sp, #24
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	60b9      	str	r1, [r7, #8]
 8007bea:	4613      	mov	r3, r2
 8007bec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d101      	bne.n	8007bf8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007bf4:	2303      	movs	r3, #3
 8007bf6:	e01f      	b.n	8007c38 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2200      	movs	r2, #0
 8007c04:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d003      	beq.n	8007c1e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	68ba      	ldr	r2, [r7, #8]
 8007c1a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2201      	movs	r2, #1
 8007c22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	79fa      	ldrb	r2, [r7, #7]
 8007c2a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007c2c:	68f8      	ldr	r0, [r7, #12]
 8007c2e:	f001 fc91 	bl	8009554 <USBD_LL_Init>
 8007c32:	4603      	mov	r3, r0
 8007c34:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3718      	adds	r7, #24
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b084      	sub	sp, #16
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d101      	bne.n	8007c58 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007c54:	2303      	movs	r3, #3
 8007c56:	e016      	b.n	8007c86 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	683a      	ldr	r2, [r7, #0]
 8007c5c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d00b      	beq.n	8007c84 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c74:	f107 020e 	add.w	r2, r7, #14
 8007c78:	4610      	mov	r0, r2
 8007c7a:	4798      	blx	r3
 8007c7c:	4602      	mov	r2, r0
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3710      	adds	r7, #16
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007c8e:	b580      	push	{r7, lr}
 8007c90:	b082      	sub	sp, #8
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f001 fca8 	bl	80095ec <USBD_LL_Start>
 8007c9c:	4603      	mov	r3, r0
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3708      	adds	r7, #8
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}

08007ca6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007ca6:	b480      	push	{r7}
 8007ca8:	b083      	sub	sp, #12
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007cae:	2300      	movs	r3, #0
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	370c      	adds	r7, #12
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007cc8:	2303      	movs	r3, #3
 8007cca:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d009      	beq.n	8007cea <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	78fa      	ldrb	r2, [r7, #3]
 8007ce0:	4611      	mov	r1, r2
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	4798      	blx	r3
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3710      	adds	r7, #16
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d007      	beq.n	8007d1a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	78fa      	ldrb	r2, [r7, #3]
 8007d14:	4611      	mov	r1, r2
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	4798      	blx	r3
  }

  return USBD_OK;
 8007d1a:	2300      	movs	r3, #0
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3708      	adds	r7, #8
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b084      	sub	sp, #16
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d34:	6839      	ldr	r1, [r7, #0]
 8007d36:	4618      	mov	r0, r3
 8007d38:	f000 ff90 	bl	8008c5c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007d58:	f003 031f 	and.w	r3, r3, #31
 8007d5c:	2b02      	cmp	r3, #2
 8007d5e:	d01a      	beq.n	8007d96 <USBD_LL_SetupStage+0x72>
 8007d60:	2b02      	cmp	r3, #2
 8007d62:	d822      	bhi.n	8007daa <USBD_LL_SetupStage+0x86>
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d002      	beq.n	8007d6e <USBD_LL_SetupStage+0x4a>
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d00a      	beq.n	8007d82 <USBD_LL_SetupStage+0x5e>
 8007d6c:	e01d      	b.n	8007daa <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d74:	4619      	mov	r1, r3
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 fa62 	bl	8008240 <USBD_StdDevReq>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	73fb      	strb	r3, [r7, #15]
      break;
 8007d80:	e020      	b.n	8007dc4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d88:	4619      	mov	r1, r3
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 fac6 	bl	800831c <USBD_StdItfReq>
 8007d90:	4603      	mov	r3, r0
 8007d92:	73fb      	strb	r3, [r7, #15]
      break;
 8007d94:	e016      	b.n	8007dc4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 fb05 	bl	80083ae <USBD_StdEPReq>
 8007da4:	4603      	mov	r3, r0
 8007da6:	73fb      	strb	r3, [r7, #15]
      break;
 8007da8:	e00c      	b.n	8007dc4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007db0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	4619      	mov	r1, r3
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f001 fc77 	bl	80096ac <USBD_LL_StallEP>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	73fb      	strb	r3, [r7, #15]
      break;
 8007dc2:	bf00      	nop
  }

  return ret;
 8007dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3710      	adds	r7, #16
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}

08007dce <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007dce:	b580      	push	{r7, lr}
 8007dd0:	b086      	sub	sp, #24
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	60f8      	str	r0, [r7, #12]
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	607a      	str	r2, [r7, #4]
 8007dda:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007ddc:	7afb      	ldrb	r3, [r7, #11]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d138      	bne.n	8007e54 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007de8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007df0:	2b03      	cmp	r3, #3
 8007df2:	d14a      	bne.n	8007e8a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	689a      	ldr	r2, [r3, #8]
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d913      	bls.n	8007e28 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	689a      	ldr	r2, [r3, #8]
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	68db      	ldr	r3, [r3, #12]
 8007e08:	1ad2      	subs	r2, r2, r3
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	68da      	ldr	r2, [r3, #12]
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	4293      	cmp	r3, r2
 8007e18:	bf28      	it	cs
 8007e1a:	4613      	movcs	r3, r2
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	6879      	ldr	r1, [r7, #4]
 8007e20:	68f8      	ldr	r0, [r7, #12]
 8007e22:	f001 f80f 	bl	8008e44 <USBD_CtlContinueRx>
 8007e26:	e030      	b.n	8007e8a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	2b03      	cmp	r3, #3
 8007e32:	d10b      	bne.n	8007e4c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e3a:	691b      	ldr	r3, [r3, #16]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d005      	beq.n	8007e4c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e46:	691b      	ldr	r3, [r3, #16]
 8007e48:	68f8      	ldr	r0, [r7, #12]
 8007e4a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007e4c:	68f8      	ldr	r0, [r7, #12]
 8007e4e:	f001 f80a 	bl	8008e66 <USBD_CtlSendStatus>
 8007e52:	e01a      	b.n	8007e8a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	2b03      	cmp	r3, #3
 8007e5e:	d114      	bne.n	8007e8a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e66:	699b      	ldr	r3, [r3, #24]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d00e      	beq.n	8007e8a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e72:	699b      	ldr	r3, [r3, #24]
 8007e74:	7afa      	ldrb	r2, [r7, #11]
 8007e76:	4611      	mov	r1, r2
 8007e78:	68f8      	ldr	r0, [r7, #12]
 8007e7a:	4798      	blx	r3
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007e80:	7dfb      	ldrb	r3, [r7, #23]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d001      	beq.n	8007e8a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007e86:	7dfb      	ldrb	r3, [r7, #23]
 8007e88:	e000      	b.n	8007e8c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3718      	adds	r7, #24
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b086      	sub	sp, #24
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	607a      	str	r2, [r7, #4]
 8007ea0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007ea2:	7afb      	ldrb	r3, [r7, #11]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d16b      	bne.n	8007f80 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	3314      	adds	r3, #20
 8007eac:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007eb4:	2b02      	cmp	r3, #2
 8007eb6:	d156      	bne.n	8007f66 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	689a      	ldr	r2, [r3, #8]
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	68db      	ldr	r3, [r3, #12]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d914      	bls.n	8007eee <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	689a      	ldr	r2, [r3, #8]
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	68db      	ldr	r3, [r3, #12]
 8007ecc:	1ad2      	subs	r2, r2, r3
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	6879      	ldr	r1, [r7, #4]
 8007eda:	68f8      	ldr	r0, [r7, #12]
 8007edc:	f000 ff84 	bl	8008de8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	2100      	movs	r1, #0
 8007ee6:	68f8      	ldr	r0, [r7, #12]
 8007ee8:	f001 fc8a 	bl	8009800 <USBD_LL_PrepareReceive>
 8007eec:	e03b      	b.n	8007f66 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	68da      	ldr	r2, [r3, #12]
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d11c      	bne.n	8007f34 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	685a      	ldr	r2, [r3, #4]
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d316      	bcc.n	8007f34 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	685a      	ldr	r2, [r3, #4]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d20f      	bcs.n	8007f34 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007f14:	2200      	movs	r2, #0
 8007f16:	2100      	movs	r1, #0
 8007f18:	68f8      	ldr	r0, [r7, #12]
 8007f1a:	f000 ff65 	bl	8008de8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2200      	movs	r2, #0
 8007f22:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f26:	2300      	movs	r3, #0
 8007f28:	2200      	movs	r2, #0
 8007f2a:	2100      	movs	r1, #0
 8007f2c:	68f8      	ldr	r0, [r7, #12]
 8007f2e:	f001 fc67 	bl	8009800 <USBD_LL_PrepareReceive>
 8007f32:	e018      	b.n	8007f66 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	2b03      	cmp	r3, #3
 8007f3e:	d10b      	bne.n	8007f58 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d005      	beq.n	8007f58 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	68f8      	ldr	r0, [r7, #12]
 8007f56:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f58:	2180      	movs	r1, #128	; 0x80
 8007f5a:	68f8      	ldr	r0, [r7, #12]
 8007f5c:	f001 fba6 	bl	80096ac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007f60:	68f8      	ldr	r0, [r7, #12]
 8007f62:	f000 ff93 	bl	8008e8c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d122      	bne.n	8007fb6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007f70:	68f8      	ldr	r0, [r7, #12]
 8007f72:	f7ff fe98 	bl	8007ca6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007f7e:	e01a      	b.n	8007fb6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	2b03      	cmp	r3, #3
 8007f8a:	d114      	bne.n	8007fb6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f92:	695b      	ldr	r3, [r3, #20]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d00e      	beq.n	8007fb6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f9e:	695b      	ldr	r3, [r3, #20]
 8007fa0:	7afa      	ldrb	r2, [r7, #11]
 8007fa2:	4611      	mov	r1, r2
 8007fa4:	68f8      	ldr	r0, [r7, #12]
 8007fa6:	4798      	blx	r3
 8007fa8:	4603      	mov	r3, r0
 8007faa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007fac:	7dfb      	ldrb	r3, [r7, #23]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d001      	beq.n	8007fb6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007fb2:	7dfb      	ldrb	r3, [r7, #23]
 8007fb4:	e000      	b.n	8007fb8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007fb6:	2300      	movs	r3, #0
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3718      	adds	r7, #24
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d101      	bne.n	8007ff4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007ff0:	2303      	movs	r3, #3
 8007ff2:	e02f      	b.n	8008054 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00f      	beq.n	800801e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d009      	beq.n	800801e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	6852      	ldr	r2, [r2, #4]
 8008016:	b2d2      	uxtb	r2, r2
 8008018:	4611      	mov	r1, r2
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800801e:	2340      	movs	r3, #64	; 0x40
 8008020:	2200      	movs	r2, #0
 8008022:	2100      	movs	r1, #0
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f001 fafc 	bl	8009622 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2201      	movs	r2, #1
 800802e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2240      	movs	r2, #64	; 0x40
 8008036:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800803a:	2340      	movs	r3, #64	; 0x40
 800803c:	2200      	movs	r2, #0
 800803e:	2180      	movs	r1, #128	; 0x80
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f001 faee 	bl	8009622 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2201      	movs	r2, #1
 800804a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2240      	movs	r2, #64	; 0x40
 8008050:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008052:	2300      	movs	r3, #0
}
 8008054:	4618      	mov	r0, r3
 8008056:	3708      	adds	r7, #8
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	460b      	mov	r3, r1
 8008066:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	78fa      	ldrb	r2, [r7, #3]
 800806c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800806e:	2300      	movs	r3, #0
}
 8008070:	4618      	mov	r0, r3
 8008072:	370c      	adds	r7, #12
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800808a:	b2da      	uxtb	r2, r3
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2204      	movs	r2, #4
 8008096:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800809a:	2300      	movs	r3, #0
}
 800809c:	4618      	mov	r0, r3
 800809e:	370c      	adds	r7, #12
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	2b04      	cmp	r3, #4
 80080ba:	d106      	bne.n	80080ca <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80080c2:	b2da      	uxtb	r2, r3
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80080ca:	2300      	movs	r3, #0
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	370c      	adds	r7, #12
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr

080080d8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d101      	bne.n	80080ee <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80080ea:	2303      	movs	r3, #3
 80080ec:	e012      	b.n	8008114 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080f4:	b2db      	uxtb	r3, r3
 80080f6:	2b03      	cmp	r3, #3
 80080f8:	d10b      	bne.n	8008112 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008100:	69db      	ldr	r3, [r3, #28]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d005      	beq.n	8008112 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800810c:	69db      	ldr	r3, [r3, #28]
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008112:	2300      	movs	r3, #0
}
 8008114:	4618      	mov	r0, r3
 8008116:	3708      	adds	r7, #8
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	460b      	mov	r3, r1
 8008126:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800812e:	2b00      	cmp	r3, #0
 8008130:	d101      	bne.n	8008136 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008132:	2303      	movs	r3, #3
 8008134:	e014      	b.n	8008160 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800813c:	b2db      	uxtb	r3, r3
 800813e:	2b03      	cmp	r3, #3
 8008140:	d10d      	bne.n	800815e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008148:	6a1b      	ldr	r3, [r3, #32]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d007      	beq.n	800815e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008154:	6a1b      	ldr	r3, [r3, #32]
 8008156:	78fa      	ldrb	r2, [r7, #3]
 8008158:	4611      	mov	r1, r2
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800815e:	2300      	movs	r3, #0
}
 8008160:	4618      	mov	r0, r3
 8008162:	3708      	adds	r7, #8
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	460b      	mov	r3, r1
 8008172:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800817a:	2b00      	cmp	r3, #0
 800817c:	d101      	bne.n	8008182 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800817e:	2303      	movs	r3, #3
 8008180:	e014      	b.n	80081ac <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008188:	b2db      	uxtb	r3, r3
 800818a:	2b03      	cmp	r3, #3
 800818c:	d10d      	bne.n	80081aa <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008196:	2b00      	cmp	r3, #0
 8008198:	d007      	beq.n	80081aa <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a2:	78fa      	ldrb	r2, [r7, #3]
 80081a4:	4611      	mov	r1, r2
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80081aa:	2300      	movs	r3, #0
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3708      	adds	r7, #8
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80081bc:	2300      	movs	r3, #0
}
 80081be:	4618      	mov	r0, r3
 80081c0:	370c      	adds	r7, #12
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr

080081ca <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80081ca:	b580      	push	{r7, lr}
 80081cc:	b082      	sub	sp, #8
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2201      	movs	r2, #1
 80081d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d009      	beq.n	80081f8 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	6852      	ldr	r2, [r2, #4]
 80081f0:	b2d2      	uxtb	r2, r2
 80081f2:	4611      	mov	r1, r2
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	4798      	blx	r3
  }

  return USBD_OK;
 80081f8:	2300      	movs	r3, #0
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3708      	adds	r7, #8
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}

08008202 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008202:	b480      	push	{r7}
 8008204:	b087      	sub	sp, #28
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	3301      	adds	r3, #1
 8008218:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008220:	8a3b      	ldrh	r3, [r7, #16]
 8008222:	021b      	lsls	r3, r3, #8
 8008224:	b21a      	sxth	r2, r3
 8008226:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800822a:	4313      	orrs	r3, r2
 800822c:	b21b      	sxth	r3, r3
 800822e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008230:	89fb      	ldrh	r3, [r7, #14]
}
 8008232:	4618      	mov	r0, r3
 8008234:	371c      	adds	r7, #28
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr
	...

08008240 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800824a:	2300      	movs	r3, #0
 800824c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008256:	2b40      	cmp	r3, #64	; 0x40
 8008258:	d005      	beq.n	8008266 <USBD_StdDevReq+0x26>
 800825a:	2b40      	cmp	r3, #64	; 0x40
 800825c:	d853      	bhi.n	8008306 <USBD_StdDevReq+0xc6>
 800825e:	2b00      	cmp	r3, #0
 8008260:	d00b      	beq.n	800827a <USBD_StdDevReq+0x3a>
 8008262:	2b20      	cmp	r3, #32
 8008264:	d14f      	bne.n	8008306 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	6839      	ldr	r1, [r7, #0]
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	4798      	blx	r3
 8008274:	4603      	mov	r3, r0
 8008276:	73fb      	strb	r3, [r7, #15]
      break;
 8008278:	e04a      	b.n	8008310 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	785b      	ldrb	r3, [r3, #1]
 800827e:	2b09      	cmp	r3, #9
 8008280:	d83b      	bhi.n	80082fa <USBD_StdDevReq+0xba>
 8008282:	a201      	add	r2, pc, #4	; (adr r2, 8008288 <USBD_StdDevReq+0x48>)
 8008284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008288:	080082dd 	.word	0x080082dd
 800828c:	080082f1 	.word	0x080082f1
 8008290:	080082fb 	.word	0x080082fb
 8008294:	080082e7 	.word	0x080082e7
 8008298:	080082fb 	.word	0x080082fb
 800829c:	080082bb 	.word	0x080082bb
 80082a0:	080082b1 	.word	0x080082b1
 80082a4:	080082fb 	.word	0x080082fb
 80082a8:	080082d3 	.word	0x080082d3
 80082ac:	080082c5 	.word	0x080082c5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80082b0:	6839      	ldr	r1, [r7, #0]
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 f9de 	bl	8008674 <USBD_GetDescriptor>
          break;
 80082b8:	e024      	b.n	8008304 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80082ba:	6839      	ldr	r1, [r7, #0]
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 fb43 	bl	8008948 <USBD_SetAddress>
          break;
 80082c2:	e01f      	b.n	8008304 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80082c4:	6839      	ldr	r1, [r7, #0]
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 fb82 	bl	80089d0 <USBD_SetConfig>
 80082cc:	4603      	mov	r3, r0
 80082ce:	73fb      	strb	r3, [r7, #15]
          break;
 80082d0:	e018      	b.n	8008304 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80082d2:	6839      	ldr	r1, [r7, #0]
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f000 fc21 	bl	8008b1c <USBD_GetConfig>
          break;
 80082da:	e013      	b.n	8008304 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80082dc:	6839      	ldr	r1, [r7, #0]
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 fc52 	bl	8008b88 <USBD_GetStatus>
          break;
 80082e4:	e00e      	b.n	8008304 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80082e6:	6839      	ldr	r1, [r7, #0]
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 fc81 	bl	8008bf0 <USBD_SetFeature>
          break;
 80082ee:	e009      	b.n	8008304 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80082f0:	6839      	ldr	r1, [r7, #0]
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 fc90 	bl	8008c18 <USBD_ClrFeature>
          break;
 80082f8:	e004      	b.n	8008304 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80082fa:	6839      	ldr	r1, [r7, #0]
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 fce7 	bl	8008cd0 <USBD_CtlError>
          break;
 8008302:	bf00      	nop
      }
      break;
 8008304:	e004      	b.n	8008310 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008306:	6839      	ldr	r1, [r7, #0]
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 fce1 	bl	8008cd0 <USBD_CtlError>
      break;
 800830e:	bf00      	nop
  }

  return ret;
 8008310:	7bfb      	ldrb	r3, [r7, #15]
}
 8008312:	4618      	mov	r0, r3
 8008314:	3710      	adds	r7, #16
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
 800831a:	bf00      	nop

0800831c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008326:	2300      	movs	r3, #0
 8008328:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008332:	2b40      	cmp	r3, #64	; 0x40
 8008334:	d005      	beq.n	8008342 <USBD_StdItfReq+0x26>
 8008336:	2b40      	cmp	r3, #64	; 0x40
 8008338:	d82f      	bhi.n	800839a <USBD_StdItfReq+0x7e>
 800833a:	2b00      	cmp	r3, #0
 800833c:	d001      	beq.n	8008342 <USBD_StdItfReq+0x26>
 800833e:	2b20      	cmp	r3, #32
 8008340:	d12b      	bne.n	800839a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008348:	b2db      	uxtb	r3, r3
 800834a:	3b01      	subs	r3, #1
 800834c:	2b02      	cmp	r3, #2
 800834e:	d81d      	bhi.n	800838c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	889b      	ldrh	r3, [r3, #4]
 8008354:	b2db      	uxtb	r3, r3
 8008356:	2b01      	cmp	r3, #1
 8008358:	d813      	bhi.n	8008382 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008360:	689b      	ldr	r3, [r3, #8]
 8008362:	6839      	ldr	r1, [r7, #0]
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	4798      	blx	r3
 8008368:	4603      	mov	r3, r0
 800836a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	88db      	ldrh	r3, [r3, #6]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d110      	bne.n	8008396 <USBD_StdItfReq+0x7a>
 8008374:	7bfb      	ldrb	r3, [r7, #15]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d10d      	bne.n	8008396 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f000 fd73 	bl	8008e66 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008380:	e009      	b.n	8008396 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008382:	6839      	ldr	r1, [r7, #0]
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 fca3 	bl	8008cd0 <USBD_CtlError>
          break;
 800838a:	e004      	b.n	8008396 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800838c:	6839      	ldr	r1, [r7, #0]
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 fc9e 	bl	8008cd0 <USBD_CtlError>
          break;
 8008394:	e000      	b.n	8008398 <USBD_StdItfReq+0x7c>
          break;
 8008396:	bf00      	nop
      }
      break;
 8008398:	e004      	b.n	80083a4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800839a:	6839      	ldr	r1, [r7, #0]
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 fc97 	bl	8008cd0 <USBD_CtlError>
      break;
 80083a2:	bf00      	nop
  }

  return ret;
 80083a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3710      	adds	r7, #16
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}

080083ae <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083ae:	b580      	push	{r7, lr}
 80083b0:	b084      	sub	sp, #16
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
 80083b6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80083b8:	2300      	movs	r3, #0
 80083ba:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	889b      	ldrh	r3, [r3, #4]
 80083c0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80083ca:	2b40      	cmp	r3, #64	; 0x40
 80083cc:	d007      	beq.n	80083de <USBD_StdEPReq+0x30>
 80083ce:	2b40      	cmp	r3, #64	; 0x40
 80083d0:	f200 8145 	bhi.w	800865e <USBD_StdEPReq+0x2b0>
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d00c      	beq.n	80083f2 <USBD_StdEPReq+0x44>
 80083d8:	2b20      	cmp	r3, #32
 80083da:	f040 8140 	bne.w	800865e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083e4:	689b      	ldr	r3, [r3, #8]
 80083e6:	6839      	ldr	r1, [r7, #0]
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	4798      	blx	r3
 80083ec:	4603      	mov	r3, r0
 80083ee:	73fb      	strb	r3, [r7, #15]
      break;
 80083f0:	e13a      	b.n	8008668 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	785b      	ldrb	r3, [r3, #1]
 80083f6:	2b03      	cmp	r3, #3
 80083f8:	d007      	beq.n	800840a <USBD_StdEPReq+0x5c>
 80083fa:	2b03      	cmp	r3, #3
 80083fc:	f300 8129 	bgt.w	8008652 <USBD_StdEPReq+0x2a4>
 8008400:	2b00      	cmp	r3, #0
 8008402:	d07f      	beq.n	8008504 <USBD_StdEPReq+0x156>
 8008404:	2b01      	cmp	r3, #1
 8008406:	d03c      	beq.n	8008482 <USBD_StdEPReq+0xd4>
 8008408:	e123      	b.n	8008652 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008410:	b2db      	uxtb	r3, r3
 8008412:	2b02      	cmp	r3, #2
 8008414:	d002      	beq.n	800841c <USBD_StdEPReq+0x6e>
 8008416:	2b03      	cmp	r3, #3
 8008418:	d016      	beq.n	8008448 <USBD_StdEPReq+0x9a>
 800841a:	e02c      	b.n	8008476 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800841c:	7bbb      	ldrb	r3, [r7, #14]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d00d      	beq.n	800843e <USBD_StdEPReq+0x90>
 8008422:	7bbb      	ldrb	r3, [r7, #14]
 8008424:	2b80      	cmp	r3, #128	; 0x80
 8008426:	d00a      	beq.n	800843e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008428:	7bbb      	ldrb	r3, [r7, #14]
 800842a:	4619      	mov	r1, r3
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f001 f93d 	bl	80096ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008432:	2180      	movs	r1, #128	; 0x80
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f001 f939 	bl	80096ac <USBD_LL_StallEP>
 800843a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800843c:	e020      	b.n	8008480 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800843e:	6839      	ldr	r1, [r7, #0]
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 fc45 	bl	8008cd0 <USBD_CtlError>
              break;
 8008446:	e01b      	b.n	8008480 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	885b      	ldrh	r3, [r3, #2]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d10e      	bne.n	800846e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008450:	7bbb      	ldrb	r3, [r7, #14]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d00b      	beq.n	800846e <USBD_StdEPReq+0xc0>
 8008456:	7bbb      	ldrb	r3, [r7, #14]
 8008458:	2b80      	cmp	r3, #128	; 0x80
 800845a:	d008      	beq.n	800846e <USBD_StdEPReq+0xc0>
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	88db      	ldrh	r3, [r3, #6]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d104      	bne.n	800846e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008464:	7bbb      	ldrb	r3, [r7, #14]
 8008466:	4619      	mov	r1, r3
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f001 f91f 	bl	80096ac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 fcf9 	bl	8008e66 <USBD_CtlSendStatus>

              break;
 8008474:	e004      	b.n	8008480 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008476:	6839      	ldr	r1, [r7, #0]
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 fc29 	bl	8008cd0 <USBD_CtlError>
              break;
 800847e:	bf00      	nop
          }
          break;
 8008480:	e0ec      	b.n	800865c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008488:	b2db      	uxtb	r3, r3
 800848a:	2b02      	cmp	r3, #2
 800848c:	d002      	beq.n	8008494 <USBD_StdEPReq+0xe6>
 800848e:	2b03      	cmp	r3, #3
 8008490:	d016      	beq.n	80084c0 <USBD_StdEPReq+0x112>
 8008492:	e030      	b.n	80084f6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008494:	7bbb      	ldrb	r3, [r7, #14]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d00d      	beq.n	80084b6 <USBD_StdEPReq+0x108>
 800849a:	7bbb      	ldrb	r3, [r7, #14]
 800849c:	2b80      	cmp	r3, #128	; 0x80
 800849e:	d00a      	beq.n	80084b6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80084a0:	7bbb      	ldrb	r3, [r7, #14]
 80084a2:	4619      	mov	r1, r3
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f001 f901 	bl	80096ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80084aa:	2180      	movs	r1, #128	; 0x80
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f001 f8fd 	bl	80096ac <USBD_LL_StallEP>
 80084b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80084b4:	e025      	b.n	8008502 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80084b6:	6839      	ldr	r1, [r7, #0]
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 fc09 	bl	8008cd0 <USBD_CtlError>
              break;
 80084be:	e020      	b.n	8008502 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	885b      	ldrh	r3, [r3, #2]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d11b      	bne.n	8008500 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80084c8:	7bbb      	ldrb	r3, [r7, #14]
 80084ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d004      	beq.n	80084dc <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80084d2:	7bbb      	ldrb	r3, [r7, #14]
 80084d4:	4619      	mov	r1, r3
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f001 f907 	bl	80096ea <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 fcc2 	bl	8008e66 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084e8:	689b      	ldr	r3, [r3, #8]
 80084ea:	6839      	ldr	r1, [r7, #0]
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	4798      	blx	r3
 80084f0:	4603      	mov	r3, r0
 80084f2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80084f4:	e004      	b.n	8008500 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80084f6:	6839      	ldr	r1, [r7, #0]
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 fbe9 	bl	8008cd0 <USBD_CtlError>
              break;
 80084fe:	e000      	b.n	8008502 <USBD_StdEPReq+0x154>
              break;
 8008500:	bf00      	nop
          }
          break;
 8008502:	e0ab      	b.n	800865c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800850a:	b2db      	uxtb	r3, r3
 800850c:	2b02      	cmp	r3, #2
 800850e:	d002      	beq.n	8008516 <USBD_StdEPReq+0x168>
 8008510:	2b03      	cmp	r3, #3
 8008512:	d032      	beq.n	800857a <USBD_StdEPReq+0x1cc>
 8008514:	e097      	b.n	8008646 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008516:	7bbb      	ldrb	r3, [r7, #14]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d007      	beq.n	800852c <USBD_StdEPReq+0x17e>
 800851c:	7bbb      	ldrb	r3, [r7, #14]
 800851e:	2b80      	cmp	r3, #128	; 0x80
 8008520:	d004      	beq.n	800852c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008522:	6839      	ldr	r1, [r7, #0]
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 fbd3 	bl	8008cd0 <USBD_CtlError>
                break;
 800852a:	e091      	b.n	8008650 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800852c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008530:	2b00      	cmp	r3, #0
 8008532:	da0b      	bge.n	800854c <USBD_StdEPReq+0x19e>
 8008534:	7bbb      	ldrb	r3, [r7, #14]
 8008536:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800853a:	4613      	mov	r3, r2
 800853c:	009b      	lsls	r3, r3, #2
 800853e:	4413      	add	r3, r2
 8008540:	009b      	lsls	r3, r3, #2
 8008542:	3310      	adds	r3, #16
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	4413      	add	r3, r2
 8008548:	3304      	adds	r3, #4
 800854a:	e00b      	b.n	8008564 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800854c:	7bbb      	ldrb	r3, [r7, #14]
 800854e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008552:	4613      	mov	r3, r2
 8008554:	009b      	lsls	r3, r3, #2
 8008556:	4413      	add	r3, r2
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	4413      	add	r3, r2
 8008562:	3304      	adds	r3, #4
 8008564:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	2200      	movs	r2, #0
 800856a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	2202      	movs	r2, #2
 8008570:	4619      	mov	r1, r3
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 fc1d 	bl	8008db2 <USBD_CtlSendData>
              break;
 8008578:	e06a      	b.n	8008650 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800857a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800857e:	2b00      	cmp	r3, #0
 8008580:	da11      	bge.n	80085a6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008582:	7bbb      	ldrb	r3, [r7, #14]
 8008584:	f003 020f 	and.w	r2, r3, #15
 8008588:	6879      	ldr	r1, [r7, #4]
 800858a:	4613      	mov	r3, r2
 800858c:	009b      	lsls	r3, r3, #2
 800858e:	4413      	add	r3, r2
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	440b      	add	r3, r1
 8008594:	3324      	adds	r3, #36	; 0x24
 8008596:	881b      	ldrh	r3, [r3, #0]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d117      	bne.n	80085cc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800859c:	6839      	ldr	r1, [r7, #0]
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 fb96 	bl	8008cd0 <USBD_CtlError>
                  break;
 80085a4:	e054      	b.n	8008650 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80085a6:	7bbb      	ldrb	r3, [r7, #14]
 80085a8:	f003 020f 	and.w	r2, r3, #15
 80085ac:	6879      	ldr	r1, [r7, #4]
 80085ae:	4613      	mov	r3, r2
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	4413      	add	r3, r2
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	440b      	add	r3, r1
 80085b8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80085bc:	881b      	ldrh	r3, [r3, #0]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d104      	bne.n	80085cc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80085c2:	6839      	ldr	r1, [r7, #0]
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 fb83 	bl	8008cd0 <USBD_CtlError>
                  break;
 80085ca:	e041      	b.n	8008650 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	da0b      	bge.n	80085ec <USBD_StdEPReq+0x23e>
 80085d4:	7bbb      	ldrb	r3, [r7, #14]
 80085d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085da:	4613      	mov	r3, r2
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	4413      	add	r3, r2
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	3310      	adds	r3, #16
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	4413      	add	r3, r2
 80085e8:	3304      	adds	r3, #4
 80085ea:	e00b      	b.n	8008604 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80085ec:	7bbb      	ldrb	r3, [r7, #14]
 80085ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085f2:	4613      	mov	r3, r2
 80085f4:	009b      	lsls	r3, r3, #2
 80085f6:	4413      	add	r3, r2
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80085fe:	687a      	ldr	r2, [r7, #4]
 8008600:	4413      	add	r3, r2
 8008602:	3304      	adds	r3, #4
 8008604:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008606:	7bbb      	ldrb	r3, [r7, #14]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d002      	beq.n	8008612 <USBD_StdEPReq+0x264>
 800860c:	7bbb      	ldrb	r3, [r7, #14]
 800860e:	2b80      	cmp	r3, #128	; 0x80
 8008610:	d103      	bne.n	800861a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	2200      	movs	r2, #0
 8008616:	601a      	str	r2, [r3, #0]
 8008618:	e00e      	b.n	8008638 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800861a:	7bbb      	ldrb	r3, [r7, #14]
 800861c:	4619      	mov	r1, r3
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f001 f882 	bl	8009728 <USBD_LL_IsStallEP>
 8008624:	4603      	mov	r3, r0
 8008626:	2b00      	cmp	r3, #0
 8008628:	d003      	beq.n	8008632 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	2201      	movs	r2, #1
 800862e:	601a      	str	r2, [r3, #0]
 8008630:	e002      	b.n	8008638 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	2200      	movs	r2, #0
 8008636:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	2202      	movs	r2, #2
 800863c:	4619      	mov	r1, r3
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 fbb7 	bl	8008db2 <USBD_CtlSendData>
              break;
 8008644:	e004      	b.n	8008650 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008646:	6839      	ldr	r1, [r7, #0]
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 fb41 	bl	8008cd0 <USBD_CtlError>
              break;
 800864e:	bf00      	nop
          }
          break;
 8008650:	e004      	b.n	800865c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008652:	6839      	ldr	r1, [r7, #0]
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 fb3b 	bl	8008cd0 <USBD_CtlError>
          break;
 800865a:	bf00      	nop
      }
      break;
 800865c:	e004      	b.n	8008668 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800865e:	6839      	ldr	r1, [r7, #0]
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 fb35 	bl	8008cd0 <USBD_CtlError>
      break;
 8008666:	bf00      	nop
  }

  return ret;
 8008668:	7bfb      	ldrb	r3, [r7, #15]
}
 800866a:	4618      	mov	r0, r3
 800866c:	3710      	adds	r7, #16
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
	...

08008674 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800867e:	2300      	movs	r3, #0
 8008680:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008682:	2300      	movs	r3, #0
 8008684:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008686:	2300      	movs	r3, #0
 8008688:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	885b      	ldrh	r3, [r3, #2]
 800868e:	0a1b      	lsrs	r3, r3, #8
 8008690:	b29b      	uxth	r3, r3
 8008692:	3b01      	subs	r3, #1
 8008694:	2b06      	cmp	r3, #6
 8008696:	f200 8128 	bhi.w	80088ea <USBD_GetDescriptor+0x276>
 800869a:	a201      	add	r2, pc, #4	; (adr r2, 80086a0 <USBD_GetDescriptor+0x2c>)
 800869c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086a0:	080086bd 	.word	0x080086bd
 80086a4:	080086d5 	.word	0x080086d5
 80086a8:	08008715 	.word	0x08008715
 80086ac:	080088eb 	.word	0x080088eb
 80086b0:	080088eb 	.word	0x080088eb
 80086b4:	0800888b 	.word	0x0800888b
 80086b8:	080088b7 	.word	0x080088b7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	7c12      	ldrb	r2, [r2, #16]
 80086c8:	f107 0108 	add.w	r1, r7, #8
 80086cc:	4610      	mov	r0, r2
 80086ce:	4798      	blx	r3
 80086d0:	60f8      	str	r0, [r7, #12]
      break;
 80086d2:	e112      	b.n	80088fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	7c1b      	ldrb	r3, [r3, #16]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d10d      	bne.n	80086f8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086e4:	f107 0208 	add.w	r2, r7, #8
 80086e8:	4610      	mov	r0, r2
 80086ea:	4798      	blx	r3
 80086ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	3301      	adds	r3, #1
 80086f2:	2202      	movs	r2, #2
 80086f4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80086f6:	e100      	b.n	80088fa <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008700:	f107 0208 	add.w	r2, r7, #8
 8008704:	4610      	mov	r0, r2
 8008706:	4798      	blx	r3
 8008708:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	3301      	adds	r3, #1
 800870e:	2202      	movs	r2, #2
 8008710:	701a      	strb	r2, [r3, #0]
      break;
 8008712:	e0f2      	b.n	80088fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	885b      	ldrh	r3, [r3, #2]
 8008718:	b2db      	uxtb	r3, r3
 800871a:	2b05      	cmp	r3, #5
 800871c:	f200 80ac 	bhi.w	8008878 <USBD_GetDescriptor+0x204>
 8008720:	a201      	add	r2, pc, #4	; (adr r2, 8008728 <USBD_GetDescriptor+0xb4>)
 8008722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008726:	bf00      	nop
 8008728:	08008741 	.word	0x08008741
 800872c:	08008775 	.word	0x08008775
 8008730:	080087a9 	.word	0x080087a9
 8008734:	080087dd 	.word	0x080087dd
 8008738:	08008811 	.word	0x08008811
 800873c:	08008845 	.word	0x08008845
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d00b      	beq.n	8008764 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	7c12      	ldrb	r2, [r2, #16]
 8008758:	f107 0108 	add.w	r1, r7, #8
 800875c:	4610      	mov	r0, r2
 800875e:	4798      	blx	r3
 8008760:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008762:	e091      	b.n	8008888 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008764:	6839      	ldr	r1, [r7, #0]
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 fab2 	bl	8008cd0 <USBD_CtlError>
            err++;
 800876c:	7afb      	ldrb	r3, [r7, #11]
 800876e:	3301      	adds	r3, #1
 8008770:	72fb      	strb	r3, [r7, #11]
          break;
 8008772:	e089      	b.n	8008888 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800877a:	689b      	ldr	r3, [r3, #8]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d00b      	beq.n	8008798 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008786:	689b      	ldr	r3, [r3, #8]
 8008788:	687a      	ldr	r2, [r7, #4]
 800878a:	7c12      	ldrb	r2, [r2, #16]
 800878c:	f107 0108 	add.w	r1, r7, #8
 8008790:	4610      	mov	r0, r2
 8008792:	4798      	blx	r3
 8008794:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008796:	e077      	b.n	8008888 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008798:	6839      	ldr	r1, [r7, #0]
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 fa98 	bl	8008cd0 <USBD_CtlError>
            err++;
 80087a0:	7afb      	ldrb	r3, [r7, #11]
 80087a2:	3301      	adds	r3, #1
 80087a4:	72fb      	strb	r3, [r7, #11]
          break;
 80087a6:	e06f      	b.n	8008888 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087ae:	68db      	ldr	r3, [r3, #12]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d00b      	beq.n	80087cc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	7c12      	ldrb	r2, [r2, #16]
 80087c0:	f107 0108 	add.w	r1, r7, #8
 80087c4:	4610      	mov	r0, r2
 80087c6:	4798      	blx	r3
 80087c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087ca:	e05d      	b.n	8008888 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087cc:	6839      	ldr	r1, [r7, #0]
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 fa7e 	bl	8008cd0 <USBD_CtlError>
            err++;
 80087d4:	7afb      	ldrb	r3, [r7, #11]
 80087d6:	3301      	adds	r3, #1
 80087d8:	72fb      	strb	r3, [r7, #11]
          break;
 80087da:	e055      	b.n	8008888 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087e2:	691b      	ldr	r3, [r3, #16]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d00b      	beq.n	8008800 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087ee:	691b      	ldr	r3, [r3, #16]
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	7c12      	ldrb	r2, [r2, #16]
 80087f4:	f107 0108 	add.w	r1, r7, #8
 80087f8:	4610      	mov	r0, r2
 80087fa:	4798      	blx	r3
 80087fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087fe:	e043      	b.n	8008888 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008800:	6839      	ldr	r1, [r7, #0]
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 fa64 	bl	8008cd0 <USBD_CtlError>
            err++;
 8008808:	7afb      	ldrb	r3, [r7, #11]
 800880a:	3301      	adds	r3, #1
 800880c:	72fb      	strb	r3, [r7, #11]
          break;
 800880e:	e03b      	b.n	8008888 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008816:	695b      	ldr	r3, [r3, #20]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d00b      	beq.n	8008834 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008822:	695b      	ldr	r3, [r3, #20]
 8008824:	687a      	ldr	r2, [r7, #4]
 8008826:	7c12      	ldrb	r2, [r2, #16]
 8008828:	f107 0108 	add.w	r1, r7, #8
 800882c:	4610      	mov	r0, r2
 800882e:	4798      	blx	r3
 8008830:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008832:	e029      	b.n	8008888 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008834:	6839      	ldr	r1, [r7, #0]
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 fa4a 	bl	8008cd0 <USBD_CtlError>
            err++;
 800883c:	7afb      	ldrb	r3, [r7, #11]
 800883e:	3301      	adds	r3, #1
 8008840:	72fb      	strb	r3, [r7, #11]
          break;
 8008842:	e021      	b.n	8008888 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800884a:	699b      	ldr	r3, [r3, #24]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d00b      	beq.n	8008868 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008856:	699b      	ldr	r3, [r3, #24]
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	7c12      	ldrb	r2, [r2, #16]
 800885c:	f107 0108 	add.w	r1, r7, #8
 8008860:	4610      	mov	r0, r2
 8008862:	4798      	blx	r3
 8008864:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008866:	e00f      	b.n	8008888 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008868:	6839      	ldr	r1, [r7, #0]
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 fa30 	bl	8008cd0 <USBD_CtlError>
            err++;
 8008870:	7afb      	ldrb	r3, [r7, #11]
 8008872:	3301      	adds	r3, #1
 8008874:	72fb      	strb	r3, [r7, #11]
          break;
 8008876:	e007      	b.n	8008888 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008878:	6839      	ldr	r1, [r7, #0]
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 fa28 	bl	8008cd0 <USBD_CtlError>
          err++;
 8008880:	7afb      	ldrb	r3, [r7, #11]
 8008882:	3301      	adds	r3, #1
 8008884:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008886:	bf00      	nop
      }
      break;
 8008888:	e037      	b.n	80088fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	7c1b      	ldrb	r3, [r3, #16]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d109      	bne.n	80088a6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800889a:	f107 0208 	add.w	r2, r7, #8
 800889e:	4610      	mov	r0, r2
 80088a0:	4798      	blx	r3
 80088a2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80088a4:	e029      	b.n	80088fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80088a6:	6839      	ldr	r1, [r7, #0]
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f000 fa11 	bl	8008cd0 <USBD_CtlError>
        err++;
 80088ae:	7afb      	ldrb	r3, [r7, #11]
 80088b0:	3301      	adds	r3, #1
 80088b2:	72fb      	strb	r3, [r7, #11]
      break;
 80088b4:	e021      	b.n	80088fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	7c1b      	ldrb	r3, [r3, #16]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d10d      	bne.n	80088da <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088c6:	f107 0208 	add.w	r2, r7, #8
 80088ca:	4610      	mov	r0, r2
 80088cc:	4798      	blx	r3
 80088ce:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	3301      	adds	r3, #1
 80088d4:	2207      	movs	r2, #7
 80088d6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80088d8:	e00f      	b.n	80088fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80088da:	6839      	ldr	r1, [r7, #0]
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f000 f9f7 	bl	8008cd0 <USBD_CtlError>
        err++;
 80088e2:	7afb      	ldrb	r3, [r7, #11]
 80088e4:	3301      	adds	r3, #1
 80088e6:	72fb      	strb	r3, [r7, #11]
      break;
 80088e8:	e007      	b.n	80088fa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80088ea:	6839      	ldr	r1, [r7, #0]
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f000 f9ef 	bl	8008cd0 <USBD_CtlError>
      err++;
 80088f2:	7afb      	ldrb	r3, [r7, #11]
 80088f4:	3301      	adds	r3, #1
 80088f6:	72fb      	strb	r3, [r7, #11]
      break;
 80088f8:	bf00      	nop
  }

  if (err != 0U)
 80088fa:	7afb      	ldrb	r3, [r7, #11]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d11e      	bne.n	800893e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	88db      	ldrh	r3, [r3, #6]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d016      	beq.n	8008936 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008908:	893b      	ldrh	r3, [r7, #8]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d00e      	beq.n	800892c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	88da      	ldrh	r2, [r3, #6]
 8008912:	893b      	ldrh	r3, [r7, #8]
 8008914:	4293      	cmp	r3, r2
 8008916:	bf28      	it	cs
 8008918:	4613      	movcs	r3, r2
 800891a:	b29b      	uxth	r3, r3
 800891c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800891e:	893b      	ldrh	r3, [r7, #8]
 8008920:	461a      	mov	r2, r3
 8008922:	68f9      	ldr	r1, [r7, #12]
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f000 fa44 	bl	8008db2 <USBD_CtlSendData>
 800892a:	e009      	b.n	8008940 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800892c:	6839      	ldr	r1, [r7, #0]
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 f9ce 	bl	8008cd0 <USBD_CtlError>
 8008934:	e004      	b.n	8008940 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f000 fa95 	bl	8008e66 <USBD_CtlSendStatus>
 800893c:	e000      	b.n	8008940 <USBD_GetDescriptor+0x2cc>
    return;
 800893e:	bf00      	nop
  }
}
 8008940:	3710      	adds	r7, #16
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
 8008946:	bf00      	nop

08008948 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	889b      	ldrh	r3, [r3, #4]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d131      	bne.n	80089be <USBD_SetAddress+0x76>
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	88db      	ldrh	r3, [r3, #6]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d12d      	bne.n	80089be <USBD_SetAddress+0x76>
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	885b      	ldrh	r3, [r3, #2]
 8008966:	2b7f      	cmp	r3, #127	; 0x7f
 8008968:	d829      	bhi.n	80089be <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	885b      	ldrh	r3, [r3, #2]
 800896e:	b2db      	uxtb	r3, r3
 8008970:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008974:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800897c:	b2db      	uxtb	r3, r3
 800897e:	2b03      	cmp	r3, #3
 8008980:	d104      	bne.n	800898c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008982:	6839      	ldr	r1, [r7, #0]
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f000 f9a3 	bl	8008cd0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800898a:	e01d      	b.n	80089c8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	7bfa      	ldrb	r2, [r7, #15]
 8008990:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008994:	7bfb      	ldrb	r3, [r7, #15]
 8008996:	4619      	mov	r1, r3
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 fef1 	bl	8009780 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f000 fa61 	bl	8008e66 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80089a4:	7bfb      	ldrb	r3, [r7, #15]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d004      	beq.n	80089b4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2202      	movs	r2, #2
 80089ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089b2:	e009      	b.n	80089c8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2201      	movs	r2, #1
 80089b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089bc:	e004      	b.n	80089c8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80089be:	6839      	ldr	r1, [r7, #0]
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f000 f985 	bl	8008cd0 <USBD_CtlError>
  }
}
 80089c6:	bf00      	nop
 80089c8:	bf00      	nop
 80089ca:	3710      	adds	r7, #16
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b084      	sub	sp, #16
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80089da:	2300      	movs	r3, #0
 80089dc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	885b      	ldrh	r3, [r3, #2]
 80089e2:	b2da      	uxtb	r2, r3
 80089e4:	4b4c      	ldr	r3, [pc, #304]	; (8008b18 <USBD_SetConfig+0x148>)
 80089e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80089e8:	4b4b      	ldr	r3, [pc, #300]	; (8008b18 <USBD_SetConfig+0x148>)
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d905      	bls.n	80089fc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80089f0:	6839      	ldr	r1, [r7, #0]
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 f96c 	bl	8008cd0 <USBD_CtlError>
    return USBD_FAIL;
 80089f8:	2303      	movs	r3, #3
 80089fa:	e088      	b.n	8008b0e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	2b02      	cmp	r3, #2
 8008a06:	d002      	beq.n	8008a0e <USBD_SetConfig+0x3e>
 8008a08:	2b03      	cmp	r3, #3
 8008a0a:	d025      	beq.n	8008a58 <USBD_SetConfig+0x88>
 8008a0c:	e071      	b.n	8008af2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008a0e:	4b42      	ldr	r3, [pc, #264]	; (8008b18 <USBD_SetConfig+0x148>)
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d01c      	beq.n	8008a50 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008a16:	4b40      	ldr	r3, [pc, #256]	; (8008b18 <USBD_SetConfig+0x148>)
 8008a18:	781b      	ldrb	r3, [r3, #0]
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008a20:	4b3d      	ldr	r3, [pc, #244]	; (8008b18 <USBD_SetConfig+0x148>)
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	4619      	mov	r1, r3
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f7ff f948 	bl	8007cbc <USBD_SetClassConfig>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008a30:	7bfb      	ldrb	r3, [r7, #15]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d004      	beq.n	8008a40 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008a36:	6839      	ldr	r1, [r7, #0]
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f000 f949 	bl	8008cd0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008a3e:	e065      	b.n	8008b0c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f000 fa10 	bl	8008e66 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2203      	movs	r2, #3
 8008a4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008a4e:	e05d      	b.n	8008b0c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f000 fa08 	bl	8008e66 <USBD_CtlSendStatus>
      break;
 8008a56:	e059      	b.n	8008b0c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008a58:	4b2f      	ldr	r3, [pc, #188]	; (8008b18 <USBD_SetConfig+0x148>)
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d112      	bne.n	8008a86 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2202      	movs	r2, #2
 8008a64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008a68:	4b2b      	ldr	r3, [pc, #172]	; (8008b18 <USBD_SetConfig+0x148>)
 8008a6a:	781b      	ldrb	r3, [r3, #0]
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008a72:	4b29      	ldr	r3, [pc, #164]	; (8008b18 <USBD_SetConfig+0x148>)
 8008a74:	781b      	ldrb	r3, [r3, #0]
 8008a76:	4619      	mov	r1, r3
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f7ff f93b 	bl	8007cf4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f000 f9f1 	bl	8008e66 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008a84:	e042      	b.n	8008b0c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008a86:	4b24      	ldr	r3, [pc, #144]	; (8008b18 <USBD_SetConfig+0x148>)
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d02a      	beq.n	8008aea <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	b2db      	uxtb	r3, r3
 8008a9a:	4619      	mov	r1, r3
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f7ff f929 	bl	8007cf4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008aa2:	4b1d      	ldr	r3, [pc, #116]	; (8008b18 <USBD_SetConfig+0x148>)
 8008aa4:	781b      	ldrb	r3, [r3, #0]
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008aac:	4b1a      	ldr	r3, [pc, #104]	; (8008b18 <USBD_SetConfig+0x148>)
 8008aae:	781b      	ldrb	r3, [r3, #0]
 8008ab0:	4619      	mov	r1, r3
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f7ff f902 	bl	8007cbc <USBD_SetClassConfig>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008abc:	7bfb      	ldrb	r3, [r7, #15]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d00f      	beq.n	8008ae2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008ac2:	6839      	ldr	r1, [r7, #0]
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 f903 	bl	8008cd0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f7ff f90e 	bl	8007cf4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2202      	movs	r2, #2
 8008adc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008ae0:	e014      	b.n	8008b0c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 f9bf 	bl	8008e66 <USBD_CtlSendStatus>
      break;
 8008ae8:	e010      	b.n	8008b0c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 f9bb 	bl	8008e66 <USBD_CtlSendStatus>
      break;
 8008af0:	e00c      	b.n	8008b0c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008af2:	6839      	ldr	r1, [r7, #0]
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f000 f8eb 	bl	8008cd0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008afa:	4b07      	ldr	r3, [pc, #28]	; (8008b18 <USBD_SetConfig+0x148>)
 8008afc:	781b      	ldrb	r3, [r3, #0]
 8008afe:	4619      	mov	r1, r3
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f7ff f8f7 	bl	8007cf4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008b06:	2303      	movs	r3, #3
 8008b08:	73fb      	strb	r3, [r7, #15]
      break;
 8008b0a:	bf00      	nop
  }

  return ret;
 8008b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3710      	adds	r7, #16
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	20000370 	.word	0x20000370

08008b1c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b082      	sub	sp, #8
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	88db      	ldrh	r3, [r3, #6]
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	d004      	beq.n	8008b38 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008b2e:	6839      	ldr	r1, [r7, #0]
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 f8cd 	bl	8008cd0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008b36:	e023      	b.n	8008b80 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b3e:	b2db      	uxtb	r3, r3
 8008b40:	2b02      	cmp	r3, #2
 8008b42:	dc02      	bgt.n	8008b4a <USBD_GetConfig+0x2e>
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	dc03      	bgt.n	8008b50 <USBD_GetConfig+0x34>
 8008b48:	e015      	b.n	8008b76 <USBD_GetConfig+0x5a>
 8008b4a:	2b03      	cmp	r3, #3
 8008b4c:	d00b      	beq.n	8008b66 <USBD_GetConfig+0x4a>
 8008b4e:	e012      	b.n	8008b76 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2200      	movs	r2, #0
 8008b54:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	3308      	adds	r3, #8
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	4619      	mov	r1, r3
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f000 f927 	bl	8008db2 <USBD_CtlSendData>
        break;
 8008b64:	e00c      	b.n	8008b80 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	3304      	adds	r3, #4
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 f91f 	bl	8008db2 <USBD_CtlSendData>
        break;
 8008b74:	e004      	b.n	8008b80 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008b76:	6839      	ldr	r1, [r7, #0]
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f000 f8a9 	bl	8008cd0 <USBD_CtlError>
        break;
 8008b7e:	bf00      	nop
}
 8008b80:	bf00      	nop
 8008b82:	3708      	adds	r7, #8
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b082      	sub	sp, #8
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b98:	b2db      	uxtb	r3, r3
 8008b9a:	3b01      	subs	r3, #1
 8008b9c:	2b02      	cmp	r3, #2
 8008b9e:	d81e      	bhi.n	8008bde <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	88db      	ldrh	r3, [r3, #6]
 8008ba4:	2b02      	cmp	r3, #2
 8008ba6:	d004      	beq.n	8008bb2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008ba8:	6839      	ldr	r1, [r7, #0]
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 f890 	bl	8008cd0 <USBD_CtlError>
        break;
 8008bb0:	e01a      	b.n	8008be8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2201      	movs	r2, #1
 8008bb6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d005      	beq.n	8008bce <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	68db      	ldr	r3, [r3, #12]
 8008bc6:	f043 0202 	orr.w	r2, r3, #2
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	330c      	adds	r3, #12
 8008bd2:	2202      	movs	r2, #2
 8008bd4:	4619      	mov	r1, r3
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f000 f8eb 	bl	8008db2 <USBD_CtlSendData>
      break;
 8008bdc:	e004      	b.n	8008be8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008bde:	6839      	ldr	r1, [r7, #0]
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f000 f875 	bl	8008cd0 <USBD_CtlError>
      break;
 8008be6:	bf00      	nop
  }
}
 8008be8:	bf00      	nop
 8008bea:	3708      	adds	r7, #8
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}

08008bf0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b082      	sub	sp, #8
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	885b      	ldrh	r3, [r3, #2]
 8008bfe:	2b01      	cmp	r3, #1
 8008c00:	d106      	bne.n	8008c10 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2201      	movs	r2, #1
 8008c06:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f000 f92b 	bl	8008e66 <USBD_CtlSendStatus>
  }
}
 8008c10:	bf00      	nop
 8008c12:	3708      	adds	r7, #8
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c28:	b2db      	uxtb	r3, r3
 8008c2a:	3b01      	subs	r3, #1
 8008c2c:	2b02      	cmp	r3, #2
 8008c2e:	d80b      	bhi.n	8008c48 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	885b      	ldrh	r3, [r3, #2]
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d10c      	bne.n	8008c52 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 f910 	bl	8008e66 <USBD_CtlSendStatus>
      }
      break;
 8008c46:	e004      	b.n	8008c52 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008c48:	6839      	ldr	r1, [r7, #0]
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 f840 	bl	8008cd0 <USBD_CtlError>
      break;
 8008c50:	e000      	b.n	8008c54 <USBD_ClrFeature+0x3c>
      break;
 8008c52:	bf00      	nop
  }
}
 8008c54:	bf00      	nop
 8008c56:	3708      	adds	r7, #8
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}

08008c5c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b084      	sub	sp, #16
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	781a      	ldrb	r2, [r3, #0]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	3301      	adds	r3, #1
 8008c76:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	781a      	ldrb	r2, [r3, #0]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	3301      	adds	r3, #1
 8008c84:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008c86:	68f8      	ldr	r0, [r7, #12]
 8008c88:	f7ff fabb 	bl	8008202 <SWAPBYTE>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	461a      	mov	r2, r3
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	3301      	adds	r3, #1
 8008c98:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	3301      	adds	r3, #1
 8008c9e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008ca0:	68f8      	ldr	r0, [r7, #12]
 8008ca2:	f7ff faae 	bl	8008202 <SWAPBYTE>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	461a      	mov	r2, r3
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	3301      	adds	r3, #1
 8008cb2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008cba:	68f8      	ldr	r0, [r7, #12]
 8008cbc:	f7ff faa1 	bl	8008202 <SWAPBYTE>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	80da      	strh	r2, [r3, #6]
}
 8008cc8:	bf00      	nop
 8008cca:	3710      	adds	r7, #16
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b082      	sub	sp, #8
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008cda:	2180      	movs	r1, #128	; 0x80
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 fce5 	bl	80096ac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008ce2:	2100      	movs	r1, #0
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 fce1 	bl	80096ac <USBD_LL_StallEP>
}
 8008cea:	bf00      	nop
 8008cec:	3708      	adds	r7, #8
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}

08008cf2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008cf2:	b580      	push	{r7, lr}
 8008cf4:	b086      	sub	sp, #24
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	60f8      	str	r0, [r7, #12]
 8008cfa:	60b9      	str	r1, [r7, #8]
 8008cfc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d036      	beq.n	8008d76 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008d0c:	6938      	ldr	r0, [r7, #16]
 8008d0e:	f000 f836 	bl	8008d7e <USBD_GetLen>
 8008d12:	4603      	mov	r3, r0
 8008d14:	3301      	adds	r3, #1
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	005b      	lsls	r3, r3, #1
 8008d1a:	b29a      	uxth	r2, r3
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008d20:	7dfb      	ldrb	r3, [r7, #23]
 8008d22:	68ba      	ldr	r2, [r7, #8]
 8008d24:	4413      	add	r3, r2
 8008d26:	687a      	ldr	r2, [r7, #4]
 8008d28:	7812      	ldrb	r2, [r2, #0]
 8008d2a:	701a      	strb	r2, [r3, #0]
  idx++;
 8008d2c:	7dfb      	ldrb	r3, [r7, #23]
 8008d2e:	3301      	adds	r3, #1
 8008d30:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008d32:	7dfb      	ldrb	r3, [r7, #23]
 8008d34:	68ba      	ldr	r2, [r7, #8]
 8008d36:	4413      	add	r3, r2
 8008d38:	2203      	movs	r2, #3
 8008d3a:	701a      	strb	r2, [r3, #0]
  idx++;
 8008d3c:	7dfb      	ldrb	r3, [r7, #23]
 8008d3e:	3301      	adds	r3, #1
 8008d40:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008d42:	e013      	b.n	8008d6c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008d44:	7dfb      	ldrb	r3, [r7, #23]
 8008d46:	68ba      	ldr	r2, [r7, #8]
 8008d48:	4413      	add	r3, r2
 8008d4a:	693a      	ldr	r2, [r7, #16]
 8008d4c:	7812      	ldrb	r2, [r2, #0]
 8008d4e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	3301      	adds	r3, #1
 8008d54:	613b      	str	r3, [r7, #16]
    idx++;
 8008d56:	7dfb      	ldrb	r3, [r7, #23]
 8008d58:	3301      	adds	r3, #1
 8008d5a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008d5c:	7dfb      	ldrb	r3, [r7, #23]
 8008d5e:	68ba      	ldr	r2, [r7, #8]
 8008d60:	4413      	add	r3, r2
 8008d62:	2200      	movs	r2, #0
 8008d64:	701a      	strb	r2, [r3, #0]
    idx++;
 8008d66:	7dfb      	ldrb	r3, [r7, #23]
 8008d68:	3301      	adds	r3, #1
 8008d6a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	781b      	ldrb	r3, [r3, #0]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d1e7      	bne.n	8008d44 <USBD_GetString+0x52>
 8008d74:	e000      	b.n	8008d78 <USBD_GetString+0x86>
    return;
 8008d76:	bf00      	nop
  }
}
 8008d78:	3718      	adds	r7, #24
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}

08008d7e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008d7e:	b480      	push	{r7}
 8008d80:	b085      	sub	sp, #20
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008d86:	2300      	movs	r3, #0
 8008d88:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008d8e:	e005      	b.n	8008d9c <USBD_GetLen+0x1e>
  {
    len++;
 8008d90:	7bfb      	ldrb	r3, [r7, #15]
 8008d92:	3301      	adds	r3, #1
 8008d94:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	3301      	adds	r3, #1
 8008d9a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d1f5      	bne.n	8008d90 <USBD_GetLen+0x12>
  }

  return len;
 8008da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3714      	adds	r7, #20
 8008daa:	46bd      	mov	sp, r7
 8008dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db0:	4770      	bx	lr

08008db2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008db2:	b580      	push	{r7, lr}
 8008db4:	b084      	sub	sp, #16
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	60f8      	str	r0, [r7, #12]
 8008dba:	60b9      	str	r1, [r7, #8]
 8008dbc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2202      	movs	r2, #2
 8008dc2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	68ba      	ldr	r2, [r7, #8]
 8008dd6:	2100      	movs	r1, #0
 8008dd8:	68f8      	ldr	r0, [r7, #12]
 8008dda:	f000 fcf0 	bl	80097be <USBD_LL_Transmit>

  return USBD_OK;
 8008dde:	2300      	movs	r3, #0
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3710      	adds	r7, #16
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b084      	sub	sp, #16
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	60f8      	str	r0, [r7, #12]
 8008df0:	60b9      	str	r1, [r7, #8]
 8008df2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	68ba      	ldr	r2, [r7, #8]
 8008df8:	2100      	movs	r1, #0
 8008dfa:	68f8      	ldr	r0, [r7, #12]
 8008dfc:	f000 fcdf 	bl	80097be <USBD_LL_Transmit>

  return USBD_OK;
 8008e00:	2300      	movs	r3, #0
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3710      	adds	r7, #16
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}

08008e0a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008e0a:	b580      	push	{r7, lr}
 8008e0c:	b084      	sub	sp, #16
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	60f8      	str	r0, [r7, #12]
 8008e12:	60b9      	str	r1, [r7, #8]
 8008e14:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2203      	movs	r2, #3
 8008e1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	68ba      	ldr	r2, [r7, #8]
 8008e32:	2100      	movs	r1, #0
 8008e34:	68f8      	ldr	r0, [r7, #12]
 8008e36:	f000 fce3 	bl	8009800 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e3a:	2300      	movs	r3, #0
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3710      	adds	r7, #16
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b084      	sub	sp, #16
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	60f8      	str	r0, [r7, #12]
 8008e4c:	60b9      	str	r1, [r7, #8]
 8008e4e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	68ba      	ldr	r2, [r7, #8]
 8008e54:	2100      	movs	r1, #0
 8008e56:	68f8      	ldr	r0, [r7, #12]
 8008e58:	f000 fcd2 	bl	8009800 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e5c:	2300      	movs	r3, #0
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3710      	adds	r7, #16
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}

08008e66 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008e66:	b580      	push	{r7, lr}
 8008e68:	b082      	sub	sp, #8
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2204      	movs	r2, #4
 8008e72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008e76:	2300      	movs	r3, #0
 8008e78:	2200      	movs	r2, #0
 8008e7a:	2100      	movs	r1, #0
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 fc9e 	bl	80097be <USBD_LL_Transmit>

  return USBD_OK;
 8008e82:	2300      	movs	r3, #0
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3708      	adds	r7, #8
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b082      	sub	sp, #8
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2205      	movs	r2, #5
 8008e98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	2100      	movs	r1, #0
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f000 fcac 	bl	8009800 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ea8:	2300      	movs	r3, #0
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3708      	adds	r7, #8
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
	...

08008eb4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008eb8:	2200      	movs	r2, #0
 8008eba:	4912      	ldr	r1, [pc, #72]	; (8008f04 <MX_USB_DEVICE_Init+0x50>)
 8008ebc:	4812      	ldr	r0, [pc, #72]	; (8008f08 <MX_USB_DEVICE_Init+0x54>)
 8008ebe:	f7fe fe8f 	bl	8007be0 <USBD_Init>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d001      	beq.n	8008ecc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008ec8:	f7f8 fcc0 	bl	800184c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008ecc:	490f      	ldr	r1, [pc, #60]	; (8008f0c <MX_USB_DEVICE_Init+0x58>)
 8008ece:	480e      	ldr	r0, [pc, #56]	; (8008f08 <MX_USB_DEVICE_Init+0x54>)
 8008ed0:	f7fe feb6 	bl	8007c40 <USBD_RegisterClass>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d001      	beq.n	8008ede <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008eda:	f7f8 fcb7 	bl	800184c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008ede:	490c      	ldr	r1, [pc, #48]	; (8008f10 <MX_USB_DEVICE_Init+0x5c>)
 8008ee0:	4809      	ldr	r0, [pc, #36]	; (8008f08 <MX_USB_DEVICE_Init+0x54>)
 8008ee2:	f7fe fdd7 	bl	8007a94 <USBD_CDC_RegisterInterface>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d001      	beq.n	8008ef0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008eec:	f7f8 fcae 	bl	800184c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008ef0:	4805      	ldr	r0, [pc, #20]	; (8008f08 <MX_USB_DEVICE_Init+0x54>)
 8008ef2:	f7fe fecc 	bl	8007c8e <USBD_Start>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d001      	beq.n	8008f00 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008efc:	f7f8 fca6 	bl	800184c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008f00:	bf00      	nop
 8008f02:	bd80      	pop	{r7, pc}
 8008f04:	20000130 	.word	0x20000130
 8008f08:	20000690 	.word	0x20000690
 8008f0c:	20000018 	.word	0x20000018
 8008f10:	2000011c 	.word	0x2000011c

08008f14 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008f18:	2200      	movs	r2, #0
 8008f1a:	4905      	ldr	r1, [pc, #20]	; (8008f30 <CDC_Init_FS+0x1c>)
 8008f1c:	4805      	ldr	r0, [pc, #20]	; (8008f34 <CDC_Init_FS+0x20>)
 8008f1e:	f7fe fdce 	bl	8007abe <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008f22:	4905      	ldr	r1, [pc, #20]	; (8008f38 <CDC_Init_FS+0x24>)
 8008f24:	4803      	ldr	r0, [pc, #12]	; (8008f34 <CDC_Init_FS+0x20>)
 8008f26:	f7fe fde8 	bl	8007afa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008f2a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	bd80      	pop	{r7, pc}
 8008f30:	20001160 	.word	0x20001160
 8008f34:	20000690 	.word	0x20000690
 8008f38:	20000960 	.word	0x20000960

08008f3c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008f40:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr

08008f4c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b083      	sub	sp, #12
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	4603      	mov	r3, r0
 8008f54:	6039      	str	r1, [r7, #0]
 8008f56:	71fb      	strb	r3, [r7, #7]
 8008f58:	4613      	mov	r3, r2
 8008f5a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008f5c:	79fb      	ldrb	r3, [r7, #7]
 8008f5e:	2b23      	cmp	r3, #35	; 0x23
 8008f60:	d84a      	bhi.n	8008ff8 <CDC_Control_FS+0xac>
 8008f62:	a201      	add	r2, pc, #4	; (adr r2, 8008f68 <CDC_Control_FS+0x1c>)
 8008f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f68:	08008ff9 	.word	0x08008ff9
 8008f6c:	08008ff9 	.word	0x08008ff9
 8008f70:	08008ff9 	.word	0x08008ff9
 8008f74:	08008ff9 	.word	0x08008ff9
 8008f78:	08008ff9 	.word	0x08008ff9
 8008f7c:	08008ff9 	.word	0x08008ff9
 8008f80:	08008ff9 	.word	0x08008ff9
 8008f84:	08008ff9 	.word	0x08008ff9
 8008f88:	08008ff9 	.word	0x08008ff9
 8008f8c:	08008ff9 	.word	0x08008ff9
 8008f90:	08008ff9 	.word	0x08008ff9
 8008f94:	08008ff9 	.word	0x08008ff9
 8008f98:	08008ff9 	.word	0x08008ff9
 8008f9c:	08008ff9 	.word	0x08008ff9
 8008fa0:	08008ff9 	.word	0x08008ff9
 8008fa4:	08008ff9 	.word	0x08008ff9
 8008fa8:	08008ff9 	.word	0x08008ff9
 8008fac:	08008ff9 	.word	0x08008ff9
 8008fb0:	08008ff9 	.word	0x08008ff9
 8008fb4:	08008ff9 	.word	0x08008ff9
 8008fb8:	08008ff9 	.word	0x08008ff9
 8008fbc:	08008ff9 	.word	0x08008ff9
 8008fc0:	08008ff9 	.word	0x08008ff9
 8008fc4:	08008ff9 	.word	0x08008ff9
 8008fc8:	08008ff9 	.word	0x08008ff9
 8008fcc:	08008ff9 	.word	0x08008ff9
 8008fd0:	08008ff9 	.word	0x08008ff9
 8008fd4:	08008ff9 	.word	0x08008ff9
 8008fd8:	08008ff9 	.word	0x08008ff9
 8008fdc:	08008ff9 	.word	0x08008ff9
 8008fe0:	08008ff9 	.word	0x08008ff9
 8008fe4:	08008ff9 	.word	0x08008ff9
 8008fe8:	08008ff9 	.word	0x08008ff9
 8008fec:	08008ff9 	.word	0x08008ff9
 8008ff0:	08008ff9 	.word	0x08008ff9
 8008ff4:	08008ff9 	.word	0x08008ff9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008ff8:	bf00      	nop
  }

  return (USBD_OK);
 8008ffa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	370c      	adds	r7, #12
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr

08009008 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b082      	sub	sp, #8
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009012:	6879      	ldr	r1, [r7, #4]
 8009014:	4805      	ldr	r0, [pc, #20]	; (800902c <CDC_Receive_FS+0x24>)
 8009016:	f7fe fd70 	bl	8007afa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800901a:	4804      	ldr	r0, [pc, #16]	; (800902c <CDC_Receive_FS+0x24>)
 800901c:	f7fe fdb6 	bl	8007b8c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009020:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009022:	4618      	mov	r0, r3
 8009024:	3708      	adds	r7, #8
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
 800902a:	bf00      	nop
 800902c:	20000690 	.word	0x20000690

08009030 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b084      	sub	sp, #16
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	460b      	mov	r3, r1
 800903a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800903c:	2300      	movs	r3, #0
 800903e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009040:	4b0d      	ldr	r3, [pc, #52]	; (8009078 <CDC_Transmit_FS+0x48>)
 8009042:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009046:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800904e:	2b00      	cmp	r3, #0
 8009050:	d001      	beq.n	8009056 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009052:	2301      	movs	r3, #1
 8009054:	e00b      	b.n	800906e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009056:	887b      	ldrh	r3, [r7, #2]
 8009058:	461a      	mov	r2, r3
 800905a:	6879      	ldr	r1, [r7, #4]
 800905c:	4806      	ldr	r0, [pc, #24]	; (8009078 <CDC_Transmit_FS+0x48>)
 800905e:	f7fe fd2e 	bl	8007abe <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009062:	4805      	ldr	r0, [pc, #20]	; (8009078 <CDC_Transmit_FS+0x48>)
 8009064:	f7fe fd62 	bl	8007b2c <USBD_CDC_TransmitPacket>
 8009068:	4603      	mov	r3, r0
 800906a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800906c:	7bfb      	ldrb	r3, [r7, #15]
}
 800906e:	4618      	mov	r0, r3
 8009070:	3710      	adds	r7, #16
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
 8009076:	bf00      	nop
 8009078:	20000690 	.word	0x20000690

0800907c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800907c:	b480      	push	{r7}
 800907e:	b087      	sub	sp, #28
 8009080:	af00      	add	r7, sp, #0
 8009082:	60f8      	str	r0, [r7, #12]
 8009084:	60b9      	str	r1, [r7, #8]
 8009086:	4613      	mov	r3, r2
 8009088:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800908a:	2300      	movs	r3, #0
 800908c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800908e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009092:	4618      	mov	r0, r3
 8009094:	371c      	adds	r7, #28
 8009096:	46bd      	mov	sp, r7
 8009098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909c:	4770      	bx	lr
	...

080090a0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b083      	sub	sp, #12
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	4603      	mov	r3, r0
 80090a8:	6039      	str	r1, [r7, #0]
 80090aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	2212      	movs	r2, #18
 80090b0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80090b2:	4b03      	ldr	r3, [pc, #12]	; (80090c0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	370c      	adds	r7, #12
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr
 80090c0:	2000014c 	.word	0x2000014c

080090c4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b083      	sub	sp, #12
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	4603      	mov	r3, r0
 80090cc:	6039      	str	r1, [r7, #0]
 80090ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	2204      	movs	r2, #4
 80090d4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80090d6:	4b03      	ldr	r3, [pc, #12]	; (80090e4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80090d8:	4618      	mov	r0, r3
 80090da:	370c      	adds	r7, #12
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr
 80090e4:	20000160 	.word	0x20000160

080090e8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b082      	sub	sp, #8
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	4603      	mov	r3, r0
 80090f0:	6039      	str	r1, [r7, #0]
 80090f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80090f4:	79fb      	ldrb	r3, [r7, #7]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d105      	bne.n	8009106 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80090fa:	683a      	ldr	r2, [r7, #0]
 80090fc:	4907      	ldr	r1, [pc, #28]	; (800911c <USBD_FS_ProductStrDescriptor+0x34>)
 80090fe:	4808      	ldr	r0, [pc, #32]	; (8009120 <USBD_FS_ProductStrDescriptor+0x38>)
 8009100:	f7ff fdf7 	bl	8008cf2 <USBD_GetString>
 8009104:	e004      	b.n	8009110 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009106:	683a      	ldr	r2, [r7, #0]
 8009108:	4904      	ldr	r1, [pc, #16]	; (800911c <USBD_FS_ProductStrDescriptor+0x34>)
 800910a:	4805      	ldr	r0, [pc, #20]	; (8009120 <USBD_FS_ProductStrDescriptor+0x38>)
 800910c:	f7ff fdf1 	bl	8008cf2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009110:	4b02      	ldr	r3, [pc, #8]	; (800911c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009112:	4618      	mov	r0, r3
 8009114:	3708      	adds	r7, #8
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
 800911a:	bf00      	nop
 800911c:	20001960 	.word	0x20001960
 8009120:	0800c6cc 	.word	0x0800c6cc

08009124 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b082      	sub	sp, #8
 8009128:	af00      	add	r7, sp, #0
 800912a:	4603      	mov	r3, r0
 800912c:	6039      	str	r1, [r7, #0]
 800912e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009130:	683a      	ldr	r2, [r7, #0]
 8009132:	4904      	ldr	r1, [pc, #16]	; (8009144 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009134:	4804      	ldr	r0, [pc, #16]	; (8009148 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009136:	f7ff fddc 	bl	8008cf2 <USBD_GetString>
  return USBD_StrDesc;
 800913a:	4b02      	ldr	r3, [pc, #8]	; (8009144 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800913c:	4618      	mov	r0, r3
 800913e:	3708      	adds	r7, #8
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}
 8009144:	20001960 	.word	0x20001960
 8009148:	0800c6e4 	.word	0x0800c6e4

0800914c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b082      	sub	sp, #8
 8009150:	af00      	add	r7, sp, #0
 8009152:	4603      	mov	r3, r0
 8009154:	6039      	str	r1, [r7, #0]
 8009156:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	221a      	movs	r2, #26
 800915c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800915e:	f000 f843 	bl	80091e8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009162:	4b02      	ldr	r3, [pc, #8]	; (800916c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009164:	4618      	mov	r0, r3
 8009166:	3708      	adds	r7, #8
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}
 800916c:	20000164 	.word	0x20000164

08009170 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b082      	sub	sp, #8
 8009174:	af00      	add	r7, sp, #0
 8009176:	4603      	mov	r3, r0
 8009178:	6039      	str	r1, [r7, #0]
 800917a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800917c:	79fb      	ldrb	r3, [r7, #7]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d105      	bne.n	800918e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009182:	683a      	ldr	r2, [r7, #0]
 8009184:	4907      	ldr	r1, [pc, #28]	; (80091a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009186:	4808      	ldr	r0, [pc, #32]	; (80091a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009188:	f7ff fdb3 	bl	8008cf2 <USBD_GetString>
 800918c:	e004      	b.n	8009198 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800918e:	683a      	ldr	r2, [r7, #0]
 8009190:	4904      	ldr	r1, [pc, #16]	; (80091a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009192:	4805      	ldr	r0, [pc, #20]	; (80091a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009194:	f7ff fdad 	bl	8008cf2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009198:	4b02      	ldr	r3, [pc, #8]	; (80091a4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800919a:	4618      	mov	r0, r3
 800919c:	3708      	adds	r7, #8
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	bf00      	nop
 80091a4:	20001960 	.word	0x20001960
 80091a8:	0800c6f8 	.word	0x0800c6f8

080091ac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b082      	sub	sp, #8
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	4603      	mov	r3, r0
 80091b4:	6039      	str	r1, [r7, #0]
 80091b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80091b8:	79fb      	ldrb	r3, [r7, #7]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d105      	bne.n	80091ca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80091be:	683a      	ldr	r2, [r7, #0]
 80091c0:	4907      	ldr	r1, [pc, #28]	; (80091e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80091c2:	4808      	ldr	r0, [pc, #32]	; (80091e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80091c4:	f7ff fd95 	bl	8008cf2 <USBD_GetString>
 80091c8:	e004      	b.n	80091d4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80091ca:	683a      	ldr	r2, [r7, #0]
 80091cc:	4904      	ldr	r1, [pc, #16]	; (80091e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80091ce:	4805      	ldr	r0, [pc, #20]	; (80091e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80091d0:	f7ff fd8f 	bl	8008cf2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80091d4:	4b02      	ldr	r3, [pc, #8]	; (80091e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3708      	adds	r7, #8
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}
 80091de:	bf00      	nop
 80091e0:	20001960 	.word	0x20001960
 80091e4:	0800c704 	.word	0x0800c704

080091e8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80091ee:	4b0f      	ldr	r3, [pc, #60]	; (800922c <Get_SerialNum+0x44>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80091f4:	4b0e      	ldr	r3, [pc, #56]	; (8009230 <Get_SerialNum+0x48>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80091fa:	4b0e      	ldr	r3, [pc, #56]	; (8009234 <Get_SerialNum+0x4c>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009200:	68fa      	ldr	r2, [r7, #12]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	4413      	add	r3, r2
 8009206:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d009      	beq.n	8009222 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800920e:	2208      	movs	r2, #8
 8009210:	4909      	ldr	r1, [pc, #36]	; (8009238 <Get_SerialNum+0x50>)
 8009212:	68f8      	ldr	r0, [r7, #12]
 8009214:	f000 f814 	bl	8009240 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009218:	2204      	movs	r2, #4
 800921a:	4908      	ldr	r1, [pc, #32]	; (800923c <Get_SerialNum+0x54>)
 800921c:	68b8      	ldr	r0, [r7, #8]
 800921e:	f000 f80f 	bl	8009240 <IntToUnicode>
  }
}
 8009222:	bf00      	nop
 8009224:	3710      	adds	r7, #16
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
 800922a:	bf00      	nop
 800922c:	1fff7a10 	.word	0x1fff7a10
 8009230:	1fff7a14 	.word	0x1fff7a14
 8009234:	1fff7a18 	.word	0x1fff7a18
 8009238:	20000166 	.word	0x20000166
 800923c:	20000176 	.word	0x20000176

08009240 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009240:	b480      	push	{r7}
 8009242:	b087      	sub	sp, #28
 8009244:	af00      	add	r7, sp, #0
 8009246:	60f8      	str	r0, [r7, #12]
 8009248:	60b9      	str	r1, [r7, #8]
 800924a:	4613      	mov	r3, r2
 800924c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800924e:	2300      	movs	r3, #0
 8009250:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009252:	2300      	movs	r3, #0
 8009254:	75fb      	strb	r3, [r7, #23]
 8009256:	e027      	b.n	80092a8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	0f1b      	lsrs	r3, r3, #28
 800925c:	2b09      	cmp	r3, #9
 800925e:	d80b      	bhi.n	8009278 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	0f1b      	lsrs	r3, r3, #28
 8009264:	b2da      	uxtb	r2, r3
 8009266:	7dfb      	ldrb	r3, [r7, #23]
 8009268:	005b      	lsls	r3, r3, #1
 800926a:	4619      	mov	r1, r3
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	440b      	add	r3, r1
 8009270:	3230      	adds	r2, #48	; 0x30
 8009272:	b2d2      	uxtb	r2, r2
 8009274:	701a      	strb	r2, [r3, #0]
 8009276:	e00a      	b.n	800928e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	0f1b      	lsrs	r3, r3, #28
 800927c:	b2da      	uxtb	r2, r3
 800927e:	7dfb      	ldrb	r3, [r7, #23]
 8009280:	005b      	lsls	r3, r3, #1
 8009282:	4619      	mov	r1, r3
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	440b      	add	r3, r1
 8009288:	3237      	adds	r2, #55	; 0x37
 800928a:	b2d2      	uxtb	r2, r2
 800928c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	011b      	lsls	r3, r3, #4
 8009292:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009294:	7dfb      	ldrb	r3, [r7, #23]
 8009296:	005b      	lsls	r3, r3, #1
 8009298:	3301      	adds	r3, #1
 800929a:	68ba      	ldr	r2, [r7, #8]
 800929c:	4413      	add	r3, r2
 800929e:	2200      	movs	r2, #0
 80092a0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80092a2:	7dfb      	ldrb	r3, [r7, #23]
 80092a4:	3301      	adds	r3, #1
 80092a6:	75fb      	strb	r3, [r7, #23]
 80092a8:	7dfa      	ldrb	r2, [r7, #23]
 80092aa:	79fb      	ldrb	r3, [r7, #7]
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d3d3      	bcc.n	8009258 <IntToUnicode+0x18>
  }
}
 80092b0:	bf00      	nop
 80092b2:	bf00      	nop
 80092b4:	371c      	adds	r7, #28
 80092b6:	46bd      	mov	sp, r7
 80092b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092bc:	4770      	bx	lr
	...

080092c0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b08a      	sub	sp, #40	; 0x28
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80092c8:	f107 0314 	add.w	r3, r7, #20
 80092cc:	2200      	movs	r2, #0
 80092ce:	601a      	str	r2, [r3, #0]
 80092d0:	605a      	str	r2, [r3, #4]
 80092d2:	609a      	str	r2, [r3, #8]
 80092d4:	60da      	str	r2, [r3, #12]
 80092d6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80092e0:	d147      	bne.n	8009372 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80092e2:	2300      	movs	r3, #0
 80092e4:	613b      	str	r3, [r7, #16]
 80092e6:	4b25      	ldr	r3, [pc, #148]	; (800937c <HAL_PCD_MspInit+0xbc>)
 80092e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ea:	4a24      	ldr	r2, [pc, #144]	; (800937c <HAL_PCD_MspInit+0xbc>)
 80092ec:	f043 0301 	orr.w	r3, r3, #1
 80092f0:	6313      	str	r3, [r2, #48]	; 0x30
 80092f2:	4b22      	ldr	r3, [pc, #136]	; (800937c <HAL_PCD_MspInit+0xbc>)
 80092f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092f6:	f003 0301 	and.w	r3, r3, #1
 80092fa:	613b      	str	r3, [r7, #16]
 80092fc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80092fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009304:	2300      	movs	r3, #0
 8009306:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009308:	2300      	movs	r3, #0
 800930a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800930c:	f107 0314 	add.w	r3, r7, #20
 8009310:	4619      	mov	r1, r3
 8009312:	481b      	ldr	r0, [pc, #108]	; (8009380 <HAL_PCD_MspInit+0xc0>)
 8009314:	f7f8 ff42 	bl	800219c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009318:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800931c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800931e:	2302      	movs	r3, #2
 8009320:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009322:	2300      	movs	r3, #0
 8009324:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009326:	2303      	movs	r3, #3
 8009328:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800932a:	230a      	movs	r3, #10
 800932c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800932e:	f107 0314 	add.w	r3, r7, #20
 8009332:	4619      	mov	r1, r3
 8009334:	4812      	ldr	r0, [pc, #72]	; (8009380 <HAL_PCD_MspInit+0xc0>)
 8009336:	f7f8 ff31 	bl	800219c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800933a:	4b10      	ldr	r3, [pc, #64]	; (800937c <HAL_PCD_MspInit+0xbc>)
 800933c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800933e:	4a0f      	ldr	r2, [pc, #60]	; (800937c <HAL_PCD_MspInit+0xbc>)
 8009340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009344:	6353      	str	r3, [r2, #52]	; 0x34
 8009346:	2300      	movs	r3, #0
 8009348:	60fb      	str	r3, [r7, #12]
 800934a:	4b0c      	ldr	r3, [pc, #48]	; (800937c <HAL_PCD_MspInit+0xbc>)
 800934c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800934e:	4a0b      	ldr	r2, [pc, #44]	; (800937c <HAL_PCD_MspInit+0xbc>)
 8009350:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009354:	6453      	str	r3, [r2, #68]	; 0x44
 8009356:	4b09      	ldr	r3, [pc, #36]	; (800937c <HAL_PCD_MspInit+0xbc>)
 8009358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800935a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800935e:	60fb      	str	r3, [r7, #12]
 8009360:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009362:	2200      	movs	r2, #0
 8009364:	2100      	movs	r1, #0
 8009366:	2043      	movs	r0, #67	; 0x43
 8009368:	f7f8 fe4f 	bl	800200a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800936c:	2043      	movs	r0, #67	; 0x43
 800936e:	f7f8 fe68 	bl	8002042 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009372:	bf00      	nop
 8009374:	3728      	adds	r7, #40	; 0x28
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}
 800937a:	bf00      	nop
 800937c:	40023800 	.word	0x40023800
 8009380:	40020000 	.word	0x40020000

08009384 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b082      	sub	sp, #8
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009398:	4619      	mov	r1, r3
 800939a:	4610      	mov	r0, r2
 800939c:	f7fe fcc2 	bl	8007d24 <USBD_LL_SetupStage>
}
 80093a0:	bf00      	nop
 80093a2:	3708      	adds	r7, #8
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b082      	sub	sp, #8
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
 80093b0:	460b      	mov	r3, r1
 80093b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80093ba:	78fa      	ldrb	r2, [r7, #3]
 80093bc:	6879      	ldr	r1, [r7, #4]
 80093be:	4613      	mov	r3, r2
 80093c0:	00db      	lsls	r3, r3, #3
 80093c2:	1a9b      	subs	r3, r3, r2
 80093c4:	009b      	lsls	r3, r3, #2
 80093c6:	440b      	add	r3, r1
 80093c8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80093cc:	681a      	ldr	r2, [r3, #0]
 80093ce:	78fb      	ldrb	r3, [r7, #3]
 80093d0:	4619      	mov	r1, r3
 80093d2:	f7fe fcfc 	bl	8007dce <USBD_LL_DataOutStage>
}
 80093d6:	bf00      	nop
 80093d8:	3708      	adds	r7, #8
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}

080093de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093de:	b580      	push	{r7, lr}
 80093e0:	b082      	sub	sp, #8
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	6078      	str	r0, [r7, #4]
 80093e6:	460b      	mov	r3, r1
 80093e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80093f0:	78fa      	ldrb	r2, [r7, #3]
 80093f2:	6879      	ldr	r1, [r7, #4]
 80093f4:	4613      	mov	r3, r2
 80093f6:	00db      	lsls	r3, r3, #3
 80093f8:	1a9b      	subs	r3, r3, r2
 80093fa:	009b      	lsls	r3, r3, #2
 80093fc:	440b      	add	r3, r1
 80093fe:	3348      	adds	r3, #72	; 0x48
 8009400:	681a      	ldr	r2, [r3, #0]
 8009402:	78fb      	ldrb	r3, [r7, #3]
 8009404:	4619      	mov	r1, r3
 8009406:	f7fe fd45 	bl	8007e94 <USBD_LL_DataInStage>
}
 800940a:	bf00      	nop
 800940c:	3708      	adds	r7, #8
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}

08009412 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009412:	b580      	push	{r7, lr}
 8009414:	b082      	sub	sp, #8
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009420:	4618      	mov	r0, r3
 8009422:	f7fe fe59 	bl	80080d8 <USBD_LL_SOF>
}
 8009426:	bf00      	nop
 8009428:	3708      	adds	r7, #8
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}

0800942e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800942e:	b580      	push	{r7, lr}
 8009430:	b084      	sub	sp, #16
 8009432:	af00      	add	r7, sp, #0
 8009434:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009436:	2301      	movs	r3, #1
 8009438:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	68db      	ldr	r3, [r3, #12]
 800943e:	2b02      	cmp	r3, #2
 8009440:	d001      	beq.n	8009446 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009442:	f7f8 fa03 	bl	800184c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800944c:	7bfa      	ldrb	r2, [r7, #15]
 800944e:	4611      	mov	r1, r2
 8009450:	4618      	mov	r0, r3
 8009452:	f7fe fe03 	bl	800805c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800945c:	4618      	mov	r0, r3
 800945e:	f7fe fdaf 	bl	8007fc0 <USBD_LL_Reset>
}
 8009462:	bf00      	nop
 8009464:	3710      	adds	r7, #16
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}
	...

0800946c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b082      	sub	sp, #8
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800947a:	4618      	mov	r0, r3
 800947c:	f7fe fdfe 	bl	800807c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	687a      	ldr	r2, [r7, #4]
 800948c:	6812      	ldr	r2, [r2, #0]
 800948e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009492:	f043 0301 	orr.w	r3, r3, #1
 8009496:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6a1b      	ldr	r3, [r3, #32]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d005      	beq.n	80094ac <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80094a0:	4b04      	ldr	r3, [pc, #16]	; (80094b4 <HAL_PCD_SuspendCallback+0x48>)
 80094a2:	691b      	ldr	r3, [r3, #16]
 80094a4:	4a03      	ldr	r2, [pc, #12]	; (80094b4 <HAL_PCD_SuspendCallback+0x48>)
 80094a6:	f043 0306 	orr.w	r3, r3, #6
 80094aa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80094ac:	bf00      	nop
 80094ae:	3708      	adds	r7, #8
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}
 80094b4:	e000ed00 	.word	0xe000ed00

080094b8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b082      	sub	sp, #8
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80094c6:	4618      	mov	r0, r3
 80094c8:	f7fe fdee 	bl	80080a8 <USBD_LL_Resume>
}
 80094cc:	bf00      	nop
 80094ce:	3708      	adds	r7, #8
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b082      	sub	sp, #8
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	460b      	mov	r3, r1
 80094de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80094e6:	78fa      	ldrb	r2, [r7, #3]
 80094e8:	4611      	mov	r1, r2
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7fe fe3c 	bl	8008168 <USBD_LL_IsoOUTIncomplete>
}
 80094f0:	bf00      	nop
 80094f2:	3708      	adds	r7, #8
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	460b      	mov	r3, r1
 8009502:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800950a:	78fa      	ldrb	r2, [r7, #3]
 800950c:	4611      	mov	r1, r2
 800950e:	4618      	mov	r0, r3
 8009510:	f7fe fe04 	bl	800811c <USBD_LL_IsoINIncomplete>
}
 8009514:	bf00      	nop
 8009516:	3708      	adds	r7, #8
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}

0800951c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b082      	sub	sp, #8
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800952a:	4618      	mov	r0, r3
 800952c:	f7fe fe42 	bl	80081b4 <USBD_LL_DevConnected>
}
 8009530:	bf00      	nop
 8009532:	3708      	adds	r7, #8
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}

08009538 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b082      	sub	sp, #8
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009546:	4618      	mov	r0, r3
 8009548:	f7fe fe3f 	bl	80081ca <USBD_LL_DevDisconnected>
}
 800954c:	bf00      	nop
 800954e:	3708      	adds	r7, #8
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b082      	sub	sp, #8
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	781b      	ldrb	r3, [r3, #0]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d13c      	bne.n	80095de <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009564:	4a20      	ldr	r2, [pc, #128]	; (80095e8 <USBD_LL_Init+0x94>)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	4a1e      	ldr	r2, [pc, #120]	; (80095e8 <USBD_LL_Init+0x94>)
 8009570:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009574:	4b1c      	ldr	r3, [pc, #112]	; (80095e8 <USBD_LL_Init+0x94>)
 8009576:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800957a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800957c:	4b1a      	ldr	r3, [pc, #104]	; (80095e8 <USBD_LL_Init+0x94>)
 800957e:	2204      	movs	r2, #4
 8009580:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009582:	4b19      	ldr	r3, [pc, #100]	; (80095e8 <USBD_LL_Init+0x94>)
 8009584:	2202      	movs	r2, #2
 8009586:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009588:	4b17      	ldr	r3, [pc, #92]	; (80095e8 <USBD_LL_Init+0x94>)
 800958a:	2200      	movs	r2, #0
 800958c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800958e:	4b16      	ldr	r3, [pc, #88]	; (80095e8 <USBD_LL_Init+0x94>)
 8009590:	2202      	movs	r2, #2
 8009592:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009594:	4b14      	ldr	r3, [pc, #80]	; (80095e8 <USBD_LL_Init+0x94>)
 8009596:	2200      	movs	r2, #0
 8009598:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800959a:	4b13      	ldr	r3, [pc, #76]	; (80095e8 <USBD_LL_Init+0x94>)
 800959c:	2200      	movs	r2, #0
 800959e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80095a0:	4b11      	ldr	r3, [pc, #68]	; (80095e8 <USBD_LL_Init+0x94>)
 80095a2:	2200      	movs	r2, #0
 80095a4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80095a6:	4b10      	ldr	r3, [pc, #64]	; (80095e8 <USBD_LL_Init+0x94>)
 80095a8:	2201      	movs	r2, #1
 80095aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80095ac:	4b0e      	ldr	r3, [pc, #56]	; (80095e8 <USBD_LL_Init+0x94>)
 80095ae:	2200      	movs	r2, #0
 80095b0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80095b2:	480d      	ldr	r0, [pc, #52]	; (80095e8 <USBD_LL_Init+0x94>)
 80095b4:	f7f9 ff8d 	bl	80034d2 <HAL_PCD_Init>
 80095b8:	4603      	mov	r3, r0
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d001      	beq.n	80095c2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80095be:	f7f8 f945 	bl	800184c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80095c2:	2180      	movs	r1, #128	; 0x80
 80095c4:	4808      	ldr	r0, [pc, #32]	; (80095e8 <USBD_LL_Init+0x94>)
 80095c6:	f7fb f8ea 	bl	800479e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80095ca:	2240      	movs	r2, #64	; 0x40
 80095cc:	2100      	movs	r1, #0
 80095ce:	4806      	ldr	r0, [pc, #24]	; (80095e8 <USBD_LL_Init+0x94>)
 80095d0:	f7fb f89e 	bl	8004710 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80095d4:	2280      	movs	r2, #128	; 0x80
 80095d6:	2101      	movs	r1, #1
 80095d8:	4803      	ldr	r0, [pc, #12]	; (80095e8 <USBD_LL_Init+0x94>)
 80095da:	f7fb f899 	bl	8004710 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80095de:	2300      	movs	r3, #0
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3708      	adds	r7, #8
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}
 80095e8:	20001b60 	.word	0x20001b60

080095ec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095f4:	2300      	movs	r3, #0
 80095f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095f8:	2300      	movs	r3, #0
 80095fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009602:	4618      	mov	r0, r3
 8009604:	f7fa f882 	bl	800370c <HAL_PCD_Start>
 8009608:	4603      	mov	r3, r0
 800960a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800960c:	7bfb      	ldrb	r3, [r7, #15]
 800960e:	4618      	mov	r0, r3
 8009610:	f000 f942 	bl	8009898 <USBD_Get_USB_Status>
 8009614:	4603      	mov	r3, r0
 8009616:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009618:	7bbb      	ldrb	r3, [r7, #14]
}
 800961a:	4618      	mov	r0, r3
 800961c:	3710      	adds	r7, #16
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}

08009622 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009622:	b580      	push	{r7, lr}
 8009624:	b084      	sub	sp, #16
 8009626:	af00      	add	r7, sp, #0
 8009628:	6078      	str	r0, [r7, #4]
 800962a:	4608      	mov	r0, r1
 800962c:	4611      	mov	r1, r2
 800962e:	461a      	mov	r2, r3
 8009630:	4603      	mov	r3, r0
 8009632:	70fb      	strb	r3, [r7, #3]
 8009634:	460b      	mov	r3, r1
 8009636:	70bb      	strb	r3, [r7, #2]
 8009638:	4613      	mov	r3, r2
 800963a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800963c:	2300      	movs	r3, #0
 800963e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009640:	2300      	movs	r3, #0
 8009642:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800964a:	78bb      	ldrb	r3, [r7, #2]
 800964c:	883a      	ldrh	r2, [r7, #0]
 800964e:	78f9      	ldrb	r1, [r7, #3]
 8009650:	f7fa fc66 	bl	8003f20 <HAL_PCD_EP_Open>
 8009654:	4603      	mov	r3, r0
 8009656:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009658:	7bfb      	ldrb	r3, [r7, #15]
 800965a:	4618      	mov	r0, r3
 800965c:	f000 f91c 	bl	8009898 <USBD_Get_USB_Status>
 8009660:	4603      	mov	r3, r0
 8009662:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009664:	7bbb      	ldrb	r3, [r7, #14]
}
 8009666:	4618      	mov	r0, r3
 8009668:	3710      	adds	r7, #16
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}

0800966e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800966e:	b580      	push	{r7, lr}
 8009670:	b084      	sub	sp, #16
 8009672:	af00      	add	r7, sp, #0
 8009674:	6078      	str	r0, [r7, #4]
 8009676:	460b      	mov	r3, r1
 8009678:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800967a:	2300      	movs	r3, #0
 800967c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800967e:	2300      	movs	r3, #0
 8009680:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009688:	78fa      	ldrb	r2, [r7, #3]
 800968a:	4611      	mov	r1, r2
 800968c:	4618      	mov	r0, r3
 800968e:	f7fa fcaf 	bl	8003ff0 <HAL_PCD_EP_Close>
 8009692:	4603      	mov	r3, r0
 8009694:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009696:	7bfb      	ldrb	r3, [r7, #15]
 8009698:	4618      	mov	r0, r3
 800969a:	f000 f8fd 	bl	8009898 <USBD_Get_USB_Status>
 800969e:	4603      	mov	r3, r0
 80096a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3710      	adds	r7, #16
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b084      	sub	sp, #16
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	460b      	mov	r3, r1
 80096b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096b8:	2300      	movs	r3, #0
 80096ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096bc:	2300      	movs	r3, #0
 80096be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80096c6:	78fa      	ldrb	r2, [r7, #3]
 80096c8:	4611      	mov	r1, r2
 80096ca:	4618      	mov	r0, r3
 80096cc:	f7fa fd87 	bl	80041de <HAL_PCD_EP_SetStall>
 80096d0:	4603      	mov	r3, r0
 80096d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096d4:	7bfb      	ldrb	r3, [r7, #15]
 80096d6:	4618      	mov	r0, r3
 80096d8:	f000 f8de 	bl	8009898 <USBD_Get_USB_Status>
 80096dc:	4603      	mov	r3, r0
 80096de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3710      	adds	r7, #16
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}

080096ea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096ea:	b580      	push	{r7, lr}
 80096ec:	b084      	sub	sp, #16
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	6078      	str	r0, [r7, #4]
 80096f2:	460b      	mov	r3, r1
 80096f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096f6:	2300      	movs	r3, #0
 80096f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096fa:	2300      	movs	r3, #0
 80096fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009704:	78fa      	ldrb	r2, [r7, #3]
 8009706:	4611      	mov	r1, r2
 8009708:	4618      	mov	r0, r3
 800970a:	f7fa fdcc 	bl	80042a6 <HAL_PCD_EP_ClrStall>
 800970e:	4603      	mov	r3, r0
 8009710:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009712:	7bfb      	ldrb	r3, [r7, #15]
 8009714:	4618      	mov	r0, r3
 8009716:	f000 f8bf 	bl	8009898 <USBD_Get_USB_Status>
 800971a:	4603      	mov	r3, r0
 800971c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800971e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009720:	4618      	mov	r0, r3
 8009722:	3710      	adds	r7, #16
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}

08009728 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009728:	b480      	push	{r7}
 800972a:	b085      	sub	sp, #20
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	460b      	mov	r3, r1
 8009732:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800973a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800973c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009740:	2b00      	cmp	r3, #0
 8009742:	da0b      	bge.n	800975c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009744:	78fb      	ldrb	r3, [r7, #3]
 8009746:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800974a:	68f9      	ldr	r1, [r7, #12]
 800974c:	4613      	mov	r3, r2
 800974e:	00db      	lsls	r3, r3, #3
 8009750:	1a9b      	subs	r3, r3, r2
 8009752:	009b      	lsls	r3, r3, #2
 8009754:	440b      	add	r3, r1
 8009756:	333e      	adds	r3, #62	; 0x3e
 8009758:	781b      	ldrb	r3, [r3, #0]
 800975a:	e00b      	b.n	8009774 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800975c:	78fb      	ldrb	r3, [r7, #3]
 800975e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009762:	68f9      	ldr	r1, [r7, #12]
 8009764:	4613      	mov	r3, r2
 8009766:	00db      	lsls	r3, r3, #3
 8009768:	1a9b      	subs	r3, r3, r2
 800976a:	009b      	lsls	r3, r3, #2
 800976c:	440b      	add	r3, r1
 800976e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009772:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009774:	4618      	mov	r0, r3
 8009776:	3714      	adds	r7, #20
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr

08009780 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b084      	sub	sp, #16
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	460b      	mov	r3, r1
 800978a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800978c:	2300      	movs	r3, #0
 800978e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009790:	2300      	movs	r3, #0
 8009792:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800979a:	78fa      	ldrb	r2, [r7, #3]
 800979c:	4611      	mov	r1, r2
 800979e:	4618      	mov	r0, r3
 80097a0:	f7fa fb99 	bl	8003ed6 <HAL_PCD_SetAddress>
 80097a4:	4603      	mov	r3, r0
 80097a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097a8:	7bfb      	ldrb	r3, [r7, #15]
 80097aa:	4618      	mov	r0, r3
 80097ac:	f000 f874 	bl	8009898 <USBD_Get_USB_Status>
 80097b0:	4603      	mov	r3, r0
 80097b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3710      	adds	r7, #16
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}

080097be <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80097be:	b580      	push	{r7, lr}
 80097c0:	b086      	sub	sp, #24
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	60f8      	str	r0, [r7, #12]
 80097c6:	607a      	str	r2, [r7, #4]
 80097c8:	603b      	str	r3, [r7, #0]
 80097ca:	460b      	mov	r3, r1
 80097cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097ce:	2300      	movs	r3, #0
 80097d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097d2:	2300      	movs	r3, #0
 80097d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80097dc:	7af9      	ldrb	r1, [r7, #11]
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	687a      	ldr	r2, [r7, #4]
 80097e2:	f7fa fcb2 	bl	800414a <HAL_PCD_EP_Transmit>
 80097e6:	4603      	mov	r3, r0
 80097e8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097ea:	7dfb      	ldrb	r3, [r7, #23]
 80097ec:	4618      	mov	r0, r3
 80097ee:	f000 f853 	bl	8009898 <USBD_Get_USB_Status>
 80097f2:	4603      	mov	r3, r0
 80097f4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80097f6:	7dbb      	ldrb	r3, [r7, #22]
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3718      	adds	r7, #24
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}

08009800 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b086      	sub	sp, #24
 8009804:	af00      	add	r7, sp, #0
 8009806:	60f8      	str	r0, [r7, #12]
 8009808:	607a      	str	r2, [r7, #4]
 800980a:	603b      	str	r3, [r7, #0]
 800980c:	460b      	mov	r3, r1
 800980e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009810:	2300      	movs	r3, #0
 8009812:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009814:	2300      	movs	r3, #0
 8009816:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800981e:	7af9      	ldrb	r1, [r7, #11]
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	687a      	ldr	r2, [r7, #4]
 8009824:	f7fa fc2e 	bl	8004084 <HAL_PCD_EP_Receive>
 8009828:	4603      	mov	r3, r0
 800982a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800982c:	7dfb      	ldrb	r3, [r7, #23]
 800982e:	4618      	mov	r0, r3
 8009830:	f000 f832 	bl	8009898 <USBD_Get_USB_Status>
 8009834:	4603      	mov	r3, r0
 8009836:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009838:	7dbb      	ldrb	r3, [r7, #22]
}
 800983a:	4618      	mov	r0, r3
 800983c:	3718      	adds	r7, #24
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}

08009842 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009842:	b580      	push	{r7, lr}
 8009844:	b082      	sub	sp, #8
 8009846:	af00      	add	r7, sp, #0
 8009848:	6078      	str	r0, [r7, #4]
 800984a:	460b      	mov	r3, r1
 800984c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009854:	78fa      	ldrb	r2, [r7, #3]
 8009856:	4611      	mov	r1, r2
 8009858:	4618      	mov	r0, r3
 800985a:	f7fa fc5e 	bl	800411a <HAL_PCD_EP_GetRxCount>
 800985e:	4603      	mov	r3, r0
}
 8009860:	4618      	mov	r0, r3
 8009862:	3708      	adds	r7, #8
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009868:	b480      	push	{r7}
 800986a:	b083      	sub	sp, #12
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009870:	4b03      	ldr	r3, [pc, #12]	; (8009880 <USBD_static_malloc+0x18>)
}
 8009872:	4618      	mov	r0, r3
 8009874:	370c      	adds	r7, #12
 8009876:	46bd      	mov	sp, r7
 8009878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987c:	4770      	bx	lr
 800987e:	bf00      	nop
 8009880:	20000374 	.word	0x20000374

08009884 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009884:	b480      	push	{r7}
 8009886:	b083      	sub	sp, #12
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]

}
 800988c:	bf00      	nop
 800988e:	370c      	adds	r7, #12
 8009890:	46bd      	mov	sp, r7
 8009892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009896:	4770      	bx	lr

08009898 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009898:	b480      	push	{r7}
 800989a:	b085      	sub	sp, #20
 800989c:	af00      	add	r7, sp, #0
 800989e:	4603      	mov	r3, r0
 80098a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098a2:	2300      	movs	r3, #0
 80098a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80098a6:	79fb      	ldrb	r3, [r7, #7]
 80098a8:	2b03      	cmp	r3, #3
 80098aa:	d817      	bhi.n	80098dc <USBD_Get_USB_Status+0x44>
 80098ac:	a201      	add	r2, pc, #4	; (adr r2, 80098b4 <USBD_Get_USB_Status+0x1c>)
 80098ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098b2:	bf00      	nop
 80098b4:	080098c5 	.word	0x080098c5
 80098b8:	080098cb 	.word	0x080098cb
 80098bc:	080098d1 	.word	0x080098d1
 80098c0:	080098d7 	.word	0x080098d7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80098c4:	2300      	movs	r3, #0
 80098c6:	73fb      	strb	r3, [r7, #15]
    break;
 80098c8:	e00b      	b.n	80098e2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80098ca:	2303      	movs	r3, #3
 80098cc:	73fb      	strb	r3, [r7, #15]
    break;
 80098ce:	e008      	b.n	80098e2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80098d0:	2301      	movs	r3, #1
 80098d2:	73fb      	strb	r3, [r7, #15]
    break;
 80098d4:	e005      	b.n	80098e2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80098d6:	2303      	movs	r3, #3
 80098d8:	73fb      	strb	r3, [r7, #15]
    break;
 80098da:	e002      	b.n	80098e2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80098dc:	2303      	movs	r3, #3
 80098de:	73fb      	strb	r3, [r7, #15]
    break;
 80098e0:	bf00      	nop
  }
  return usb_status;
 80098e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3714      	adds	r7, #20
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr

080098f0 <__errno>:
 80098f0:	4b01      	ldr	r3, [pc, #4]	; (80098f8 <__errno+0x8>)
 80098f2:	6818      	ldr	r0, [r3, #0]
 80098f4:	4770      	bx	lr
 80098f6:	bf00      	nop
 80098f8:	20000180 	.word	0x20000180

080098fc <__libc_init_array>:
 80098fc:	b570      	push	{r4, r5, r6, lr}
 80098fe:	4d0d      	ldr	r5, [pc, #52]	; (8009934 <__libc_init_array+0x38>)
 8009900:	4c0d      	ldr	r4, [pc, #52]	; (8009938 <__libc_init_array+0x3c>)
 8009902:	1b64      	subs	r4, r4, r5
 8009904:	10a4      	asrs	r4, r4, #2
 8009906:	2600      	movs	r6, #0
 8009908:	42a6      	cmp	r6, r4
 800990a:	d109      	bne.n	8009920 <__libc_init_array+0x24>
 800990c:	4d0b      	ldr	r5, [pc, #44]	; (800993c <__libc_init_array+0x40>)
 800990e:	4c0c      	ldr	r4, [pc, #48]	; (8009940 <__libc_init_array+0x44>)
 8009910:	f002 feb6 	bl	800c680 <_init>
 8009914:	1b64      	subs	r4, r4, r5
 8009916:	10a4      	asrs	r4, r4, #2
 8009918:	2600      	movs	r6, #0
 800991a:	42a6      	cmp	r6, r4
 800991c:	d105      	bne.n	800992a <__libc_init_array+0x2e>
 800991e:	bd70      	pop	{r4, r5, r6, pc}
 8009920:	f855 3b04 	ldr.w	r3, [r5], #4
 8009924:	4798      	blx	r3
 8009926:	3601      	adds	r6, #1
 8009928:	e7ee      	b.n	8009908 <__libc_init_array+0xc>
 800992a:	f855 3b04 	ldr.w	r3, [r5], #4
 800992e:	4798      	blx	r3
 8009930:	3601      	adds	r6, #1
 8009932:	e7f2      	b.n	800991a <__libc_init_array+0x1e>
 8009934:	0800cb14 	.word	0x0800cb14
 8009938:	0800cb14 	.word	0x0800cb14
 800993c:	0800cb14 	.word	0x0800cb14
 8009940:	0800cb18 	.word	0x0800cb18

08009944 <memcpy>:
 8009944:	440a      	add	r2, r1
 8009946:	4291      	cmp	r1, r2
 8009948:	f100 33ff 	add.w	r3, r0, #4294967295
 800994c:	d100      	bne.n	8009950 <memcpy+0xc>
 800994e:	4770      	bx	lr
 8009950:	b510      	push	{r4, lr}
 8009952:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009956:	f803 4f01 	strb.w	r4, [r3, #1]!
 800995a:	4291      	cmp	r1, r2
 800995c:	d1f9      	bne.n	8009952 <memcpy+0xe>
 800995e:	bd10      	pop	{r4, pc}

08009960 <memset>:
 8009960:	4402      	add	r2, r0
 8009962:	4603      	mov	r3, r0
 8009964:	4293      	cmp	r3, r2
 8009966:	d100      	bne.n	800996a <memset+0xa>
 8009968:	4770      	bx	lr
 800996a:	f803 1b01 	strb.w	r1, [r3], #1
 800996e:	e7f9      	b.n	8009964 <memset+0x4>

08009970 <__cvt>:
 8009970:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009974:	ec55 4b10 	vmov	r4, r5, d0
 8009978:	2d00      	cmp	r5, #0
 800997a:	460e      	mov	r6, r1
 800997c:	4619      	mov	r1, r3
 800997e:	462b      	mov	r3, r5
 8009980:	bfbb      	ittet	lt
 8009982:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009986:	461d      	movlt	r5, r3
 8009988:	2300      	movge	r3, #0
 800998a:	232d      	movlt	r3, #45	; 0x2d
 800998c:	700b      	strb	r3, [r1, #0]
 800998e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009990:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009994:	4691      	mov	r9, r2
 8009996:	f023 0820 	bic.w	r8, r3, #32
 800999a:	bfbc      	itt	lt
 800999c:	4622      	movlt	r2, r4
 800999e:	4614      	movlt	r4, r2
 80099a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80099a4:	d005      	beq.n	80099b2 <__cvt+0x42>
 80099a6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80099aa:	d100      	bne.n	80099ae <__cvt+0x3e>
 80099ac:	3601      	adds	r6, #1
 80099ae:	2102      	movs	r1, #2
 80099b0:	e000      	b.n	80099b4 <__cvt+0x44>
 80099b2:	2103      	movs	r1, #3
 80099b4:	ab03      	add	r3, sp, #12
 80099b6:	9301      	str	r3, [sp, #4]
 80099b8:	ab02      	add	r3, sp, #8
 80099ba:	9300      	str	r3, [sp, #0]
 80099bc:	ec45 4b10 	vmov	d0, r4, r5
 80099c0:	4653      	mov	r3, sl
 80099c2:	4632      	mov	r2, r6
 80099c4:	f000 fcec 	bl	800a3a0 <_dtoa_r>
 80099c8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80099cc:	4607      	mov	r7, r0
 80099ce:	d102      	bne.n	80099d6 <__cvt+0x66>
 80099d0:	f019 0f01 	tst.w	r9, #1
 80099d4:	d022      	beq.n	8009a1c <__cvt+0xac>
 80099d6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80099da:	eb07 0906 	add.w	r9, r7, r6
 80099de:	d110      	bne.n	8009a02 <__cvt+0x92>
 80099e0:	783b      	ldrb	r3, [r7, #0]
 80099e2:	2b30      	cmp	r3, #48	; 0x30
 80099e4:	d10a      	bne.n	80099fc <__cvt+0x8c>
 80099e6:	2200      	movs	r2, #0
 80099e8:	2300      	movs	r3, #0
 80099ea:	4620      	mov	r0, r4
 80099ec:	4629      	mov	r1, r5
 80099ee:	f7f7 f873 	bl	8000ad8 <__aeabi_dcmpeq>
 80099f2:	b918      	cbnz	r0, 80099fc <__cvt+0x8c>
 80099f4:	f1c6 0601 	rsb	r6, r6, #1
 80099f8:	f8ca 6000 	str.w	r6, [sl]
 80099fc:	f8da 3000 	ldr.w	r3, [sl]
 8009a00:	4499      	add	r9, r3
 8009a02:	2200      	movs	r2, #0
 8009a04:	2300      	movs	r3, #0
 8009a06:	4620      	mov	r0, r4
 8009a08:	4629      	mov	r1, r5
 8009a0a:	f7f7 f865 	bl	8000ad8 <__aeabi_dcmpeq>
 8009a0e:	b108      	cbz	r0, 8009a14 <__cvt+0xa4>
 8009a10:	f8cd 900c 	str.w	r9, [sp, #12]
 8009a14:	2230      	movs	r2, #48	; 0x30
 8009a16:	9b03      	ldr	r3, [sp, #12]
 8009a18:	454b      	cmp	r3, r9
 8009a1a:	d307      	bcc.n	8009a2c <__cvt+0xbc>
 8009a1c:	9b03      	ldr	r3, [sp, #12]
 8009a1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a20:	1bdb      	subs	r3, r3, r7
 8009a22:	4638      	mov	r0, r7
 8009a24:	6013      	str	r3, [r2, #0]
 8009a26:	b004      	add	sp, #16
 8009a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a2c:	1c59      	adds	r1, r3, #1
 8009a2e:	9103      	str	r1, [sp, #12]
 8009a30:	701a      	strb	r2, [r3, #0]
 8009a32:	e7f0      	b.n	8009a16 <__cvt+0xa6>

08009a34 <__exponent>:
 8009a34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a36:	4603      	mov	r3, r0
 8009a38:	2900      	cmp	r1, #0
 8009a3a:	bfb8      	it	lt
 8009a3c:	4249      	neglt	r1, r1
 8009a3e:	f803 2b02 	strb.w	r2, [r3], #2
 8009a42:	bfb4      	ite	lt
 8009a44:	222d      	movlt	r2, #45	; 0x2d
 8009a46:	222b      	movge	r2, #43	; 0x2b
 8009a48:	2909      	cmp	r1, #9
 8009a4a:	7042      	strb	r2, [r0, #1]
 8009a4c:	dd2a      	ble.n	8009aa4 <__exponent+0x70>
 8009a4e:	f10d 0407 	add.w	r4, sp, #7
 8009a52:	46a4      	mov	ip, r4
 8009a54:	270a      	movs	r7, #10
 8009a56:	46a6      	mov	lr, r4
 8009a58:	460a      	mov	r2, r1
 8009a5a:	fb91 f6f7 	sdiv	r6, r1, r7
 8009a5e:	fb07 1516 	mls	r5, r7, r6, r1
 8009a62:	3530      	adds	r5, #48	; 0x30
 8009a64:	2a63      	cmp	r2, #99	; 0x63
 8009a66:	f104 34ff 	add.w	r4, r4, #4294967295
 8009a6a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009a6e:	4631      	mov	r1, r6
 8009a70:	dcf1      	bgt.n	8009a56 <__exponent+0x22>
 8009a72:	3130      	adds	r1, #48	; 0x30
 8009a74:	f1ae 0502 	sub.w	r5, lr, #2
 8009a78:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009a7c:	1c44      	adds	r4, r0, #1
 8009a7e:	4629      	mov	r1, r5
 8009a80:	4561      	cmp	r1, ip
 8009a82:	d30a      	bcc.n	8009a9a <__exponent+0x66>
 8009a84:	f10d 0209 	add.w	r2, sp, #9
 8009a88:	eba2 020e 	sub.w	r2, r2, lr
 8009a8c:	4565      	cmp	r5, ip
 8009a8e:	bf88      	it	hi
 8009a90:	2200      	movhi	r2, #0
 8009a92:	4413      	add	r3, r2
 8009a94:	1a18      	subs	r0, r3, r0
 8009a96:	b003      	add	sp, #12
 8009a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a9e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009aa2:	e7ed      	b.n	8009a80 <__exponent+0x4c>
 8009aa4:	2330      	movs	r3, #48	; 0x30
 8009aa6:	3130      	adds	r1, #48	; 0x30
 8009aa8:	7083      	strb	r3, [r0, #2]
 8009aaa:	70c1      	strb	r1, [r0, #3]
 8009aac:	1d03      	adds	r3, r0, #4
 8009aae:	e7f1      	b.n	8009a94 <__exponent+0x60>

08009ab0 <_printf_float>:
 8009ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ab4:	ed2d 8b02 	vpush	{d8}
 8009ab8:	b08d      	sub	sp, #52	; 0x34
 8009aba:	460c      	mov	r4, r1
 8009abc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009ac0:	4616      	mov	r6, r2
 8009ac2:	461f      	mov	r7, r3
 8009ac4:	4605      	mov	r5, r0
 8009ac6:	f001 fb4d 	bl	800b164 <_localeconv_r>
 8009aca:	f8d0 a000 	ldr.w	sl, [r0]
 8009ace:	4650      	mov	r0, sl
 8009ad0:	f7f6 fb86 	bl	80001e0 <strlen>
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	930a      	str	r3, [sp, #40]	; 0x28
 8009ad8:	6823      	ldr	r3, [r4, #0]
 8009ada:	9305      	str	r3, [sp, #20]
 8009adc:	f8d8 3000 	ldr.w	r3, [r8]
 8009ae0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009ae4:	3307      	adds	r3, #7
 8009ae6:	f023 0307 	bic.w	r3, r3, #7
 8009aea:	f103 0208 	add.w	r2, r3, #8
 8009aee:	f8c8 2000 	str.w	r2, [r8]
 8009af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009afa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009afe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009b02:	9307      	str	r3, [sp, #28]
 8009b04:	f8cd 8018 	str.w	r8, [sp, #24]
 8009b08:	ee08 0a10 	vmov	s16, r0
 8009b0c:	4b9f      	ldr	r3, [pc, #636]	; (8009d8c <_printf_float+0x2dc>)
 8009b0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b12:	f04f 32ff 	mov.w	r2, #4294967295
 8009b16:	f7f7 f811 	bl	8000b3c <__aeabi_dcmpun>
 8009b1a:	bb88      	cbnz	r0, 8009b80 <_printf_float+0xd0>
 8009b1c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b20:	4b9a      	ldr	r3, [pc, #616]	; (8009d8c <_printf_float+0x2dc>)
 8009b22:	f04f 32ff 	mov.w	r2, #4294967295
 8009b26:	f7f6 ffeb 	bl	8000b00 <__aeabi_dcmple>
 8009b2a:	bb48      	cbnz	r0, 8009b80 <_printf_float+0xd0>
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	2300      	movs	r3, #0
 8009b30:	4640      	mov	r0, r8
 8009b32:	4649      	mov	r1, r9
 8009b34:	f7f6 ffda 	bl	8000aec <__aeabi_dcmplt>
 8009b38:	b110      	cbz	r0, 8009b40 <_printf_float+0x90>
 8009b3a:	232d      	movs	r3, #45	; 0x2d
 8009b3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b40:	4b93      	ldr	r3, [pc, #588]	; (8009d90 <_printf_float+0x2e0>)
 8009b42:	4894      	ldr	r0, [pc, #592]	; (8009d94 <_printf_float+0x2e4>)
 8009b44:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009b48:	bf94      	ite	ls
 8009b4a:	4698      	movls	r8, r3
 8009b4c:	4680      	movhi	r8, r0
 8009b4e:	2303      	movs	r3, #3
 8009b50:	6123      	str	r3, [r4, #16]
 8009b52:	9b05      	ldr	r3, [sp, #20]
 8009b54:	f023 0204 	bic.w	r2, r3, #4
 8009b58:	6022      	str	r2, [r4, #0]
 8009b5a:	f04f 0900 	mov.w	r9, #0
 8009b5e:	9700      	str	r7, [sp, #0]
 8009b60:	4633      	mov	r3, r6
 8009b62:	aa0b      	add	r2, sp, #44	; 0x2c
 8009b64:	4621      	mov	r1, r4
 8009b66:	4628      	mov	r0, r5
 8009b68:	f000 f9d8 	bl	8009f1c <_printf_common>
 8009b6c:	3001      	adds	r0, #1
 8009b6e:	f040 8090 	bne.w	8009c92 <_printf_float+0x1e2>
 8009b72:	f04f 30ff 	mov.w	r0, #4294967295
 8009b76:	b00d      	add	sp, #52	; 0x34
 8009b78:	ecbd 8b02 	vpop	{d8}
 8009b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b80:	4642      	mov	r2, r8
 8009b82:	464b      	mov	r3, r9
 8009b84:	4640      	mov	r0, r8
 8009b86:	4649      	mov	r1, r9
 8009b88:	f7f6 ffd8 	bl	8000b3c <__aeabi_dcmpun>
 8009b8c:	b140      	cbz	r0, 8009ba0 <_printf_float+0xf0>
 8009b8e:	464b      	mov	r3, r9
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	bfbc      	itt	lt
 8009b94:	232d      	movlt	r3, #45	; 0x2d
 8009b96:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009b9a:	487f      	ldr	r0, [pc, #508]	; (8009d98 <_printf_float+0x2e8>)
 8009b9c:	4b7f      	ldr	r3, [pc, #508]	; (8009d9c <_printf_float+0x2ec>)
 8009b9e:	e7d1      	b.n	8009b44 <_printf_float+0x94>
 8009ba0:	6863      	ldr	r3, [r4, #4]
 8009ba2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009ba6:	9206      	str	r2, [sp, #24]
 8009ba8:	1c5a      	adds	r2, r3, #1
 8009baa:	d13f      	bne.n	8009c2c <_printf_float+0x17c>
 8009bac:	2306      	movs	r3, #6
 8009bae:	6063      	str	r3, [r4, #4]
 8009bb0:	9b05      	ldr	r3, [sp, #20]
 8009bb2:	6861      	ldr	r1, [r4, #4]
 8009bb4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009bb8:	2300      	movs	r3, #0
 8009bba:	9303      	str	r3, [sp, #12]
 8009bbc:	ab0a      	add	r3, sp, #40	; 0x28
 8009bbe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009bc2:	ab09      	add	r3, sp, #36	; 0x24
 8009bc4:	ec49 8b10 	vmov	d0, r8, r9
 8009bc8:	9300      	str	r3, [sp, #0]
 8009bca:	6022      	str	r2, [r4, #0]
 8009bcc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009bd0:	4628      	mov	r0, r5
 8009bd2:	f7ff fecd 	bl	8009970 <__cvt>
 8009bd6:	9b06      	ldr	r3, [sp, #24]
 8009bd8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009bda:	2b47      	cmp	r3, #71	; 0x47
 8009bdc:	4680      	mov	r8, r0
 8009bde:	d108      	bne.n	8009bf2 <_printf_float+0x142>
 8009be0:	1cc8      	adds	r0, r1, #3
 8009be2:	db02      	blt.n	8009bea <_printf_float+0x13a>
 8009be4:	6863      	ldr	r3, [r4, #4]
 8009be6:	4299      	cmp	r1, r3
 8009be8:	dd41      	ble.n	8009c6e <_printf_float+0x1be>
 8009bea:	f1ab 0b02 	sub.w	fp, fp, #2
 8009bee:	fa5f fb8b 	uxtb.w	fp, fp
 8009bf2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009bf6:	d820      	bhi.n	8009c3a <_printf_float+0x18a>
 8009bf8:	3901      	subs	r1, #1
 8009bfa:	465a      	mov	r2, fp
 8009bfc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009c00:	9109      	str	r1, [sp, #36]	; 0x24
 8009c02:	f7ff ff17 	bl	8009a34 <__exponent>
 8009c06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c08:	1813      	adds	r3, r2, r0
 8009c0a:	2a01      	cmp	r2, #1
 8009c0c:	4681      	mov	r9, r0
 8009c0e:	6123      	str	r3, [r4, #16]
 8009c10:	dc02      	bgt.n	8009c18 <_printf_float+0x168>
 8009c12:	6822      	ldr	r2, [r4, #0]
 8009c14:	07d2      	lsls	r2, r2, #31
 8009c16:	d501      	bpl.n	8009c1c <_printf_float+0x16c>
 8009c18:	3301      	adds	r3, #1
 8009c1a:	6123      	str	r3, [r4, #16]
 8009c1c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d09c      	beq.n	8009b5e <_printf_float+0xae>
 8009c24:	232d      	movs	r3, #45	; 0x2d
 8009c26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c2a:	e798      	b.n	8009b5e <_printf_float+0xae>
 8009c2c:	9a06      	ldr	r2, [sp, #24]
 8009c2e:	2a47      	cmp	r2, #71	; 0x47
 8009c30:	d1be      	bne.n	8009bb0 <_printf_float+0x100>
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d1bc      	bne.n	8009bb0 <_printf_float+0x100>
 8009c36:	2301      	movs	r3, #1
 8009c38:	e7b9      	b.n	8009bae <_printf_float+0xfe>
 8009c3a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009c3e:	d118      	bne.n	8009c72 <_printf_float+0x1c2>
 8009c40:	2900      	cmp	r1, #0
 8009c42:	6863      	ldr	r3, [r4, #4]
 8009c44:	dd0b      	ble.n	8009c5e <_printf_float+0x1ae>
 8009c46:	6121      	str	r1, [r4, #16]
 8009c48:	b913      	cbnz	r3, 8009c50 <_printf_float+0x1a0>
 8009c4a:	6822      	ldr	r2, [r4, #0]
 8009c4c:	07d0      	lsls	r0, r2, #31
 8009c4e:	d502      	bpl.n	8009c56 <_printf_float+0x1a6>
 8009c50:	3301      	adds	r3, #1
 8009c52:	440b      	add	r3, r1
 8009c54:	6123      	str	r3, [r4, #16]
 8009c56:	65a1      	str	r1, [r4, #88]	; 0x58
 8009c58:	f04f 0900 	mov.w	r9, #0
 8009c5c:	e7de      	b.n	8009c1c <_printf_float+0x16c>
 8009c5e:	b913      	cbnz	r3, 8009c66 <_printf_float+0x1b6>
 8009c60:	6822      	ldr	r2, [r4, #0]
 8009c62:	07d2      	lsls	r2, r2, #31
 8009c64:	d501      	bpl.n	8009c6a <_printf_float+0x1ba>
 8009c66:	3302      	adds	r3, #2
 8009c68:	e7f4      	b.n	8009c54 <_printf_float+0x1a4>
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	e7f2      	b.n	8009c54 <_printf_float+0x1a4>
 8009c6e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009c72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c74:	4299      	cmp	r1, r3
 8009c76:	db05      	blt.n	8009c84 <_printf_float+0x1d4>
 8009c78:	6823      	ldr	r3, [r4, #0]
 8009c7a:	6121      	str	r1, [r4, #16]
 8009c7c:	07d8      	lsls	r0, r3, #31
 8009c7e:	d5ea      	bpl.n	8009c56 <_printf_float+0x1a6>
 8009c80:	1c4b      	adds	r3, r1, #1
 8009c82:	e7e7      	b.n	8009c54 <_printf_float+0x1a4>
 8009c84:	2900      	cmp	r1, #0
 8009c86:	bfd4      	ite	le
 8009c88:	f1c1 0202 	rsble	r2, r1, #2
 8009c8c:	2201      	movgt	r2, #1
 8009c8e:	4413      	add	r3, r2
 8009c90:	e7e0      	b.n	8009c54 <_printf_float+0x1a4>
 8009c92:	6823      	ldr	r3, [r4, #0]
 8009c94:	055a      	lsls	r2, r3, #21
 8009c96:	d407      	bmi.n	8009ca8 <_printf_float+0x1f8>
 8009c98:	6923      	ldr	r3, [r4, #16]
 8009c9a:	4642      	mov	r2, r8
 8009c9c:	4631      	mov	r1, r6
 8009c9e:	4628      	mov	r0, r5
 8009ca0:	47b8      	blx	r7
 8009ca2:	3001      	adds	r0, #1
 8009ca4:	d12c      	bne.n	8009d00 <_printf_float+0x250>
 8009ca6:	e764      	b.n	8009b72 <_printf_float+0xc2>
 8009ca8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009cac:	f240 80e0 	bls.w	8009e70 <_printf_float+0x3c0>
 8009cb0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	f7f6 ff0e 	bl	8000ad8 <__aeabi_dcmpeq>
 8009cbc:	2800      	cmp	r0, #0
 8009cbe:	d034      	beq.n	8009d2a <_printf_float+0x27a>
 8009cc0:	4a37      	ldr	r2, [pc, #220]	; (8009da0 <_printf_float+0x2f0>)
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	4631      	mov	r1, r6
 8009cc6:	4628      	mov	r0, r5
 8009cc8:	47b8      	blx	r7
 8009cca:	3001      	adds	r0, #1
 8009ccc:	f43f af51 	beq.w	8009b72 <_printf_float+0xc2>
 8009cd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009cd4:	429a      	cmp	r2, r3
 8009cd6:	db02      	blt.n	8009cde <_printf_float+0x22e>
 8009cd8:	6823      	ldr	r3, [r4, #0]
 8009cda:	07d8      	lsls	r0, r3, #31
 8009cdc:	d510      	bpl.n	8009d00 <_printf_float+0x250>
 8009cde:	ee18 3a10 	vmov	r3, s16
 8009ce2:	4652      	mov	r2, sl
 8009ce4:	4631      	mov	r1, r6
 8009ce6:	4628      	mov	r0, r5
 8009ce8:	47b8      	blx	r7
 8009cea:	3001      	adds	r0, #1
 8009cec:	f43f af41 	beq.w	8009b72 <_printf_float+0xc2>
 8009cf0:	f04f 0800 	mov.w	r8, #0
 8009cf4:	f104 091a 	add.w	r9, r4, #26
 8009cf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cfa:	3b01      	subs	r3, #1
 8009cfc:	4543      	cmp	r3, r8
 8009cfe:	dc09      	bgt.n	8009d14 <_printf_float+0x264>
 8009d00:	6823      	ldr	r3, [r4, #0]
 8009d02:	079b      	lsls	r3, r3, #30
 8009d04:	f100 8105 	bmi.w	8009f12 <_printf_float+0x462>
 8009d08:	68e0      	ldr	r0, [r4, #12]
 8009d0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d0c:	4298      	cmp	r0, r3
 8009d0e:	bfb8      	it	lt
 8009d10:	4618      	movlt	r0, r3
 8009d12:	e730      	b.n	8009b76 <_printf_float+0xc6>
 8009d14:	2301      	movs	r3, #1
 8009d16:	464a      	mov	r2, r9
 8009d18:	4631      	mov	r1, r6
 8009d1a:	4628      	mov	r0, r5
 8009d1c:	47b8      	blx	r7
 8009d1e:	3001      	adds	r0, #1
 8009d20:	f43f af27 	beq.w	8009b72 <_printf_float+0xc2>
 8009d24:	f108 0801 	add.w	r8, r8, #1
 8009d28:	e7e6      	b.n	8009cf8 <_printf_float+0x248>
 8009d2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	dc39      	bgt.n	8009da4 <_printf_float+0x2f4>
 8009d30:	4a1b      	ldr	r2, [pc, #108]	; (8009da0 <_printf_float+0x2f0>)
 8009d32:	2301      	movs	r3, #1
 8009d34:	4631      	mov	r1, r6
 8009d36:	4628      	mov	r0, r5
 8009d38:	47b8      	blx	r7
 8009d3a:	3001      	adds	r0, #1
 8009d3c:	f43f af19 	beq.w	8009b72 <_printf_float+0xc2>
 8009d40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d44:	4313      	orrs	r3, r2
 8009d46:	d102      	bne.n	8009d4e <_printf_float+0x29e>
 8009d48:	6823      	ldr	r3, [r4, #0]
 8009d4a:	07d9      	lsls	r1, r3, #31
 8009d4c:	d5d8      	bpl.n	8009d00 <_printf_float+0x250>
 8009d4e:	ee18 3a10 	vmov	r3, s16
 8009d52:	4652      	mov	r2, sl
 8009d54:	4631      	mov	r1, r6
 8009d56:	4628      	mov	r0, r5
 8009d58:	47b8      	blx	r7
 8009d5a:	3001      	adds	r0, #1
 8009d5c:	f43f af09 	beq.w	8009b72 <_printf_float+0xc2>
 8009d60:	f04f 0900 	mov.w	r9, #0
 8009d64:	f104 0a1a 	add.w	sl, r4, #26
 8009d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d6a:	425b      	negs	r3, r3
 8009d6c:	454b      	cmp	r3, r9
 8009d6e:	dc01      	bgt.n	8009d74 <_printf_float+0x2c4>
 8009d70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d72:	e792      	b.n	8009c9a <_printf_float+0x1ea>
 8009d74:	2301      	movs	r3, #1
 8009d76:	4652      	mov	r2, sl
 8009d78:	4631      	mov	r1, r6
 8009d7a:	4628      	mov	r0, r5
 8009d7c:	47b8      	blx	r7
 8009d7e:	3001      	adds	r0, #1
 8009d80:	f43f aef7 	beq.w	8009b72 <_printf_float+0xc2>
 8009d84:	f109 0901 	add.w	r9, r9, #1
 8009d88:	e7ee      	b.n	8009d68 <_printf_float+0x2b8>
 8009d8a:	bf00      	nop
 8009d8c:	7fefffff 	.word	0x7fefffff
 8009d90:	0800c730 	.word	0x0800c730
 8009d94:	0800c734 	.word	0x0800c734
 8009d98:	0800c73c 	.word	0x0800c73c
 8009d9c:	0800c738 	.word	0x0800c738
 8009da0:	0800c740 	.word	0x0800c740
 8009da4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009da6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009da8:	429a      	cmp	r2, r3
 8009daa:	bfa8      	it	ge
 8009dac:	461a      	movge	r2, r3
 8009dae:	2a00      	cmp	r2, #0
 8009db0:	4691      	mov	r9, r2
 8009db2:	dc37      	bgt.n	8009e24 <_printf_float+0x374>
 8009db4:	f04f 0b00 	mov.w	fp, #0
 8009db8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009dbc:	f104 021a 	add.w	r2, r4, #26
 8009dc0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009dc2:	9305      	str	r3, [sp, #20]
 8009dc4:	eba3 0309 	sub.w	r3, r3, r9
 8009dc8:	455b      	cmp	r3, fp
 8009dca:	dc33      	bgt.n	8009e34 <_printf_float+0x384>
 8009dcc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	db3b      	blt.n	8009e4c <_printf_float+0x39c>
 8009dd4:	6823      	ldr	r3, [r4, #0]
 8009dd6:	07da      	lsls	r2, r3, #31
 8009dd8:	d438      	bmi.n	8009e4c <_printf_float+0x39c>
 8009dda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ddc:	9b05      	ldr	r3, [sp, #20]
 8009dde:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009de0:	1ad3      	subs	r3, r2, r3
 8009de2:	eba2 0901 	sub.w	r9, r2, r1
 8009de6:	4599      	cmp	r9, r3
 8009de8:	bfa8      	it	ge
 8009dea:	4699      	movge	r9, r3
 8009dec:	f1b9 0f00 	cmp.w	r9, #0
 8009df0:	dc35      	bgt.n	8009e5e <_printf_float+0x3ae>
 8009df2:	f04f 0800 	mov.w	r8, #0
 8009df6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009dfa:	f104 0a1a 	add.w	sl, r4, #26
 8009dfe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e02:	1a9b      	subs	r3, r3, r2
 8009e04:	eba3 0309 	sub.w	r3, r3, r9
 8009e08:	4543      	cmp	r3, r8
 8009e0a:	f77f af79 	ble.w	8009d00 <_printf_float+0x250>
 8009e0e:	2301      	movs	r3, #1
 8009e10:	4652      	mov	r2, sl
 8009e12:	4631      	mov	r1, r6
 8009e14:	4628      	mov	r0, r5
 8009e16:	47b8      	blx	r7
 8009e18:	3001      	adds	r0, #1
 8009e1a:	f43f aeaa 	beq.w	8009b72 <_printf_float+0xc2>
 8009e1e:	f108 0801 	add.w	r8, r8, #1
 8009e22:	e7ec      	b.n	8009dfe <_printf_float+0x34e>
 8009e24:	4613      	mov	r3, r2
 8009e26:	4631      	mov	r1, r6
 8009e28:	4642      	mov	r2, r8
 8009e2a:	4628      	mov	r0, r5
 8009e2c:	47b8      	blx	r7
 8009e2e:	3001      	adds	r0, #1
 8009e30:	d1c0      	bne.n	8009db4 <_printf_float+0x304>
 8009e32:	e69e      	b.n	8009b72 <_printf_float+0xc2>
 8009e34:	2301      	movs	r3, #1
 8009e36:	4631      	mov	r1, r6
 8009e38:	4628      	mov	r0, r5
 8009e3a:	9205      	str	r2, [sp, #20]
 8009e3c:	47b8      	blx	r7
 8009e3e:	3001      	adds	r0, #1
 8009e40:	f43f ae97 	beq.w	8009b72 <_printf_float+0xc2>
 8009e44:	9a05      	ldr	r2, [sp, #20]
 8009e46:	f10b 0b01 	add.w	fp, fp, #1
 8009e4a:	e7b9      	b.n	8009dc0 <_printf_float+0x310>
 8009e4c:	ee18 3a10 	vmov	r3, s16
 8009e50:	4652      	mov	r2, sl
 8009e52:	4631      	mov	r1, r6
 8009e54:	4628      	mov	r0, r5
 8009e56:	47b8      	blx	r7
 8009e58:	3001      	adds	r0, #1
 8009e5a:	d1be      	bne.n	8009dda <_printf_float+0x32a>
 8009e5c:	e689      	b.n	8009b72 <_printf_float+0xc2>
 8009e5e:	9a05      	ldr	r2, [sp, #20]
 8009e60:	464b      	mov	r3, r9
 8009e62:	4442      	add	r2, r8
 8009e64:	4631      	mov	r1, r6
 8009e66:	4628      	mov	r0, r5
 8009e68:	47b8      	blx	r7
 8009e6a:	3001      	adds	r0, #1
 8009e6c:	d1c1      	bne.n	8009df2 <_printf_float+0x342>
 8009e6e:	e680      	b.n	8009b72 <_printf_float+0xc2>
 8009e70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e72:	2a01      	cmp	r2, #1
 8009e74:	dc01      	bgt.n	8009e7a <_printf_float+0x3ca>
 8009e76:	07db      	lsls	r3, r3, #31
 8009e78:	d538      	bpl.n	8009eec <_printf_float+0x43c>
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	4642      	mov	r2, r8
 8009e7e:	4631      	mov	r1, r6
 8009e80:	4628      	mov	r0, r5
 8009e82:	47b8      	blx	r7
 8009e84:	3001      	adds	r0, #1
 8009e86:	f43f ae74 	beq.w	8009b72 <_printf_float+0xc2>
 8009e8a:	ee18 3a10 	vmov	r3, s16
 8009e8e:	4652      	mov	r2, sl
 8009e90:	4631      	mov	r1, r6
 8009e92:	4628      	mov	r0, r5
 8009e94:	47b8      	blx	r7
 8009e96:	3001      	adds	r0, #1
 8009e98:	f43f ae6b 	beq.w	8009b72 <_printf_float+0xc2>
 8009e9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	f7f6 fe18 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ea8:	b9d8      	cbnz	r0, 8009ee2 <_printf_float+0x432>
 8009eaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009eac:	f108 0201 	add.w	r2, r8, #1
 8009eb0:	3b01      	subs	r3, #1
 8009eb2:	4631      	mov	r1, r6
 8009eb4:	4628      	mov	r0, r5
 8009eb6:	47b8      	blx	r7
 8009eb8:	3001      	adds	r0, #1
 8009eba:	d10e      	bne.n	8009eda <_printf_float+0x42a>
 8009ebc:	e659      	b.n	8009b72 <_printf_float+0xc2>
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	4652      	mov	r2, sl
 8009ec2:	4631      	mov	r1, r6
 8009ec4:	4628      	mov	r0, r5
 8009ec6:	47b8      	blx	r7
 8009ec8:	3001      	adds	r0, #1
 8009eca:	f43f ae52 	beq.w	8009b72 <_printf_float+0xc2>
 8009ece:	f108 0801 	add.w	r8, r8, #1
 8009ed2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ed4:	3b01      	subs	r3, #1
 8009ed6:	4543      	cmp	r3, r8
 8009ed8:	dcf1      	bgt.n	8009ebe <_printf_float+0x40e>
 8009eda:	464b      	mov	r3, r9
 8009edc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009ee0:	e6dc      	b.n	8009c9c <_printf_float+0x1ec>
 8009ee2:	f04f 0800 	mov.w	r8, #0
 8009ee6:	f104 0a1a 	add.w	sl, r4, #26
 8009eea:	e7f2      	b.n	8009ed2 <_printf_float+0x422>
 8009eec:	2301      	movs	r3, #1
 8009eee:	4642      	mov	r2, r8
 8009ef0:	e7df      	b.n	8009eb2 <_printf_float+0x402>
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	464a      	mov	r2, r9
 8009ef6:	4631      	mov	r1, r6
 8009ef8:	4628      	mov	r0, r5
 8009efa:	47b8      	blx	r7
 8009efc:	3001      	adds	r0, #1
 8009efe:	f43f ae38 	beq.w	8009b72 <_printf_float+0xc2>
 8009f02:	f108 0801 	add.w	r8, r8, #1
 8009f06:	68e3      	ldr	r3, [r4, #12]
 8009f08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009f0a:	1a5b      	subs	r3, r3, r1
 8009f0c:	4543      	cmp	r3, r8
 8009f0e:	dcf0      	bgt.n	8009ef2 <_printf_float+0x442>
 8009f10:	e6fa      	b.n	8009d08 <_printf_float+0x258>
 8009f12:	f04f 0800 	mov.w	r8, #0
 8009f16:	f104 0919 	add.w	r9, r4, #25
 8009f1a:	e7f4      	b.n	8009f06 <_printf_float+0x456>

08009f1c <_printf_common>:
 8009f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f20:	4616      	mov	r6, r2
 8009f22:	4699      	mov	r9, r3
 8009f24:	688a      	ldr	r2, [r1, #8]
 8009f26:	690b      	ldr	r3, [r1, #16]
 8009f28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	bfb8      	it	lt
 8009f30:	4613      	movlt	r3, r2
 8009f32:	6033      	str	r3, [r6, #0]
 8009f34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f38:	4607      	mov	r7, r0
 8009f3a:	460c      	mov	r4, r1
 8009f3c:	b10a      	cbz	r2, 8009f42 <_printf_common+0x26>
 8009f3e:	3301      	adds	r3, #1
 8009f40:	6033      	str	r3, [r6, #0]
 8009f42:	6823      	ldr	r3, [r4, #0]
 8009f44:	0699      	lsls	r1, r3, #26
 8009f46:	bf42      	ittt	mi
 8009f48:	6833      	ldrmi	r3, [r6, #0]
 8009f4a:	3302      	addmi	r3, #2
 8009f4c:	6033      	strmi	r3, [r6, #0]
 8009f4e:	6825      	ldr	r5, [r4, #0]
 8009f50:	f015 0506 	ands.w	r5, r5, #6
 8009f54:	d106      	bne.n	8009f64 <_printf_common+0x48>
 8009f56:	f104 0a19 	add.w	sl, r4, #25
 8009f5a:	68e3      	ldr	r3, [r4, #12]
 8009f5c:	6832      	ldr	r2, [r6, #0]
 8009f5e:	1a9b      	subs	r3, r3, r2
 8009f60:	42ab      	cmp	r3, r5
 8009f62:	dc26      	bgt.n	8009fb2 <_printf_common+0x96>
 8009f64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009f68:	1e13      	subs	r3, r2, #0
 8009f6a:	6822      	ldr	r2, [r4, #0]
 8009f6c:	bf18      	it	ne
 8009f6e:	2301      	movne	r3, #1
 8009f70:	0692      	lsls	r2, r2, #26
 8009f72:	d42b      	bmi.n	8009fcc <_printf_common+0xb0>
 8009f74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f78:	4649      	mov	r1, r9
 8009f7a:	4638      	mov	r0, r7
 8009f7c:	47c0      	blx	r8
 8009f7e:	3001      	adds	r0, #1
 8009f80:	d01e      	beq.n	8009fc0 <_printf_common+0xa4>
 8009f82:	6823      	ldr	r3, [r4, #0]
 8009f84:	68e5      	ldr	r5, [r4, #12]
 8009f86:	6832      	ldr	r2, [r6, #0]
 8009f88:	f003 0306 	and.w	r3, r3, #6
 8009f8c:	2b04      	cmp	r3, #4
 8009f8e:	bf08      	it	eq
 8009f90:	1aad      	subeq	r5, r5, r2
 8009f92:	68a3      	ldr	r3, [r4, #8]
 8009f94:	6922      	ldr	r2, [r4, #16]
 8009f96:	bf0c      	ite	eq
 8009f98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f9c:	2500      	movne	r5, #0
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	bfc4      	itt	gt
 8009fa2:	1a9b      	subgt	r3, r3, r2
 8009fa4:	18ed      	addgt	r5, r5, r3
 8009fa6:	2600      	movs	r6, #0
 8009fa8:	341a      	adds	r4, #26
 8009faa:	42b5      	cmp	r5, r6
 8009fac:	d11a      	bne.n	8009fe4 <_printf_common+0xc8>
 8009fae:	2000      	movs	r0, #0
 8009fb0:	e008      	b.n	8009fc4 <_printf_common+0xa8>
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	4652      	mov	r2, sl
 8009fb6:	4649      	mov	r1, r9
 8009fb8:	4638      	mov	r0, r7
 8009fba:	47c0      	blx	r8
 8009fbc:	3001      	adds	r0, #1
 8009fbe:	d103      	bne.n	8009fc8 <_printf_common+0xac>
 8009fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8009fc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fc8:	3501      	adds	r5, #1
 8009fca:	e7c6      	b.n	8009f5a <_printf_common+0x3e>
 8009fcc:	18e1      	adds	r1, r4, r3
 8009fce:	1c5a      	adds	r2, r3, #1
 8009fd0:	2030      	movs	r0, #48	; 0x30
 8009fd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009fd6:	4422      	add	r2, r4
 8009fd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009fdc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009fe0:	3302      	adds	r3, #2
 8009fe2:	e7c7      	b.n	8009f74 <_printf_common+0x58>
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	4622      	mov	r2, r4
 8009fe8:	4649      	mov	r1, r9
 8009fea:	4638      	mov	r0, r7
 8009fec:	47c0      	blx	r8
 8009fee:	3001      	adds	r0, #1
 8009ff0:	d0e6      	beq.n	8009fc0 <_printf_common+0xa4>
 8009ff2:	3601      	adds	r6, #1
 8009ff4:	e7d9      	b.n	8009faa <_printf_common+0x8e>
	...

08009ff8 <_printf_i>:
 8009ff8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ffc:	460c      	mov	r4, r1
 8009ffe:	4691      	mov	r9, r2
 800a000:	7e27      	ldrb	r7, [r4, #24]
 800a002:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a004:	2f78      	cmp	r7, #120	; 0x78
 800a006:	4680      	mov	r8, r0
 800a008:	469a      	mov	sl, r3
 800a00a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a00e:	d807      	bhi.n	800a020 <_printf_i+0x28>
 800a010:	2f62      	cmp	r7, #98	; 0x62
 800a012:	d80a      	bhi.n	800a02a <_printf_i+0x32>
 800a014:	2f00      	cmp	r7, #0
 800a016:	f000 80d8 	beq.w	800a1ca <_printf_i+0x1d2>
 800a01a:	2f58      	cmp	r7, #88	; 0x58
 800a01c:	f000 80a3 	beq.w	800a166 <_printf_i+0x16e>
 800a020:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a024:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a028:	e03a      	b.n	800a0a0 <_printf_i+0xa8>
 800a02a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a02e:	2b15      	cmp	r3, #21
 800a030:	d8f6      	bhi.n	800a020 <_printf_i+0x28>
 800a032:	a001      	add	r0, pc, #4	; (adr r0, 800a038 <_printf_i+0x40>)
 800a034:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a038:	0800a091 	.word	0x0800a091
 800a03c:	0800a0a5 	.word	0x0800a0a5
 800a040:	0800a021 	.word	0x0800a021
 800a044:	0800a021 	.word	0x0800a021
 800a048:	0800a021 	.word	0x0800a021
 800a04c:	0800a021 	.word	0x0800a021
 800a050:	0800a0a5 	.word	0x0800a0a5
 800a054:	0800a021 	.word	0x0800a021
 800a058:	0800a021 	.word	0x0800a021
 800a05c:	0800a021 	.word	0x0800a021
 800a060:	0800a021 	.word	0x0800a021
 800a064:	0800a1b1 	.word	0x0800a1b1
 800a068:	0800a0d5 	.word	0x0800a0d5
 800a06c:	0800a193 	.word	0x0800a193
 800a070:	0800a021 	.word	0x0800a021
 800a074:	0800a021 	.word	0x0800a021
 800a078:	0800a1d3 	.word	0x0800a1d3
 800a07c:	0800a021 	.word	0x0800a021
 800a080:	0800a0d5 	.word	0x0800a0d5
 800a084:	0800a021 	.word	0x0800a021
 800a088:	0800a021 	.word	0x0800a021
 800a08c:	0800a19b 	.word	0x0800a19b
 800a090:	680b      	ldr	r3, [r1, #0]
 800a092:	1d1a      	adds	r2, r3, #4
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	600a      	str	r2, [r1, #0]
 800a098:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a09c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	e0a3      	b.n	800a1ec <_printf_i+0x1f4>
 800a0a4:	6825      	ldr	r5, [r4, #0]
 800a0a6:	6808      	ldr	r0, [r1, #0]
 800a0a8:	062e      	lsls	r6, r5, #24
 800a0aa:	f100 0304 	add.w	r3, r0, #4
 800a0ae:	d50a      	bpl.n	800a0c6 <_printf_i+0xce>
 800a0b0:	6805      	ldr	r5, [r0, #0]
 800a0b2:	600b      	str	r3, [r1, #0]
 800a0b4:	2d00      	cmp	r5, #0
 800a0b6:	da03      	bge.n	800a0c0 <_printf_i+0xc8>
 800a0b8:	232d      	movs	r3, #45	; 0x2d
 800a0ba:	426d      	negs	r5, r5
 800a0bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0c0:	485e      	ldr	r0, [pc, #376]	; (800a23c <_printf_i+0x244>)
 800a0c2:	230a      	movs	r3, #10
 800a0c4:	e019      	b.n	800a0fa <_printf_i+0x102>
 800a0c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a0ca:	6805      	ldr	r5, [r0, #0]
 800a0cc:	600b      	str	r3, [r1, #0]
 800a0ce:	bf18      	it	ne
 800a0d0:	b22d      	sxthne	r5, r5
 800a0d2:	e7ef      	b.n	800a0b4 <_printf_i+0xbc>
 800a0d4:	680b      	ldr	r3, [r1, #0]
 800a0d6:	6825      	ldr	r5, [r4, #0]
 800a0d8:	1d18      	adds	r0, r3, #4
 800a0da:	6008      	str	r0, [r1, #0]
 800a0dc:	0628      	lsls	r0, r5, #24
 800a0de:	d501      	bpl.n	800a0e4 <_printf_i+0xec>
 800a0e0:	681d      	ldr	r5, [r3, #0]
 800a0e2:	e002      	b.n	800a0ea <_printf_i+0xf2>
 800a0e4:	0669      	lsls	r1, r5, #25
 800a0e6:	d5fb      	bpl.n	800a0e0 <_printf_i+0xe8>
 800a0e8:	881d      	ldrh	r5, [r3, #0]
 800a0ea:	4854      	ldr	r0, [pc, #336]	; (800a23c <_printf_i+0x244>)
 800a0ec:	2f6f      	cmp	r7, #111	; 0x6f
 800a0ee:	bf0c      	ite	eq
 800a0f0:	2308      	moveq	r3, #8
 800a0f2:	230a      	movne	r3, #10
 800a0f4:	2100      	movs	r1, #0
 800a0f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a0fa:	6866      	ldr	r6, [r4, #4]
 800a0fc:	60a6      	str	r6, [r4, #8]
 800a0fe:	2e00      	cmp	r6, #0
 800a100:	bfa2      	ittt	ge
 800a102:	6821      	ldrge	r1, [r4, #0]
 800a104:	f021 0104 	bicge.w	r1, r1, #4
 800a108:	6021      	strge	r1, [r4, #0]
 800a10a:	b90d      	cbnz	r5, 800a110 <_printf_i+0x118>
 800a10c:	2e00      	cmp	r6, #0
 800a10e:	d04d      	beq.n	800a1ac <_printf_i+0x1b4>
 800a110:	4616      	mov	r6, r2
 800a112:	fbb5 f1f3 	udiv	r1, r5, r3
 800a116:	fb03 5711 	mls	r7, r3, r1, r5
 800a11a:	5dc7      	ldrb	r7, [r0, r7]
 800a11c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a120:	462f      	mov	r7, r5
 800a122:	42bb      	cmp	r3, r7
 800a124:	460d      	mov	r5, r1
 800a126:	d9f4      	bls.n	800a112 <_printf_i+0x11a>
 800a128:	2b08      	cmp	r3, #8
 800a12a:	d10b      	bne.n	800a144 <_printf_i+0x14c>
 800a12c:	6823      	ldr	r3, [r4, #0]
 800a12e:	07df      	lsls	r7, r3, #31
 800a130:	d508      	bpl.n	800a144 <_printf_i+0x14c>
 800a132:	6923      	ldr	r3, [r4, #16]
 800a134:	6861      	ldr	r1, [r4, #4]
 800a136:	4299      	cmp	r1, r3
 800a138:	bfde      	ittt	le
 800a13a:	2330      	movle	r3, #48	; 0x30
 800a13c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a140:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a144:	1b92      	subs	r2, r2, r6
 800a146:	6122      	str	r2, [r4, #16]
 800a148:	f8cd a000 	str.w	sl, [sp]
 800a14c:	464b      	mov	r3, r9
 800a14e:	aa03      	add	r2, sp, #12
 800a150:	4621      	mov	r1, r4
 800a152:	4640      	mov	r0, r8
 800a154:	f7ff fee2 	bl	8009f1c <_printf_common>
 800a158:	3001      	adds	r0, #1
 800a15a:	d14c      	bne.n	800a1f6 <_printf_i+0x1fe>
 800a15c:	f04f 30ff 	mov.w	r0, #4294967295
 800a160:	b004      	add	sp, #16
 800a162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a166:	4835      	ldr	r0, [pc, #212]	; (800a23c <_printf_i+0x244>)
 800a168:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a16c:	6823      	ldr	r3, [r4, #0]
 800a16e:	680e      	ldr	r6, [r1, #0]
 800a170:	061f      	lsls	r7, r3, #24
 800a172:	f856 5b04 	ldr.w	r5, [r6], #4
 800a176:	600e      	str	r6, [r1, #0]
 800a178:	d514      	bpl.n	800a1a4 <_printf_i+0x1ac>
 800a17a:	07d9      	lsls	r1, r3, #31
 800a17c:	bf44      	itt	mi
 800a17e:	f043 0320 	orrmi.w	r3, r3, #32
 800a182:	6023      	strmi	r3, [r4, #0]
 800a184:	b91d      	cbnz	r5, 800a18e <_printf_i+0x196>
 800a186:	6823      	ldr	r3, [r4, #0]
 800a188:	f023 0320 	bic.w	r3, r3, #32
 800a18c:	6023      	str	r3, [r4, #0]
 800a18e:	2310      	movs	r3, #16
 800a190:	e7b0      	b.n	800a0f4 <_printf_i+0xfc>
 800a192:	6823      	ldr	r3, [r4, #0]
 800a194:	f043 0320 	orr.w	r3, r3, #32
 800a198:	6023      	str	r3, [r4, #0]
 800a19a:	2378      	movs	r3, #120	; 0x78
 800a19c:	4828      	ldr	r0, [pc, #160]	; (800a240 <_printf_i+0x248>)
 800a19e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a1a2:	e7e3      	b.n	800a16c <_printf_i+0x174>
 800a1a4:	065e      	lsls	r6, r3, #25
 800a1a6:	bf48      	it	mi
 800a1a8:	b2ad      	uxthmi	r5, r5
 800a1aa:	e7e6      	b.n	800a17a <_printf_i+0x182>
 800a1ac:	4616      	mov	r6, r2
 800a1ae:	e7bb      	b.n	800a128 <_printf_i+0x130>
 800a1b0:	680b      	ldr	r3, [r1, #0]
 800a1b2:	6826      	ldr	r6, [r4, #0]
 800a1b4:	6960      	ldr	r0, [r4, #20]
 800a1b6:	1d1d      	adds	r5, r3, #4
 800a1b8:	600d      	str	r5, [r1, #0]
 800a1ba:	0635      	lsls	r5, r6, #24
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	d501      	bpl.n	800a1c4 <_printf_i+0x1cc>
 800a1c0:	6018      	str	r0, [r3, #0]
 800a1c2:	e002      	b.n	800a1ca <_printf_i+0x1d2>
 800a1c4:	0671      	lsls	r1, r6, #25
 800a1c6:	d5fb      	bpl.n	800a1c0 <_printf_i+0x1c8>
 800a1c8:	8018      	strh	r0, [r3, #0]
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	6123      	str	r3, [r4, #16]
 800a1ce:	4616      	mov	r6, r2
 800a1d0:	e7ba      	b.n	800a148 <_printf_i+0x150>
 800a1d2:	680b      	ldr	r3, [r1, #0]
 800a1d4:	1d1a      	adds	r2, r3, #4
 800a1d6:	600a      	str	r2, [r1, #0]
 800a1d8:	681e      	ldr	r6, [r3, #0]
 800a1da:	6862      	ldr	r2, [r4, #4]
 800a1dc:	2100      	movs	r1, #0
 800a1de:	4630      	mov	r0, r6
 800a1e0:	f7f6 f806 	bl	80001f0 <memchr>
 800a1e4:	b108      	cbz	r0, 800a1ea <_printf_i+0x1f2>
 800a1e6:	1b80      	subs	r0, r0, r6
 800a1e8:	6060      	str	r0, [r4, #4]
 800a1ea:	6863      	ldr	r3, [r4, #4]
 800a1ec:	6123      	str	r3, [r4, #16]
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1f4:	e7a8      	b.n	800a148 <_printf_i+0x150>
 800a1f6:	6923      	ldr	r3, [r4, #16]
 800a1f8:	4632      	mov	r2, r6
 800a1fa:	4649      	mov	r1, r9
 800a1fc:	4640      	mov	r0, r8
 800a1fe:	47d0      	blx	sl
 800a200:	3001      	adds	r0, #1
 800a202:	d0ab      	beq.n	800a15c <_printf_i+0x164>
 800a204:	6823      	ldr	r3, [r4, #0]
 800a206:	079b      	lsls	r3, r3, #30
 800a208:	d413      	bmi.n	800a232 <_printf_i+0x23a>
 800a20a:	68e0      	ldr	r0, [r4, #12]
 800a20c:	9b03      	ldr	r3, [sp, #12]
 800a20e:	4298      	cmp	r0, r3
 800a210:	bfb8      	it	lt
 800a212:	4618      	movlt	r0, r3
 800a214:	e7a4      	b.n	800a160 <_printf_i+0x168>
 800a216:	2301      	movs	r3, #1
 800a218:	4632      	mov	r2, r6
 800a21a:	4649      	mov	r1, r9
 800a21c:	4640      	mov	r0, r8
 800a21e:	47d0      	blx	sl
 800a220:	3001      	adds	r0, #1
 800a222:	d09b      	beq.n	800a15c <_printf_i+0x164>
 800a224:	3501      	adds	r5, #1
 800a226:	68e3      	ldr	r3, [r4, #12]
 800a228:	9903      	ldr	r1, [sp, #12]
 800a22a:	1a5b      	subs	r3, r3, r1
 800a22c:	42ab      	cmp	r3, r5
 800a22e:	dcf2      	bgt.n	800a216 <_printf_i+0x21e>
 800a230:	e7eb      	b.n	800a20a <_printf_i+0x212>
 800a232:	2500      	movs	r5, #0
 800a234:	f104 0619 	add.w	r6, r4, #25
 800a238:	e7f5      	b.n	800a226 <_printf_i+0x22e>
 800a23a:	bf00      	nop
 800a23c:	0800c742 	.word	0x0800c742
 800a240:	0800c753 	.word	0x0800c753

0800a244 <siprintf>:
 800a244:	b40e      	push	{r1, r2, r3}
 800a246:	b500      	push	{lr}
 800a248:	b09c      	sub	sp, #112	; 0x70
 800a24a:	ab1d      	add	r3, sp, #116	; 0x74
 800a24c:	9002      	str	r0, [sp, #8]
 800a24e:	9006      	str	r0, [sp, #24]
 800a250:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a254:	4809      	ldr	r0, [pc, #36]	; (800a27c <siprintf+0x38>)
 800a256:	9107      	str	r1, [sp, #28]
 800a258:	9104      	str	r1, [sp, #16]
 800a25a:	4909      	ldr	r1, [pc, #36]	; (800a280 <siprintf+0x3c>)
 800a25c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a260:	9105      	str	r1, [sp, #20]
 800a262:	6800      	ldr	r0, [r0, #0]
 800a264:	9301      	str	r3, [sp, #4]
 800a266:	a902      	add	r1, sp, #8
 800a268:	f001 fc20 	bl	800baac <_svfiprintf_r>
 800a26c:	9b02      	ldr	r3, [sp, #8]
 800a26e:	2200      	movs	r2, #0
 800a270:	701a      	strb	r2, [r3, #0]
 800a272:	b01c      	add	sp, #112	; 0x70
 800a274:	f85d eb04 	ldr.w	lr, [sp], #4
 800a278:	b003      	add	sp, #12
 800a27a:	4770      	bx	lr
 800a27c:	20000180 	.word	0x20000180
 800a280:	ffff0208 	.word	0xffff0208

0800a284 <quorem>:
 800a284:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a288:	6903      	ldr	r3, [r0, #16]
 800a28a:	690c      	ldr	r4, [r1, #16]
 800a28c:	42a3      	cmp	r3, r4
 800a28e:	4607      	mov	r7, r0
 800a290:	f2c0 8081 	blt.w	800a396 <quorem+0x112>
 800a294:	3c01      	subs	r4, #1
 800a296:	f101 0814 	add.w	r8, r1, #20
 800a29a:	f100 0514 	add.w	r5, r0, #20
 800a29e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a2a2:	9301      	str	r3, [sp, #4]
 800a2a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a2a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a2ac:	3301      	adds	r3, #1
 800a2ae:	429a      	cmp	r2, r3
 800a2b0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a2b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a2b8:	fbb2 f6f3 	udiv	r6, r2, r3
 800a2bc:	d331      	bcc.n	800a322 <quorem+0x9e>
 800a2be:	f04f 0e00 	mov.w	lr, #0
 800a2c2:	4640      	mov	r0, r8
 800a2c4:	46ac      	mov	ip, r5
 800a2c6:	46f2      	mov	sl, lr
 800a2c8:	f850 2b04 	ldr.w	r2, [r0], #4
 800a2cc:	b293      	uxth	r3, r2
 800a2ce:	fb06 e303 	mla	r3, r6, r3, lr
 800a2d2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a2d6:	b29b      	uxth	r3, r3
 800a2d8:	ebaa 0303 	sub.w	r3, sl, r3
 800a2dc:	0c12      	lsrs	r2, r2, #16
 800a2de:	f8dc a000 	ldr.w	sl, [ip]
 800a2e2:	fb06 e202 	mla	r2, r6, r2, lr
 800a2e6:	fa13 f38a 	uxtah	r3, r3, sl
 800a2ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a2ee:	fa1f fa82 	uxth.w	sl, r2
 800a2f2:	f8dc 2000 	ldr.w	r2, [ip]
 800a2f6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a2fa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a2fe:	b29b      	uxth	r3, r3
 800a300:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a304:	4581      	cmp	r9, r0
 800a306:	f84c 3b04 	str.w	r3, [ip], #4
 800a30a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a30e:	d2db      	bcs.n	800a2c8 <quorem+0x44>
 800a310:	f855 300b 	ldr.w	r3, [r5, fp]
 800a314:	b92b      	cbnz	r3, 800a322 <quorem+0x9e>
 800a316:	9b01      	ldr	r3, [sp, #4]
 800a318:	3b04      	subs	r3, #4
 800a31a:	429d      	cmp	r5, r3
 800a31c:	461a      	mov	r2, r3
 800a31e:	d32e      	bcc.n	800a37e <quorem+0xfa>
 800a320:	613c      	str	r4, [r7, #16]
 800a322:	4638      	mov	r0, r7
 800a324:	f001 f9ac 	bl	800b680 <__mcmp>
 800a328:	2800      	cmp	r0, #0
 800a32a:	db24      	blt.n	800a376 <quorem+0xf2>
 800a32c:	3601      	adds	r6, #1
 800a32e:	4628      	mov	r0, r5
 800a330:	f04f 0c00 	mov.w	ip, #0
 800a334:	f858 2b04 	ldr.w	r2, [r8], #4
 800a338:	f8d0 e000 	ldr.w	lr, [r0]
 800a33c:	b293      	uxth	r3, r2
 800a33e:	ebac 0303 	sub.w	r3, ip, r3
 800a342:	0c12      	lsrs	r2, r2, #16
 800a344:	fa13 f38e 	uxtah	r3, r3, lr
 800a348:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a34c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a350:	b29b      	uxth	r3, r3
 800a352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a356:	45c1      	cmp	r9, r8
 800a358:	f840 3b04 	str.w	r3, [r0], #4
 800a35c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a360:	d2e8      	bcs.n	800a334 <quorem+0xb0>
 800a362:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a366:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a36a:	b922      	cbnz	r2, 800a376 <quorem+0xf2>
 800a36c:	3b04      	subs	r3, #4
 800a36e:	429d      	cmp	r5, r3
 800a370:	461a      	mov	r2, r3
 800a372:	d30a      	bcc.n	800a38a <quorem+0x106>
 800a374:	613c      	str	r4, [r7, #16]
 800a376:	4630      	mov	r0, r6
 800a378:	b003      	add	sp, #12
 800a37a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a37e:	6812      	ldr	r2, [r2, #0]
 800a380:	3b04      	subs	r3, #4
 800a382:	2a00      	cmp	r2, #0
 800a384:	d1cc      	bne.n	800a320 <quorem+0x9c>
 800a386:	3c01      	subs	r4, #1
 800a388:	e7c7      	b.n	800a31a <quorem+0x96>
 800a38a:	6812      	ldr	r2, [r2, #0]
 800a38c:	3b04      	subs	r3, #4
 800a38e:	2a00      	cmp	r2, #0
 800a390:	d1f0      	bne.n	800a374 <quorem+0xf0>
 800a392:	3c01      	subs	r4, #1
 800a394:	e7eb      	b.n	800a36e <quorem+0xea>
 800a396:	2000      	movs	r0, #0
 800a398:	e7ee      	b.n	800a378 <quorem+0xf4>
 800a39a:	0000      	movs	r0, r0
 800a39c:	0000      	movs	r0, r0
	...

0800a3a0 <_dtoa_r>:
 800a3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3a4:	ed2d 8b02 	vpush	{d8}
 800a3a8:	ec57 6b10 	vmov	r6, r7, d0
 800a3ac:	b095      	sub	sp, #84	; 0x54
 800a3ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a3b0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a3b4:	9105      	str	r1, [sp, #20]
 800a3b6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a3ba:	4604      	mov	r4, r0
 800a3bc:	9209      	str	r2, [sp, #36]	; 0x24
 800a3be:	930f      	str	r3, [sp, #60]	; 0x3c
 800a3c0:	b975      	cbnz	r5, 800a3e0 <_dtoa_r+0x40>
 800a3c2:	2010      	movs	r0, #16
 800a3c4:	f000 fed6 	bl	800b174 <malloc>
 800a3c8:	4602      	mov	r2, r0
 800a3ca:	6260      	str	r0, [r4, #36]	; 0x24
 800a3cc:	b920      	cbnz	r0, 800a3d8 <_dtoa_r+0x38>
 800a3ce:	4bb2      	ldr	r3, [pc, #712]	; (800a698 <_dtoa_r+0x2f8>)
 800a3d0:	21ea      	movs	r1, #234	; 0xea
 800a3d2:	48b2      	ldr	r0, [pc, #712]	; (800a69c <_dtoa_r+0x2fc>)
 800a3d4:	f001 feea 	bl	800c1ac <__assert_func>
 800a3d8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a3dc:	6005      	str	r5, [r0, #0]
 800a3de:	60c5      	str	r5, [r0, #12]
 800a3e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3e2:	6819      	ldr	r1, [r3, #0]
 800a3e4:	b151      	cbz	r1, 800a3fc <_dtoa_r+0x5c>
 800a3e6:	685a      	ldr	r2, [r3, #4]
 800a3e8:	604a      	str	r2, [r1, #4]
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	4093      	lsls	r3, r2
 800a3ee:	608b      	str	r3, [r1, #8]
 800a3f0:	4620      	mov	r0, r4
 800a3f2:	f000 ff07 	bl	800b204 <_Bfree>
 800a3f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	601a      	str	r2, [r3, #0]
 800a3fc:	1e3b      	subs	r3, r7, #0
 800a3fe:	bfb9      	ittee	lt
 800a400:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a404:	9303      	strlt	r3, [sp, #12]
 800a406:	2300      	movge	r3, #0
 800a408:	f8c8 3000 	strge.w	r3, [r8]
 800a40c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a410:	4ba3      	ldr	r3, [pc, #652]	; (800a6a0 <_dtoa_r+0x300>)
 800a412:	bfbc      	itt	lt
 800a414:	2201      	movlt	r2, #1
 800a416:	f8c8 2000 	strlt.w	r2, [r8]
 800a41a:	ea33 0309 	bics.w	r3, r3, r9
 800a41e:	d11b      	bne.n	800a458 <_dtoa_r+0xb8>
 800a420:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a422:	f242 730f 	movw	r3, #9999	; 0x270f
 800a426:	6013      	str	r3, [r2, #0]
 800a428:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a42c:	4333      	orrs	r3, r6
 800a42e:	f000 857a 	beq.w	800af26 <_dtoa_r+0xb86>
 800a432:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a434:	b963      	cbnz	r3, 800a450 <_dtoa_r+0xb0>
 800a436:	4b9b      	ldr	r3, [pc, #620]	; (800a6a4 <_dtoa_r+0x304>)
 800a438:	e024      	b.n	800a484 <_dtoa_r+0xe4>
 800a43a:	4b9b      	ldr	r3, [pc, #620]	; (800a6a8 <_dtoa_r+0x308>)
 800a43c:	9300      	str	r3, [sp, #0]
 800a43e:	3308      	adds	r3, #8
 800a440:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a442:	6013      	str	r3, [r2, #0]
 800a444:	9800      	ldr	r0, [sp, #0]
 800a446:	b015      	add	sp, #84	; 0x54
 800a448:	ecbd 8b02 	vpop	{d8}
 800a44c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a450:	4b94      	ldr	r3, [pc, #592]	; (800a6a4 <_dtoa_r+0x304>)
 800a452:	9300      	str	r3, [sp, #0]
 800a454:	3303      	adds	r3, #3
 800a456:	e7f3      	b.n	800a440 <_dtoa_r+0xa0>
 800a458:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a45c:	2200      	movs	r2, #0
 800a45e:	ec51 0b17 	vmov	r0, r1, d7
 800a462:	2300      	movs	r3, #0
 800a464:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a468:	f7f6 fb36 	bl	8000ad8 <__aeabi_dcmpeq>
 800a46c:	4680      	mov	r8, r0
 800a46e:	b158      	cbz	r0, 800a488 <_dtoa_r+0xe8>
 800a470:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a472:	2301      	movs	r3, #1
 800a474:	6013      	str	r3, [r2, #0]
 800a476:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a478:	2b00      	cmp	r3, #0
 800a47a:	f000 8551 	beq.w	800af20 <_dtoa_r+0xb80>
 800a47e:	488b      	ldr	r0, [pc, #556]	; (800a6ac <_dtoa_r+0x30c>)
 800a480:	6018      	str	r0, [r3, #0]
 800a482:	1e43      	subs	r3, r0, #1
 800a484:	9300      	str	r3, [sp, #0]
 800a486:	e7dd      	b.n	800a444 <_dtoa_r+0xa4>
 800a488:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a48c:	aa12      	add	r2, sp, #72	; 0x48
 800a48e:	a913      	add	r1, sp, #76	; 0x4c
 800a490:	4620      	mov	r0, r4
 800a492:	f001 f999 	bl	800b7c8 <__d2b>
 800a496:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a49a:	4683      	mov	fp, r0
 800a49c:	2d00      	cmp	r5, #0
 800a49e:	d07c      	beq.n	800a59a <_dtoa_r+0x1fa>
 800a4a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4a2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a4a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a4aa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a4ae:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a4b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a4b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a4ba:	4b7d      	ldr	r3, [pc, #500]	; (800a6b0 <_dtoa_r+0x310>)
 800a4bc:	2200      	movs	r2, #0
 800a4be:	4630      	mov	r0, r6
 800a4c0:	4639      	mov	r1, r7
 800a4c2:	f7f5 fee9 	bl	8000298 <__aeabi_dsub>
 800a4c6:	a36e      	add	r3, pc, #440	; (adr r3, 800a680 <_dtoa_r+0x2e0>)
 800a4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4cc:	f7f6 f89c 	bl	8000608 <__aeabi_dmul>
 800a4d0:	a36d      	add	r3, pc, #436	; (adr r3, 800a688 <_dtoa_r+0x2e8>)
 800a4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d6:	f7f5 fee1 	bl	800029c <__adddf3>
 800a4da:	4606      	mov	r6, r0
 800a4dc:	4628      	mov	r0, r5
 800a4de:	460f      	mov	r7, r1
 800a4e0:	f7f6 f828 	bl	8000534 <__aeabi_i2d>
 800a4e4:	a36a      	add	r3, pc, #424	; (adr r3, 800a690 <_dtoa_r+0x2f0>)
 800a4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ea:	f7f6 f88d 	bl	8000608 <__aeabi_dmul>
 800a4ee:	4602      	mov	r2, r0
 800a4f0:	460b      	mov	r3, r1
 800a4f2:	4630      	mov	r0, r6
 800a4f4:	4639      	mov	r1, r7
 800a4f6:	f7f5 fed1 	bl	800029c <__adddf3>
 800a4fa:	4606      	mov	r6, r0
 800a4fc:	460f      	mov	r7, r1
 800a4fe:	f7f6 fb33 	bl	8000b68 <__aeabi_d2iz>
 800a502:	2200      	movs	r2, #0
 800a504:	4682      	mov	sl, r0
 800a506:	2300      	movs	r3, #0
 800a508:	4630      	mov	r0, r6
 800a50a:	4639      	mov	r1, r7
 800a50c:	f7f6 faee 	bl	8000aec <__aeabi_dcmplt>
 800a510:	b148      	cbz	r0, 800a526 <_dtoa_r+0x186>
 800a512:	4650      	mov	r0, sl
 800a514:	f7f6 f80e 	bl	8000534 <__aeabi_i2d>
 800a518:	4632      	mov	r2, r6
 800a51a:	463b      	mov	r3, r7
 800a51c:	f7f6 fadc 	bl	8000ad8 <__aeabi_dcmpeq>
 800a520:	b908      	cbnz	r0, 800a526 <_dtoa_r+0x186>
 800a522:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a526:	f1ba 0f16 	cmp.w	sl, #22
 800a52a:	d854      	bhi.n	800a5d6 <_dtoa_r+0x236>
 800a52c:	4b61      	ldr	r3, [pc, #388]	; (800a6b4 <_dtoa_r+0x314>)
 800a52e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a536:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a53a:	f7f6 fad7 	bl	8000aec <__aeabi_dcmplt>
 800a53e:	2800      	cmp	r0, #0
 800a540:	d04b      	beq.n	800a5da <_dtoa_r+0x23a>
 800a542:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a546:	2300      	movs	r3, #0
 800a548:	930e      	str	r3, [sp, #56]	; 0x38
 800a54a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a54c:	1b5d      	subs	r5, r3, r5
 800a54e:	1e6b      	subs	r3, r5, #1
 800a550:	9304      	str	r3, [sp, #16]
 800a552:	bf43      	ittte	mi
 800a554:	2300      	movmi	r3, #0
 800a556:	f1c5 0801 	rsbmi	r8, r5, #1
 800a55a:	9304      	strmi	r3, [sp, #16]
 800a55c:	f04f 0800 	movpl.w	r8, #0
 800a560:	f1ba 0f00 	cmp.w	sl, #0
 800a564:	db3b      	blt.n	800a5de <_dtoa_r+0x23e>
 800a566:	9b04      	ldr	r3, [sp, #16]
 800a568:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a56c:	4453      	add	r3, sl
 800a56e:	9304      	str	r3, [sp, #16]
 800a570:	2300      	movs	r3, #0
 800a572:	9306      	str	r3, [sp, #24]
 800a574:	9b05      	ldr	r3, [sp, #20]
 800a576:	2b09      	cmp	r3, #9
 800a578:	d869      	bhi.n	800a64e <_dtoa_r+0x2ae>
 800a57a:	2b05      	cmp	r3, #5
 800a57c:	bfc4      	itt	gt
 800a57e:	3b04      	subgt	r3, #4
 800a580:	9305      	strgt	r3, [sp, #20]
 800a582:	9b05      	ldr	r3, [sp, #20]
 800a584:	f1a3 0302 	sub.w	r3, r3, #2
 800a588:	bfcc      	ite	gt
 800a58a:	2500      	movgt	r5, #0
 800a58c:	2501      	movle	r5, #1
 800a58e:	2b03      	cmp	r3, #3
 800a590:	d869      	bhi.n	800a666 <_dtoa_r+0x2c6>
 800a592:	e8df f003 	tbb	[pc, r3]
 800a596:	4e2c      	.short	0x4e2c
 800a598:	5a4c      	.short	0x5a4c
 800a59a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a59e:	441d      	add	r5, r3
 800a5a0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a5a4:	2b20      	cmp	r3, #32
 800a5a6:	bfc1      	itttt	gt
 800a5a8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a5ac:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a5b0:	fa09 f303 	lslgt.w	r3, r9, r3
 800a5b4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a5b8:	bfda      	itte	le
 800a5ba:	f1c3 0320 	rsble	r3, r3, #32
 800a5be:	fa06 f003 	lslle.w	r0, r6, r3
 800a5c2:	4318      	orrgt	r0, r3
 800a5c4:	f7f5 ffa6 	bl	8000514 <__aeabi_ui2d>
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	4606      	mov	r6, r0
 800a5cc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a5d0:	3d01      	subs	r5, #1
 800a5d2:	9310      	str	r3, [sp, #64]	; 0x40
 800a5d4:	e771      	b.n	800a4ba <_dtoa_r+0x11a>
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	e7b6      	b.n	800a548 <_dtoa_r+0x1a8>
 800a5da:	900e      	str	r0, [sp, #56]	; 0x38
 800a5dc:	e7b5      	b.n	800a54a <_dtoa_r+0x1aa>
 800a5de:	f1ca 0300 	rsb	r3, sl, #0
 800a5e2:	9306      	str	r3, [sp, #24]
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	eba8 080a 	sub.w	r8, r8, sl
 800a5ea:	930d      	str	r3, [sp, #52]	; 0x34
 800a5ec:	e7c2      	b.n	800a574 <_dtoa_r+0x1d4>
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	9308      	str	r3, [sp, #32]
 800a5f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	dc39      	bgt.n	800a66c <_dtoa_r+0x2cc>
 800a5f8:	f04f 0901 	mov.w	r9, #1
 800a5fc:	f8cd 9004 	str.w	r9, [sp, #4]
 800a600:	464b      	mov	r3, r9
 800a602:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a606:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a608:	2200      	movs	r2, #0
 800a60a:	6042      	str	r2, [r0, #4]
 800a60c:	2204      	movs	r2, #4
 800a60e:	f102 0614 	add.w	r6, r2, #20
 800a612:	429e      	cmp	r6, r3
 800a614:	6841      	ldr	r1, [r0, #4]
 800a616:	d92f      	bls.n	800a678 <_dtoa_r+0x2d8>
 800a618:	4620      	mov	r0, r4
 800a61a:	f000 fdb3 	bl	800b184 <_Balloc>
 800a61e:	9000      	str	r0, [sp, #0]
 800a620:	2800      	cmp	r0, #0
 800a622:	d14b      	bne.n	800a6bc <_dtoa_r+0x31c>
 800a624:	4b24      	ldr	r3, [pc, #144]	; (800a6b8 <_dtoa_r+0x318>)
 800a626:	4602      	mov	r2, r0
 800a628:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a62c:	e6d1      	b.n	800a3d2 <_dtoa_r+0x32>
 800a62e:	2301      	movs	r3, #1
 800a630:	e7de      	b.n	800a5f0 <_dtoa_r+0x250>
 800a632:	2300      	movs	r3, #0
 800a634:	9308      	str	r3, [sp, #32]
 800a636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a638:	eb0a 0903 	add.w	r9, sl, r3
 800a63c:	f109 0301 	add.w	r3, r9, #1
 800a640:	2b01      	cmp	r3, #1
 800a642:	9301      	str	r3, [sp, #4]
 800a644:	bfb8      	it	lt
 800a646:	2301      	movlt	r3, #1
 800a648:	e7dd      	b.n	800a606 <_dtoa_r+0x266>
 800a64a:	2301      	movs	r3, #1
 800a64c:	e7f2      	b.n	800a634 <_dtoa_r+0x294>
 800a64e:	2501      	movs	r5, #1
 800a650:	2300      	movs	r3, #0
 800a652:	9305      	str	r3, [sp, #20]
 800a654:	9508      	str	r5, [sp, #32]
 800a656:	f04f 39ff 	mov.w	r9, #4294967295
 800a65a:	2200      	movs	r2, #0
 800a65c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a660:	2312      	movs	r3, #18
 800a662:	9209      	str	r2, [sp, #36]	; 0x24
 800a664:	e7cf      	b.n	800a606 <_dtoa_r+0x266>
 800a666:	2301      	movs	r3, #1
 800a668:	9308      	str	r3, [sp, #32]
 800a66a:	e7f4      	b.n	800a656 <_dtoa_r+0x2b6>
 800a66c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a670:	f8cd 9004 	str.w	r9, [sp, #4]
 800a674:	464b      	mov	r3, r9
 800a676:	e7c6      	b.n	800a606 <_dtoa_r+0x266>
 800a678:	3101      	adds	r1, #1
 800a67a:	6041      	str	r1, [r0, #4]
 800a67c:	0052      	lsls	r2, r2, #1
 800a67e:	e7c6      	b.n	800a60e <_dtoa_r+0x26e>
 800a680:	636f4361 	.word	0x636f4361
 800a684:	3fd287a7 	.word	0x3fd287a7
 800a688:	8b60c8b3 	.word	0x8b60c8b3
 800a68c:	3fc68a28 	.word	0x3fc68a28
 800a690:	509f79fb 	.word	0x509f79fb
 800a694:	3fd34413 	.word	0x3fd34413
 800a698:	0800c771 	.word	0x0800c771
 800a69c:	0800c788 	.word	0x0800c788
 800a6a0:	7ff00000 	.word	0x7ff00000
 800a6a4:	0800c76d 	.word	0x0800c76d
 800a6a8:	0800c764 	.word	0x0800c764
 800a6ac:	0800c741 	.word	0x0800c741
 800a6b0:	3ff80000 	.word	0x3ff80000
 800a6b4:	0800c8e0 	.word	0x0800c8e0
 800a6b8:	0800c7e7 	.word	0x0800c7e7
 800a6bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a6be:	9a00      	ldr	r2, [sp, #0]
 800a6c0:	601a      	str	r2, [r3, #0]
 800a6c2:	9b01      	ldr	r3, [sp, #4]
 800a6c4:	2b0e      	cmp	r3, #14
 800a6c6:	f200 80ad 	bhi.w	800a824 <_dtoa_r+0x484>
 800a6ca:	2d00      	cmp	r5, #0
 800a6cc:	f000 80aa 	beq.w	800a824 <_dtoa_r+0x484>
 800a6d0:	f1ba 0f00 	cmp.w	sl, #0
 800a6d4:	dd36      	ble.n	800a744 <_dtoa_r+0x3a4>
 800a6d6:	4ac3      	ldr	r2, [pc, #780]	; (800a9e4 <_dtoa_r+0x644>)
 800a6d8:	f00a 030f 	and.w	r3, sl, #15
 800a6dc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a6e0:	ed93 7b00 	vldr	d7, [r3]
 800a6e4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a6e8:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a6ec:	eeb0 8a47 	vmov.f32	s16, s14
 800a6f0:	eef0 8a67 	vmov.f32	s17, s15
 800a6f4:	d016      	beq.n	800a724 <_dtoa_r+0x384>
 800a6f6:	4bbc      	ldr	r3, [pc, #752]	; (800a9e8 <_dtoa_r+0x648>)
 800a6f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a6fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a700:	f7f6 f8ac 	bl	800085c <__aeabi_ddiv>
 800a704:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a708:	f007 070f 	and.w	r7, r7, #15
 800a70c:	2503      	movs	r5, #3
 800a70e:	4eb6      	ldr	r6, [pc, #728]	; (800a9e8 <_dtoa_r+0x648>)
 800a710:	b957      	cbnz	r7, 800a728 <_dtoa_r+0x388>
 800a712:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a716:	ec53 2b18 	vmov	r2, r3, d8
 800a71a:	f7f6 f89f 	bl	800085c <__aeabi_ddiv>
 800a71e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a722:	e029      	b.n	800a778 <_dtoa_r+0x3d8>
 800a724:	2502      	movs	r5, #2
 800a726:	e7f2      	b.n	800a70e <_dtoa_r+0x36e>
 800a728:	07f9      	lsls	r1, r7, #31
 800a72a:	d508      	bpl.n	800a73e <_dtoa_r+0x39e>
 800a72c:	ec51 0b18 	vmov	r0, r1, d8
 800a730:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a734:	f7f5 ff68 	bl	8000608 <__aeabi_dmul>
 800a738:	ec41 0b18 	vmov	d8, r0, r1
 800a73c:	3501      	adds	r5, #1
 800a73e:	107f      	asrs	r7, r7, #1
 800a740:	3608      	adds	r6, #8
 800a742:	e7e5      	b.n	800a710 <_dtoa_r+0x370>
 800a744:	f000 80a6 	beq.w	800a894 <_dtoa_r+0x4f4>
 800a748:	f1ca 0600 	rsb	r6, sl, #0
 800a74c:	4ba5      	ldr	r3, [pc, #660]	; (800a9e4 <_dtoa_r+0x644>)
 800a74e:	4fa6      	ldr	r7, [pc, #664]	; (800a9e8 <_dtoa_r+0x648>)
 800a750:	f006 020f 	and.w	r2, r6, #15
 800a754:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a75c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a760:	f7f5 ff52 	bl	8000608 <__aeabi_dmul>
 800a764:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a768:	1136      	asrs	r6, r6, #4
 800a76a:	2300      	movs	r3, #0
 800a76c:	2502      	movs	r5, #2
 800a76e:	2e00      	cmp	r6, #0
 800a770:	f040 8085 	bne.w	800a87e <_dtoa_r+0x4de>
 800a774:	2b00      	cmp	r3, #0
 800a776:	d1d2      	bne.n	800a71e <_dtoa_r+0x37e>
 800a778:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	f000 808c 	beq.w	800a898 <_dtoa_r+0x4f8>
 800a780:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a784:	4b99      	ldr	r3, [pc, #612]	; (800a9ec <_dtoa_r+0x64c>)
 800a786:	2200      	movs	r2, #0
 800a788:	4630      	mov	r0, r6
 800a78a:	4639      	mov	r1, r7
 800a78c:	f7f6 f9ae 	bl	8000aec <__aeabi_dcmplt>
 800a790:	2800      	cmp	r0, #0
 800a792:	f000 8081 	beq.w	800a898 <_dtoa_r+0x4f8>
 800a796:	9b01      	ldr	r3, [sp, #4]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d07d      	beq.n	800a898 <_dtoa_r+0x4f8>
 800a79c:	f1b9 0f00 	cmp.w	r9, #0
 800a7a0:	dd3c      	ble.n	800a81c <_dtoa_r+0x47c>
 800a7a2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a7a6:	9307      	str	r3, [sp, #28]
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	4b91      	ldr	r3, [pc, #580]	; (800a9f0 <_dtoa_r+0x650>)
 800a7ac:	4630      	mov	r0, r6
 800a7ae:	4639      	mov	r1, r7
 800a7b0:	f7f5 ff2a 	bl	8000608 <__aeabi_dmul>
 800a7b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a7b8:	3501      	adds	r5, #1
 800a7ba:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a7be:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a7c2:	4628      	mov	r0, r5
 800a7c4:	f7f5 feb6 	bl	8000534 <__aeabi_i2d>
 800a7c8:	4632      	mov	r2, r6
 800a7ca:	463b      	mov	r3, r7
 800a7cc:	f7f5 ff1c 	bl	8000608 <__aeabi_dmul>
 800a7d0:	4b88      	ldr	r3, [pc, #544]	; (800a9f4 <_dtoa_r+0x654>)
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	f7f5 fd62 	bl	800029c <__adddf3>
 800a7d8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a7dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a7e0:	9303      	str	r3, [sp, #12]
 800a7e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d15c      	bne.n	800a8a2 <_dtoa_r+0x502>
 800a7e8:	4b83      	ldr	r3, [pc, #524]	; (800a9f8 <_dtoa_r+0x658>)
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	4630      	mov	r0, r6
 800a7ee:	4639      	mov	r1, r7
 800a7f0:	f7f5 fd52 	bl	8000298 <__aeabi_dsub>
 800a7f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a7f8:	4606      	mov	r6, r0
 800a7fa:	460f      	mov	r7, r1
 800a7fc:	f7f6 f994 	bl	8000b28 <__aeabi_dcmpgt>
 800a800:	2800      	cmp	r0, #0
 800a802:	f040 8296 	bne.w	800ad32 <_dtoa_r+0x992>
 800a806:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a80a:	4630      	mov	r0, r6
 800a80c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a810:	4639      	mov	r1, r7
 800a812:	f7f6 f96b 	bl	8000aec <__aeabi_dcmplt>
 800a816:	2800      	cmp	r0, #0
 800a818:	f040 8288 	bne.w	800ad2c <_dtoa_r+0x98c>
 800a81c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a820:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a824:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a826:	2b00      	cmp	r3, #0
 800a828:	f2c0 8158 	blt.w	800aadc <_dtoa_r+0x73c>
 800a82c:	f1ba 0f0e 	cmp.w	sl, #14
 800a830:	f300 8154 	bgt.w	800aadc <_dtoa_r+0x73c>
 800a834:	4b6b      	ldr	r3, [pc, #428]	; (800a9e4 <_dtoa_r+0x644>)
 800a836:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a83a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a83e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a840:	2b00      	cmp	r3, #0
 800a842:	f280 80e3 	bge.w	800aa0c <_dtoa_r+0x66c>
 800a846:	9b01      	ldr	r3, [sp, #4]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	f300 80df 	bgt.w	800aa0c <_dtoa_r+0x66c>
 800a84e:	f040 826d 	bne.w	800ad2c <_dtoa_r+0x98c>
 800a852:	4b69      	ldr	r3, [pc, #420]	; (800a9f8 <_dtoa_r+0x658>)
 800a854:	2200      	movs	r2, #0
 800a856:	4640      	mov	r0, r8
 800a858:	4649      	mov	r1, r9
 800a85a:	f7f5 fed5 	bl	8000608 <__aeabi_dmul>
 800a85e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a862:	f7f6 f957 	bl	8000b14 <__aeabi_dcmpge>
 800a866:	9e01      	ldr	r6, [sp, #4]
 800a868:	4637      	mov	r7, r6
 800a86a:	2800      	cmp	r0, #0
 800a86c:	f040 8243 	bne.w	800acf6 <_dtoa_r+0x956>
 800a870:	9d00      	ldr	r5, [sp, #0]
 800a872:	2331      	movs	r3, #49	; 0x31
 800a874:	f805 3b01 	strb.w	r3, [r5], #1
 800a878:	f10a 0a01 	add.w	sl, sl, #1
 800a87c:	e23f      	b.n	800acfe <_dtoa_r+0x95e>
 800a87e:	07f2      	lsls	r2, r6, #31
 800a880:	d505      	bpl.n	800a88e <_dtoa_r+0x4ee>
 800a882:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a886:	f7f5 febf 	bl	8000608 <__aeabi_dmul>
 800a88a:	3501      	adds	r5, #1
 800a88c:	2301      	movs	r3, #1
 800a88e:	1076      	asrs	r6, r6, #1
 800a890:	3708      	adds	r7, #8
 800a892:	e76c      	b.n	800a76e <_dtoa_r+0x3ce>
 800a894:	2502      	movs	r5, #2
 800a896:	e76f      	b.n	800a778 <_dtoa_r+0x3d8>
 800a898:	9b01      	ldr	r3, [sp, #4]
 800a89a:	f8cd a01c 	str.w	sl, [sp, #28]
 800a89e:	930c      	str	r3, [sp, #48]	; 0x30
 800a8a0:	e78d      	b.n	800a7be <_dtoa_r+0x41e>
 800a8a2:	9900      	ldr	r1, [sp, #0]
 800a8a4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a8a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a8a8:	4b4e      	ldr	r3, [pc, #312]	; (800a9e4 <_dtoa_r+0x644>)
 800a8aa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a8ae:	4401      	add	r1, r0
 800a8b0:	9102      	str	r1, [sp, #8]
 800a8b2:	9908      	ldr	r1, [sp, #32]
 800a8b4:	eeb0 8a47 	vmov.f32	s16, s14
 800a8b8:	eef0 8a67 	vmov.f32	s17, s15
 800a8bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a8c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a8c4:	2900      	cmp	r1, #0
 800a8c6:	d045      	beq.n	800a954 <_dtoa_r+0x5b4>
 800a8c8:	494c      	ldr	r1, [pc, #304]	; (800a9fc <_dtoa_r+0x65c>)
 800a8ca:	2000      	movs	r0, #0
 800a8cc:	f7f5 ffc6 	bl	800085c <__aeabi_ddiv>
 800a8d0:	ec53 2b18 	vmov	r2, r3, d8
 800a8d4:	f7f5 fce0 	bl	8000298 <__aeabi_dsub>
 800a8d8:	9d00      	ldr	r5, [sp, #0]
 800a8da:	ec41 0b18 	vmov	d8, r0, r1
 800a8de:	4639      	mov	r1, r7
 800a8e0:	4630      	mov	r0, r6
 800a8e2:	f7f6 f941 	bl	8000b68 <__aeabi_d2iz>
 800a8e6:	900c      	str	r0, [sp, #48]	; 0x30
 800a8e8:	f7f5 fe24 	bl	8000534 <__aeabi_i2d>
 800a8ec:	4602      	mov	r2, r0
 800a8ee:	460b      	mov	r3, r1
 800a8f0:	4630      	mov	r0, r6
 800a8f2:	4639      	mov	r1, r7
 800a8f4:	f7f5 fcd0 	bl	8000298 <__aeabi_dsub>
 800a8f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a8fa:	3330      	adds	r3, #48	; 0x30
 800a8fc:	f805 3b01 	strb.w	r3, [r5], #1
 800a900:	ec53 2b18 	vmov	r2, r3, d8
 800a904:	4606      	mov	r6, r0
 800a906:	460f      	mov	r7, r1
 800a908:	f7f6 f8f0 	bl	8000aec <__aeabi_dcmplt>
 800a90c:	2800      	cmp	r0, #0
 800a90e:	d165      	bne.n	800a9dc <_dtoa_r+0x63c>
 800a910:	4632      	mov	r2, r6
 800a912:	463b      	mov	r3, r7
 800a914:	4935      	ldr	r1, [pc, #212]	; (800a9ec <_dtoa_r+0x64c>)
 800a916:	2000      	movs	r0, #0
 800a918:	f7f5 fcbe 	bl	8000298 <__aeabi_dsub>
 800a91c:	ec53 2b18 	vmov	r2, r3, d8
 800a920:	f7f6 f8e4 	bl	8000aec <__aeabi_dcmplt>
 800a924:	2800      	cmp	r0, #0
 800a926:	f040 80b9 	bne.w	800aa9c <_dtoa_r+0x6fc>
 800a92a:	9b02      	ldr	r3, [sp, #8]
 800a92c:	429d      	cmp	r5, r3
 800a92e:	f43f af75 	beq.w	800a81c <_dtoa_r+0x47c>
 800a932:	4b2f      	ldr	r3, [pc, #188]	; (800a9f0 <_dtoa_r+0x650>)
 800a934:	ec51 0b18 	vmov	r0, r1, d8
 800a938:	2200      	movs	r2, #0
 800a93a:	f7f5 fe65 	bl	8000608 <__aeabi_dmul>
 800a93e:	4b2c      	ldr	r3, [pc, #176]	; (800a9f0 <_dtoa_r+0x650>)
 800a940:	ec41 0b18 	vmov	d8, r0, r1
 800a944:	2200      	movs	r2, #0
 800a946:	4630      	mov	r0, r6
 800a948:	4639      	mov	r1, r7
 800a94a:	f7f5 fe5d 	bl	8000608 <__aeabi_dmul>
 800a94e:	4606      	mov	r6, r0
 800a950:	460f      	mov	r7, r1
 800a952:	e7c4      	b.n	800a8de <_dtoa_r+0x53e>
 800a954:	ec51 0b17 	vmov	r0, r1, d7
 800a958:	f7f5 fe56 	bl	8000608 <__aeabi_dmul>
 800a95c:	9b02      	ldr	r3, [sp, #8]
 800a95e:	9d00      	ldr	r5, [sp, #0]
 800a960:	930c      	str	r3, [sp, #48]	; 0x30
 800a962:	ec41 0b18 	vmov	d8, r0, r1
 800a966:	4639      	mov	r1, r7
 800a968:	4630      	mov	r0, r6
 800a96a:	f7f6 f8fd 	bl	8000b68 <__aeabi_d2iz>
 800a96e:	9011      	str	r0, [sp, #68]	; 0x44
 800a970:	f7f5 fde0 	bl	8000534 <__aeabi_i2d>
 800a974:	4602      	mov	r2, r0
 800a976:	460b      	mov	r3, r1
 800a978:	4630      	mov	r0, r6
 800a97a:	4639      	mov	r1, r7
 800a97c:	f7f5 fc8c 	bl	8000298 <__aeabi_dsub>
 800a980:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a982:	3330      	adds	r3, #48	; 0x30
 800a984:	f805 3b01 	strb.w	r3, [r5], #1
 800a988:	9b02      	ldr	r3, [sp, #8]
 800a98a:	429d      	cmp	r5, r3
 800a98c:	4606      	mov	r6, r0
 800a98e:	460f      	mov	r7, r1
 800a990:	f04f 0200 	mov.w	r2, #0
 800a994:	d134      	bne.n	800aa00 <_dtoa_r+0x660>
 800a996:	4b19      	ldr	r3, [pc, #100]	; (800a9fc <_dtoa_r+0x65c>)
 800a998:	ec51 0b18 	vmov	r0, r1, d8
 800a99c:	f7f5 fc7e 	bl	800029c <__adddf3>
 800a9a0:	4602      	mov	r2, r0
 800a9a2:	460b      	mov	r3, r1
 800a9a4:	4630      	mov	r0, r6
 800a9a6:	4639      	mov	r1, r7
 800a9a8:	f7f6 f8be 	bl	8000b28 <__aeabi_dcmpgt>
 800a9ac:	2800      	cmp	r0, #0
 800a9ae:	d175      	bne.n	800aa9c <_dtoa_r+0x6fc>
 800a9b0:	ec53 2b18 	vmov	r2, r3, d8
 800a9b4:	4911      	ldr	r1, [pc, #68]	; (800a9fc <_dtoa_r+0x65c>)
 800a9b6:	2000      	movs	r0, #0
 800a9b8:	f7f5 fc6e 	bl	8000298 <__aeabi_dsub>
 800a9bc:	4602      	mov	r2, r0
 800a9be:	460b      	mov	r3, r1
 800a9c0:	4630      	mov	r0, r6
 800a9c2:	4639      	mov	r1, r7
 800a9c4:	f7f6 f892 	bl	8000aec <__aeabi_dcmplt>
 800a9c8:	2800      	cmp	r0, #0
 800a9ca:	f43f af27 	beq.w	800a81c <_dtoa_r+0x47c>
 800a9ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a9d0:	1e6b      	subs	r3, r5, #1
 800a9d2:	930c      	str	r3, [sp, #48]	; 0x30
 800a9d4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a9d8:	2b30      	cmp	r3, #48	; 0x30
 800a9da:	d0f8      	beq.n	800a9ce <_dtoa_r+0x62e>
 800a9dc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a9e0:	e04a      	b.n	800aa78 <_dtoa_r+0x6d8>
 800a9e2:	bf00      	nop
 800a9e4:	0800c8e0 	.word	0x0800c8e0
 800a9e8:	0800c8b8 	.word	0x0800c8b8
 800a9ec:	3ff00000 	.word	0x3ff00000
 800a9f0:	40240000 	.word	0x40240000
 800a9f4:	401c0000 	.word	0x401c0000
 800a9f8:	40140000 	.word	0x40140000
 800a9fc:	3fe00000 	.word	0x3fe00000
 800aa00:	4baf      	ldr	r3, [pc, #700]	; (800acc0 <_dtoa_r+0x920>)
 800aa02:	f7f5 fe01 	bl	8000608 <__aeabi_dmul>
 800aa06:	4606      	mov	r6, r0
 800aa08:	460f      	mov	r7, r1
 800aa0a:	e7ac      	b.n	800a966 <_dtoa_r+0x5c6>
 800aa0c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800aa10:	9d00      	ldr	r5, [sp, #0]
 800aa12:	4642      	mov	r2, r8
 800aa14:	464b      	mov	r3, r9
 800aa16:	4630      	mov	r0, r6
 800aa18:	4639      	mov	r1, r7
 800aa1a:	f7f5 ff1f 	bl	800085c <__aeabi_ddiv>
 800aa1e:	f7f6 f8a3 	bl	8000b68 <__aeabi_d2iz>
 800aa22:	9002      	str	r0, [sp, #8]
 800aa24:	f7f5 fd86 	bl	8000534 <__aeabi_i2d>
 800aa28:	4642      	mov	r2, r8
 800aa2a:	464b      	mov	r3, r9
 800aa2c:	f7f5 fdec 	bl	8000608 <__aeabi_dmul>
 800aa30:	4602      	mov	r2, r0
 800aa32:	460b      	mov	r3, r1
 800aa34:	4630      	mov	r0, r6
 800aa36:	4639      	mov	r1, r7
 800aa38:	f7f5 fc2e 	bl	8000298 <__aeabi_dsub>
 800aa3c:	9e02      	ldr	r6, [sp, #8]
 800aa3e:	9f01      	ldr	r7, [sp, #4]
 800aa40:	3630      	adds	r6, #48	; 0x30
 800aa42:	f805 6b01 	strb.w	r6, [r5], #1
 800aa46:	9e00      	ldr	r6, [sp, #0]
 800aa48:	1bae      	subs	r6, r5, r6
 800aa4a:	42b7      	cmp	r7, r6
 800aa4c:	4602      	mov	r2, r0
 800aa4e:	460b      	mov	r3, r1
 800aa50:	d137      	bne.n	800aac2 <_dtoa_r+0x722>
 800aa52:	f7f5 fc23 	bl	800029c <__adddf3>
 800aa56:	4642      	mov	r2, r8
 800aa58:	464b      	mov	r3, r9
 800aa5a:	4606      	mov	r6, r0
 800aa5c:	460f      	mov	r7, r1
 800aa5e:	f7f6 f863 	bl	8000b28 <__aeabi_dcmpgt>
 800aa62:	b9c8      	cbnz	r0, 800aa98 <_dtoa_r+0x6f8>
 800aa64:	4642      	mov	r2, r8
 800aa66:	464b      	mov	r3, r9
 800aa68:	4630      	mov	r0, r6
 800aa6a:	4639      	mov	r1, r7
 800aa6c:	f7f6 f834 	bl	8000ad8 <__aeabi_dcmpeq>
 800aa70:	b110      	cbz	r0, 800aa78 <_dtoa_r+0x6d8>
 800aa72:	9b02      	ldr	r3, [sp, #8]
 800aa74:	07d9      	lsls	r1, r3, #31
 800aa76:	d40f      	bmi.n	800aa98 <_dtoa_r+0x6f8>
 800aa78:	4620      	mov	r0, r4
 800aa7a:	4659      	mov	r1, fp
 800aa7c:	f000 fbc2 	bl	800b204 <_Bfree>
 800aa80:	2300      	movs	r3, #0
 800aa82:	702b      	strb	r3, [r5, #0]
 800aa84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aa86:	f10a 0001 	add.w	r0, sl, #1
 800aa8a:	6018      	str	r0, [r3, #0]
 800aa8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	f43f acd8 	beq.w	800a444 <_dtoa_r+0xa4>
 800aa94:	601d      	str	r5, [r3, #0]
 800aa96:	e4d5      	b.n	800a444 <_dtoa_r+0xa4>
 800aa98:	f8cd a01c 	str.w	sl, [sp, #28]
 800aa9c:	462b      	mov	r3, r5
 800aa9e:	461d      	mov	r5, r3
 800aaa0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aaa4:	2a39      	cmp	r2, #57	; 0x39
 800aaa6:	d108      	bne.n	800aaba <_dtoa_r+0x71a>
 800aaa8:	9a00      	ldr	r2, [sp, #0]
 800aaaa:	429a      	cmp	r2, r3
 800aaac:	d1f7      	bne.n	800aa9e <_dtoa_r+0x6fe>
 800aaae:	9a07      	ldr	r2, [sp, #28]
 800aab0:	9900      	ldr	r1, [sp, #0]
 800aab2:	3201      	adds	r2, #1
 800aab4:	9207      	str	r2, [sp, #28]
 800aab6:	2230      	movs	r2, #48	; 0x30
 800aab8:	700a      	strb	r2, [r1, #0]
 800aaba:	781a      	ldrb	r2, [r3, #0]
 800aabc:	3201      	adds	r2, #1
 800aabe:	701a      	strb	r2, [r3, #0]
 800aac0:	e78c      	b.n	800a9dc <_dtoa_r+0x63c>
 800aac2:	4b7f      	ldr	r3, [pc, #508]	; (800acc0 <_dtoa_r+0x920>)
 800aac4:	2200      	movs	r2, #0
 800aac6:	f7f5 fd9f 	bl	8000608 <__aeabi_dmul>
 800aaca:	2200      	movs	r2, #0
 800aacc:	2300      	movs	r3, #0
 800aace:	4606      	mov	r6, r0
 800aad0:	460f      	mov	r7, r1
 800aad2:	f7f6 f801 	bl	8000ad8 <__aeabi_dcmpeq>
 800aad6:	2800      	cmp	r0, #0
 800aad8:	d09b      	beq.n	800aa12 <_dtoa_r+0x672>
 800aada:	e7cd      	b.n	800aa78 <_dtoa_r+0x6d8>
 800aadc:	9a08      	ldr	r2, [sp, #32]
 800aade:	2a00      	cmp	r2, #0
 800aae0:	f000 80c4 	beq.w	800ac6c <_dtoa_r+0x8cc>
 800aae4:	9a05      	ldr	r2, [sp, #20]
 800aae6:	2a01      	cmp	r2, #1
 800aae8:	f300 80a8 	bgt.w	800ac3c <_dtoa_r+0x89c>
 800aaec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aaee:	2a00      	cmp	r2, #0
 800aaf0:	f000 80a0 	beq.w	800ac34 <_dtoa_r+0x894>
 800aaf4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800aaf8:	9e06      	ldr	r6, [sp, #24]
 800aafa:	4645      	mov	r5, r8
 800aafc:	9a04      	ldr	r2, [sp, #16]
 800aafe:	2101      	movs	r1, #1
 800ab00:	441a      	add	r2, r3
 800ab02:	4620      	mov	r0, r4
 800ab04:	4498      	add	r8, r3
 800ab06:	9204      	str	r2, [sp, #16]
 800ab08:	f000 fc38 	bl	800b37c <__i2b>
 800ab0c:	4607      	mov	r7, r0
 800ab0e:	2d00      	cmp	r5, #0
 800ab10:	dd0b      	ble.n	800ab2a <_dtoa_r+0x78a>
 800ab12:	9b04      	ldr	r3, [sp, #16]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	dd08      	ble.n	800ab2a <_dtoa_r+0x78a>
 800ab18:	42ab      	cmp	r3, r5
 800ab1a:	9a04      	ldr	r2, [sp, #16]
 800ab1c:	bfa8      	it	ge
 800ab1e:	462b      	movge	r3, r5
 800ab20:	eba8 0803 	sub.w	r8, r8, r3
 800ab24:	1aed      	subs	r5, r5, r3
 800ab26:	1ad3      	subs	r3, r2, r3
 800ab28:	9304      	str	r3, [sp, #16]
 800ab2a:	9b06      	ldr	r3, [sp, #24]
 800ab2c:	b1fb      	cbz	r3, 800ab6e <_dtoa_r+0x7ce>
 800ab2e:	9b08      	ldr	r3, [sp, #32]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	f000 809f 	beq.w	800ac74 <_dtoa_r+0x8d4>
 800ab36:	2e00      	cmp	r6, #0
 800ab38:	dd11      	ble.n	800ab5e <_dtoa_r+0x7be>
 800ab3a:	4639      	mov	r1, r7
 800ab3c:	4632      	mov	r2, r6
 800ab3e:	4620      	mov	r0, r4
 800ab40:	f000 fcd8 	bl	800b4f4 <__pow5mult>
 800ab44:	465a      	mov	r2, fp
 800ab46:	4601      	mov	r1, r0
 800ab48:	4607      	mov	r7, r0
 800ab4a:	4620      	mov	r0, r4
 800ab4c:	f000 fc2c 	bl	800b3a8 <__multiply>
 800ab50:	4659      	mov	r1, fp
 800ab52:	9007      	str	r0, [sp, #28]
 800ab54:	4620      	mov	r0, r4
 800ab56:	f000 fb55 	bl	800b204 <_Bfree>
 800ab5a:	9b07      	ldr	r3, [sp, #28]
 800ab5c:	469b      	mov	fp, r3
 800ab5e:	9b06      	ldr	r3, [sp, #24]
 800ab60:	1b9a      	subs	r2, r3, r6
 800ab62:	d004      	beq.n	800ab6e <_dtoa_r+0x7ce>
 800ab64:	4659      	mov	r1, fp
 800ab66:	4620      	mov	r0, r4
 800ab68:	f000 fcc4 	bl	800b4f4 <__pow5mult>
 800ab6c:	4683      	mov	fp, r0
 800ab6e:	2101      	movs	r1, #1
 800ab70:	4620      	mov	r0, r4
 800ab72:	f000 fc03 	bl	800b37c <__i2b>
 800ab76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	4606      	mov	r6, r0
 800ab7c:	dd7c      	ble.n	800ac78 <_dtoa_r+0x8d8>
 800ab7e:	461a      	mov	r2, r3
 800ab80:	4601      	mov	r1, r0
 800ab82:	4620      	mov	r0, r4
 800ab84:	f000 fcb6 	bl	800b4f4 <__pow5mult>
 800ab88:	9b05      	ldr	r3, [sp, #20]
 800ab8a:	2b01      	cmp	r3, #1
 800ab8c:	4606      	mov	r6, r0
 800ab8e:	dd76      	ble.n	800ac7e <_dtoa_r+0x8de>
 800ab90:	2300      	movs	r3, #0
 800ab92:	9306      	str	r3, [sp, #24]
 800ab94:	6933      	ldr	r3, [r6, #16]
 800ab96:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ab9a:	6918      	ldr	r0, [r3, #16]
 800ab9c:	f000 fb9e 	bl	800b2dc <__hi0bits>
 800aba0:	f1c0 0020 	rsb	r0, r0, #32
 800aba4:	9b04      	ldr	r3, [sp, #16]
 800aba6:	4418      	add	r0, r3
 800aba8:	f010 001f 	ands.w	r0, r0, #31
 800abac:	f000 8086 	beq.w	800acbc <_dtoa_r+0x91c>
 800abb0:	f1c0 0320 	rsb	r3, r0, #32
 800abb4:	2b04      	cmp	r3, #4
 800abb6:	dd7f      	ble.n	800acb8 <_dtoa_r+0x918>
 800abb8:	f1c0 001c 	rsb	r0, r0, #28
 800abbc:	9b04      	ldr	r3, [sp, #16]
 800abbe:	4403      	add	r3, r0
 800abc0:	4480      	add	r8, r0
 800abc2:	4405      	add	r5, r0
 800abc4:	9304      	str	r3, [sp, #16]
 800abc6:	f1b8 0f00 	cmp.w	r8, #0
 800abca:	dd05      	ble.n	800abd8 <_dtoa_r+0x838>
 800abcc:	4659      	mov	r1, fp
 800abce:	4642      	mov	r2, r8
 800abd0:	4620      	mov	r0, r4
 800abd2:	f000 fce9 	bl	800b5a8 <__lshift>
 800abd6:	4683      	mov	fp, r0
 800abd8:	9b04      	ldr	r3, [sp, #16]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	dd05      	ble.n	800abea <_dtoa_r+0x84a>
 800abde:	4631      	mov	r1, r6
 800abe0:	461a      	mov	r2, r3
 800abe2:	4620      	mov	r0, r4
 800abe4:	f000 fce0 	bl	800b5a8 <__lshift>
 800abe8:	4606      	mov	r6, r0
 800abea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800abec:	2b00      	cmp	r3, #0
 800abee:	d069      	beq.n	800acc4 <_dtoa_r+0x924>
 800abf0:	4631      	mov	r1, r6
 800abf2:	4658      	mov	r0, fp
 800abf4:	f000 fd44 	bl	800b680 <__mcmp>
 800abf8:	2800      	cmp	r0, #0
 800abfa:	da63      	bge.n	800acc4 <_dtoa_r+0x924>
 800abfc:	2300      	movs	r3, #0
 800abfe:	4659      	mov	r1, fp
 800ac00:	220a      	movs	r2, #10
 800ac02:	4620      	mov	r0, r4
 800ac04:	f000 fb20 	bl	800b248 <__multadd>
 800ac08:	9b08      	ldr	r3, [sp, #32]
 800ac0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ac0e:	4683      	mov	fp, r0
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	f000 818f 	beq.w	800af34 <_dtoa_r+0xb94>
 800ac16:	4639      	mov	r1, r7
 800ac18:	2300      	movs	r3, #0
 800ac1a:	220a      	movs	r2, #10
 800ac1c:	4620      	mov	r0, r4
 800ac1e:	f000 fb13 	bl	800b248 <__multadd>
 800ac22:	f1b9 0f00 	cmp.w	r9, #0
 800ac26:	4607      	mov	r7, r0
 800ac28:	f300 808e 	bgt.w	800ad48 <_dtoa_r+0x9a8>
 800ac2c:	9b05      	ldr	r3, [sp, #20]
 800ac2e:	2b02      	cmp	r3, #2
 800ac30:	dc50      	bgt.n	800acd4 <_dtoa_r+0x934>
 800ac32:	e089      	b.n	800ad48 <_dtoa_r+0x9a8>
 800ac34:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ac36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ac3a:	e75d      	b.n	800aaf8 <_dtoa_r+0x758>
 800ac3c:	9b01      	ldr	r3, [sp, #4]
 800ac3e:	1e5e      	subs	r6, r3, #1
 800ac40:	9b06      	ldr	r3, [sp, #24]
 800ac42:	42b3      	cmp	r3, r6
 800ac44:	bfbf      	itttt	lt
 800ac46:	9b06      	ldrlt	r3, [sp, #24]
 800ac48:	9606      	strlt	r6, [sp, #24]
 800ac4a:	1af2      	sublt	r2, r6, r3
 800ac4c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800ac4e:	bfb6      	itet	lt
 800ac50:	189b      	addlt	r3, r3, r2
 800ac52:	1b9e      	subge	r6, r3, r6
 800ac54:	930d      	strlt	r3, [sp, #52]	; 0x34
 800ac56:	9b01      	ldr	r3, [sp, #4]
 800ac58:	bfb8      	it	lt
 800ac5a:	2600      	movlt	r6, #0
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	bfb5      	itete	lt
 800ac60:	eba8 0503 	sublt.w	r5, r8, r3
 800ac64:	9b01      	ldrge	r3, [sp, #4]
 800ac66:	2300      	movlt	r3, #0
 800ac68:	4645      	movge	r5, r8
 800ac6a:	e747      	b.n	800aafc <_dtoa_r+0x75c>
 800ac6c:	9e06      	ldr	r6, [sp, #24]
 800ac6e:	9f08      	ldr	r7, [sp, #32]
 800ac70:	4645      	mov	r5, r8
 800ac72:	e74c      	b.n	800ab0e <_dtoa_r+0x76e>
 800ac74:	9a06      	ldr	r2, [sp, #24]
 800ac76:	e775      	b.n	800ab64 <_dtoa_r+0x7c4>
 800ac78:	9b05      	ldr	r3, [sp, #20]
 800ac7a:	2b01      	cmp	r3, #1
 800ac7c:	dc18      	bgt.n	800acb0 <_dtoa_r+0x910>
 800ac7e:	9b02      	ldr	r3, [sp, #8]
 800ac80:	b9b3      	cbnz	r3, 800acb0 <_dtoa_r+0x910>
 800ac82:	9b03      	ldr	r3, [sp, #12]
 800ac84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac88:	b9a3      	cbnz	r3, 800acb4 <_dtoa_r+0x914>
 800ac8a:	9b03      	ldr	r3, [sp, #12]
 800ac8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ac90:	0d1b      	lsrs	r3, r3, #20
 800ac92:	051b      	lsls	r3, r3, #20
 800ac94:	b12b      	cbz	r3, 800aca2 <_dtoa_r+0x902>
 800ac96:	9b04      	ldr	r3, [sp, #16]
 800ac98:	3301      	adds	r3, #1
 800ac9a:	9304      	str	r3, [sp, #16]
 800ac9c:	f108 0801 	add.w	r8, r8, #1
 800aca0:	2301      	movs	r3, #1
 800aca2:	9306      	str	r3, [sp, #24]
 800aca4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	f47f af74 	bne.w	800ab94 <_dtoa_r+0x7f4>
 800acac:	2001      	movs	r0, #1
 800acae:	e779      	b.n	800aba4 <_dtoa_r+0x804>
 800acb0:	2300      	movs	r3, #0
 800acb2:	e7f6      	b.n	800aca2 <_dtoa_r+0x902>
 800acb4:	9b02      	ldr	r3, [sp, #8]
 800acb6:	e7f4      	b.n	800aca2 <_dtoa_r+0x902>
 800acb8:	d085      	beq.n	800abc6 <_dtoa_r+0x826>
 800acba:	4618      	mov	r0, r3
 800acbc:	301c      	adds	r0, #28
 800acbe:	e77d      	b.n	800abbc <_dtoa_r+0x81c>
 800acc0:	40240000 	.word	0x40240000
 800acc4:	9b01      	ldr	r3, [sp, #4]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	dc38      	bgt.n	800ad3c <_dtoa_r+0x99c>
 800acca:	9b05      	ldr	r3, [sp, #20]
 800accc:	2b02      	cmp	r3, #2
 800acce:	dd35      	ble.n	800ad3c <_dtoa_r+0x99c>
 800acd0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800acd4:	f1b9 0f00 	cmp.w	r9, #0
 800acd8:	d10d      	bne.n	800acf6 <_dtoa_r+0x956>
 800acda:	4631      	mov	r1, r6
 800acdc:	464b      	mov	r3, r9
 800acde:	2205      	movs	r2, #5
 800ace0:	4620      	mov	r0, r4
 800ace2:	f000 fab1 	bl	800b248 <__multadd>
 800ace6:	4601      	mov	r1, r0
 800ace8:	4606      	mov	r6, r0
 800acea:	4658      	mov	r0, fp
 800acec:	f000 fcc8 	bl	800b680 <__mcmp>
 800acf0:	2800      	cmp	r0, #0
 800acf2:	f73f adbd 	bgt.w	800a870 <_dtoa_r+0x4d0>
 800acf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acf8:	9d00      	ldr	r5, [sp, #0]
 800acfa:	ea6f 0a03 	mvn.w	sl, r3
 800acfe:	f04f 0800 	mov.w	r8, #0
 800ad02:	4631      	mov	r1, r6
 800ad04:	4620      	mov	r0, r4
 800ad06:	f000 fa7d 	bl	800b204 <_Bfree>
 800ad0a:	2f00      	cmp	r7, #0
 800ad0c:	f43f aeb4 	beq.w	800aa78 <_dtoa_r+0x6d8>
 800ad10:	f1b8 0f00 	cmp.w	r8, #0
 800ad14:	d005      	beq.n	800ad22 <_dtoa_r+0x982>
 800ad16:	45b8      	cmp	r8, r7
 800ad18:	d003      	beq.n	800ad22 <_dtoa_r+0x982>
 800ad1a:	4641      	mov	r1, r8
 800ad1c:	4620      	mov	r0, r4
 800ad1e:	f000 fa71 	bl	800b204 <_Bfree>
 800ad22:	4639      	mov	r1, r7
 800ad24:	4620      	mov	r0, r4
 800ad26:	f000 fa6d 	bl	800b204 <_Bfree>
 800ad2a:	e6a5      	b.n	800aa78 <_dtoa_r+0x6d8>
 800ad2c:	2600      	movs	r6, #0
 800ad2e:	4637      	mov	r7, r6
 800ad30:	e7e1      	b.n	800acf6 <_dtoa_r+0x956>
 800ad32:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ad34:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ad38:	4637      	mov	r7, r6
 800ad3a:	e599      	b.n	800a870 <_dtoa_r+0x4d0>
 800ad3c:	9b08      	ldr	r3, [sp, #32]
 800ad3e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	f000 80fd 	beq.w	800af42 <_dtoa_r+0xba2>
 800ad48:	2d00      	cmp	r5, #0
 800ad4a:	dd05      	ble.n	800ad58 <_dtoa_r+0x9b8>
 800ad4c:	4639      	mov	r1, r7
 800ad4e:	462a      	mov	r2, r5
 800ad50:	4620      	mov	r0, r4
 800ad52:	f000 fc29 	bl	800b5a8 <__lshift>
 800ad56:	4607      	mov	r7, r0
 800ad58:	9b06      	ldr	r3, [sp, #24]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d05c      	beq.n	800ae18 <_dtoa_r+0xa78>
 800ad5e:	6879      	ldr	r1, [r7, #4]
 800ad60:	4620      	mov	r0, r4
 800ad62:	f000 fa0f 	bl	800b184 <_Balloc>
 800ad66:	4605      	mov	r5, r0
 800ad68:	b928      	cbnz	r0, 800ad76 <_dtoa_r+0x9d6>
 800ad6a:	4b80      	ldr	r3, [pc, #512]	; (800af6c <_dtoa_r+0xbcc>)
 800ad6c:	4602      	mov	r2, r0
 800ad6e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ad72:	f7ff bb2e 	b.w	800a3d2 <_dtoa_r+0x32>
 800ad76:	693a      	ldr	r2, [r7, #16]
 800ad78:	3202      	adds	r2, #2
 800ad7a:	0092      	lsls	r2, r2, #2
 800ad7c:	f107 010c 	add.w	r1, r7, #12
 800ad80:	300c      	adds	r0, #12
 800ad82:	f7fe fddf 	bl	8009944 <memcpy>
 800ad86:	2201      	movs	r2, #1
 800ad88:	4629      	mov	r1, r5
 800ad8a:	4620      	mov	r0, r4
 800ad8c:	f000 fc0c 	bl	800b5a8 <__lshift>
 800ad90:	9b00      	ldr	r3, [sp, #0]
 800ad92:	3301      	adds	r3, #1
 800ad94:	9301      	str	r3, [sp, #4]
 800ad96:	9b00      	ldr	r3, [sp, #0]
 800ad98:	444b      	add	r3, r9
 800ad9a:	9307      	str	r3, [sp, #28]
 800ad9c:	9b02      	ldr	r3, [sp, #8]
 800ad9e:	f003 0301 	and.w	r3, r3, #1
 800ada2:	46b8      	mov	r8, r7
 800ada4:	9306      	str	r3, [sp, #24]
 800ada6:	4607      	mov	r7, r0
 800ada8:	9b01      	ldr	r3, [sp, #4]
 800adaa:	4631      	mov	r1, r6
 800adac:	3b01      	subs	r3, #1
 800adae:	4658      	mov	r0, fp
 800adb0:	9302      	str	r3, [sp, #8]
 800adb2:	f7ff fa67 	bl	800a284 <quorem>
 800adb6:	4603      	mov	r3, r0
 800adb8:	3330      	adds	r3, #48	; 0x30
 800adba:	9004      	str	r0, [sp, #16]
 800adbc:	4641      	mov	r1, r8
 800adbe:	4658      	mov	r0, fp
 800adc0:	9308      	str	r3, [sp, #32]
 800adc2:	f000 fc5d 	bl	800b680 <__mcmp>
 800adc6:	463a      	mov	r2, r7
 800adc8:	4681      	mov	r9, r0
 800adca:	4631      	mov	r1, r6
 800adcc:	4620      	mov	r0, r4
 800adce:	f000 fc73 	bl	800b6b8 <__mdiff>
 800add2:	68c2      	ldr	r2, [r0, #12]
 800add4:	9b08      	ldr	r3, [sp, #32]
 800add6:	4605      	mov	r5, r0
 800add8:	bb02      	cbnz	r2, 800ae1c <_dtoa_r+0xa7c>
 800adda:	4601      	mov	r1, r0
 800addc:	4658      	mov	r0, fp
 800adde:	f000 fc4f 	bl	800b680 <__mcmp>
 800ade2:	9b08      	ldr	r3, [sp, #32]
 800ade4:	4602      	mov	r2, r0
 800ade6:	4629      	mov	r1, r5
 800ade8:	4620      	mov	r0, r4
 800adea:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800adee:	f000 fa09 	bl	800b204 <_Bfree>
 800adf2:	9b05      	ldr	r3, [sp, #20]
 800adf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800adf6:	9d01      	ldr	r5, [sp, #4]
 800adf8:	ea43 0102 	orr.w	r1, r3, r2
 800adfc:	9b06      	ldr	r3, [sp, #24]
 800adfe:	430b      	orrs	r3, r1
 800ae00:	9b08      	ldr	r3, [sp, #32]
 800ae02:	d10d      	bne.n	800ae20 <_dtoa_r+0xa80>
 800ae04:	2b39      	cmp	r3, #57	; 0x39
 800ae06:	d029      	beq.n	800ae5c <_dtoa_r+0xabc>
 800ae08:	f1b9 0f00 	cmp.w	r9, #0
 800ae0c:	dd01      	ble.n	800ae12 <_dtoa_r+0xa72>
 800ae0e:	9b04      	ldr	r3, [sp, #16]
 800ae10:	3331      	adds	r3, #49	; 0x31
 800ae12:	9a02      	ldr	r2, [sp, #8]
 800ae14:	7013      	strb	r3, [r2, #0]
 800ae16:	e774      	b.n	800ad02 <_dtoa_r+0x962>
 800ae18:	4638      	mov	r0, r7
 800ae1a:	e7b9      	b.n	800ad90 <_dtoa_r+0x9f0>
 800ae1c:	2201      	movs	r2, #1
 800ae1e:	e7e2      	b.n	800ade6 <_dtoa_r+0xa46>
 800ae20:	f1b9 0f00 	cmp.w	r9, #0
 800ae24:	db06      	blt.n	800ae34 <_dtoa_r+0xa94>
 800ae26:	9905      	ldr	r1, [sp, #20]
 800ae28:	ea41 0909 	orr.w	r9, r1, r9
 800ae2c:	9906      	ldr	r1, [sp, #24]
 800ae2e:	ea59 0101 	orrs.w	r1, r9, r1
 800ae32:	d120      	bne.n	800ae76 <_dtoa_r+0xad6>
 800ae34:	2a00      	cmp	r2, #0
 800ae36:	ddec      	ble.n	800ae12 <_dtoa_r+0xa72>
 800ae38:	4659      	mov	r1, fp
 800ae3a:	2201      	movs	r2, #1
 800ae3c:	4620      	mov	r0, r4
 800ae3e:	9301      	str	r3, [sp, #4]
 800ae40:	f000 fbb2 	bl	800b5a8 <__lshift>
 800ae44:	4631      	mov	r1, r6
 800ae46:	4683      	mov	fp, r0
 800ae48:	f000 fc1a 	bl	800b680 <__mcmp>
 800ae4c:	2800      	cmp	r0, #0
 800ae4e:	9b01      	ldr	r3, [sp, #4]
 800ae50:	dc02      	bgt.n	800ae58 <_dtoa_r+0xab8>
 800ae52:	d1de      	bne.n	800ae12 <_dtoa_r+0xa72>
 800ae54:	07da      	lsls	r2, r3, #31
 800ae56:	d5dc      	bpl.n	800ae12 <_dtoa_r+0xa72>
 800ae58:	2b39      	cmp	r3, #57	; 0x39
 800ae5a:	d1d8      	bne.n	800ae0e <_dtoa_r+0xa6e>
 800ae5c:	9a02      	ldr	r2, [sp, #8]
 800ae5e:	2339      	movs	r3, #57	; 0x39
 800ae60:	7013      	strb	r3, [r2, #0]
 800ae62:	462b      	mov	r3, r5
 800ae64:	461d      	mov	r5, r3
 800ae66:	3b01      	subs	r3, #1
 800ae68:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ae6c:	2a39      	cmp	r2, #57	; 0x39
 800ae6e:	d050      	beq.n	800af12 <_dtoa_r+0xb72>
 800ae70:	3201      	adds	r2, #1
 800ae72:	701a      	strb	r2, [r3, #0]
 800ae74:	e745      	b.n	800ad02 <_dtoa_r+0x962>
 800ae76:	2a00      	cmp	r2, #0
 800ae78:	dd03      	ble.n	800ae82 <_dtoa_r+0xae2>
 800ae7a:	2b39      	cmp	r3, #57	; 0x39
 800ae7c:	d0ee      	beq.n	800ae5c <_dtoa_r+0xabc>
 800ae7e:	3301      	adds	r3, #1
 800ae80:	e7c7      	b.n	800ae12 <_dtoa_r+0xa72>
 800ae82:	9a01      	ldr	r2, [sp, #4]
 800ae84:	9907      	ldr	r1, [sp, #28]
 800ae86:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ae8a:	428a      	cmp	r2, r1
 800ae8c:	d02a      	beq.n	800aee4 <_dtoa_r+0xb44>
 800ae8e:	4659      	mov	r1, fp
 800ae90:	2300      	movs	r3, #0
 800ae92:	220a      	movs	r2, #10
 800ae94:	4620      	mov	r0, r4
 800ae96:	f000 f9d7 	bl	800b248 <__multadd>
 800ae9a:	45b8      	cmp	r8, r7
 800ae9c:	4683      	mov	fp, r0
 800ae9e:	f04f 0300 	mov.w	r3, #0
 800aea2:	f04f 020a 	mov.w	r2, #10
 800aea6:	4641      	mov	r1, r8
 800aea8:	4620      	mov	r0, r4
 800aeaa:	d107      	bne.n	800aebc <_dtoa_r+0xb1c>
 800aeac:	f000 f9cc 	bl	800b248 <__multadd>
 800aeb0:	4680      	mov	r8, r0
 800aeb2:	4607      	mov	r7, r0
 800aeb4:	9b01      	ldr	r3, [sp, #4]
 800aeb6:	3301      	adds	r3, #1
 800aeb8:	9301      	str	r3, [sp, #4]
 800aeba:	e775      	b.n	800ada8 <_dtoa_r+0xa08>
 800aebc:	f000 f9c4 	bl	800b248 <__multadd>
 800aec0:	4639      	mov	r1, r7
 800aec2:	4680      	mov	r8, r0
 800aec4:	2300      	movs	r3, #0
 800aec6:	220a      	movs	r2, #10
 800aec8:	4620      	mov	r0, r4
 800aeca:	f000 f9bd 	bl	800b248 <__multadd>
 800aece:	4607      	mov	r7, r0
 800aed0:	e7f0      	b.n	800aeb4 <_dtoa_r+0xb14>
 800aed2:	f1b9 0f00 	cmp.w	r9, #0
 800aed6:	9a00      	ldr	r2, [sp, #0]
 800aed8:	bfcc      	ite	gt
 800aeda:	464d      	movgt	r5, r9
 800aedc:	2501      	movle	r5, #1
 800aede:	4415      	add	r5, r2
 800aee0:	f04f 0800 	mov.w	r8, #0
 800aee4:	4659      	mov	r1, fp
 800aee6:	2201      	movs	r2, #1
 800aee8:	4620      	mov	r0, r4
 800aeea:	9301      	str	r3, [sp, #4]
 800aeec:	f000 fb5c 	bl	800b5a8 <__lshift>
 800aef0:	4631      	mov	r1, r6
 800aef2:	4683      	mov	fp, r0
 800aef4:	f000 fbc4 	bl	800b680 <__mcmp>
 800aef8:	2800      	cmp	r0, #0
 800aefa:	dcb2      	bgt.n	800ae62 <_dtoa_r+0xac2>
 800aefc:	d102      	bne.n	800af04 <_dtoa_r+0xb64>
 800aefe:	9b01      	ldr	r3, [sp, #4]
 800af00:	07db      	lsls	r3, r3, #31
 800af02:	d4ae      	bmi.n	800ae62 <_dtoa_r+0xac2>
 800af04:	462b      	mov	r3, r5
 800af06:	461d      	mov	r5, r3
 800af08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af0c:	2a30      	cmp	r2, #48	; 0x30
 800af0e:	d0fa      	beq.n	800af06 <_dtoa_r+0xb66>
 800af10:	e6f7      	b.n	800ad02 <_dtoa_r+0x962>
 800af12:	9a00      	ldr	r2, [sp, #0]
 800af14:	429a      	cmp	r2, r3
 800af16:	d1a5      	bne.n	800ae64 <_dtoa_r+0xac4>
 800af18:	f10a 0a01 	add.w	sl, sl, #1
 800af1c:	2331      	movs	r3, #49	; 0x31
 800af1e:	e779      	b.n	800ae14 <_dtoa_r+0xa74>
 800af20:	4b13      	ldr	r3, [pc, #76]	; (800af70 <_dtoa_r+0xbd0>)
 800af22:	f7ff baaf 	b.w	800a484 <_dtoa_r+0xe4>
 800af26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af28:	2b00      	cmp	r3, #0
 800af2a:	f47f aa86 	bne.w	800a43a <_dtoa_r+0x9a>
 800af2e:	4b11      	ldr	r3, [pc, #68]	; (800af74 <_dtoa_r+0xbd4>)
 800af30:	f7ff baa8 	b.w	800a484 <_dtoa_r+0xe4>
 800af34:	f1b9 0f00 	cmp.w	r9, #0
 800af38:	dc03      	bgt.n	800af42 <_dtoa_r+0xba2>
 800af3a:	9b05      	ldr	r3, [sp, #20]
 800af3c:	2b02      	cmp	r3, #2
 800af3e:	f73f aec9 	bgt.w	800acd4 <_dtoa_r+0x934>
 800af42:	9d00      	ldr	r5, [sp, #0]
 800af44:	4631      	mov	r1, r6
 800af46:	4658      	mov	r0, fp
 800af48:	f7ff f99c 	bl	800a284 <quorem>
 800af4c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800af50:	f805 3b01 	strb.w	r3, [r5], #1
 800af54:	9a00      	ldr	r2, [sp, #0]
 800af56:	1aaa      	subs	r2, r5, r2
 800af58:	4591      	cmp	r9, r2
 800af5a:	ddba      	ble.n	800aed2 <_dtoa_r+0xb32>
 800af5c:	4659      	mov	r1, fp
 800af5e:	2300      	movs	r3, #0
 800af60:	220a      	movs	r2, #10
 800af62:	4620      	mov	r0, r4
 800af64:	f000 f970 	bl	800b248 <__multadd>
 800af68:	4683      	mov	fp, r0
 800af6a:	e7eb      	b.n	800af44 <_dtoa_r+0xba4>
 800af6c:	0800c7e7 	.word	0x0800c7e7
 800af70:	0800c740 	.word	0x0800c740
 800af74:	0800c764 	.word	0x0800c764

0800af78 <std>:
 800af78:	2300      	movs	r3, #0
 800af7a:	b510      	push	{r4, lr}
 800af7c:	4604      	mov	r4, r0
 800af7e:	e9c0 3300 	strd	r3, r3, [r0]
 800af82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af86:	6083      	str	r3, [r0, #8]
 800af88:	8181      	strh	r1, [r0, #12]
 800af8a:	6643      	str	r3, [r0, #100]	; 0x64
 800af8c:	81c2      	strh	r2, [r0, #14]
 800af8e:	6183      	str	r3, [r0, #24]
 800af90:	4619      	mov	r1, r3
 800af92:	2208      	movs	r2, #8
 800af94:	305c      	adds	r0, #92	; 0x5c
 800af96:	f7fe fce3 	bl	8009960 <memset>
 800af9a:	4b05      	ldr	r3, [pc, #20]	; (800afb0 <std+0x38>)
 800af9c:	6263      	str	r3, [r4, #36]	; 0x24
 800af9e:	4b05      	ldr	r3, [pc, #20]	; (800afb4 <std+0x3c>)
 800afa0:	62a3      	str	r3, [r4, #40]	; 0x28
 800afa2:	4b05      	ldr	r3, [pc, #20]	; (800afb8 <std+0x40>)
 800afa4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800afa6:	4b05      	ldr	r3, [pc, #20]	; (800afbc <std+0x44>)
 800afa8:	6224      	str	r4, [r4, #32]
 800afaa:	6323      	str	r3, [r4, #48]	; 0x30
 800afac:	bd10      	pop	{r4, pc}
 800afae:	bf00      	nop
 800afb0:	0800bf81 	.word	0x0800bf81
 800afb4:	0800bfa3 	.word	0x0800bfa3
 800afb8:	0800bfdb 	.word	0x0800bfdb
 800afbc:	0800bfff 	.word	0x0800bfff

0800afc0 <_cleanup_r>:
 800afc0:	4901      	ldr	r1, [pc, #4]	; (800afc8 <_cleanup_r+0x8>)
 800afc2:	f000 b8af 	b.w	800b124 <_fwalk_reent>
 800afc6:	bf00      	nop
 800afc8:	0800c315 	.word	0x0800c315

0800afcc <__sfmoreglue>:
 800afcc:	b570      	push	{r4, r5, r6, lr}
 800afce:	1e4a      	subs	r2, r1, #1
 800afd0:	2568      	movs	r5, #104	; 0x68
 800afd2:	4355      	muls	r5, r2
 800afd4:	460e      	mov	r6, r1
 800afd6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800afda:	f000 fcb1 	bl	800b940 <_malloc_r>
 800afde:	4604      	mov	r4, r0
 800afe0:	b140      	cbz	r0, 800aff4 <__sfmoreglue+0x28>
 800afe2:	2100      	movs	r1, #0
 800afe4:	e9c0 1600 	strd	r1, r6, [r0]
 800afe8:	300c      	adds	r0, #12
 800afea:	60a0      	str	r0, [r4, #8]
 800afec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aff0:	f7fe fcb6 	bl	8009960 <memset>
 800aff4:	4620      	mov	r0, r4
 800aff6:	bd70      	pop	{r4, r5, r6, pc}

0800aff8 <__sfp_lock_acquire>:
 800aff8:	4801      	ldr	r0, [pc, #4]	; (800b000 <__sfp_lock_acquire+0x8>)
 800affa:	f000 b8b8 	b.w	800b16e <__retarget_lock_acquire_recursive>
 800affe:	bf00      	nop
 800b000:	20001f70 	.word	0x20001f70

0800b004 <__sfp_lock_release>:
 800b004:	4801      	ldr	r0, [pc, #4]	; (800b00c <__sfp_lock_release+0x8>)
 800b006:	f000 b8b3 	b.w	800b170 <__retarget_lock_release_recursive>
 800b00a:	bf00      	nop
 800b00c:	20001f70 	.word	0x20001f70

0800b010 <__sinit_lock_acquire>:
 800b010:	4801      	ldr	r0, [pc, #4]	; (800b018 <__sinit_lock_acquire+0x8>)
 800b012:	f000 b8ac 	b.w	800b16e <__retarget_lock_acquire_recursive>
 800b016:	bf00      	nop
 800b018:	20001f6b 	.word	0x20001f6b

0800b01c <__sinit_lock_release>:
 800b01c:	4801      	ldr	r0, [pc, #4]	; (800b024 <__sinit_lock_release+0x8>)
 800b01e:	f000 b8a7 	b.w	800b170 <__retarget_lock_release_recursive>
 800b022:	bf00      	nop
 800b024:	20001f6b 	.word	0x20001f6b

0800b028 <__sinit>:
 800b028:	b510      	push	{r4, lr}
 800b02a:	4604      	mov	r4, r0
 800b02c:	f7ff fff0 	bl	800b010 <__sinit_lock_acquire>
 800b030:	69a3      	ldr	r3, [r4, #24]
 800b032:	b11b      	cbz	r3, 800b03c <__sinit+0x14>
 800b034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b038:	f7ff bff0 	b.w	800b01c <__sinit_lock_release>
 800b03c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b040:	6523      	str	r3, [r4, #80]	; 0x50
 800b042:	4b13      	ldr	r3, [pc, #76]	; (800b090 <__sinit+0x68>)
 800b044:	4a13      	ldr	r2, [pc, #76]	; (800b094 <__sinit+0x6c>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	62a2      	str	r2, [r4, #40]	; 0x28
 800b04a:	42a3      	cmp	r3, r4
 800b04c:	bf04      	itt	eq
 800b04e:	2301      	moveq	r3, #1
 800b050:	61a3      	streq	r3, [r4, #24]
 800b052:	4620      	mov	r0, r4
 800b054:	f000 f820 	bl	800b098 <__sfp>
 800b058:	6060      	str	r0, [r4, #4]
 800b05a:	4620      	mov	r0, r4
 800b05c:	f000 f81c 	bl	800b098 <__sfp>
 800b060:	60a0      	str	r0, [r4, #8]
 800b062:	4620      	mov	r0, r4
 800b064:	f000 f818 	bl	800b098 <__sfp>
 800b068:	2200      	movs	r2, #0
 800b06a:	60e0      	str	r0, [r4, #12]
 800b06c:	2104      	movs	r1, #4
 800b06e:	6860      	ldr	r0, [r4, #4]
 800b070:	f7ff ff82 	bl	800af78 <std>
 800b074:	68a0      	ldr	r0, [r4, #8]
 800b076:	2201      	movs	r2, #1
 800b078:	2109      	movs	r1, #9
 800b07a:	f7ff ff7d 	bl	800af78 <std>
 800b07e:	68e0      	ldr	r0, [r4, #12]
 800b080:	2202      	movs	r2, #2
 800b082:	2112      	movs	r1, #18
 800b084:	f7ff ff78 	bl	800af78 <std>
 800b088:	2301      	movs	r3, #1
 800b08a:	61a3      	str	r3, [r4, #24]
 800b08c:	e7d2      	b.n	800b034 <__sinit+0xc>
 800b08e:	bf00      	nop
 800b090:	0800c72c 	.word	0x0800c72c
 800b094:	0800afc1 	.word	0x0800afc1

0800b098 <__sfp>:
 800b098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b09a:	4607      	mov	r7, r0
 800b09c:	f7ff ffac 	bl	800aff8 <__sfp_lock_acquire>
 800b0a0:	4b1e      	ldr	r3, [pc, #120]	; (800b11c <__sfp+0x84>)
 800b0a2:	681e      	ldr	r6, [r3, #0]
 800b0a4:	69b3      	ldr	r3, [r6, #24]
 800b0a6:	b913      	cbnz	r3, 800b0ae <__sfp+0x16>
 800b0a8:	4630      	mov	r0, r6
 800b0aa:	f7ff ffbd 	bl	800b028 <__sinit>
 800b0ae:	3648      	adds	r6, #72	; 0x48
 800b0b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b0b4:	3b01      	subs	r3, #1
 800b0b6:	d503      	bpl.n	800b0c0 <__sfp+0x28>
 800b0b8:	6833      	ldr	r3, [r6, #0]
 800b0ba:	b30b      	cbz	r3, 800b100 <__sfp+0x68>
 800b0bc:	6836      	ldr	r6, [r6, #0]
 800b0be:	e7f7      	b.n	800b0b0 <__sfp+0x18>
 800b0c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b0c4:	b9d5      	cbnz	r5, 800b0fc <__sfp+0x64>
 800b0c6:	4b16      	ldr	r3, [pc, #88]	; (800b120 <__sfp+0x88>)
 800b0c8:	60e3      	str	r3, [r4, #12]
 800b0ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b0ce:	6665      	str	r5, [r4, #100]	; 0x64
 800b0d0:	f000 f84c 	bl	800b16c <__retarget_lock_init_recursive>
 800b0d4:	f7ff ff96 	bl	800b004 <__sfp_lock_release>
 800b0d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b0dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b0e0:	6025      	str	r5, [r4, #0]
 800b0e2:	61a5      	str	r5, [r4, #24]
 800b0e4:	2208      	movs	r2, #8
 800b0e6:	4629      	mov	r1, r5
 800b0e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b0ec:	f7fe fc38 	bl	8009960 <memset>
 800b0f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b0f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b0f8:	4620      	mov	r0, r4
 800b0fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0fc:	3468      	adds	r4, #104	; 0x68
 800b0fe:	e7d9      	b.n	800b0b4 <__sfp+0x1c>
 800b100:	2104      	movs	r1, #4
 800b102:	4638      	mov	r0, r7
 800b104:	f7ff ff62 	bl	800afcc <__sfmoreglue>
 800b108:	4604      	mov	r4, r0
 800b10a:	6030      	str	r0, [r6, #0]
 800b10c:	2800      	cmp	r0, #0
 800b10e:	d1d5      	bne.n	800b0bc <__sfp+0x24>
 800b110:	f7ff ff78 	bl	800b004 <__sfp_lock_release>
 800b114:	230c      	movs	r3, #12
 800b116:	603b      	str	r3, [r7, #0]
 800b118:	e7ee      	b.n	800b0f8 <__sfp+0x60>
 800b11a:	bf00      	nop
 800b11c:	0800c72c 	.word	0x0800c72c
 800b120:	ffff0001 	.word	0xffff0001

0800b124 <_fwalk_reent>:
 800b124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b128:	4606      	mov	r6, r0
 800b12a:	4688      	mov	r8, r1
 800b12c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b130:	2700      	movs	r7, #0
 800b132:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b136:	f1b9 0901 	subs.w	r9, r9, #1
 800b13a:	d505      	bpl.n	800b148 <_fwalk_reent+0x24>
 800b13c:	6824      	ldr	r4, [r4, #0]
 800b13e:	2c00      	cmp	r4, #0
 800b140:	d1f7      	bne.n	800b132 <_fwalk_reent+0xe>
 800b142:	4638      	mov	r0, r7
 800b144:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b148:	89ab      	ldrh	r3, [r5, #12]
 800b14a:	2b01      	cmp	r3, #1
 800b14c:	d907      	bls.n	800b15e <_fwalk_reent+0x3a>
 800b14e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b152:	3301      	adds	r3, #1
 800b154:	d003      	beq.n	800b15e <_fwalk_reent+0x3a>
 800b156:	4629      	mov	r1, r5
 800b158:	4630      	mov	r0, r6
 800b15a:	47c0      	blx	r8
 800b15c:	4307      	orrs	r7, r0
 800b15e:	3568      	adds	r5, #104	; 0x68
 800b160:	e7e9      	b.n	800b136 <_fwalk_reent+0x12>
	...

0800b164 <_localeconv_r>:
 800b164:	4800      	ldr	r0, [pc, #0]	; (800b168 <_localeconv_r+0x4>)
 800b166:	4770      	bx	lr
 800b168:	200002d4 	.word	0x200002d4

0800b16c <__retarget_lock_init_recursive>:
 800b16c:	4770      	bx	lr

0800b16e <__retarget_lock_acquire_recursive>:
 800b16e:	4770      	bx	lr

0800b170 <__retarget_lock_release_recursive>:
 800b170:	4770      	bx	lr
	...

0800b174 <malloc>:
 800b174:	4b02      	ldr	r3, [pc, #8]	; (800b180 <malloc+0xc>)
 800b176:	4601      	mov	r1, r0
 800b178:	6818      	ldr	r0, [r3, #0]
 800b17a:	f000 bbe1 	b.w	800b940 <_malloc_r>
 800b17e:	bf00      	nop
 800b180:	20000180 	.word	0x20000180

0800b184 <_Balloc>:
 800b184:	b570      	push	{r4, r5, r6, lr}
 800b186:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b188:	4604      	mov	r4, r0
 800b18a:	460d      	mov	r5, r1
 800b18c:	b976      	cbnz	r6, 800b1ac <_Balloc+0x28>
 800b18e:	2010      	movs	r0, #16
 800b190:	f7ff fff0 	bl	800b174 <malloc>
 800b194:	4602      	mov	r2, r0
 800b196:	6260      	str	r0, [r4, #36]	; 0x24
 800b198:	b920      	cbnz	r0, 800b1a4 <_Balloc+0x20>
 800b19a:	4b18      	ldr	r3, [pc, #96]	; (800b1fc <_Balloc+0x78>)
 800b19c:	4818      	ldr	r0, [pc, #96]	; (800b200 <_Balloc+0x7c>)
 800b19e:	2166      	movs	r1, #102	; 0x66
 800b1a0:	f001 f804 	bl	800c1ac <__assert_func>
 800b1a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b1a8:	6006      	str	r6, [r0, #0]
 800b1aa:	60c6      	str	r6, [r0, #12]
 800b1ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b1ae:	68f3      	ldr	r3, [r6, #12]
 800b1b0:	b183      	cbz	r3, 800b1d4 <_Balloc+0x50>
 800b1b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1b4:	68db      	ldr	r3, [r3, #12]
 800b1b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b1ba:	b9b8      	cbnz	r0, 800b1ec <_Balloc+0x68>
 800b1bc:	2101      	movs	r1, #1
 800b1be:	fa01 f605 	lsl.w	r6, r1, r5
 800b1c2:	1d72      	adds	r2, r6, #5
 800b1c4:	0092      	lsls	r2, r2, #2
 800b1c6:	4620      	mov	r0, r4
 800b1c8:	f000 fb5a 	bl	800b880 <_calloc_r>
 800b1cc:	b160      	cbz	r0, 800b1e8 <_Balloc+0x64>
 800b1ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b1d2:	e00e      	b.n	800b1f2 <_Balloc+0x6e>
 800b1d4:	2221      	movs	r2, #33	; 0x21
 800b1d6:	2104      	movs	r1, #4
 800b1d8:	4620      	mov	r0, r4
 800b1da:	f000 fb51 	bl	800b880 <_calloc_r>
 800b1de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1e0:	60f0      	str	r0, [r6, #12]
 800b1e2:	68db      	ldr	r3, [r3, #12]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d1e4      	bne.n	800b1b2 <_Balloc+0x2e>
 800b1e8:	2000      	movs	r0, #0
 800b1ea:	bd70      	pop	{r4, r5, r6, pc}
 800b1ec:	6802      	ldr	r2, [r0, #0]
 800b1ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b1f8:	e7f7      	b.n	800b1ea <_Balloc+0x66>
 800b1fa:	bf00      	nop
 800b1fc:	0800c771 	.word	0x0800c771
 800b200:	0800c858 	.word	0x0800c858

0800b204 <_Bfree>:
 800b204:	b570      	push	{r4, r5, r6, lr}
 800b206:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b208:	4605      	mov	r5, r0
 800b20a:	460c      	mov	r4, r1
 800b20c:	b976      	cbnz	r6, 800b22c <_Bfree+0x28>
 800b20e:	2010      	movs	r0, #16
 800b210:	f7ff ffb0 	bl	800b174 <malloc>
 800b214:	4602      	mov	r2, r0
 800b216:	6268      	str	r0, [r5, #36]	; 0x24
 800b218:	b920      	cbnz	r0, 800b224 <_Bfree+0x20>
 800b21a:	4b09      	ldr	r3, [pc, #36]	; (800b240 <_Bfree+0x3c>)
 800b21c:	4809      	ldr	r0, [pc, #36]	; (800b244 <_Bfree+0x40>)
 800b21e:	218a      	movs	r1, #138	; 0x8a
 800b220:	f000 ffc4 	bl	800c1ac <__assert_func>
 800b224:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b228:	6006      	str	r6, [r0, #0]
 800b22a:	60c6      	str	r6, [r0, #12]
 800b22c:	b13c      	cbz	r4, 800b23e <_Bfree+0x3a>
 800b22e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b230:	6862      	ldr	r2, [r4, #4]
 800b232:	68db      	ldr	r3, [r3, #12]
 800b234:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b238:	6021      	str	r1, [r4, #0]
 800b23a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b23e:	bd70      	pop	{r4, r5, r6, pc}
 800b240:	0800c771 	.word	0x0800c771
 800b244:	0800c858 	.word	0x0800c858

0800b248 <__multadd>:
 800b248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b24c:	690e      	ldr	r6, [r1, #16]
 800b24e:	4607      	mov	r7, r0
 800b250:	4698      	mov	r8, r3
 800b252:	460c      	mov	r4, r1
 800b254:	f101 0014 	add.w	r0, r1, #20
 800b258:	2300      	movs	r3, #0
 800b25a:	6805      	ldr	r5, [r0, #0]
 800b25c:	b2a9      	uxth	r1, r5
 800b25e:	fb02 8101 	mla	r1, r2, r1, r8
 800b262:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b266:	0c2d      	lsrs	r5, r5, #16
 800b268:	fb02 c505 	mla	r5, r2, r5, ip
 800b26c:	b289      	uxth	r1, r1
 800b26e:	3301      	adds	r3, #1
 800b270:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b274:	429e      	cmp	r6, r3
 800b276:	f840 1b04 	str.w	r1, [r0], #4
 800b27a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b27e:	dcec      	bgt.n	800b25a <__multadd+0x12>
 800b280:	f1b8 0f00 	cmp.w	r8, #0
 800b284:	d022      	beq.n	800b2cc <__multadd+0x84>
 800b286:	68a3      	ldr	r3, [r4, #8]
 800b288:	42b3      	cmp	r3, r6
 800b28a:	dc19      	bgt.n	800b2c0 <__multadd+0x78>
 800b28c:	6861      	ldr	r1, [r4, #4]
 800b28e:	4638      	mov	r0, r7
 800b290:	3101      	adds	r1, #1
 800b292:	f7ff ff77 	bl	800b184 <_Balloc>
 800b296:	4605      	mov	r5, r0
 800b298:	b928      	cbnz	r0, 800b2a6 <__multadd+0x5e>
 800b29a:	4602      	mov	r2, r0
 800b29c:	4b0d      	ldr	r3, [pc, #52]	; (800b2d4 <__multadd+0x8c>)
 800b29e:	480e      	ldr	r0, [pc, #56]	; (800b2d8 <__multadd+0x90>)
 800b2a0:	21b5      	movs	r1, #181	; 0xb5
 800b2a2:	f000 ff83 	bl	800c1ac <__assert_func>
 800b2a6:	6922      	ldr	r2, [r4, #16]
 800b2a8:	3202      	adds	r2, #2
 800b2aa:	f104 010c 	add.w	r1, r4, #12
 800b2ae:	0092      	lsls	r2, r2, #2
 800b2b0:	300c      	adds	r0, #12
 800b2b2:	f7fe fb47 	bl	8009944 <memcpy>
 800b2b6:	4621      	mov	r1, r4
 800b2b8:	4638      	mov	r0, r7
 800b2ba:	f7ff ffa3 	bl	800b204 <_Bfree>
 800b2be:	462c      	mov	r4, r5
 800b2c0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b2c4:	3601      	adds	r6, #1
 800b2c6:	f8c3 8014 	str.w	r8, [r3, #20]
 800b2ca:	6126      	str	r6, [r4, #16]
 800b2cc:	4620      	mov	r0, r4
 800b2ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2d2:	bf00      	nop
 800b2d4:	0800c7e7 	.word	0x0800c7e7
 800b2d8:	0800c858 	.word	0x0800c858

0800b2dc <__hi0bits>:
 800b2dc:	0c03      	lsrs	r3, r0, #16
 800b2de:	041b      	lsls	r3, r3, #16
 800b2e0:	b9d3      	cbnz	r3, 800b318 <__hi0bits+0x3c>
 800b2e2:	0400      	lsls	r0, r0, #16
 800b2e4:	2310      	movs	r3, #16
 800b2e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b2ea:	bf04      	itt	eq
 800b2ec:	0200      	lsleq	r0, r0, #8
 800b2ee:	3308      	addeq	r3, #8
 800b2f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b2f4:	bf04      	itt	eq
 800b2f6:	0100      	lsleq	r0, r0, #4
 800b2f8:	3304      	addeq	r3, #4
 800b2fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b2fe:	bf04      	itt	eq
 800b300:	0080      	lsleq	r0, r0, #2
 800b302:	3302      	addeq	r3, #2
 800b304:	2800      	cmp	r0, #0
 800b306:	db05      	blt.n	800b314 <__hi0bits+0x38>
 800b308:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b30c:	f103 0301 	add.w	r3, r3, #1
 800b310:	bf08      	it	eq
 800b312:	2320      	moveq	r3, #32
 800b314:	4618      	mov	r0, r3
 800b316:	4770      	bx	lr
 800b318:	2300      	movs	r3, #0
 800b31a:	e7e4      	b.n	800b2e6 <__hi0bits+0xa>

0800b31c <__lo0bits>:
 800b31c:	6803      	ldr	r3, [r0, #0]
 800b31e:	f013 0207 	ands.w	r2, r3, #7
 800b322:	4601      	mov	r1, r0
 800b324:	d00b      	beq.n	800b33e <__lo0bits+0x22>
 800b326:	07da      	lsls	r2, r3, #31
 800b328:	d424      	bmi.n	800b374 <__lo0bits+0x58>
 800b32a:	0798      	lsls	r0, r3, #30
 800b32c:	bf49      	itett	mi
 800b32e:	085b      	lsrmi	r3, r3, #1
 800b330:	089b      	lsrpl	r3, r3, #2
 800b332:	2001      	movmi	r0, #1
 800b334:	600b      	strmi	r3, [r1, #0]
 800b336:	bf5c      	itt	pl
 800b338:	600b      	strpl	r3, [r1, #0]
 800b33a:	2002      	movpl	r0, #2
 800b33c:	4770      	bx	lr
 800b33e:	b298      	uxth	r0, r3
 800b340:	b9b0      	cbnz	r0, 800b370 <__lo0bits+0x54>
 800b342:	0c1b      	lsrs	r3, r3, #16
 800b344:	2010      	movs	r0, #16
 800b346:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b34a:	bf04      	itt	eq
 800b34c:	0a1b      	lsreq	r3, r3, #8
 800b34e:	3008      	addeq	r0, #8
 800b350:	071a      	lsls	r2, r3, #28
 800b352:	bf04      	itt	eq
 800b354:	091b      	lsreq	r3, r3, #4
 800b356:	3004      	addeq	r0, #4
 800b358:	079a      	lsls	r2, r3, #30
 800b35a:	bf04      	itt	eq
 800b35c:	089b      	lsreq	r3, r3, #2
 800b35e:	3002      	addeq	r0, #2
 800b360:	07da      	lsls	r2, r3, #31
 800b362:	d403      	bmi.n	800b36c <__lo0bits+0x50>
 800b364:	085b      	lsrs	r3, r3, #1
 800b366:	f100 0001 	add.w	r0, r0, #1
 800b36a:	d005      	beq.n	800b378 <__lo0bits+0x5c>
 800b36c:	600b      	str	r3, [r1, #0]
 800b36e:	4770      	bx	lr
 800b370:	4610      	mov	r0, r2
 800b372:	e7e8      	b.n	800b346 <__lo0bits+0x2a>
 800b374:	2000      	movs	r0, #0
 800b376:	4770      	bx	lr
 800b378:	2020      	movs	r0, #32
 800b37a:	4770      	bx	lr

0800b37c <__i2b>:
 800b37c:	b510      	push	{r4, lr}
 800b37e:	460c      	mov	r4, r1
 800b380:	2101      	movs	r1, #1
 800b382:	f7ff feff 	bl	800b184 <_Balloc>
 800b386:	4602      	mov	r2, r0
 800b388:	b928      	cbnz	r0, 800b396 <__i2b+0x1a>
 800b38a:	4b05      	ldr	r3, [pc, #20]	; (800b3a0 <__i2b+0x24>)
 800b38c:	4805      	ldr	r0, [pc, #20]	; (800b3a4 <__i2b+0x28>)
 800b38e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b392:	f000 ff0b 	bl	800c1ac <__assert_func>
 800b396:	2301      	movs	r3, #1
 800b398:	6144      	str	r4, [r0, #20]
 800b39a:	6103      	str	r3, [r0, #16]
 800b39c:	bd10      	pop	{r4, pc}
 800b39e:	bf00      	nop
 800b3a0:	0800c7e7 	.word	0x0800c7e7
 800b3a4:	0800c858 	.word	0x0800c858

0800b3a8 <__multiply>:
 800b3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3ac:	4614      	mov	r4, r2
 800b3ae:	690a      	ldr	r2, [r1, #16]
 800b3b0:	6923      	ldr	r3, [r4, #16]
 800b3b2:	429a      	cmp	r2, r3
 800b3b4:	bfb8      	it	lt
 800b3b6:	460b      	movlt	r3, r1
 800b3b8:	460d      	mov	r5, r1
 800b3ba:	bfbc      	itt	lt
 800b3bc:	4625      	movlt	r5, r4
 800b3be:	461c      	movlt	r4, r3
 800b3c0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b3c4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b3c8:	68ab      	ldr	r3, [r5, #8]
 800b3ca:	6869      	ldr	r1, [r5, #4]
 800b3cc:	eb0a 0709 	add.w	r7, sl, r9
 800b3d0:	42bb      	cmp	r3, r7
 800b3d2:	b085      	sub	sp, #20
 800b3d4:	bfb8      	it	lt
 800b3d6:	3101      	addlt	r1, #1
 800b3d8:	f7ff fed4 	bl	800b184 <_Balloc>
 800b3dc:	b930      	cbnz	r0, 800b3ec <__multiply+0x44>
 800b3de:	4602      	mov	r2, r0
 800b3e0:	4b42      	ldr	r3, [pc, #264]	; (800b4ec <__multiply+0x144>)
 800b3e2:	4843      	ldr	r0, [pc, #268]	; (800b4f0 <__multiply+0x148>)
 800b3e4:	f240 115d 	movw	r1, #349	; 0x15d
 800b3e8:	f000 fee0 	bl	800c1ac <__assert_func>
 800b3ec:	f100 0614 	add.w	r6, r0, #20
 800b3f0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b3f4:	4633      	mov	r3, r6
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	4543      	cmp	r3, r8
 800b3fa:	d31e      	bcc.n	800b43a <__multiply+0x92>
 800b3fc:	f105 0c14 	add.w	ip, r5, #20
 800b400:	f104 0314 	add.w	r3, r4, #20
 800b404:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b408:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b40c:	9202      	str	r2, [sp, #8]
 800b40e:	ebac 0205 	sub.w	r2, ip, r5
 800b412:	3a15      	subs	r2, #21
 800b414:	f022 0203 	bic.w	r2, r2, #3
 800b418:	3204      	adds	r2, #4
 800b41a:	f105 0115 	add.w	r1, r5, #21
 800b41e:	458c      	cmp	ip, r1
 800b420:	bf38      	it	cc
 800b422:	2204      	movcc	r2, #4
 800b424:	9201      	str	r2, [sp, #4]
 800b426:	9a02      	ldr	r2, [sp, #8]
 800b428:	9303      	str	r3, [sp, #12]
 800b42a:	429a      	cmp	r2, r3
 800b42c:	d808      	bhi.n	800b440 <__multiply+0x98>
 800b42e:	2f00      	cmp	r7, #0
 800b430:	dc55      	bgt.n	800b4de <__multiply+0x136>
 800b432:	6107      	str	r7, [r0, #16]
 800b434:	b005      	add	sp, #20
 800b436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b43a:	f843 2b04 	str.w	r2, [r3], #4
 800b43e:	e7db      	b.n	800b3f8 <__multiply+0x50>
 800b440:	f8b3 a000 	ldrh.w	sl, [r3]
 800b444:	f1ba 0f00 	cmp.w	sl, #0
 800b448:	d020      	beq.n	800b48c <__multiply+0xe4>
 800b44a:	f105 0e14 	add.w	lr, r5, #20
 800b44e:	46b1      	mov	r9, r6
 800b450:	2200      	movs	r2, #0
 800b452:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b456:	f8d9 b000 	ldr.w	fp, [r9]
 800b45a:	b2a1      	uxth	r1, r4
 800b45c:	fa1f fb8b 	uxth.w	fp, fp
 800b460:	fb0a b101 	mla	r1, sl, r1, fp
 800b464:	4411      	add	r1, r2
 800b466:	f8d9 2000 	ldr.w	r2, [r9]
 800b46a:	0c24      	lsrs	r4, r4, #16
 800b46c:	0c12      	lsrs	r2, r2, #16
 800b46e:	fb0a 2404 	mla	r4, sl, r4, r2
 800b472:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b476:	b289      	uxth	r1, r1
 800b478:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b47c:	45f4      	cmp	ip, lr
 800b47e:	f849 1b04 	str.w	r1, [r9], #4
 800b482:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b486:	d8e4      	bhi.n	800b452 <__multiply+0xaa>
 800b488:	9901      	ldr	r1, [sp, #4]
 800b48a:	5072      	str	r2, [r6, r1]
 800b48c:	9a03      	ldr	r2, [sp, #12]
 800b48e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b492:	3304      	adds	r3, #4
 800b494:	f1b9 0f00 	cmp.w	r9, #0
 800b498:	d01f      	beq.n	800b4da <__multiply+0x132>
 800b49a:	6834      	ldr	r4, [r6, #0]
 800b49c:	f105 0114 	add.w	r1, r5, #20
 800b4a0:	46b6      	mov	lr, r6
 800b4a2:	f04f 0a00 	mov.w	sl, #0
 800b4a6:	880a      	ldrh	r2, [r1, #0]
 800b4a8:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b4ac:	fb09 b202 	mla	r2, r9, r2, fp
 800b4b0:	4492      	add	sl, r2
 800b4b2:	b2a4      	uxth	r4, r4
 800b4b4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b4b8:	f84e 4b04 	str.w	r4, [lr], #4
 800b4bc:	f851 4b04 	ldr.w	r4, [r1], #4
 800b4c0:	f8be 2000 	ldrh.w	r2, [lr]
 800b4c4:	0c24      	lsrs	r4, r4, #16
 800b4c6:	fb09 2404 	mla	r4, r9, r4, r2
 800b4ca:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b4ce:	458c      	cmp	ip, r1
 800b4d0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b4d4:	d8e7      	bhi.n	800b4a6 <__multiply+0xfe>
 800b4d6:	9a01      	ldr	r2, [sp, #4]
 800b4d8:	50b4      	str	r4, [r6, r2]
 800b4da:	3604      	adds	r6, #4
 800b4dc:	e7a3      	b.n	800b426 <__multiply+0x7e>
 800b4de:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d1a5      	bne.n	800b432 <__multiply+0x8a>
 800b4e6:	3f01      	subs	r7, #1
 800b4e8:	e7a1      	b.n	800b42e <__multiply+0x86>
 800b4ea:	bf00      	nop
 800b4ec:	0800c7e7 	.word	0x0800c7e7
 800b4f0:	0800c858 	.word	0x0800c858

0800b4f4 <__pow5mult>:
 800b4f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4f8:	4615      	mov	r5, r2
 800b4fa:	f012 0203 	ands.w	r2, r2, #3
 800b4fe:	4606      	mov	r6, r0
 800b500:	460f      	mov	r7, r1
 800b502:	d007      	beq.n	800b514 <__pow5mult+0x20>
 800b504:	4c25      	ldr	r4, [pc, #148]	; (800b59c <__pow5mult+0xa8>)
 800b506:	3a01      	subs	r2, #1
 800b508:	2300      	movs	r3, #0
 800b50a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b50e:	f7ff fe9b 	bl	800b248 <__multadd>
 800b512:	4607      	mov	r7, r0
 800b514:	10ad      	asrs	r5, r5, #2
 800b516:	d03d      	beq.n	800b594 <__pow5mult+0xa0>
 800b518:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b51a:	b97c      	cbnz	r4, 800b53c <__pow5mult+0x48>
 800b51c:	2010      	movs	r0, #16
 800b51e:	f7ff fe29 	bl	800b174 <malloc>
 800b522:	4602      	mov	r2, r0
 800b524:	6270      	str	r0, [r6, #36]	; 0x24
 800b526:	b928      	cbnz	r0, 800b534 <__pow5mult+0x40>
 800b528:	4b1d      	ldr	r3, [pc, #116]	; (800b5a0 <__pow5mult+0xac>)
 800b52a:	481e      	ldr	r0, [pc, #120]	; (800b5a4 <__pow5mult+0xb0>)
 800b52c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b530:	f000 fe3c 	bl	800c1ac <__assert_func>
 800b534:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b538:	6004      	str	r4, [r0, #0]
 800b53a:	60c4      	str	r4, [r0, #12]
 800b53c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b540:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b544:	b94c      	cbnz	r4, 800b55a <__pow5mult+0x66>
 800b546:	f240 2171 	movw	r1, #625	; 0x271
 800b54a:	4630      	mov	r0, r6
 800b54c:	f7ff ff16 	bl	800b37c <__i2b>
 800b550:	2300      	movs	r3, #0
 800b552:	f8c8 0008 	str.w	r0, [r8, #8]
 800b556:	4604      	mov	r4, r0
 800b558:	6003      	str	r3, [r0, #0]
 800b55a:	f04f 0900 	mov.w	r9, #0
 800b55e:	07eb      	lsls	r3, r5, #31
 800b560:	d50a      	bpl.n	800b578 <__pow5mult+0x84>
 800b562:	4639      	mov	r1, r7
 800b564:	4622      	mov	r2, r4
 800b566:	4630      	mov	r0, r6
 800b568:	f7ff ff1e 	bl	800b3a8 <__multiply>
 800b56c:	4639      	mov	r1, r7
 800b56e:	4680      	mov	r8, r0
 800b570:	4630      	mov	r0, r6
 800b572:	f7ff fe47 	bl	800b204 <_Bfree>
 800b576:	4647      	mov	r7, r8
 800b578:	106d      	asrs	r5, r5, #1
 800b57a:	d00b      	beq.n	800b594 <__pow5mult+0xa0>
 800b57c:	6820      	ldr	r0, [r4, #0]
 800b57e:	b938      	cbnz	r0, 800b590 <__pow5mult+0x9c>
 800b580:	4622      	mov	r2, r4
 800b582:	4621      	mov	r1, r4
 800b584:	4630      	mov	r0, r6
 800b586:	f7ff ff0f 	bl	800b3a8 <__multiply>
 800b58a:	6020      	str	r0, [r4, #0]
 800b58c:	f8c0 9000 	str.w	r9, [r0]
 800b590:	4604      	mov	r4, r0
 800b592:	e7e4      	b.n	800b55e <__pow5mult+0x6a>
 800b594:	4638      	mov	r0, r7
 800b596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b59a:	bf00      	nop
 800b59c:	0800c9a8 	.word	0x0800c9a8
 800b5a0:	0800c771 	.word	0x0800c771
 800b5a4:	0800c858 	.word	0x0800c858

0800b5a8 <__lshift>:
 800b5a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5ac:	460c      	mov	r4, r1
 800b5ae:	6849      	ldr	r1, [r1, #4]
 800b5b0:	6923      	ldr	r3, [r4, #16]
 800b5b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b5b6:	68a3      	ldr	r3, [r4, #8]
 800b5b8:	4607      	mov	r7, r0
 800b5ba:	4691      	mov	r9, r2
 800b5bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b5c0:	f108 0601 	add.w	r6, r8, #1
 800b5c4:	42b3      	cmp	r3, r6
 800b5c6:	db0b      	blt.n	800b5e0 <__lshift+0x38>
 800b5c8:	4638      	mov	r0, r7
 800b5ca:	f7ff fddb 	bl	800b184 <_Balloc>
 800b5ce:	4605      	mov	r5, r0
 800b5d0:	b948      	cbnz	r0, 800b5e6 <__lshift+0x3e>
 800b5d2:	4602      	mov	r2, r0
 800b5d4:	4b28      	ldr	r3, [pc, #160]	; (800b678 <__lshift+0xd0>)
 800b5d6:	4829      	ldr	r0, [pc, #164]	; (800b67c <__lshift+0xd4>)
 800b5d8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b5dc:	f000 fde6 	bl	800c1ac <__assert_func>
 800b5e0:	3101      	adds	r1, #1
 800b5e2:	005b      	lsls	r3, r3, #1
 800b5e4:	e7ee      	b.n	800b5c4 <__lshift+0x1c>
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	f100 0114 	add.w	r1, r0, #20
 800b5ec:	f100 0210 	add.w	r2, r0, #16
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	4553      	cmp	r3, sl
 800b5f4:	db33      	blt.n	800b65e <__lshift+0xb6>
 800b5f6:	6920      	ldr	r0, [r4, #16]
 800b5f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b5fc:	f104 0314 	add.w	r3, r4, #20
 800b600:	f019 091f 	ands.w	r9, r9, #31
 800b604:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b608:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b60c:	d02b      	beq.n	800b666 <__lshift+0xbe>
 800b60e:	f1c9 0e20 	rsb	lr, r9, #32
 800b612:	468a      	mov	sl, r1
 800b614:	2200      	movs	r2, #0
 800b616:	6818      	ldr	r0, [r3, #0]
 800b618:	fa00 f009 	lsl.w	r0, r0, r9
 800b61c:	4302      	orrs	r2, r0
 800b61e:	f84a 2b04 	str.w	r2, [sl], #4
 800b622:	f853 2b04 	ldr.w	r2, [r3], #4
 800b626:	459c      	cmp	ip, r3
 800b628:	fa22 f20e 	lsr.w	r2, r2, lr
 800b62c:	d8f3      	bhi.n	800b616 <__lshift+0x6e>
 800b62e:	ebac 0304 	sub.w	r3, ip, r4
 800b632:	3b15      	subs	r3, #21
 800b634:	f023 0303 	bic.w	r3, r3, #3
 800b638:	3304      	adds	r3, #4
 800b63a:	f104 0015 	add.w	r0, r4, #21
 800b63e:	4584      	cmp	ip, r0
 800b640:	bf38      	it	cc
 800b642:	2304      	movcc	r3, #4
 800b644:	50ca      	str	r2, [r1, r3]
 800b646:	b10a      	cbz	r2, 800b64c <__lshift+0xa4>
 800b648:	f108 0602 	add.w	r6, r8, #2
 800b64c:	3e01      	subs	r6, #1
 800b64e:	4638      	mov	r0, r7
 800b650:	612e      	str	r6, [r5, #16]
 800b652:	4621      	mov	r1, r4
 800b654:	f7ff fdd6 	bl	800b204 <_Bfree>
 800b658:	4628      	mov	r0, r5
 800b65a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b65e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b662:	3301      	adds	r3, #1
 800b664:	e7c5      	b.n	800b5f2 <__lshift+0x4a>
 800b666:	3904      	subs	r1, #4
 800b668:	f853 2b04 	ldr.w	r2, [r3], #4
 800b66c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b670:	459c      	cmp	ip, r3
 800b672:	d8f9      	bhi.n	800b668 <__lshift+0xc0>
 800b674:	e7ea      	b.n	800b64c <__lshift+0xa4>
 800b676:	bf00      	nop
 800b678:	0800c7e7 	.word	0x0800c7e7
 800b67c:	0800c858 	.word	0x0800c858

0800b680 <__mcmp>:
 800b680:	b530      	push	{r4, r5, lr}
 800b682:	6902      	ldr	r2, [r0, #16]
 800b684:	690c      	ldr	r4, [r1, #16]
 800b686:	1b12      	subs	r2, r2, r4
 800b688:	d10e      	bne.n	800b6a8 <__mcmp+0x28>
 800b68a:	f100 0314 	add.w	r3, r0, #20
 800b68e:	3114      	adds	r1, #20
 800b690:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b694:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b698:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b69c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b6a0:	42a5      	cmp	r5, r4
 800b6a2:	d003      	beq.n	800b6ac <__mcmp+0x2c>
 800b6a4:	d305      	bcc.n	800b6b2 <__mcmp+0x32>
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	4610      	mov	r0, r2
 800b6aa:	bd30      	pop	{r4, r5, pc}
 800b6ac:	4283      	cmp	r3, r0
 800b6ae:	d3f3      	bcc.n	800b698 <__mcmp+0x18>
 800b6b0:	e7fa      	b.n	800b6a8 <__mcmp+0x28>
 800b6b2:	f04f 32ff 	mov.w	r2, #4294967295
 800b6b6:	e7f7      	b.n	800b6a8 <__mcmp+0x28>

0800b6b8 <__mdiff>:
 800b6b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6bc:	460c      	mov	r4, r1
 800b6be:	4606      	mov	r6, r0
 800b6c0:	4611      	mov	r1, r2
 800b6c2:	4620      	mov	r0, r4
 800b6c4:	4617      	mov	r7, r2
 800b6c6:	f7ff ffdb 	bl	800b680 <__mcmp>
 800b6ca:	1e05      	subs	r5, r0, #0
 800b6cc:	d110      	bne.n	800b6f0 <__mdiff+0x38>
 800b6ce:	4629      	mov	r1, r5
 800b6d0:	4630      	mov	r0, r6
 800b6d2:	f7ff fd57 	bl	800b184 <_Balloc>
 800b6d6:	b930      	cbnz	r0, 800b6e6 <__mdiff+0x2e>
 800b6d8:	4b39      	ldr	r3, [pc, #228]	; (800b7c0 <__mdiff+0x108>)
 800b6da:	4602      	mov	r2, r0
 800b6dc:	f240 2132 	movw	r1, #562	; 0x232
 800b6e0:	4838      	ldr	r0, [pc, #224]	; (800b7c4 <__mdiff+0x10c>)
 800b6e2:	f000 fd63 	bl	800c1ac <__assert_func>
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b6ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6f0:	bfa4      	itt	ge
 800b6f2:	463b      	movge	r3, r7
 800b6f4:	4627      	movge	r7, r4
 800b6f6:	4630      	mov	r0, r6
 800b6f8:	6879      	ldr	r1, [r7, #4]
 800b6fa:	bfa6      	itte	ge
 800b6fc:	461c      	movge	r4, r3
 800b6fe:	2500      	movge	r5, #0
 800b700:	2501      	movlt	r5, #1
 800b702:	f7ff fd3f 	bl	800b184 <_Balloc>
 800b706:	b920      	cbnz	r0, 800b712 <__mdiff+0x5a>
 800b708:	4b2d      	ldr	r3, [pc, #180]	; (800b7c0 <__mdiff+0x108>)
 800b70a:	4602      	mov	r2, r0
 800b70c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b710:	e7e6      	b.n	800b6e0 <__mdiff+0x28>
 800b712:	693e      	ldr	r6, [r7, #16]
 800b714:	60c5      	str	r5, [r0, #12]
 800b716:	6925      	ldr	r5, [r4, #16]
 800b718:	f107 0114 	add.w	r1, r7, #20
 800b71c:	f104 0914 	add.w	r9, r4, #20
 800b720:	f100 0e14 	add.w	lr, r0, #20
 800b724:	f107 0210 	add.w	r2, r7, #16
 800b728:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b72c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b730:	46f2      	mov	sl, lr
 800b732:	2700      	movs	r7, #0
 800b734:	f859 3b04 	ldr.w	r3, [r9], #4
 800b738:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b73c:	fa1f f883 	uxth.w	r8, r3
 800b740:	fa17 f78b 	uxtah	r7, r7, fp
 800b744:	0c1b      	lsrs	r3, r3, #16
 800b746:	eba7 0808 	sub.w	r8, r7, r8
 800b74a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b74e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b752:	fa1f f888 	uxth.w	r8, r8
 800b756:	141f      	asrs	r7, r3, #16
 800b758:	454d      	cmp	r5, r9
 800b75a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b75e:	f84a 3b04 	str.w	r3, [sl], #4
 800b762:	d8e7      	bhi.n	800b734 <__mdiff+0x7c>
 800b764:	1b2b      	subs	r3, r5, r4
 800b766:	3b15      	subs	r3, #21
 800b768:	f023 0303 	bic.w	r3, r3, #3
 800b76c:	3304      	adds	r3, #4
 800b76e:	3415      	adds	r4, #21
 800b770:	42a5      	cmp	r5, r4
 800b772:	bf38      	it	cc
 800b774:	2304      	movcc	r3, #4
 800b776:	4419      	add	r1, r3
 800b778:	4473      	add	r3, lr
 800b77a:	469e      	mov	lr, r3
 800b77c:	460d      	mov	r5, r1
 800b77e:	4565      	cmp	r5, ip
 800b780:	d30e      	bcc.n	800b7a0 <__mdiff+0xe8>
 800b782:	f10c 0203 	add.w	r2, ip, #3
 800b786:	1a52      	subs	r2, r2, r1
 800b788:	f022 0203 	bic.w	r2, r2, #3
 800b78c:	3903      	subs	r1, #3
 800b78e:	458c      	cmp	ip, r1
 800b790:	bf38      	it	cc
 800b792:	2200      	movcc	r2, #0
 800b794:	441a      	add	r2, r3
 800b796:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b79a:	b17b      	cbz	r3, 800b7bc <__mdiff+0x104>
 800b79c:	6106      	str	r6, [r0, #16]
 800b79e:	e7a5      	b.n	800b6ec <__mdiff+0x34>
 800b7a0:	f855 8b04 	ldr.w	r8, [r5], #4
 800b7a4:	fa17 f488 	uxtah	r4, r7, r8
 800b7a8:	1422      	asrs	r2, r4, #16
 800b7aa:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b7ae:	b2a4      	uxth	r4, r4
 800b7b0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b7b4:	f84e 4b04 	str.w	r4, [lr], #4
 800b7b8:	1417      	asrs	r7, r2, #16
 800b7ba:	e7e0      	b.n	800b77e <__mdiff+0xc6>
 800b7bc:	3e01      	subs	r6, #1
 800b7be:	e7ea      	b.n	800b796 <__mdiff+0xde>
 800b7c0:	0800c7e7 	.word	0x0800c7e7
 800b7c4:	0800c858 	.word	0x0800c858

0800b7c8 <__d2b>:
 800b7c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b7cc:	4689      	mov	r9, r1
 800b7ce:	2101      	movs	r1, #1
 800b7d0:	ec57 6b10 	vmov	r6, r7, d0
 800b7d4:	4690      	mov	r8, r2
 800b7d6:	f7ff fcd5 	bl	800b184 <_Balloc>
 800b7da:	4604      	mov	r4, r0
 800b7dc:	b930      	cbnz	r0, 800b7ec <__d2b+0x24>
 800b7de:	4602      	mov	r2, r0
 800b7e0:	4b25      	ldr	r3, [pc, #148]	; (800b878 <__d2b+0xb0>)
 800b7e2:	4826      	ldr	r0, [pc, #152]	; (800b87c <__d2b+0xb4>)
 800b7e4:	f240 310a 	movw	r1, #778	; 0x30a
 800b7e8:	f000 fce0 	bl	800c1ac <__assert_func>
 800b7ec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b7f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b7f4:	bb35      	cbnz	r5, 800b844 <__d2b+0x7c>
 800b7f6:	2e00      	cmp	r6, #0
 800b7f8:	9301      	str	r3, [sp, #4]
 800b7fa:	d028      	beq.n	800b84e <__d2b+0x86>
 800b7fc:	4668      	mov	r0, sp
 800b7fe:	9600      	str	r6, [sp, #0]
 800b800:	f7ff fd8c 	bl	800b31c <__lo0bits>
 800b804:	9900      	ldr	r1, [sp, #0]
 800b806:	b300      	cbz	r0, 800b84a <__d2b+0x82>
 800b808:	9a01      	ldr	r2, [sp, #4]
 800b80a:	f1c0 0320 	rsb	r3, r0, #32
 800b80e:	fa02 f303 	lsl.w	r3, r2, r3
 800b812:	430b      	orrs	r3, r1
 800b814:	40c2      	lsrs	r2, r0
 800b816:	6163      	str	r3, [r4, #20]
 800b818:	9201      	str	r2, [sp, #4]
 800b81a:	9b01      	ldr	r3, [sp, #4]
 800b81c:	61a3      	str	r3, [r4, #24]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	bf14      	ite	ne
 800b822:	2202      	movne	r2, #2
 800b824:	2201      	moveq	r2, #1
 800b826:	6122      	str	r2, [r4, #16]
 800b828:	b1d5      	cbz	r5, 800b860 <__d2b+0x98>
 800b82a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b82e:	4405      	add	r5, r0
 800b830:	f8c9 5000 	str.w	r5, [r9]
 800b834:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b838:	f8c8 0000 	str.w	r0, [r8]
 800b83c:	4620      	mov	r0, r4
 800b83e:	b003      	add	sp, #12
 800b840:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b844:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b848:	e7d5      	b.n	800b7f6 <__d2b+0x2e>
 800b84a:	6161      	str	r1, [r4, #20]
 800b84c:	e7e5      	b.n	800b81a <__d2b+0x52>
 800b84e:	a801      	add	r0, sp, #4
 800b850:	f7ff fd64 	bl	800b31c <__lo0bits>
 800b854:	9b01      	ldr	r3, [sp, #4]
 800b856:	6163      	str	r3, [r4, #20]
 800b858:	2201      	movs	r2, #1
 800b85a:	6122      	str	r2, [r4, #16]
 800b85c:	3020      	adds	r0, #32
 800b85e:	e7e3      	b.n	800b828 <__d2b+0x60>
 800b860:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b864:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b868:	f8c9 0000 	str.w	r0, [r9]
 800b86c:	6918      	ldr	r0, [r3, #16]
 800b86e:	f7ff fd35 	bl	800b2dc <__hi0bits>
 800b872:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b876:	e7df      	b.n	800b838 <__d2b+0x70>
 800b878:	0800c7e7 	.word	0x0800c7e7
 800b87c:	0800c858 	.word	0x0800c858

0800b880 <_calloc_r>:
 800b880:	b513      	push	{r0, r1, r4, lr}
 800b882:	434a      	muls	r2, r1
 800b884:	4611      	mov	r1, r2
 800b886:	9201      	str	r2, [sp, #4]
 800b888:	f000 f85a 	bl	800b940 <_malloc_r>
 800b88c:	4604      	mov	r4, r0
 800b88e:	b118      	cbz	r0, 800b898 <_calloc_r+0x18>
 800b890:	9a01      	ldr	r2, [sp, #4]
 800b892:	2100      	movs	r1, #0
 800b894:	f7fe f864 	bl	8009960 <memset>
 800b898:	4620      	mov	r0, r4
 800b89a:	b002      	add	sp, #8
 800b89c:	bd10      	pop	{r4, pc}
	...

0800b8a0 <_free_r>:
 800b8a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b8a2:	2900      	cmp	r1, #0
 800b8a4:	d048      	beq.n	800b938 <_free_r+0x98>
 800b8a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8aa:	9001      	str	r0, [sp, #4]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	f1a1 0404 	sub.w	r4, r1, #4
 800b8b2:	bfb8      	it	lt
 800b8b4:	18e4      	addlt	r4, r4, r3
 800b8b6:	f000 fe1d 	bl	800c4f4 <__malloc_lock>
 800b8ba:	4a20      	ldr	r2, [pc, #128]	; (800b93c <_free_r+0x9c>)
 800b8bc:	9801      	ldr	r0, [sp, #4]
 800b8be:	6813      	ldr	r3, [r2, #0]
 800b8c0:	4615      	mov	r5, r2
 800b8c2:	b933      	cbnz	r3, 800b8d2 <_free_r+0x32>
 800b8c4:	6063      	str	r3, [r4, #4]
 800b8c6:	6014      	str	r4, [r2, #0]
 800b8c8:	b003      	add	sp, #12
 800b8ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b8ce:	f000 be17 	b.w	800c500 <__malloc_unlock>
 800b8d2:	42a3      	cmp	r3, r4
 800b8d4:	d90b      	bls.n	800b8ee <_free_r+0x4e>
 800b8d6:	6821      	ldr	r1, [r4, #0]
 800b8d8:	1862      	adds	r2, r4, r1
 800b8da:	4293      	cmp	r3, r2
 800b8dc:	bf04      	itt	eq
 800b8de:	681a      	ldreq	r2, [r3, #0]
 800b8e0:	685b      	ldreq	r3, [r3, #4]
 800b8e2:	6063      	str	r3, [r4, #4]
 800b8e4:	bf04      	itt	eq
 800b8e6:	1852      	addeq	r2, r2, r1
 800b8e8:	6022      	streq	r2, [r4, #0]
 800b8ea:	602c      	str	r4, [r5, #0]
 800b8ec:	e7ec      	b.n	800b8c8 <_free_r+0x28>
 800b8ee:	461a      	mov	r2, r3
 800b8f0:	685b      	ldr	r3, [r3, #4]
 800b8f2:	b10b      	cbz	r3, 800b8f8 <_free_r+0x58>
 800b8f4:	42a3      	cmp	r3, r4
 800b8f6:	d9fa      	bls.n	800b8ee <_free_r+0x4e>
 800b8f8:	6811      	ldr	r1, [r2, #0]
 800b8fa:	1855      	adds	r5, r2, r1
 800b8fc:	42a5      	cmp	r5, r4
 800b8fe:	d10b      	bne.n	800b918 <_free_r+0x78>
 800b900:	6824      	ldr	r4, [r4, #0]
 800b902:	4421      	add	r1, r4
 800b904:	1854      	adds	r4, r2, r1
 800b906:	42a3      	cmp	r3, r4
 800b908:	6011      	str	r1, [r2, #0]
 800b90a:	d1dd      	bne.n	800b8c8 <_free_r+0x28>
 800b90c:	681c      	ldr	r4, [r3, #0]
 800b90e:	685b      	ldr	r3, [r3, #4]
 800b910:	6053      	str	r3, [r2, #4]
 800b912:	4421      	add	r1, r4
 800b914:	6011      	str	r1, [r2, #0]
 800b916:	e7d7      	b.n	800b8c8 <_free_r+0x28>
 800b918:	d902      	bls.n	800b920 <_free_r+0x80>
 800b91a:	230c      	movs	r3, #12
 800b91c:	6003      	str	r3, [r0, #0]
 800b91e:	e7d3      	b.n	800b8c8 <_free_r+0x28>
 800b920:	6825      	ldr	r5, [r4, #0]
 800b922:	1961      	adds	r1, r4, r5
 800b924:	428b      	cmp	r3, r1
 800b926:	bf04      	itt	eq
 800b928:	6819      	ldreq	r1, [r3, #0]
 800b92a:	685b      	ldreq	r3, [r3, #4]
 800b92c:	6063      	str	r3, [r4, #4]
 800b92e:	bf04      	itt	eq
 800b930:	1949      	addeq	r1, r1, r5
 800b932:	6021      	streq	r1, [r4, #0]
 800b934:	6054      	str	r4, [r2, #4]
 800b936:	e7c7      	b.n	800b8c8 <_free_r+0x28>
 800b938:	b003      	add	sp, #12
 800b93a:	bd30      	pop	{r4, r5, pc}
 800b93c:	20000594 	.word	0x20000594

0800b940 <_malloc_r>:
 800b940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b942:	1ccd      	adds	r5, r1, #3
 800b944:	f025 0503 	bic.w	r5, r5, #3
 800b948:	3508      	adds	r5, #8
 800b94a:	2d0c      	cmp	r5, #12
 800b94c:	bf38      	it	cc
 800b94e:	250c      	movcc	r5, #12
 800b950:	2d00      	cmp	r5, #0
 800b952:	4606      	mov	r6, r0
 800b954:	db01      	blt.n	800b95a <_malloc_r+0x1a>
 800b956:	42a9      	cmp	r1, r5
 800b958:	d903      	bls.n	800b962 <_malloc_r+0x22>
 800b95a:	230c      	movs	r3, #12
 800b95c:	6033      	str	r3, [r6, #0]
 800b95e:	2000      	movs	r0, #0
 800b960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b962:	f000 fdc7 	bl	800c4f4 <__malloc_lock>
 800b966:	4921      	ldr	r1, [pc, #132]	; (800b9ec <_malloc_r+0xac>)
 800b968:	680a      	ldr	r2, [r1, #0]
 800b96a:	4614      	mov	r4, r2
 800b96c:	b99c      	cbnz	r4, 800b996 <_malloc_r+0x56>
 800b96e:	4f20      	ldr	r7, [pc, #128]	; (800b9f0 <_malloc_r+0xb0>)
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	b923      	cbnz	r3, 800b97e <_malloc_r+0x3e>
 800b974:	4621      	mov	r1, r4
 800b976:	4630      	mov	r0, r6
 800b978:	f000 faf2 	bl	800bf60 <_sbrk_r>
 800b97c:	6038      	str	r0, [r7, #0]
 800b97e:	4629      	mov	r1, r5
 800b980:	4630      	mov	r0, r6
 800b982:	f000 faed 	bl	800bf60 <_sbrk_r>
 800b986:	1c43      	adds	r3, r0, #1
 800b988:	d123      	bne.n	800b9d2 <_malloc_r+0x92>
 800b98a:	230c      	movs	r3, #12
 800b98c:	6033      	str	r3, [r6, #0]
 800b98e:	4630      	mov	r0, r6
 800b990:	f000 fdb6 	bl	800c500 <__malloc_unlock>
 800b994:	e7e3      	b.n	800b95e <_malloc_r+0x1e>
 800b996:	6823      	ldr	r3, [r4, #0]
 800b998:	1b5b      	subs	r3, r3, r5
 800b99a:	d417      	bmi.n	800b9cc <_malloc_r+0x8c>
 800b99c:	2b0b      	cmp	r3, #11
 800b99e:	d903      	bls.n	800b9a8 <_malloc_r+0x68>
 800b9a0:	6023      	str	r3, [r4, #0]
 800b9a2:	441c      	add	r4, r3
 800b9a4:	6025      	str	r5, [r4, #0]
 800b9a6:	e004      	b.n	800b9b2 <_malloc_r+0x72>
 800b9a8:	6863      	ldr	r3, [r4, #4]
 800b9aa:	42a2      	cmp	r2, r4
 800b9ac:	bf0c      	ite	eq
 800b9ae:	600b      	streq	r3, [r1, #0]
 800b9b0:	6053      	strne	r3, [r2, #4]
 800b9b2:	4630      	mov	r0, r6
 800b9b4:	f000 fda4 	bl	800c500 <__malloc_unlock>
 800b9b8:	f104 000b 	add.w	r0, r4, #11
 800b9bc:	1d23      	adds	r3, r4, #4
 800b9be:	f020 0007 	bic.w	r0, r0, #7
 800b9c2:	1ac2      	subs	r2, r0, r3
 800b9c4:	d0cc      	beq.n	800b960 <_malloc_r+0x20>
 800b9c6:	1a1b      	subs	r3, r3, r0
 800b9c8:	50a3      	str	r3, [r4, r2]
 800b9ca:	e7c9      	b.n	800b960 <_malloc_r+0x20>
 800b9cc:	4622      	mov	r2, r4
 800b9ce:	6864      	ldr	r4, [r4, #4]
 800b9d0:	e7cc      	b.n	800b96c <_malloc_r+0x2c>
 800b9d2:	1cc4      	adds	r4, r0, #3
 800b9d4:	f024 0403 	bic.w	r4, r4, #3
 800b9d8:	42a0      	cmp	r0, r4
 800b9da:	d0e3      	beq.n	800b9a4 <_malloc_r+0x64>
 800b9dc:	1a21      	subs	r1, r4, r0
 800b9de:	4630      	mov	r0, r6
 800b9e0:	f000 fabe 	bl	800bf60 <_sbrk_r>
 800b9e4:	3001      	adds	r0, #1
 800b9e6:	d1dd      	bne.n	800b9a4 <_malloc_r+0x64>
 800b9e8:	e7cf      	b.n	800b98a <_malloc_r+0x4a>
 800b9ea:	bf00      	nop
 800b9ec:	20000594 	.word	0x20000594
 800b9f0:	20000598 	.word	0x20000598

0800b9f4 <__ssputs_r>:
 800b9f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9f8:	688e      	ldr	r6, [r1, #8]
 800b9fa:	429e      	cmp	r6, r3
 800b9fc:	4682      	mov	sl, r0
 800b9fe:	460c      	mov	r4, r1
 800ba00:	4690      	mov	r8, r2
 800ba02:	461f      	mov	r7, r3
 800ba04:	d838      	bhi.n	800ba78 <__ssputs_r+0x84>
 800ba06:	898a      	ldrh	r2, [r1, #12]
 800ba08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ba0c:	d032      	beq.n	800ba74 <__ssputs_r+0x80>
 800ba0e:	6825      	ldr	r5, [r4, #0]
 800ba10:	6909      	ldr	r1, [r1, #16]
 800ba12:	eba5 0901 	sub.w	r9, r5, r1
 800ba16:	6965      	ldr	r5, [r4, #20]
 800ba18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ba1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ba20:	3301      	adds	r3, #1
 800ba22:	444b      	add	r3, r9
 800ba24:	106d      	asrs	r5, r5, #1
 800ba26:	429d      	cmp	r5, r3
 800ba28:	bf38      	it	cc
 800ba2a:	461d      	movcc	r5, r3
 800ba2c:	0553      	lsls	r3, r2, #21
 800ba2e:	d531      	bpl.n	800ba94 <__ssputs_r+0xa0>
 800ba30:	4629      	mov	r1, r5
 800ba32:	f7ff ff85 	bl	800b940 <_malloc_r>
 800ba36:	4606      	mov	r6, r0
 800ba38:	b950      	cbnz	r0, 800ba50 <__ssputs_r+0x5c>
 800ba3a:	230c      	movs	r3, #12
 800ba3c:	f8ca 3000 	str.w	r3, [sl]
 800ba40:	89a3      	ldrh	r3, [r4, #12]
 800ba42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba46:	81a3      	strh	r3, [r4, #12]
 800ba48:	f04f 30ff 	mov.w	r0, #4294967295
 800ba4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba50:	6921      	ldr	r1, [r4, #16]
 800ba52:	464a      	mov	r2, r9
 800ba54:	f7fd ff76 	bl	8009944 <memcpy>
 800ba58:	89a3      	ldrh	r3, [r4, #12]
 800ba5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ba5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba62:	81a3      	strh	r3, [r4, #12]
 800ba64:	6126      	str	r6, [r4, #16]
 800ba66:	6165      	str	r5, [r4, #20]
 800ba68:	444e      	add	r6, r9
 800ba6a:	eba5 0509 	sub.w	r5, r5, r9
 800ba6e:	6026      	str	r6, [r4, #0]
 800ba70:	60a5      	str	r5, [r4, #8]
 800ba72:	463e      	mov	r6, r7
 800ba74:	42be      	cmp	r6, r7
 800ba76:	d900      	bls.n	800ba7a <__ssputs_r+0x86>
 800ba78:	463e      	mov	r6, r7
 800ba7a:	4632      	mov	r2, r6
 800ba7c:	6820      	ldr	r0, [r4, #0]
 800ba7e:	4641      	mov	r1, r8
 800ba80:	f000 fd1e 	bl	800c4c0 <memmove>
 800ba84:	68a3      	ldr	r3, [r4, #8]
 800ba86:	6822      	ldr	r2, [r4, #0]
 800ba88:	1b9b      	subs	r3, r3, r6
 800ba8a:	4432      	add	r2, r6
 800ba8c:	60a3      	str	r3, [r4, #8]
 800ba8e:	6022      	str	r2, [r4, #0]
 800ba90:	2000      	movs	r0, #0
 800ba92:	e7db      	b.n	800ba4c <__ssputs_r+0x58>
 800ba94:	462a      	mov	r2, r5
 800ba96:	f000 fd39 	bl	800c50c <_realloc_r>
 800ba9a:	4606      	mov	r6, r0
 800ba9c:	2800      	cmp	r0, #0
 800ba9e:	d1e1      	bne.n	800ba64 <__ssputs_r+0x70>
 800baa0:	6921      	ldr	r1, [r4, #16]
 800baa2:	4650      	mov	r0, sl
 800baa4:	f7ff fefc 	bl	800b8a0 <_free_r>
 800baa8:	e7c7      	b.n	800ba3a <__ssputs_r+0x46>
	...

0800baac <_svfiprintf_r>:
 800baac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bab0:	4698      	mov	r8, r3
 800bab2:	898b      	ldrh	r3, [r1, #12]
 800bab4:	061b      	lsls	r3, r3, #24
 800bab6:	b09d      	sub	sp, #116	; 0x74
 800bab8:	4607      	mov	r7, r0
 800baba:	460d      	mov	r5, r1
 800babc:	4614      	mov	r4, r2
 800babe:	d50e      	bpl.n	800bade <_svfiprintf_r+0x32>
 800bac0:	690b      	ldr	r3, [r1, #16]
 800bac2:	b963      	cbnz	r3, 800bade <_svfiprintf_r+0x32>
 800bac4:	2140      	movs	r1, #64	; 0x40
 800bac6:	f7ff ff3b 	bl	800b940 <_malloc_r>
 800baca:	6028      	str	r0, [r5, #0]
 800bacc:	6128      	str	r0, [r5, #16]
 800bace:	b920      	cbnz	r0, 800bada <_svfiprintf_r+0x2e>
 800bad0:	230c      	movs	r3, #12
 800bad2:	603b      	str	r3, [r7, #0]
 800bad4:	f04f 30ff 	mov.w	r0, #4294967295
 800bad8:	e0d1      	b.n	800bc7e <_svfiprintf_r+0x1d2>
 800bada:	2340      	movs	r3, #64	; 0x40
 800badc:	616b      	str	r3, [r5, #20]
 800bade:	2300      	movs	r3, #0
 800bae0:	9309      	str	r3, [sp, #36]	; 0x24
 800bae2:	2320      	movs	r3, #32
 800bae4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bae8:	f8cd 800c 	str.w	r8, [sp, #12]
 800baec:	2330      	movs	r3, #48	; 0x30
 800baee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bc98 <_svfiprintf_r+0x1ec>
 800baf2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800baf6:	f04f 0901 	mov.w	r9, #1
 800bafa:	4623      	mov	r3, r4
 800bafc:	469a      	mov	sl, r3
 800bafe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb02:	b10a      	cbz	r2, 800bb08 <_svfiprintf_r+0x5c>
 800bb04:	2a25      	cmp	r2, #37	; 0x25
 800bb06:	d1f9      	bne.n	800bafc <_svfiprintf_r+0x50>
 800bb08:	ebba 0b04 	subs.w	fp, sl, r4
 800bb0c:	d00b      	beq.n	800bb26 <_svfiprintf_r+0x7a>
 800bb0e:	465b      	mov	r3, fp
 800bb10:	4622      	mov	r2, r4
 800bb12:	4629      	mov	r1, r5
 800bb14:	4638      	mov	r0, r7
 800bb16:	f7ff ff6d 	bl	800b9f4 <__ssputs_r>
 800bb1a:	3001      	adds	r0, #1
 800bb1c:	f000 80aa 	beq.w	800bc74 <_svfiprintf_r+0x1c8>
 800bb20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb22:	445a      	add	r2, fp
 800bb24:	9209      	str	r2, [sp, #36]	; 0x24
 800bb26:	f89a 3000 	ldrb.w	r3, [sl]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	f000 80a2 	beq.w	800bc74 <_svfiprintf_r+0x1c8>
 800bb30:	2300      	movs	r3, #0
 800bb32:	f04f 32ff 	mov.w	r2, #4294967295
 800bb36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb3a:	f10a 0a01 	add.w	sl, sl, #1
 800bb3e:	9304      	str	r3, [sp, #16]
 800bb40:	9307      	str	r3, [sp, #28]
 800bb42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb46:	931a      	str	r3, [sp, #104]	; 0x68
 800bb48:	4654      	mov	r4, sl
 800bb4a:	2205      	movs	r2, #5
 800bb4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb50:	4851      	ldr	r0, [pc, #324]	; (800bc98 <_svfiprintf_r+0x1ec>)
 800bb52:	f7f4 fb4d 	bl	80001f0 <memchr>
 800bb56:	9a04      	ldr	r2, [sp, #16]
 800bb58:	b9d8      	cbnz	r0, 800bb92 <_svfiprintf_r+0xe6>
 800bb5a:	06d0      	lsls	r0, r2, #27
 800bb5c:	bf44      	itt	mi
 800bb5e:	2320      	movmi	r3, #32
 800bb60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb64:	0711      	lsls	r1, r2, #28
 800bb66:	bf44      	itt	mi
 800bb68:	232b      	movmi	r3, #43	; 0x2b
 800bb6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb6e:	f89a 3000 	ldrb.w	r3, [sl]
 800bb72:	2b2a      	cmp	r3, #42	; 0x2a
 800bb74:	d015      	beq.n	800bba2 <_svfiprintf_r+0xf6>
 800bb76:	9a07      	ldr	r2, [sp, #28]
 800bb78:	4654      	mov	r4, sl
 800bb7a:	2000      	movs	r0, #0
 800bb7c:	f04f 0c0a 	mov.w	ip, #10
 800bb80:	4621      	mov	r1, r4
 800bb82:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb86:	3b30      	subs	r3, #48	; 0x30
 800bb88:	2b09      	cmp	r3, #9
 800bb8a:	d94e      	bls.n	800bc2a <_svfiprintf_r+0x17e>
 800bb8c:	b1b0      	cbz	r0, 800bbbc <_svfiprintf_r+0x110>
 800bb8e:	9207      	str	r2, [sp, #28]
 800bb90:	e014      	b.n	800bbbc <_svfiprintf_r+0x110>
 800bb92:	eba0 0308 	sub.w	r3, r0, r8
 800bb96:	fa09 f303 	lsl.w	r3, r9, r3
 800bb9a:	4313      	orrs	r3, r2
 800bb9c:	9304      	str	r3, [sp, #16]
 800bb9e:	46a2      	mov	sl, r4
 800bba0:	e7d2      	b.n	800bb48 <_svfiprintf_r+0x9c>
 800bba2:	9b03      	ldr	r3, [sp, #12]
 800bba4:	1d19      	adds	r1, r3, #4
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	9103      	str	r1, [sp, #12]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	bfbb      	ittet	lt
 800bbae:	425b      	neglt	r3, r3
 800bbb0:	f042 0202 	orrlt.w	r2, r2, #2
 800bbb4:	9307      	strge	r3, [sp, #28]
 800bbb6:	9307      	strlt	r3, [sp, #28]
 800bbb8:	bfb8      	it	lt
 800bbba:	9204      	strlt	r2, [sp, #16]
 800bbbc:	7823      	ldrb	r3, [r4, #0]
 800bbbe:	2b2e      	cmp	r3, #46	; 0x2e
 800bbc0:	d10c      	bne.n	800bbdc <_svfiprintf_r+0x130>
 800bbc2:	7863      	ldrb	r3, [r4, #1]
 800bbc4:	2b2a      	cmp	r3, #42	; 0x2a
 800bbc6:	d135      	bne.n	800bc34 <_svfiprintf_r+0x188>
 800bbc8:	9b03      	ldr	r3, [sp, #12]
 800bbca:	1d1a      	adds	r2, r3, #4
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	9203      	str	r2, [sp, #12]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	bfb8      	it	lt
 800bbd4:	f04f 33ff 	movlt.w	r3, #4294967295
 800bbd8:	3402      	adds	r4, #2
 800bbda:	9305      	str	r3, [sp, #20]
 800bbdc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bca8 <_svfiprintf_r+0x1fc>
 800bbe0:	7821      	ldrb	r1, [r4, #0]
 800bbe2:	2203      	movs	r2, #3
 800bbe4:	4650      	mov	r0, sl
 800bbe6:	f7f4 fb03 	bl	80001f0 <memchr>
 800bbea:	b140      	cbz	r0, 800bbfe <_svfiprintf_r+0x152>
 800bbec:	2340      	movs	r3, #64	; 0x40
 800bbee:	eba0 000a 	sub.w	r0, r0, sl
 800bbf2:	fa03 f000 	lsl.w	r0, r3, r0
 800bbf6:	9b04      	ldr	r3, [sp, #16]
 800bbf8:	4303      	orrs	r3, r0
 800bbfa:	3401      	adds	r4, #1
 800bbfc:	9304      	str	r3, [sp, #16]
 800bbfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc02:	4826      	ldr	r0, [pc, #152]	; (800bc9c <_svfiprintf_r+0x1f0>)
 800bc04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc08:	2206      	movs	r2, #6
 800bc0a:	f7f4 faf1 	bl	80001f0 <memchr>
 800bc0e:	2800      	cmp	r0, #0
 800bc10:	d038      	beq.n	800bc84 <_svfiprintf_r+0x1d8>
 800bc12:	4b23      	ldr	r3, [pc, #140]	; (800bca0 <_svfiprintf_r+0x1f4>)
 800bc14:	bb1b      	cbnz	r3, 800bc5e <_svfiprintf_r+0x1b2>
 800bc16:	9b03      	ldr	r3, [sp, #12]
 800bc18:	3307      	adds	r3, #7
 800bc1a:	f023 0307 	bic.w	r3, r3, #7
 800bc1e:	3308      	adds	r3, #8
 800bc20:	9303      	str	r3, [sp, #12]
 800bc22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc24:	4433      	add	r3, r6
 800bc26:	9309      	str	r3, [sp, #36]	; 0x24
 800bc28:	e767      	b.n	800bafa <_svfiprintf_r+0x4e>
 800bc2a:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc2e:	460c      	mov	r4, r1
 800bc30:	2001      	movs	r0, #1
 800bc32:	e7a5      	b.n	800bb80 <_svfiprintf_r+0xd4>
 800bc34:	2300      	movs	r3, #0
 800bc36:	3401      	adds	r4, #1
 800bc38:	9305      	str	r3, [sp, #20]
 800bc3a:	4619      	mov	r1, r3
 800bc3c:	f04f 0c0a 	mov.w	ip, #10
 800bc40:	4620      	mov	r0, r4
 800bc42:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc46:	3a30      	subs	r2, #48	; 0x30
 800bc48:	2a09      	cmp	r2, #9
 800bc4a:	d903      	bls.n	800bc54 <_svfiprintf_r+0x1a8>
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d0c5      	beq.n	800bbdc <_svfiprintf_r+0x130>
 800bc50:	9105      	str	r1, [sp, #20]
 800bc52:	e7c3      	b.n	800bbdc <_svfiprintf_r+0x130>
 800bc54:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc58:	4604      	mov	r4, r0
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	e7f0      	b.n	800bc40 <_svfiprintf_r+0x194>
 800bc5e:	ab03      	add	r3, sp, #12
 800bc60:	9300      	str	r3, [sp, #0]
 800bc62:	462a      	mov	r2, r5
 800bc64:	4b0f      	ldr	r3, [pc, #60]	; (800bca4 <_svfiprintf_r+0x1f8>)
 800bc66:	a904      	add	r1, sp, #16
 800bc68:	4638      	mov	r0, r7
 800bc6a:	f7fd ff21 	bl	8009ab0 <_printf_float>
 800bc6e:	1c42      	adds	r2, r0, #1
 800bc70:	4606      	mov	r6, r0
 800bc72:	d1d6      	bne.n	800bc22 <_svfiprintf_r+0x176>
 800bc74:	89ab      	ldrh	r3, [r5, #12]
 800bc76:	065b      	lsls	r3, r3, #25
 800bc78:	f53f af2c 	bmi.w	800bad4 <_svfiprintf_r+0x28>
 800bc7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc7e:	b01d      	add	sp, #116	; 0x74
 800bc80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc84:	ab03      	add	r3, sp, #12
 800bc86:	9300      	str	r3, [sp, #0]
 800bc88:	462a      	mov	r2, r5
 800bc8a:	4b06      	ldr	r3, [pc, #24]	; (800bca4 <_svfiprintf_r+0x1f8>)
 800bc8c:	a904      	add	r1, sp, #16
 800bc8e:	4638      	mov	r0, r7
 800bc90:	f7fe f9b2 	bl	8009ff8 <_printf_i>
 800bc94:	e7eb      	b.n	800bc6e <_svfiprintf_r+0x1c2>
 800bc96:	bf00      	nop
 800bc98:	0800c9b4 	.word	0x0800c9b4
 800bc9c:	0800c9be 	.word	0x0800c9be
 800bca0:	08009ab1 	.word	0x08009ab1
 800bca4:	0800b9f5 	.word	0x0800b9f5
 800bca8:	0800c9ba 	.word	0x0800c9ba

0800bcac <__sfputc_r>:
 800bcac:	6893      	ldr	r3, [r2, #8]
 800bcae:	3b01      	subs	r3, #1
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	b410      	push	{r4}
 800bcb4:	6093      	str	r3, [r2, #8]
 800bcb6:	da08      	bge.n	800bcca <__sfputc_r+0x1e>
 800bcb8:	6994      	ldr	r4, [r2, #24]
 800bcba:	42a3      	cmp	r3, r4
 800bcbc:	db01      	blt.n	800bcc2 <__sfputc_r+0x16>
 800bcbe:	290a      	cmp	r1, #10
 800bcc0:	d103      	bne.n	800bcca <__sfputc_r+0x1e>
 800bcc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bcc6:	f000 b99f 	b.w	800c008 <__swbuf_r>
 800bcca:	6813      	ldr	r3, [r2, #0]
 800bccc:	1c58      	adds	r0, r3, #1
 800bcce:	6010      	str	r0, [r2, #0]
 800bcd0:	7019      	strb	r1, [r3, #0]
 800bcd2:	4608      	mov	r0, r1
 800bcd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bcd8:	4770      	bx	lr

0800bcda <__sfputs_r>:
 800bcda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcdc:	4606      	mov	r6, r0
 800bcde:	460f      	mov	r7, r1
 800bce0:	4614      	mov	r4, r2
 800bce2:	18d5      	adds	r5, r2, r3
 800bce4:	42ac      	cmp	r4, r5
 800bce6:	d101      	bne.n	800bcec <__sfputs_r+0x12>
 800bce8:	2000      	movs	r0, #0
 800bcea:	e007      	b.n	800bcfc <__sfputs_r+0x22>
 800bcec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcf0:	463a      	mov	r2, r7
 800bcf2:	4630      	mov	r0, r6
 800bcf4:	f7ff ffda 	bl	800bcac <__sfputc_r>
 800bcf8:	1c43      	adds	r3, r0, #1
 800bcfa:	d1f3      	bne.n	800bce4 <__sfputs_r+0xa>
 800bcfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bd00 <_vfiprintf_r>:
 800bd00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd04:	460d      	mov	r5, r1
 800bd06:	b09d      	sub	sp, #116	; 0x74
 800bd08:	4614      	mov	r4, r2
 800bd0a:	4698      	mov	r8, r3
 800bd0c:	4606      	mov	r6, r0
 800bd0e:	b118      	cbz	r0, 800bd18 <_vfiprintf_r+0x18>
 800bd10:	6983      	ldr	r3, [r0, #24]
 800bd12:	b90b      	cbnz	r3, 800bd18 <_vfiprintf_r+0x18>
 800bd14:	f7ff f988 	bl	800b028 <__sinit>
 800bd18:	4b89      	ldr	r3, [pc, #548]	; (800bf40 <_vfiprintf_r+0x240>)
 800bd1a:	429d      	cmp	r5, r3
 800bd1c:	d11b      	bne.n	800bd56 <_vfiprintf_r+0x56>
 800bd1e:	6875      	ldr	r5, [r6, #4]
 800bd20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd22:	07d9      	lsls	r1, r3, #31
 800bd24:	d405      	bmi.n	800bd32 <_vfiprintf_r+0x32>
 800bd26:	89ab      	ldrh	r3, [r5, #12]
 800bd28:	059a      	lsls	r2, r3, #22
 800bd2a:	d402      	bmi.n	800bd32 <_vfiprintf_r+0x32>
 800bd2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd2e:	f7ff fa1e 	bl	800b16e <__retarget_lock_acquire_recursive>
 800bd32:	89ab      	ldrh	r3, [r5, #12]
 800bd34:	071b      	lsls	r3, r3, #28
 800bd36:	d501      	bpl.n	800bd3c <_vfiprintf_r+0x3c>
 800bd38:	692b      	ldr	r3, [r5, #16]
 800bd3a:	b9eb      	cbnz	r3, 800bd78 <_vfiprintf_r+0x78>
 800bd3c:	4629      	mov	r1, r5
 800bd3e:	4630      	mov	r0, r6
 800bd40:	f000 f9c6 	bl	800c0d0 <__swsetup_r>
 800bd44:	b1c0      	cbz	r0, 800bd78 <_vfiprintf_r+0x78>
 800bd46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd48:	07dc      	lsls	r4, r3, #31
 800bd4a:	d50e      	bpl.n	800bd6a <_vfiprintf_r+0x6a>
 800bd4c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd50:	b01d      	add	sp, #116	; 0x74
 800bd52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd56:	4b7b      	ldr	r3, [pc, #492]	; (800bf44 <_vfiprintf_r+0x244>)
 800bd58:	429d      	cmp	r5, r3
 800bd5a:	d101      	bne.n	800bd60 <_vfiprintf_r+0x60>
 800bd5c:	68b5      	ldr	r5, [r6, #8]
 800bd5e:	e7df      	b.n	800bd20 <_vfiprintf_r+0x20>
 800bd60:	4b79      	ldr	r3, [pc, #484]	; (800bf48 <_vfiprintf_r+0x248>)
 800bd62:	429d      	cmp	r5, r3
 800bd64:	bf08      	it	eq
 800bd66:	68f5      	ldreq	r5, [r6, #12]
 800bd68:	e7da      	b.n	800bd20 <_vfiprintf_r+0x20>
 800bd6a:	89ab      	ldrh	r3, [r5, #12]
 800bd6c:	0598      	lsls	r0, r3, #22
 800bd6e:	d4ed      	bmi.n	800bd4c <_vfiprintf_r+0x4c>
 800bd70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd72:	f7ff f9fd 	bl	800b170 <__retarget_lock_release_recursive>
 800bd76:	e7e9      	b.n	800bd4c <_vfiprintf_r+0x4c>
 800bd78:	2300      	movs	r3, #0
 800bd7a:	9309      	str	r3, [sp, #36]	; 0x24
 800bd7c:	2320      	movs	r3, #32
 800bd7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd82:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd86:	2330      	movs	r3, #48	; 0x30
 800bd88:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bf4c <_vfiprintf_r+0x24c>
 800bd8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd90:	f04f 0901 	mov.w	r9, #1
 800bd94:	4623      	mov	r3, r4
 800bd96:	469a      	mov	sl, r3
 800bd98:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd9c:	b10a      	cbz	r2, 800bda2 <_vfiprintf_r+0xa2>
 800bd9e:	2a25      	cmp	r2, #37	; 0x25
 800bda0:	d1f9      	bne.n	800bd96 <_vfiprintf_r+0x96>
 800bda2:	ebba 0b04 	subs.w	fp, sl, r4
 800bda6:	d00b      	beq.n	800bdc0 <_vfiprintf_r+0xc0>
 800bda8:	465b      	mov	r3, fp
 800bdaa:	4622      	mov	r2, r4
 800bdac:	4629      	mov	r1, r5
 800bdae:	4630      	mov	r0, r6
 800bdb0:	f7ff ff93 	bl	800bcda <__sfputs_r>
 800bdb4:	3001      	adds	r0, #1
 800bdb6:	f000 80aa 	beq.w	800bf0e <_vfiprintf_r+0x20e>
 800bdba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bdbc:	445a      	add	r2, fp
 800bdbe:	9209      	str	r2, [sp, #36]	; 0x24
 800bdc0:	f89a 3000 	ldrb.w	r3, [sl]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	f000 80a2 	beq.w	800bf0e <_vfiprintf_r+0x20e>
 800bdca:	2300      	movs	r3, #0
 800bdcc:	f04f 32ff 	mov.w	r2, #4294967295
 800bdd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bdd4:	f10a 0a01 	add.w	sl, sl, #1
 800bdd8:	9304      	str	r3, [sp, #16]
 800bdda:	9307      	str	r3, [sp, #28]
 800bddc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bde0:	931a      	str	r3, [sp, #104]	; 0x68
 800bde2:	4654      	mov	r4, sl
 800bde4:	2205      	movs	r2, #5
 800bde6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdea:	4858      	ldr	r0, [pc, #352]	; (800bf4c <_vfiprintf_r+0x24c>)
 800bdec:	f7f4 fa00 	bl	80001f0 <memchr>
 800bdf0:	9a04      	ldr	r2, [sp, #16]
 800bdf2:	b9d8      	cbnz	r0, 800be2c <_vfiprintf_r+0x12c>
 800bdf4:	06d1      	lsls	r1, r2, #27
 800bdf6:	bf44      	itt	mi
 800bdf8:	2320      	movmi	r3, #32
 800bdfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bdfe:	0713      	lsls	r3, r2, #28
 800be00:	bf44      	itt	mi
 800be02:	232b      	movmi	r3, #43	; 0x2b
 800be04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be08:	f89a 3000 	ldrb.w	r3, [sl]
 800be0c:	2b2a      	cmp	r3, #42	; 0x2a
 800be0e:	d015      	beq.n	800be3c <_vfiprintf_r+0x13c>
 800be10:	9a07      	ldr	r2, [sp, #28]
 800be12:	4654      	mov	r4, sl
 800be14:	2000      	movs	r0, #0
 800be16:	f04f 0c0a 	mov.w	ip, #10
 800be1a:	4621      	mov	r1, r4
 800be1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be20:	3b30      	subs	r3, #48	; 0x30
 800be22:	2b09      	cmp	r3, #9
 800be24:	d94e      	bls.n	800bec4 <_vfiprintf_r+0x1c4>
 800be26:	b1b0      	cbz	r0, 800be56 <_vfiprintf_r+0x156>
 800be28:	9207      	str	r2, [sp, #28]
 800be2a:	e014      	b.n	800be56 <_vfiprintf_r+0x156>
 800be2c:	eba0 0308 	sub.w	r3, r0, r8
 800be30:	fa09 f303 	lsl.w	r3, r9, r3
 800be34:	4313      	orrs	r3, r2
 800be36:	9304      	str	r3, [sp, #16]
 800be38:	46a2      	mov	sl, r4
 800be3a:	e7d2      	b.n	800bde2 <_vfiprintf_r+0xe2>
 800be3c:	9b03      	ldr	r3, [sp, #12]
 800be3e:	1d19      	adds	r1, r3, #4
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	9103      	str	r1, [sp, #12]
 800be44:	2b00      	cmp	r3, #0
 800be46:	bfbb      	ittet	lt
 800be48:	425b      	neglt	r3, r3
 800be4a:	f042 0202 	orrlt.w	r2, r2, #2
 800be4e:	9307      	strge	r3, [sp, #28]
 800be50:	9307      	strlt	r3, [sp, #28]
 800be52:	bfb8      	it	lt
 800be54:	9204      	strlt	r2, [sp, #16]
 800be56:	7823      	ldrb	r3, [r4, #0]
 800be58:	2b2e      	cmp	r3, #46	; 0x2e
 800be5a:	d10c      	bne.n	800be76 <_vfiprintf_r+0x176>
 800be5c:	7863      	ldrb	r3, [r4, #1]
 800be5e:	2b2a      	cmp	r3, #42	; 0x2a
 800be60:	d135      	bne.n	800bece <_vfiprintf_r+0x1ce>
 800be62:	9b03      	ldr	r3, [sp, #12]
 800be64:	1d1a      	adds	r2, r3, #4
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	9203      	str	r2, [sp, #12]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	bfb8      	it	lt
 800be6e:	f04f 33ff 	movlt.w	r3, #4294967295
 800be72:	3402      	adds	r4, #2
 800be74:	9305      	str	r3, [sp, #20]
 800be76:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bf5c <_vfiprintf_r+0x25c>
 800be7a:	7821      	ldrb	r1, [r4, #0]
 800be7c:	2203      	movs	r2, #3
 800be7e:	4650      	mov	r0, sl
 800be80:	f7f4 f9b6 	bl	80001f0 <memchr>
 800be84:	b140      	cbz	r0, 800be98 <_vfiprintf_r+0x198>
 800be86:	2340      	movs	r3, #64	; 0x40
 800be88:	eba0 000a 	sub.w	r0, r0, sl
 800be8c:	fa03 f000 	lsl.w	r0, r3, r0
 800be90:	9b04      	ldr	r3, [sp, #16]
 800be92:	4303      	orrs	r3, r0
 800be94:	3401      	adds	r4, #1
 800be96:	9304      	str	r3, [sp, #16]
 800be98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be9c:	482c      	ldr	r0, [pc, #176]	; (800bf50 <_vfiprintf_r+0x250>)
 800be9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bea2:	2206      	movs	r2, #6
 800bea4:	f7f4 f9a4 	bl	80001f0 <memchr>
 800bea8:	2800      	cmp	r0, #0
 800beaa:	d03f      	beq.n	800bf2c <_vfiprintf_r+0x22c>
 800beac:	4b29      	ldr	r3, [pc, #164]	; (800bf54 <_vfiprintf_r+0x254>)
 800beae:	bb1b      	cbnz	r3, 800bef8 <_vfiprintf_r+0x1f8>
 800beb0:	9b03      	ldr	r3, [sp, #12]
 800beb2:	3307      	adds	r3, #7
 800beb4:	f023 0307 	bic.w	r3, r3, #7
 800beb8:	3308      	adds	r3, #8
 800beba:	9303      	str	r3, [sp, #12]
 800bebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bebe:	443b      	add	r3, r7
 800bec0:	9309      	str	r3, [sp, #36]	; 0x24
 800bec2:	e767      	b.n	800bd94 <_vfiprintf_r+0x94>
 800bec4:	fb0c 3202 	mla	r2, ip, r2, r3
 800bec8:	460c      	mov	r4, r1
 800beca:	2001      	movs	r0, #1
 800becc:	e7a5      	b.n	800be1a <_vfiprintf_r+0x11a>
 800bece:	2300      	movs	r3, #0
 800bed0:	3401      	adds	r4, #1
 800bed2:	9305      	str	r3, [sp, #20]
 800bed4:	4619      	mov	r1, r3
 800bed6:	f04f 0c0a 	mov.w	ip, #10
 800beda:	4620      	mov	r0, r4
 800bedc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bee0:	3a30      	subs	r2, #48	; 0x30
 800bee2:	2a09      	cmp	r2, #9
 800bee4:	d903      	bls.n	800beee <_vfiprintf_r+0x1ee>
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d0c5      	beq.n	800be76 <_vfiprintf_r+0x176>
 800beea:	9105      	str	r1, [sp, #20]
 800beec:	e7c3      	b.n	800be76 <_vfiprintf_r+0x176>
 800beee:	fb0c 2101 	mla	r1, ip, r1, r2
 800bef2:	4604      	mov	r4, r0
 800bef4:	2301      	movs	r3, #1
 800bef6:	e7f0      	b.n	800beda <_vfiprintf_r+0x1da>
 800bef8:	ab03      	add	r3, sp, #12
 800befa:	9300      	str	r3, [sp, #0]
 800befc:	462a      	mov	r2, r5
 800befe:	4b16      	ldr	r3, [pc, #88]	; (800bf58 <_vfiprintf_r+0x258>)
 800bf00:	a904      	add	r1, sp, #16
 800bf02:	4630      	mov	r0, r6
 800bf04:	f7fd fdd4 	bl	8009ab0 <_printf_float>
 800bf08:	4607      	mov	r7, r0
 800bf0a:	1c78      	adds	r0, r7, #1
 800bf0c:	d1d6      	bne.n	800bebc <_vfiprintf_r+0x1bc>
 800bf0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf10:	07d9      	lsls	r1, r3, #31
 800bf12:	d405      	bmi.n	800bf20 <_vfiprintf_r+0x220>
 800bf14:	89ab      	ldrh	r3, [r5, #12]
 800bf16:	059a      	lsls	r2, r3, #22
 800bf18:	d402      	bmi.n	800bf20 <_vfiprintf_r+0x220>
 800bf1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf1c:	f7ff f928 	bl	800b170 <__retarget_lock_release_recursive>
 800bf20:	89ab      	ldrh	r3, [r5, #12]
 800bf22:	065b      	lsls	r3, r3, #25
 800bf24:	f53f af12 	bmi.w	800bd4c <_vfiprintf_r+0x4c>
 800bf28:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf2a:	e711      	b.n	800bd50 <_vfiprintf_r+0x50>
 800bf2c:	ab03      	add	r3, sp, #12
 800bf2e:	9300      	str	r3, [sp, #0]
 800bf30:	462a      	mov	r2, r5
 800bf32:	4b09      	ldr	r3, [pc, #36]	; (800bf58 <_vfiprintf_r+0x258>)
 800bf34:	a904      	add	r1, sp, #16
 800bf36:	4630      	mov	r0, r6
 800bf38:	f7fe f85e 	bl	8009ff8 <_printf_i>
 800bf3c:	e7e4      	b.n	800bf08 <_vfiprintf_r+0x208>
 800bf3e:	bf00      	nop
 800bf40:	0800c818 	.word	0x0800c818
 800bf44:	0800c838 	.word	0x0800c838
 800bf48:	0800c7f8 	.word	0x0800c7f8
 800bf4c:	0800c9b4 	.word	0x0800c9b4
 800bf50:	0800c9be 	.word	0x0800c9be
 800bf54:	08009ab1 	.word	0x08009ab1
 800bf58:	0800bcdb 	.word	0x0800bcdb
 800bf5c:	0800c9ba 	.word	0x0800c9ba

0800bf60 <_sbrk_r>:
 800bf60:	b538      	push	{r3, r4, r5, lr}
 800bf62:	4d06      	ldr	r5, [pc, #24]	; (800bf7c <_sbrk_r+0x1c>)
 800bf64:	2300      	movs	r3, #0
 800bf66:	4604      	mov	r4, r0
 800bf68:	4608      	mov	r0, r1
 800bf6a:	602b      	str	r3, [r5, #0]
 800bf6c:	f7f5 fdf0 	bl	8001b50 <_sbrk>
 800bf70:	1c43      	adds	r3, r0, #1
 800bf72:	d102      	bne.n	800bf7a <_sbrk_r+0x1a>
 800bf74:	682b      	ldr	r3, [r5, #0]
 800bf76:	b103      	cbz	r3, 800bf7a <_sbrk_r+0x1a>
 800bf78:	6023      	str	r3, [r4, #0]
 800bf7a:	bd38      	pop	{r3, r4, r5, pc}
 800bf7c:	20001f74 	.word	0x20001f74

0800bf80 <__sread>:
 800bf80:	b510      	push	{r4, lr}
 800bf82:	460c      	mov	r4, r1
 800bf84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf88:	f000 fae6 	bl	800c558 <_read_r>
 800bf8c:	2800      	cmp	r0, #0
 800bf8e:	bfab      	itete	ge
 800bf90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bf92:	89a3      	ldrhlt	r3, [r4, #12]
 800bf94:	181b      	addge	r3, r3, r0
 800bf96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bf9a:	bfac      	ite	ge
 800bf9c:	6563      	strge	r3, [r4, #84]	; 0x54
 800bf9e:	81a3      	strhlt	r3, [r4, #12]
 800bfa0:	bd10      	pop	{r4, pc}

0800bfa2 <__swrite>:
 800bfa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfa6:	461f      	mov	r7, r3
 800bfa8:	898b      	ldrh	r3, [r1, #12]
 800bfaa:	05db      	lsls	r3, r3, #23
 800bfac:	4605      	mov	r5, r0
 800bfae:	460c      	mov	r4, r1
 800bfb0:	4616      	mov	r6, r2
 800bfb2:	d505      	bpl.n	800bfc0 <__swrite+0x1e>
 800bfb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfb8:	2302      	movs	r3, #2
 800bfba:	2200      	movs	r2, #0
 800bfbc:	f000 f9f8 	bl	800c3b0 <_lseek_r>
 800bfc0:	89a3      	ldrh	r3, [r4, #12]
 800bfc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bfc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bfca:	81a3      	strh	r3, [r4, #12]
 800bfcc:	4632      	mov	r2, r6
 800bfce:	463b      	mov	r3, r7
 800bfd0:	4628      	mov	r0, r5
 800bfd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfd6:	f000 b869 	b.w	800c0ac <_write_r>

0800bfda <__sseek>:
 800bfda:	b510      	push	{r4, lr}
 800bfdc:	460c      	mov	r4, r1
 800bfde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfe2:	f000 f9e5 	bl	800c3b0 <_lseek_r>
 800bfe6:	1c43      	adds	r3, r0, #1
 800bfe8:	89a3      	ldrh	r3, [r4, #12]
 800bfea:	bf15      	itete	ne
 800bfec:	6560      	strne	r0, [r4, #84]	; 0x54
 800bfee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bff2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bff6:	81a3      	strheq	r3, [r4, #12]
 800bff8:	bf18      	it	ne
 800bffa:	81a3      	strhne	r3, [r4, #12]
 800bffc:	bd10      	pop	{r4, pc}

0800bffe <__sclose>:
 800bffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c002:	f000 b8f1 	b.w	800c1e8 <_close_r>
	...

0800c008 <__swbuf_r>:
 800c008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c00a:	460e      	mov	r6, r1
 800c00c:	4614      	mov	r4, r2
 800c00e:	4605      	mov	r5, r0
 800c010:	b118      	cbz	r0, 800c01a <__swbuf_r+0x12>
 800c012:	6983      	ldr	r3, [r0, #24]
 800c014:	b90b      	cbnz	r3, 800c01a <__swbuf_r+0x12>
 800c016:	f7ff f807 	bl	800b028 <__sinit>
 800c01a:	4b21      	ldr	r3, [pc, #132]	; (800c0a0 <__swbuf_r+0x98>)
 800c01c:	429c      	cmp	r4, r3
 800c01e:	d12b      	bne.n	800c078 <__swbuf_r+0x70>
 800c020:	686c      	ldr	r4, [r5, #4]
 800c022:	69a3      	ldr	r3, [r4, #24]
 800c024:	60a3      	str	r3, [r4, #8]
 800c026:	89a3      	ldrh	r3, [r4, #12]
 800c028:	071a      	lsls	r2, r3, #28
 800c02a:	d52f      	bpl.n	800c08c <__swbuf_r+0x84>
 800c02c:	6923      	ldr	r3, [r4, #16]
 800c02e:	b36b      	cbz	r3, 800c08c <__swbuf_r+0x84>
 800c030:	6923      	ldr	r3, [r4, #16]
 800c032:	6820      	ldr	r0, [r4, #0]
 800c034:	1ac0      	subs	r0, r0, r3
 800c036:	6963      	ldr	r3, [r4, #20]
 800c038:	b2f6      	uxtb	r6, r6
 800c03a:	4283      	cmp	r3, r0
 800c03c:	4637      	mov	r7, r6
 800c03e:	dc04      	bgt.n	800c04a <__swbuf_r+0x42>
 800c040:	4621      	mov	r1, r4
 800c042:	4628      	mov	r0, r5
 800c044:	f000 f966 	bl	800c314 <_fflush_r>
 800c048:	bb30      	cbnz	r0, 800c098 <__swbuf_r+0x90>
 800c04a:	68a3      	ldr	r3, [r4, #8]
 800c04c:	3b01      	subs	r3, #1
 800c04e:	60a3      	str	r3, [r4, #8]
 800c050:	6823      	ldr	r3, [r4, #0]
 800c052:	1c5a      	adds	r2, r3, #1
 800c054:	6022      	str	r2, [r4, #0]
 800c056:	701e      	strb	r6, [r3, #0]
 800c058:	6963      	ldr	r3, [r4, #20]
 800c05a:	3001      	adds	r0, #1
 800c05c:	4283      	cmp	r3, r0
 800c05e:	d004      	beq.n	800c06a <__swbuf_r+0x62>
 800c060:	89a3      	ldrh	r3, [r4, #12]
 800c062:	07db      	lsls	r3, r3, #31
 800c064:	d506      	bpl.n	800c074 <__swbuf_r+0x6c>
 800c066:	2e0a      	cmp	r6, #10
 800c068:	d104      	bne.n	800c074 <__swbuf_r+0x6c>
 800c06a:	4621      	mov	r1, r4
 800c06c:	4628      	mov	r0, r5
 800c06e:	f000 f951 	bl	800c314 <_fflush_r>
 800c072:	b988      	cbnz	r0, 800c098 <__swbuf_r+0x90>
 800c074:	4638      	mov	r0, r7
 800c076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c078:	4b0a      	ldr	r3, [pc, #40]	; (800c0a4 <__swbuf_r+0x9c>)
 800c07a:	429c      	cmp	r4, r3
 800c07c:	d101      	bne.n	800c082 <__swbuf_r+0x7a>
 800c07e:	68ac      	ldr	r4, [r5, #8]
 800c080:	e7cf      	b.n	800c022 <__swbuf_r+0x1a>
 800c082:	4b09      	ldr	r3, [pc, #36]	; (800c0a8 <__swbuf_r+0xa0>)
 800c084:	429c      	cmp	r4, r3
 800c086:	bf08      	it	eq
 800c088:	68ec      	ldreq	r4, [r5, #12]
 800c08a:	e7ca      	b.n	800c022 <__swbuf_r+0x1a>
 800c08c:	4621      	mov	r1, r4
 800c08e:	4628      	mov	r0, r5
 800c090:	f000 f81e 	bl	800c0d0 <__swsetup_r>
 800c094:	2800      	cmp	r0, #0
 800c096:	d0cb      	beq.n	800c030 <__swbuf_r+0x28>
 800c098:	f04f 37ff 	mov.w	r7, #4294967295
 800c09c:	e7ea      	b.n	800c074 <__swbuf_r+0x6c>
 800c09e:	bf00      	nop
 800c0a0:	0800c818 	.word	0x0800c818
 800c0a4:	0800c838 	.word	0x0800c838
 800c0a8:	0800c7f8 	.word	0x0800c7f8

0800c0ac <_write_r>:
 800c0ac:	b538      	push	{r3, r4, r5, lr}
 800c0ae:	4d07      	ldr	r5, [pc, #28]	; (800c0cc <_write_r+0x20>)
 800c0b0:	4604      	mov	r4, r0
 800c0b2:	4608      	mov	r0, r1
 800c0b4:	4611      	mov	r1, r2
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	602a      	str	r2, [r5, #0]
 800c0ba:	461a      	mov	r2, r3
 800c0bc:	f7f5 fcf7 	bl	8001aae <_write>
 800c0c0:	1c43      	adds	r3, r0, #1
 800c0c2:	d102      	bne.n	800c0ca <_write_r+0x1e>
 800c0c4:	682b      	ldr	r3, [r5, #0]
 800c0c6:	b103      	cbz	r3, 800c0ca <_write_r+0x1e>
 800c0c8:	6023      	str	r3, [r4, #0]
 800c0ca:	bd38      	pop	{r3, r4, r5, pc}
 800c0cc:	20001f74 	.word	0x20001f74

0800c0d0 <__swsetup_r>:
 800c0d0:	4b32      	ldr	r3, [pc, #200]	; (800c19c <__swsetup_r+0xcc>)
 800c0d2:	b570      	push	{r4, r5, r6, lr}
 800c0d4:	681d      	ldr	r5, [r3, #0]
 800c0d6:	4606      	mov	r6, r0
 800c0d8:	460c      	mov	r4, r1
 800c0da:	b125      	cbz	r5, 800c0e6 <__swsetup_r+0x16>
 800c0dc:	69ab      	ldr	r3, [r5, #24]
 800c0de:	b913      	cbnz	r3, 800c0e6 <__swsetup_r+0x16>
 800c0e0:	4628      	mov	r0, r5
 800c0e2:	f7fe ffa1 	bl	800b028 <__sinit>
 800c0e6:	4b2e      	ldr	r3, [pc, #184]	; (800c1a0 <__swsetup_r+0xd0>)
 800c0e8:	429c      	cmp	r4, r3
 800c0ea:	d10f      	bne.n	800c10c <__swsetup_r+0x3c>
 800c0ec:	686c      	ldr	r4, [r5, #4]
 800c0ee:	89a3      	ldrh	r3, [r4, #12]
 800c0f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c0f4:	0719      	lsls	r1, r3, #28
 800c0f6:	d42c      	bmi.n	800c152 <__swsetup_r+0x82>
 800c0f8:	06dd      	lsls	r5, r3, #27
 800c0fa:	d411      	bmi.n	800c120 <__swsetup_r+0x50>
 800c0fc:	2309      	movs	r3, #9
 800c0fe:	6033      	str	r3, [r6, #0]
 800c100:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c104:	81a3      	strh	r3, [r4, #12]
 800c106:	f04f 30ff 	mov.w	r0, #4294967295
 800c10a:	e03e      	b.n	800c18a <__swsetup_r+0xba>
 800c10c:	4b25      	ldr	r3, [pc, #148]	; (800c1a4 <__swsetup_r+0xd4>)
 800c10e:	429c      	cmp	r4, r3
 800c110:	d101      	bne.n	800c116 <__swsetup_r+0x46>
 800c112:	68ac      	ldr	r4, [r5, #8]
 800c114:	e7eb      	b.n	800c0ee <__swsetup_r+0x1e>
 800c116:	4b24      	ldr	r3, [pc, #144]	; (800c1a8 <__swsetup_r+0xd8>)
 800c118:	429c      	cmp	r4, r3
 800c11a:	bf08      	it	eq
 800c11c:	68ec      	ldreq	r4, [r5, #12]
 800c11e:	e7e6      	b.n	800c0ee <__swsetup_r+0x1e>
 800c120:	0758      	lsls	r0, r3, #29
 800c122:	d512      	bpl.n	800c14a <__swsetup_r+0x7a>
 800c124:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c126:	b141      	cbz	r1, 800c13a <__swsetup_r+0x6a>
 800c128:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c12c:	4299      	cmp	r1, r3
 800c12e:	d002      	beq.n	800c136 <__swsetup_r+0x66>
 800c130:	4630      	mov	r0, r6
 800c132:	f7ff fbb5 	bl	800b8a0 <_free_r>
 800c136:	2300      	movs	r3, #0
 800c138:	6363      	str	r3, [r4, #52]	; 0x34
 800c13a:	89a3      	ldrh	r3, [r4, #12]
 800c13c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c140:	81a3      	strh	r3, [r4, #12]
 800c142:	2300      	movs	r3, #0
 800c144:	6063      	str	r3, [r4, #4]
 800c146:	6923      	ldr	r3, [r4, #16]
 800c148:	6023      	str	r3, [r4, #0]
 800c14a:	89a3      	ldrh	r3, [r4, #12]
 800c14c:	f043 0308 	orr.w	r3, r3, #8
 800c150:	81a3      	strh	r3, [r4, #12]
 800c152:	6923      	ldr	r3, [r4, #16]
 800c154:	b94b      	cbnz	r3, 800c16a <__swsetup_r+0x9a>
 800c156:	89a3      	ldrh	r3, [r4, #12]
 800c158:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c15c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c160:	d003      	beq.n	800c16a <__swsetup_r+0x9a>
 800c162:	4621      	mov	r1, r4
 800c164:	4630      	mov	r0, r6
 800c166:	f000 f959 	bl	800c41c <__smakebuf_r>
 800c16a:	89a0      	ldrh	r0, [r4, #12]
 800c16c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c170:	f010 0301 	ands.w	r3, r0, #1
 800c174:	d00a      	beq.n	800c18c <__swsetup_r+0xbc>
 800c176:	2300      	movs	r3, #0
 800c178:	60a3      	str	r3, [r4, #8]
 800c17a:	6963      	ldr	r3, [r4, #20]
 800c17c:	425b      	negs	r3, r3
 800c17e:	61a3      	str	r3, [r4, #24]
 800c180:	6923      	ldr	r3, [r4, #16]
 800c182:	b943      	cbnz	r3, 800c196 <__swsetup_r+0xc6>
 800c184:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c188:	d1ba      	bne.n	800c100 <__swsetup_r+0x30>
 800c18a:	bd70      	pop	{r4, r5, r6, pc}
 800c18c:	0781      	lsls	r1, r0, #30
 800c18e:	bf58      	it	pl
 800c190:	6963      	ldrpl	r3, [r4, #20]
 800c192:	60a3      	str	r3, [r4, #8]
 800c194:	e7f4      	b.n	800c180 <__swsetup_r+0xb0>
 800c196:	2000      	movs	r0, #0
 800c198:	e7f7      	b.n	800c18a <__swsetup_r+0xba>
 800c19a:	bf00      	nop
 800c19c:	20000180 	.word	0x20000180
 800c1a0:	0800c818 	.word	0x0800c818
 800c1a4:	0800c838 	.word	0x0800c838
 800c1a8:	0800c7f8 	.word	0x0800c7f8

0800c1ac <__assert_func>:
 800c1ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c1ae:	4614      	mov	r4, r2
 800c1b0:	461a      	mov	r2, r3
 800c1b2:	4b09      	ldr	r3, [pc, #36]	; (800c1d8 <__assert_func+0x2c>)
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	4605      	mov	r5, r0
 800c1b8:	68d8      	ldr	r0, [r3, #12]
 800c1ba:	b14c      	cbz	r4, 800c1d0 <__assert_func+0x24>
 800c1bc:	4b07      	ldr	r3, [pc, #28]	; (800c1dc <__assert_func+0x30>)
 800c1be:	9100      	str	r1, [sp, #0]
 800c1c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c1c4:	4906      	ldr	r1, [pc, #24]	; (800c1e0 <__assert_func+0x34>)
 800c1c6:	462b      	mov	r3, r5
 800c1c8:	f000 f8e0 	bl	800c38c <fiprintf>
 800c1cc:	f000 f9e3 	bl	800c596 <abort>
 800c1d0:	4b04      	ldr	r3, [pc, #16]	; (800c1e4 <__assert_func+0x38>)
 800c1d2:	461c      	mov	r4, r3
 800c1d4:	e7f3      	b.n	800c1be <__assert_func+0x12>
 800c1d6:	bf00      	nop
 800c1d8:	20000180 	.word	0x20000180
 800c1dc:	0800c9c5 	.word	0x0800c9c5
 800c1e0:	0800c9d2 	.word	0x0800c9d2
 800c1e4:	0800ca00 	.word	0x0800ca00

0800c1e8 <_close_r>:
 800c1e8:	b538      	push	{r3, r4, r5, lr}
 800c1ea:	4d06      	ldr	r5, [pc, #24]	; (800c204 <_close_r+0x1c>)
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	4604      	mov	r4, r0
 800c1f0:	4608      	mov	r0, r1
 800c1f2:	602b      	str	r3, [r5, #0]
 800c1f4:	f7f5 fc77 	bl	8001ae6 <_close>
 800c1f8:	1c43      	adds	r3, r0, #1
 800c1fa:	d102      	bne.n	800c202 <_close_r+0x1a>
 800c1fc:	682b      	ldr	r3, [r5, #0]
 800c1fe:	b103      	cbz	r3, 800c202 <_close_r+0x1a>
 800c200:	6023      	str	r3, [r4, #0]
 800c202:	bd38      	pop	{r3, r4, r5, pc}
 800c204:	20001f74 	.word	0x20001f74

0800c208 <__sflush_r>:
 800c208:	898a      	ldrh	r2, [r1, #12]
 800c20a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c20e:	4605      	mov	r5, r0
 800c210:	0710      	lsls	r0, r2, #28
 800c212:	460c      	mov	r4, r1
 800c214:	d458      	bmi.n	800c2c8 <__sflush_r+0xc0>
 800c216:	684b      	ldr	r3, [r1, #4]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	dc05      	bgt.n	800c228 <__sflush_r+0x20>
 800c21c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c21e:	2b00      	cmp	r3, #0
 800c220:	dc02      	bgt.n	800c228 <__sflush_r+0x20>
 800c222:	2000      	movs	r0, #0
 800c224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c228:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c22a:	2e00      	cmp	r6, #0
 800c22c:	d0f9      	beq.n	800c222 <__sflush_r+0x1a>
 800c22e:	2300      	movs	r3, #0
 800c230:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c234:	682f      	ldr	r7, [r5, #0]
 800c236:	602b      	str	r3, [r5, #0]
 800c238:	d032      	beq.n	800c2a0 <__sflush_r+0x98>
 800c23a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c23c:	89a3      	ldrh	r3, [r4, #12]
 800c23e:	075a      	lsls	r2, r3, #29
 800c240:	d505      	bpl.n	800c24e <__sflush_r+0x46>
 800c242:	6863      	ldr	r3, [r4, #4]
 800c244:	1ac0      	subs	r0, r0, r3
 800c246:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c248:	b10b      	cbz	r3, 800c24e <__sflush_r+0x46>
 800c24a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c24c:	1ac0      	subs	r0, r0, r3
 800c24e:	2300      	movs	r3, #0
 800c250:	4602      	mov	r2, r0
 800c252:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c254:	6a21      	ldr	r1, [r4, #32]
 800c256:	4628      	mov	r0, r5
 800c258:	47b0      	blx	r6
 800c25a:	1c43      	adds	r3, r0, #1
 800c25c:	89a3      	ldrh	r3, [r4, #12]
 800c25e:	d106      	bne.n	800c26e <__sflush_r+0x66>
 800c260:	6829      	ldr	r1, [r5, #0]
 800c262:	291d      	cmp	r1, #29
 800c264:	d82c      	bhi.n	800c2c0 <__sflush_r+0xb8>
 800c266:	4a2a      	ldr	r2, [pc, #168]	; (800c310 <__sflush_r+0x108>)
 800c268:	40ca      	lsrs	r2, r1
 800c26a:	07d6      	lsls	r6, r2, #31
 800c26c:	d528      	bpl.n	800c2c0 <__sflush_r+0xb8>
 800c26e:	2200      	movs	r2, #0
 800c270:	6062      	str	r2, [r4, #4]
 800c272:	04d9      	lsls	r1, r3, #19
 800c274:	6922      	ldr	r2, [r4, #16]
 800c276:	6022      	str	r2, [r4, #0]
 800c278:	d504      	bpl.n	800c284 <__sflush_r+0x7c>
 800c27a:	1c42      	adds	r2, r0, #1
 800c27c:	d101      	bne.n	800c282 <__sflush_r+0x7a>
 800c27e:	682b      	ldr	r3, [r5, #0]
 800c280:	b903      	cbnz	r3, 800c284 <__sflush_r+0x7c>
 800c282:	6560      	str	r0, [r4, #84]	; 0x54
 800c284:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c286:	602f      	str	r7, [r5, #0]
 800c288:	2900      	cmp	r1, #0
 800c28a:	d0ca      	beq.n	800c222 <__sflush_r+0x1a>
 800c28c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c290:	4299      	cmp	r1, r3
 800c292:	d002      	beq.n	800c29a <__sflush_r+0x92>
 800c294:	4628      	mov	r0, r5
 800c296:	f7ff fb03 	bl	800b8a0 <_free_r>
 800c29a:	2000      	movs	r0, #0
 800c29c:	6360      	str	r0, [r4, #52]	; 0x34
 800c29e:	e7c1      	b.n	800c224 <__sflush_r+0x1c>
 800c2a0:	6a21      	ldr	r1, [r4, #32]
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	4628      	mov	r0, r5
 800c2a6:	47b0      	blx	r6
 800c2a8:	1c41      	adds	r1, r0, #1
 800c2aa:	d1c7      	bne.n	800c23c <__sflush_r+0x34>
 800c2ac:	682b      	ldr	r3, [r5, #0]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d0c4      	beq.n	800c23c <__sflush_r+0x34>
 800c2b2:	2b1d      	cmp	r3, #29
 800c2b4:	d001      	beq.n	800c2ba <__sflush_r+0xb2>
 800c2b6:	2b16      	cmp	r3, #22
 800c2b8:	d101      	bne.n	800c2be <__sflush_r+0xb6>
 800c2ba:	602f      	str	r7, [r5, #0]
 800c2bc:	e7b1      	b.n	800c222 <__sflush_r+0x1a>
 800c2be:	89a3      	ldrh	r3, [r4, #12]
 800c2c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2c4:	81a3      	strh	r3, [r4, #12]
 800c2c6:	e7ad      	b.n	800c224 <__sflush_r+0x1c>
 800c2c8:	690f      	ldr	r7, [r1, #16]
 800c2ca:	2f00      	cmp	r7, #0
 800c2cc:	d0a9      	beq.n	800c222 <__sflush_r+0x1a>
 800c2ce:	0793      	lsls	r3, r2, #30
 800c2d0:	680e      	ldr	r6, [r1, #0]
 800c2d2:	bf08      	it	eq
 800c2d4:	694b      	ldreq	r3, [r1, #20]
 800c2d6:	600f      	str	r7, [r1, #0]
 800c2d8:	bf18      	it	ne
 800c2da:	2300      	movne	r3, #0
 800c2dc:	eba6 0807 	sub.w	r8, r6, r7
 800c2e0:	608b      	str	r3, [r1, #8]
 800c2e2:	f1b8 0f00 	cmp.w	r8, #0
 800c2e6:	dd9c      	ble.n	800c222 <__sflush_r+0x1a>
 800c2e8:	6a21      	ldr	r1, [r4, #32]
 800c2ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c2ec:	4643      	mov	r3, r8
 800c2ee:	463a      	mov	r2, r7
 800c2f0:	4628      	mov	r0, r5
 800c2f2:	47b0      	blx	r6
 800c2f4:	2800      	cmp	r0, #0
 800c2f6:	dc06      	bgt.n	800c306 <__sflush_r+0xfe>
 800c2f8:	89a3      	ldrh	r3, [r4, #12]
 800c2fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2fe:	81a3      	strh	r3, [r4, #12]
 800c300:	f04f 30ff 	mov.w	r0, #4294967295
 800c304:	e78e      	b.n	800c224 <__sflush_r+0x1c>
 800c306:	4407      	add	r7, r0
 800c308:	eba8 0800 	sub.w	r8, r8, r0
 800c30c:	e7e9      	b.n	800c2e2 <__sflush_r+0xda>
 800c30e:	bf00      	nop
 800c310:	20400001 	.word	0x20400001

0800c314 <_fflush_r>:
 800c314:	b538      	push	{r3, r4, r5, lr}
 800c316:	690b      	ldr	r3, [r1, #16]
 800c318:	4605      	mov	r5, r0
 800c31a:	460c      	mov	r4, r1
 800c31c:	b913      	cbnz	r3, 800c324 <_fflush_r+0x10>
 800c31e:	2500      	movs	r5, #0
 800c320:	4628      	mov	r0, r5
 800c322:	bd38      	pop	{r3, r4, r5, pc}
 800c324:	b118      	cbz	r0, 800c32e <_fflush_r+0x1a>
 800c326:	6983      	ldr	r3, [r0, #24]
 800c328:	b90b      	cbnz	r3, 800c32e <_fflush_r+0x1a>
 800c32a:	f7fe fe7d 	bl	800b028 <__sinit>
 800c32e:	4b14      	ldr	r3, [pc, #80]	; (800c380 <_fflush_r+0x6c>)
 800c330:	429c      	cmp	r4, r3
 800c332:	d11b      	bne.n	800c36c <_fflush_r+0x58>
 800c334:	686c      	ldr	r4, [r5, #4]
 800c336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d0ef      	beq.n	800c31e <_fflush_r+0xa>
 800c33e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c340:	07d0      	lsls	r0, r2, #31
 800c342:	d404      	bmi.n	800c34e <_fflush_r+0x3a>
 800c344:	0599      	lsls	r1, r3, #22
 800c346:	d402      	bmi.n	800c34e <_fflush_r+0x3a>
 800c348:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c34a:	f7fe ff10 	bl	800b16e <__retarget_lock_acquire_recursive>
 800c34e:	4628      	mov	r0, r5
 800c350:	4621      	mov	r1, r4
 800c352:	f7ff ff59 	bl	800c208 <__sflush_r>
 800c356:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c358:	07da      	lsls	r2, r3, #31
 800c35a:	4605      	mov	r5, r0
 800c35c:	d4e0      	bmi.n	800c320 <_fflush_r+0xc>
 800c35e:	89a3      	ldrh	r3, [r4, #12]
 800c360:	059b      	lsls	r3, r3, #22
 800c362:	d4dd      	bmi.n	800c320 <_fflush_r+0xc>
 800c364:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c366:	f7fe ff03 	bl	800b170 <__retarget_lock_release_recursive>
 800c36a:	e7d9      	b.n	800c320 <_fflush_r+0xc>
 800c36c:	4b05      	ldr	r3, [pc, #20]	; (800c384 <_fflush_r+0x70>)
 800c36e:	429c      	cmp	r4, r3
 800c370:	d101      	bne.n	800c376 <_fflush_r+0x62>
 800c372:	68ac      	ldr	r4, [r5, #8]
 800c374:	e7df      	b.n	800c336 <_fflush_r+0x22>
 800c376:	4b04      	ldr	r3, [pc, #16]	; (800c388 <_fflush_r+0x74>)
 800c378:	429c      	cmp	r4, r3
 800c37a:	bf08      	it	eq
 800c37c:	68ec      	ldreq	r4, [r5, #12]
 800c37e:	e7da      	b.n	800c336 <_fflush_r+0x22>
 800c380:	0800c818 	.word	0x0800c818
 800c384:	0800c838 	.word	0x0800c838
 800c388:	0800c7f8 	.word	0x0800c7f8

0800c38c <fiprintf>:
 800c38c:	b40e      	push	{r1, r2, r3}
 800c38e:	b503      	push	{r0, r1, lr}
 800c390:	4601      	mov	r1, r0
 800c392:	ab03      	add	r3, sp, #12
 800c394:	4805      	ldr	r0, [pc, #20]	; (800c3ac <fiprintf+0x20>)
 800c396:	f853 2b04 	ldr.w	r2, [r3], #4
 800c39a:	6800      	ldr	r0, [r0, #0]
 800c39c:	9301      	str	r3, [sp, #4]
 800c39e:	f7ff fcaf 	bl	800bd00 <_vfiprintf_r>
 800c3a2:	b002      	add	sp, #8
 800c3a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c3a8:	b003      	add	sp, #12
 800c3aa:	4770      	bx	lr
 800c3ac:	20000180 	.word	0x20000180

0800c3b0 <_lseek_r>:
 800c3b0:	b538      	push	{r3, r4, r5, lr}
 800c3b2:	4d07      	ldr	r5, [pc, #28]	; (800c3d0 <_lseek_r+0x20>)
 800c3b4:	4604      	mov	r4, r0
 800c3b6:	4608      	mov	r0, r1
 800c3b8:	4611      	mov	r1, r2
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	602a      	str	r2, [r5, #0]
 800c3be:	461a      	mov	r2, r3
 800c3c0:	f7f5 fbb8 	bl	8001b34 <_lseek>
 800c3c4:	1c43      	adds	r3, r0, #1
 800c3c6:	d102      	bne.n	800c3ce <_lseek_r+0x1e>
 800c3c8:	682b      	ldr	r3, [r5, #0]
 800c3ca:	b103      	cbz	r3, 800c3ce <_lseek_r+0x1e>
 800c3cc:	6023      	str	r3, [r4, #0]
 800c3ce:	bd38      	pop	{r3, r4, r5, pc}
 800c3d0:	20001f74 	.word	0x20001f74

0800c3d4 <__swhatbuf_r>:
 800c3d4:	b570      	push	{r4, r5, r6, lr}
 800c3d6:	460e      	mov	r6, r1
 800c3d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3dc:	2900      	cmp	r1, #0
 800c3de:	b096      	sub	sp, #88	; 0x58
 800c3e0:	4614      	mov	r4, r2
 800c3e2:	461d      	mov	r5, r3
 800c3e4:	da07      	bge.n	800c3f6 <__swhatbuf_r+0x22>
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	602b      	str	r3, [r5, #0]
 800c3ea:	89b3      	ldrh	r3, [r6, #12]
 800c3ec:	061a      	lsls	r2, r3, #24
 800c3ee:	d410      	bmi.n	800c412 <__swhatbuf_r+0x3e>
 800c3f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c3f4:	e00e      	b.n	800c414 <__swhatbuf_r+0x40>
 800c3f6:	466a      	mov	r2, sp
 800c3f8:	f000 f8d4 	bl	800c5a4 <_fstat_r>
 800c3fc:	2800      	cmp	r0, #0
 800c3fe:	dbf2      	blt.n	800c3e6 <__swhatbuf_r+0x12>
 800c400:	9a01      	ldr	r2, [sp, #4]
 800c402:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c406:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c40a:	425a      	negs	r2, r3
 800c40c:	415a      	adcs	r2, r3
 800c40e:	602a      	str	r2, [r5, #0]
 800c410:	e7ee      	b.n	800c3f0 <__swhatbuf_r+0x1c>
 800c412:	2340      	movs	r3, #64	; 0x40
 800c414:	2000      	movs	r0, #0
 800c416:	6023      	str	r3, [r4, #0]
 800c418:	b016      	add	sp, #88	; 0x58
 800c41a:	bd70      	pop	{r4, r5, r6, pc}

0800c41c <__smakebuf_r>:
 800c41c:	898b      	ldrh	r3, [r1, #12]
 800c41e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c420:	079d      	lsls	r5, r3, #30
 800c422:	4606      	mov	r6, r0
 800c424:	460c      	mov	r4, r1
 800c426:	d507      	bpl.n	800c438 <__smakebuf_r+0x1c>
 800c428:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c42c:	6023      	str	r3, [r4, #0]
 800c42e:	6123      	str	r3, [r4, #16]
 800c430:	2301      	movs	r3, #1
 800c432:	6163      	str	r3, [r4, #20]
 800c434:	b002      	add	sp, #8
 800c436:	bd70      	pop	{r4, r5, r6, pc}
 800c438:	ab01      	add	r3, sp, #4
 800c43a:	466a      	mov	r2, sp
 800c43c:	f7ff ffca 	bl	800c3d4 <__swhatbuf_r>
 800c440:	9900      	ldr	r1, [sp, #0]
 800c442:	4605      	mov	r5, r0
 800c444:	4630      	mov	r0, r6
 800c446:	f7ff fa7b 	bl	800b940 <_malloc_r>
 800c44a:	b948      	cbnz	r0, 800c460 <__smakebuf_r+0x44>
 800c44c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c450:	059a      	lsls	r2, r3, #22
 800c452:	d4ef      	bmi.n	800c434 <__smakebuf_r+0x18>
 800c454:	f023 0303 	bic.w	r3, r3, #3
 800c458:	f043 0302 	orr.w	r3, r3, #2
 800c45c:	81a3      	strh	r3, [r4, #12]
 800c45e:	e7e3      	b.n	800c428 <__smakebuf_r+0xc>
 800c460:	4b0d      	ldr	r3, [pc, #52]	; (800c498 <__smakebuf_r+0x7c>)
 800c462:	62b3      	str	r3, [r6, #40]	; 0x28
 800c464:	89a3      	ldrh	r3, [r4, #12]
 800c466:	6020      	str	r0, [r4, #0]
 800c468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c46c:	81a3      	strh	r3, [r4, #12]
 800c46e:	9b00      	ldr	r3, [sp, #0]
 800c470:	6163      	str	r3, [r4, #20]
 800c472:	9b01      	ldr	r3, [sp, #4]
 800c474:	6120      	str	r0, [r4, #16]
 800c476:	b15b      	cbz	r3, 800c490 <__smakebuf_r+0x74>
 800c478:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c47c:	4630      	mov	r0, r6
 800c47e:	f000 f8a3 	bl	800c5c8 <_isatty_r>
 800c482:	b128      	cbz	r0, 800c490 <__smakebuf_r+0x74>
 800c484:	89a3      	ldrh	r3, [r4, #12]
 800c486:	f023 0303 	bic.w	r3, r3, #3
 800c48a:	f043 0301 	orr.w	r3, r3, #1
 800c48e:	81a3      	strh	r3, [r4, #12]
 800c490:	89a0      	ldrh	r0, [r4, #12]
 800c492:	4305      	orrs	r5, r0
 800c494:	81a5      	strh	r5, [r4, #12]
 800c496:	e7cd      	b.n	800c434 <__smakebuf_r+0x18>
 800c498:	0800afc1 	.word	0x0800afc1

0800c49c <__ascii_mbtowc>:
 800c49c:	b082      	sub	sp, #8
 800c49e:	b901      	cbnz	r1, 800c4a2 <__ascii_mbtowc+0x6>
 800c4a0:	a901      	add	r1, sp, #4
 800c4a2:	b142      	cbz	r2, 800c4b6 <__ascii_mbtowc+0x1a>
 800c4a4:	b14b      	cbz	r3, 800c4ba <__ascii_mbtowc+0x1e>
 800c4a6:	7813      	ldrb	r3, [r2, #0]
 800c4a8:	600b      	str	r3, [r1, #0]
 800c4aa:	7812      	ldrb	r2, [r2, #0]
 800c4ac:	1e10      	subs	r0, r2, #0
 800c4ae:	bf18      	it	ne
 800c4b0:	2001      	movne	r0, #1
 800c4b2:	b002      	add	sp, #8
 800c4b4:	4770      	bx	lr
 800c4b6:	4610      	mov	r0, r2
 800c4b8:	e7fb      	b.n	800c4b2 <__ascii_mbtowc+0x16>
 800c4ba:	f06f 0001 	mvn.w	r0, #1
 800c4be:	e7f8      	b.n	800c4b2 <__ascii_mbtowc+0x16>

0800c4c0 <memmove>:
 800c4c0:	4288      	cmp	r0, r1
 800c4c2:	b510      	push	{r4, lr}
 800c4c4:	eb01 0402 	add.w	r4, r1, r2
 800c4c8:	d902      	bls.n	800c4d0 <memmove+0x10>
 800c4ca:	4284      	cmp	r4, r0
 800c4cc:	4623      	mov	r3, r4
 800c4ce:	d807      	bhi.n	800c4e0 <memmove+0x20>
 800c4d0:	1e43      	subs	r3, r0, #1
 800c4d2:	42a1      	cmp	r1, r4
 800c4d4:	d008      	beq.n	800c4e8 <memmove+0x28>
 800c4d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c4da:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c4de:	e7f8      	b.n	800c4d2 <memmove+0x12>
 800c4e0:	4402      	add	r2, r0
 800c4e2:	4601      	mov	r1, r0
 800c4e4:	428a      	cmp	r2, r1
 800c4e6:	d100      	bne.n	800c4ea <memmove+0x2a>
 800c4e8:	bd10      	pop	{r4, pc}
 800c4ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c4ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c4f2:	e7f7      	b.n	800c4e4 <memmove+0x24>

0800c4f4 <__malloc_lock>:
 800c4f4:	4801      	ldr	r0, [pc, #4]	; (800c4fc <__malloc_lock+0x8>)
 800c4f6:	f7fe be3a 	b.w	800b16e <__retarget_lock_acquire_recursive>
 800c4fa:	bf00      	nop
 800c4fc:	20001f6c 	.word	0x20001f6c

0800c500 <__malloc_unlock>:
 800c500:	4801      	ldr	r0, [pc, #4]	; (800c508 <__malloc_unlock+0x8>)
 800c502:	f7fe be35 	b.w	800b170 <__retarget_lock_release_recursive>
 800c506:	bf00      	nop
 800c508:	20001f6c 	.word	0x20001f6c

0800c50c <_realloc_r>:
 800c50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c50e:	4607      	mov	r7, r0
 800c510:	4614      	mov	r4, r2
 800c512:	460e      	mov	r6, r1
 800c514:	b921      	cbnz	r1, 800c520 <_realloc_r+0x14>
 800c516:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c51a:	4611      	mov	r1, r2
 800c51c:	f7ff ba10 	b.w	800b940 <_malloc_r>
 800c520:	b922      	cbnz	r2, 800c52c <_realloc_r+0x20>
 800c522:	f7ff f9bd 	bl	800b8a0 <_free_r>
 800c526:	4625      	mov	r5, r4
 800c528:	4628      	mov	r0, r5
 800c52a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c52c:	f000 f85c 	bl	800c5e8 <_malloc_usable_size_r>
 800c530:	42a0      	cmp	r0, r4
 800c532:	d20f      	bcs.n	800c554 <_realloc_r+0x48>
 800c534:	4621      	mov	r1, r4
 800c536:	4638      	mov	r0, r7
 800c538:	f7ff fa02 	bl	800b940 <_malloc_r>
 800c53c:	4605      	mov	r5, r0
 800c53e:	2800      	cmp	r0, #0
 800c540:	d0f2      	beq.n	800c528 <_realloc_r+0x1c>
 800c542:	4631      	mov	r1, r6
 800c544:	4622      	mov	r2, r4
 800c546:	f7fd f9fd 	bl	8009944 <memcpy>
 800c54a:	4631      	mov	r1, r6
 800c54c:	4638      	mov	r0, r7
 800c54e:	f7ff f9a7 	bl	800b8a0 <_free_r>
 800c552:	e7e9      	b.n	800c528 <_realloc_r+0x1c>
 800c554:	4635      	mov	r5, r6
 800c556:	e7e7      	b.n	800c528 <_realloc_r+0x1c>

0800c558 <_read_r>:
 800c558:	b538      	push	{r3, r4, r5, lr}
 800c55a:	4d07      	ldr	r5, [pc, #28]	; (800c578 <_read_r+0x20>)
 800c55c:	4604      	mov	r4, r0
 800c55e:	4608      	mov	r0, r1
 800c560:	4611      	mov	r1, r2
 800c562:	2200      	movs	r2, #0
 800c564:	602a      	str	r2, [r5, #0]
 800c566:	461a      	mov	r2, r3
 800c568:	f7f5 fa84 	bl	8001a74 <_read>
 800c56c:	1c43      	adds	r3, r0, #1
 800c56e:	d102      	bne.n	800c576 <_read_r+0x1e>
 800c570:	682b      	ldr	r3, [r5, #0]
 800c572:	b103      	cbz	r3, 800c576 <_read_r+0x1e>
 800c574:	6023      	str	r3, [r4, #0]
 800c576:	bd38      	pop	{r3, r4, r5, pc}
 800c578:	20001f74 	.word	0x20001f74

0800c57c <__ascii_wctomb>:
 800c57c:	b149      	cbz	r1, 800c592 <__ascii_wctomb+0x16>
 800c57e:	2aff      	cmp	r2, #255	; 0xff
 800c580:	bf85      	ittet	hi
 800c582:	238a      	movhi	r3, #138	; 0x8a
 800c584:	6003      	strhi	r3, [r0, #0]
 800c586:	700a      	strbls	r2, [r1, #0]
 800c588:	f04f 30ff 	movhi.w	r0, #4294967295
 800c58c:	bf98      	it	ls
 800c58e:	2001      	movls	r0, #1
 800c590:	4770      	bx	lr
 800c592:	4608      	mov	r0, r1
 800c594:	4770      	bx	lr

0800c596 <abort>:
 800c596:	b508      	push	{r3, lr}
 800c598:	2006      	movs	r0, #6
 800c59a:	f000 f855 	bl	800c648 <raise>
 800c59e:	2001      	movs	r0, #1
 800c5a0:	f7f5 fa5e 	bl	8001a60 <_exit>

0800c5a4 <_fstat_r>:
 800c5a4:	b538      	push	{r3, r4, r5, lr}
 800c5a6:	4d07      	ldr	r5, [pc, #28]	; (800c5c4 <_fstat_r+0x20>)
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	4604      	mov	r4, r0
 800c5ac:	4608      	mov	r0, r1
 800c5ae:	4611      	mov	r1, r2
 800c5b0:	602b      	str	r3, [r5, #0]
 800c5b2:	f7f5 faa4 	bl	8001afe <_fstat>
 800c5b6:	1c43      	adds	r3, r0, #1
 800c5b8:	d102      	bne.n	800c5c0 <_fstat_r+0x1c>
 800c5ba:	682b      	ldr	r3, [r5, #0]
 800c5bc:	b103      	cbz	r3, 800c5c0 <_fstat_r+0x1c>
 800c5be:	6023      	str	r3, [r4, #0]
 800c5c0:	bd38      	pop	{r3, r4, r5, pc}
 800c5c2:	bf00      	nop
 800c5c4:	20001f74 	.word	0x20001f74

0800c5c8 <_isatty_r>:
 800c5c8:	b538      	push	{r3, r4, r5, lr}
 800c5ca:	4d06      	ldr	r5, [pc, #24]	; (800c5e4 <_isatty_r+0x1c>)
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	4604      	mov	r4, r0
 800c5d0:	4608      	mov	r0, r1
 800c5d2:	602b      	str	r3, [r5, #0]
 800c5d4:	f7f5 faa3 	bl	8001b1e <_isatty>
 800c5d8:	1c43      	adds	r3, r0, #1
 800c5da:	d102      	bne.n	800c5e2 <_isatty_r+0x1a>
 800c5dc:	682b      	ldr	r3, [r5, #0]
 800c5de:	b103      	cbz	r3, 800c5e2 <_isatty_r+0x1a>
 800c5e0:	6023      	str	r3, [r4, #0]
 800c5e2:	bd38      	pop	{r3, r4, r5, pc}
 800c5e4:	20001f74 	.word	0x20001f74

0800c5e8 <_malloc_usable_size_r>:
 800c5e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c5ec:	1f18      	subs	r0, r3, #4
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	bfbc      	itt	lt
 800c5f2:	580b      	ldrlt	r3, [r1, r0]
 800c5f4:	18c0      	addlt	r0, r0, r3
 800c5f6:	4770      	bx	lr

0800c5f8 <_raise_r>:
 800c5f8:	291f      	cmp	r1, #31
 800c5fa:	b538      	push	{r3, r4, r5, lr}
 800c5fc:	4604      	mov	r4, r0
 800c5fe:	460d      	mov	r5, r1
 800c600:	d904      	bls.n	800c60c <_raise_r+0x14>
 800c602:	2316      	movs	r3, #22
 800c604:	6003      	str	r3, [r0, #0]
 800c606:	f04f 30ff 	mov.w	r0, #4294967295
 800c60a:	bd38      	pop	{r3, r4, r5, pc}
 800c60c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c60e:	b112      	cbz	r2, 800c616 <_raise_r+0x1e>
 800c610:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c614:	b94b      	cbnz	r3, 800c62a <_raise_r+0x32>
 800c616:	4620      	mov	r0, r4
 800c618:	f000 f830 	bl	800c67c <_getpid_r>
 800c61c:	462a      	mov	r2, r5
 800c61e:	4601      	mov	r1, r0
 800c620:	4620      	mov	r0, r4
 800c622:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c626:	f000 b817 	b.w	800c658 <_kill_r>
 800c62a:	2b01      	cmp	r3, #1
 800c62c:	d00a      	beq.n	800c644 <_raise_r+0x4c>
 800c62e:	1c59      	adds	r1, r3, #1
 800c630:	d103      	bne.n	800c63a <_raise_r+0x42>
 800c632:	2316      	movs	r3, #22
 800c634:	6003      	str	r3, [r0, #0]
 800c636:	2001      	movs	r0, #1
 800c638:	e7e7      	b.n	800c60a <_raise_r+0x12>
 800c63a:	2400      	movs	r4, #0
 800c63c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c640:	4628      	mov	r0, r5
 800c642:	4798      	blx	r3
 800c644:	2000      	movs	r0, #0
 800c646:	e7e0      	b.n	800c60a <_raise_r+0x12>

0800c648 <raise>:
 800c648:	4b02      	ldr	r3, [pc, #8]	; (800c654 <raise+0xc>)
 800c64a:	4601      	mov	r1, r0
 800c64c:	6818      	ldr	r0, [r3, #0]
 800c64e:	f7ff bfd3 	b.w	800c5f8 <_raise_r>
 800c652:	bf00      	nop
 800c654:	20000180 	.word	0x20000180

0800c658 <_kill_r>:
 800c658:	b538      	push	{r3, r4, r5, lr}
 800c65a:	4d07      	ldr	r5, [pc, #28]	; (800c678 <_kill_r+0x20>)
 800c65c:	2300      	movs	r3, #0
 800c65e:	4604      	mov	r4, r0
 800c660:	4608      	mov	r0, r1
 800c662:	4611      	mov	r1, r2
 800c664:	602b      	str	r3, [r5, #0]
 800c666:	f7f5 f9eb 	bl	8001a40 <_kill>
 800c66a:	1c43      	adds	r3, r0, #1
 800c66c:	d102      	bne.n	800c674 <_kill_r+0x1c>
 800c66e:	682b      	ldr	r3, [r5, #0]
 800c670:	b103      	cbz	r3, 800c674 <_kill_r+0x1c>
 800c672:	6023      	str	r3, [r4, #0]
 800c674:	bd38      	pop	{r3, r4, r5, pc}
 800c676:	bf00      	nop
 800c678:	20001f74 	.word	0x20001f74

0800c67c <_getpid_r>:
 800c67c:	f7f5 b9d8 	b.w	8001a30 <_getpid>

0800c680 <_init>:
 800c680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c682:	bf00      	nop
 800c684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c686:	bc08      	pop	{r3}
 800c688:	469e      	mov	lr, r3
 800c68a:	4770      	bx	lr

0800c68c <_fini>:
 800c68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c68e:	bf00      	nop
 800c690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c692:	bc08      	pop	{r3}
 800c694:	469e      	mov	lr, r3
 800c696:	4770      	bx	lr
