
my_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4a0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  0800c640  0800c640  0001c640  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800caac  0800caac  00020350  2**0
                  CONTENTS
  4 .ARM          00000008  0800caac  0800caac  0001caac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cab4  0800cab4  00020350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cab4  0800cab4  0001cab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cab8  0800cab8  0001cab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  0800cabc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c28  20000350  0800ce0c  00020350  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f78  0800ce0c  00021f78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020350  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f6f6  00000000  00000000  00020380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000443b  00000000  00000000  0003fa76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c8  00000000  00000000  00043eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001238  00000000  00000000  00045280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001abe9  00000000  00000000  000464b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b3e3  00000000  00000000  000610a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fefb  00000000  00000000  0007c484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010c37f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062e4  00000000  00000000  0010c3d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000350 	.word	0x20000350
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c628 	.word	0x0800c628

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000354 	.word	0x20000354
 80001dc:	0800c628 	.word	0x0800c628

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <MPU6050_init>:
#include "MPU6050_mylib.h"

int8_t MPU6050_init(){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af04      	add	r7, sp, #16
	uint8_t Data_conf = 0, acc_2g = 0x00, gyro_2g=0x00;
 8000f56:	2300      	movs	r3, #0
 8000f58:	71fb      	strb	r3, [r7, #7]
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	71bb      	strb	r3, [r7, #6]
 8000f5e:	2300      	movs	r3, #0
 8000f60:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(&hi2c2, MPU6050_RA_ADRR, MPU6050_RA_WHO_AM_I, 1, &Data_conf, 1, 100);
 8000f62:	2364      	movs	r3, #100	; 0x64
 8000f64:	9302      	str	r3, [sp, #8]
 8000f66:	2301      	movs	r3, #1
 8000f68:	9301      	str	r3, [sp, #4]
 8000f6a:	1dfb      	adds	r3, r7, #7
 8000f6c:	9300      	str	r3, [sp, #0]
 8000f6e:	2301      	movs	r3, #1
 8000f70:	2275      	movs	r2, #117	; 0x75
 8000f72:	21d0      	movs	r1, #208	; 0xd0
 8000f74:	4812      	ldr	r0, [pc, #72]	; (8000fc0 <MPU6050_init+0x70>)
 8000f76:	f001 fd01 	bl	800297c <HAL_I2C_Mem_Read>
	if(Data_conf != MPU6050_WHO_AM_I_DEF_VAL){
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	2b71      	cmp	r3, #113	; 0x71
 8000f7e:	d002      	beq.n	8000f86 <MPU6050_init+0x36>
		return Data_conf;
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	b25b      	sxtb	r3, r3
 8000f84:	e018      	b.n	8000fb8 <MPU6050_init+0x68>
	}
	//ustawienie czujnika na skalach +-2g i +-250 deg/s2
	HAL_I2C_Mem_Write(&hi2c2, MPU6050_RA_ADRR, MPU6050_RA_ACCEL_CONFIG, 1, &acc_2g, 1, 100);
 8000f86:	2364      	movs	r3, #100	; 0x64
 8000f88:	9302      	str	r3, [sp, #8]
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	9301      	str	r3, [sp, #4]
 8000f8e:	1dbb      	adds	r3, r7, #6
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	2301      	movs	r3, #1
 8000f94:	221c      	movs	r2, #28
 8000f96:	21d0      	movs	r1, #208	; 0xd0
 8000f98:	4809      	ldr	r0, [pc, #36]	; (8000fc0 <MPU6050_init+0x70>)
 8000f9a:	f001 fbf5 	bl	8002788 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c2, MPU6050_RA_ADRR, MPU6050_RA_GYRO_CONFIG, 1, &gyro_2g, 1, 100);
 8000f9e:	2364      	movs	r3, #100	; 0x64
 8000fa0:	9302      	str	r3, [sp, #8]
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	9301      	str	r3, [sp, #4]
 8000fa6:	1d7b      	adds	r3, r7, #5
 8000fa8:	9300      	str	r3, [sp, #0]
 8000faa:	2301      	movs	r3, #1
 8000fac:	221b      	movs	r2, #27
 8000fae:	21d0      	movs	r1, #208	; 0xd0
 8000fb0:	4803      	ldr	r0, [pc, #12]	; (8000fc0 <MPU6050_init+0x70>)
 8000fb2:	f001 fbe9 	bl	8002788 <HAL_I2C_Mem_Write>
	return 0;
 8000fb6:	2300      	movs	r3, #0
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	2000059c 	.word	0x2000059c
 8000fc4:	00000000 	.word	0x00000000

08000fc8 <MPU6050_measure>:

	Axis = ((Data[0] << 8) | Data[1]);
	return ((float)Axis*250.0)/(float) INT16_MAX;
}

void MPU6050_measure(MPU6050_data* mes){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08a      	sub	sp, #40	; 0x28
 8000fcc:	af04      	add	r7, sp, #16
 8000fce:	6078      	str	r0, [r7, #4]
	uint8_t Data [14];//bufor danych
	int16_t Axis;//zmienna pomocnicza do konwersji odczytu na wartości fizyczne

	HAL_I2C_Mem_Read(&hi2c2, MPU6050_RA_ADRR, MPU6050_ACCEL_XOUT_H_16, 1, &Data, 14, 100);//odczyt danych z czujnika
 8000fd0:	2364      	movs	r3, #100	; 0x64
 8000fd2:	9302      	str	r3, [sp, #8]
 8000fd4:	230e      	movs	r3, #14
 8000fd6:	9301      	str	r3, [sp, #4]
 8000fd8:	f107 0308 	add.w	r3, r7, #8
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	2301      	movs	r3, #1
 8000fe0:	22bb      	movs	r2, #187	; 0xbb
 8000fe2:	21d0      	movs	r1, #208	; 0xd0
 8000fe4:	4892      	ldr	r0, [pc, #584]	; (8001230 <MPU6050_measure+0x268>)
 8000fe6:	f001 fcc9 	bl	800297c <HAL_I2C_Mem_Read>

	//konwersja danych z akcelerometru
	Axis = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	82fb      	strh	r3, [r7, #22]
	Axis = ((Data[0] << 8) | Data[1]);//konwersja odczytu do liczby 16-to bitowej
 8000fee:	7a3b      	ldrb	r3, [r7, #8]
 8000ff0:	021b      	lsls	r3, r3, #8
 8000ff2:	b21a      	sxth	r2, r3
 8000ff4:	7a7b      	ldrb	r3, [r7, #9]
 8000ff6:	b21b      	sxth	r3, r3
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	82fb      	strh	r3, [r7, #22]
	mes->acc_x = ((float)Axis*2.0*GRAVITY)/(float)INT16_MAX;//przeliczenie odczytu na wartości fizyczne
 8000ffc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001000:	ee07 3a90 	vmov	s15, r3
 8001004:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001008:	ee17 0a90 	vmov	r0, s15
 800100c:	f7ff faa4 	bl	8000558 <__aeabi_f2d>
 8001010:	4602      	mov	r2, r0
 8001012:	460b      	mov	r3, r1
 8001014:	f7ff f942 	bl	800029c <__adddf3>
 8001018:	4602      	mov	r2, r0
 800101a:	460b      	mov	r3, r1
 800101c:	4610      	mov	r0, r2
 800101e:	4619      	mov	r1, r3
 8001020:	a37f      	add	r3, pc, #508	; (adr r3, 8001220 <MPU6050_measure+0x258>)
 8001022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001026:	f7ff faef 	bl	8000608 <__aeabi_dmul>
 800102a:	4602      	mov	r2, r0
 800102c:	460b      	mov	r3, r1
 800102e:	4610      	mov	r0, r2
 8001030:	4619      	mov	r1, r3
 8001032:	a37d      	add	r3, pc, #500	; (adr r3, 8001228 <MPU6050_measure+0x260>)
 8001034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001038:	f7ff fc10 	bl	800085c <__aeabi_ddiv>
 800103c:	4602      	mov	r2, r0
 800103e:	460b      	mov	r3, r1
 8001040:	4610      	mov	r0, r2
 8001042:	4619      	mov	r1, r3
 8001044:	f7ff fdb8 	bl	8000bb8 <__aeabi_d2f>
 8001048:	4602      	mov	r2, r0
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	601a      	str	r2, [r3, #0]

	Axis = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	82fb      	strh	r3, [r7, #22]
	Axis = ((Data[2] << 8) | Data[3]);
 8001052:	7abb      	ldrb	r3, [r7, #10]
 8001054:	021b      	lsls	r3, r3, #8
 8001056:	b21a      	sxth	r2, r3
 8001058:	7afb      	ldrb	r3, [r7, #11]
 800105a:	b21b      	sxth	r3, r3
 800105c:	4313      	orrs	r3, r2
 800105e:	82fb      	strh	r3, [r7, #22]
	mes->acc_y = ((float)Axis*2.0*GRAVITY)/(float)INT16_MAX;
 8001060:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001064:	ee07 3a90 	vmov	s15, r3
 8001068:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800106c:	ee17 0a90 	vmov	r0, s15
 8001070:	f7ff fa72 	bl	8000558 <__aeabi_f2d>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	f7ff f910 	bl	800029c <__adddf3>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	4610      	mov	r0, r2
 8001082:	4619      	mov	r1, r3
 8001084:	a366      	add	r3, pc, #408	; (adr r3, 8001220 <MPU6050_measure+0x258>)
 8001086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108a:	f7ff fabd 	bl	8000608 <__aeabi_dmul>
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	4610      	mov	r0, r2
 8001094:	4619      	mov	r1, r3
 8001096:	a364      	add	r3, pc, #400	; (adr r3, 8001228 <MPU6050_measure+0x260>)
 8001098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109c:	f7ff fbde 	bl	800085c <__aeabi_ddiv>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	4610      	mov	r0, r2
 80010a6:	4619      	mov	r1, r3
 80010a8:	f7ff fd86 	bl	8000bb8 <__aeabi_d2f>
 80010ac:	4602      	mov	r2, r0
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	605a      	str	r2, [r3, #4]

	Axis = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	82fb      	strh	r3, [r7, #22]
	Axis = ((Data[4] << 8) | Data[5]);
 80010b6:	7b3b      	ldrb	r3, [r7, #12]
 80010b8:	021b      	lsls	r3, r3, #8
 80010ba:	b21a      	sxth	r2, r3
 80010bc:	7b7b      	ldrb	r3, [r7, #13]
 80010be:	b21b      	sxth	r3, r3
 80010c0:	4313      	orrs	r3, r2
 80010c2:	82fb      	strh	r3, [r7, #22]
	mes->acc_z = ((float)Axis*2.0*GRAVITY)/(float)INT16_MAX;
 80010c4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80010c8:	ee07 3a90 	vmov	s15, r3
 80010cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010d0:	ee17 0a90 	vmov	r0, s15
 80010d4:	f7ff fa40 	bl	8000558 <__aeabi_f2d>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	f7ff f8de 	bl	800029c <__adddf3>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	4610      	mov	r0, r2
 80010e6:	4619      	mov	r1, r3
 80010e8:	a34d      	add	r3, pc, #308	; (adr r3, 8001220 <MPU6050_measure+0x258>)
 80010ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ee:	f7ff fa8b 	bl	8000608 <__aeabi_dmul>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	4610      	mov	r0, r2
 80010f8:	4619      	mov	r1, r3
 80010fa:	a34b      	add	r3, pc, #300	; (adr r3, 8001228 <MPU6050_measure+0x260>)
 80010fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001100:	f7ff fbac 	bl	800085c <__aeabi_ddiv>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
 8001108:	4610      	mov	r0, r2
 800110a:	4619      	mov	r1, r3
 800110c:	f7ff fd54 	bl	8000bb8 <__aeabi_d2f>
 8001110:	4602      	mov	r2, r0
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	609a      	str	r2, [r3, #8]

	//konwersja danych z żyroskopu
	Axis = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	82fb      	strh	r3, [r7, #22]
	Axis = ((Data[8] << 8) | Data[9]);
 800111a:	7c3b      	ldrb	r3, [r7, #16]
 800111c:	021b      	lsls	r3, r3, #8
 800111e:	b21a      	sxth	r2, r3
 8001120:	7c7b      	ldrb	r3, [r7, #17]
 8001122:	b21b      	sxth	r3, r3
 8001124:	4313      	orrs	r3, r2
 8001126:	82fb      	strh	r3, [r7, #22]
	mes->gyro_x = ((float)Axis*250.0)/(float) INT16_MAX;
 8001128:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800112c:	ee07 3a90 	vmov	s15, r3
 8001130:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001134:	ee17 0a90 	vmov	r0, s15
 8001138:	f7ff fa0e 	bl	8000558 <__aeabi_f2d>
 800113c:	f04f 0200 	mov.w	r2, #0
 8001140:	4b3c      	ldr	r3, [pc, #240]	; (8001234 <MPU6050_measure+0x26c>)
 8001142:	f7ff fa61 	bl	8000608 <__aeabi_dmul>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	4610      	mov	r0, r2
 800114c:	4619      	mov	r1, r3
 800114e:	a336      	add	r3, pc, #216	; (adr r3, 8001228 <MPU6050_measure+0x260>)
 8001150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001154:	f7ff fb82 	bl	800085c <__aeabi_ddiv>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	4610      	mov	r0, r2
 800115e:	4619      	mov	r1, r3
 8001160:	f7ff fd2a 	bl	8000bb8 <__aeabi_d2f>
 8001164:	4602      	mov	r2, r0
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	60da      	str	r2, [r3, #12]

	Axis = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	82fb      	strh	r3, [r7, #22]
	Axis = ((Data[10] << 8) | Data[11]);
 800116e:	7cbb      	ldrb	r3, [r7, #18]
 8001170:	021b      	lsls	r3, r3, #8
 8001172:	b21a      	sxth	r2, r3
 8001174:	7cfb      	ldrb	r3, [r7, #19]
 8001176:	b21b      	sxth	r3, r3
 8001178:	4313      	orrs	r3, r2
 800117a:	82fb      	strh	r3, [r7, #22]
	mes->gyro_y = ((float)Axis*250.0)/(float) INT16_MAX;
 800117c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001188:	ee17 0a90 	vmov	r0, s15
 800118c:	f7ff f9e4 	bl	8000558 <__aeabi_f2d>
 8001190:	f04f 0200 	mov.w	r2, #0
 8001194:	4b27      	ldr	r3, [pc, #156]	; (8001234 <MPU6050_measure+0x26c>)
 8001196:	f7ff fa37 	bl	8000608 <__aeabi_dmul>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	4610      	mov	r0, r2
 80011a0:	4619      	mov	r1, r3
 80011a2:	a321      	add	r3, pc, #132	; (adr r3, 8001228 <MPU6050_measure+0x260>)
 80011a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a8:	f7ff fb58 	bl	800085c <__aeabi_ddiv>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4610      	mov	r0, r2
 80011b2:	4619      	mov	r1, r3
 80011b4:	f7ff fd00 	bl	8000bb8 <__aeabi_d2f>
 80011b8:	4602      	mov	r2, r0
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	611a      	str	r2, [r3, #16]

	Axis = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	82fb      	strh	r3, [r7, #22]
	Axis = ((Data[12] << 8) | Data[13]);
 80011c2:	7d3b      	ldrb	r3, [r7, #20]
 80011c4:	021b      	lsls	r3, r3, #8
 80011c6:	b21a      	sxth	r2, r3
 80011c8:	7d7b      	ldrb	r3, [r7, #21]
 80011ca:	b21b      	sxth	r3, r3
 80011cc:	4313      	orrs	r3, r2
 80011ce:	82fb      	strh	r3, [r7, #22]
	mes->gyro_z = ((float)Axis*250.0)/(float) INT16_MAX;
 80011d0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011d4:	ee07 3a90 	vmov	s15, r3
 80011d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011dc:	ee17 0a90 	vmov	r0, s15
 80011e0:	f7ff f9ba 	bl	8000558 <__aeabi_f2d>
 80011e4:	f04f 0200 	mov.w	r2, #0
 80011e8:	4b12      	ldr	r3, [pc, #72]	; (8001234 <MPU6050_measure+0x26c>)
 80011ea:	f7ff fa0d 	bl	8000608 <__aeabi_dmul>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	4610      	mov	r0, r2
 80011f4:	4619      	mov	r1, r3
 80011f6:	a30c      	add	r3, pc, #48	; (adr r3, 8001228 <MPU6050_measure+0x260>)
 80011f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fc:	f7ff fb2e 	bl	800085c <__aeabi_ddiv>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	4610      	mov	r0, r2
 8001206:	4619      	mov	r1, r3
 8001208:	f7ff fcd6 	bl	8000bb8 <__aeabi_d2f>
 800120c:	4602      	mov	r2, r0
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	615a      	str	r2, [r3, #20]
}
 8001212:	bf00      	nop
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	f3af 8000 	nop.w
 8001220:	51eb851f 	.word	0x51eb851f
 8001224:	40239eb8 	.word	0x40239eb8
 8001228:	00000000 	.word	0x00000000
 800122c:	40dfffc0 	.word	0x40dfffc0
 8001230:	2000059c 	.word	0x2000059c
 8001234:	406f4000 	.word	0x406f4000

08001238 <MX_GPIO_Init>:
        * EXTI
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08c      	sub	sp, #48	; 0x30
 800123c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123e:	f107 031c 	add.w	r3, r7, #28
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
 800124c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	61bb      	str	r3, [r7, #24]
 8001252:	4b6a      	ldr	r3, [pc, #424]	; (80013fc <MX_GPIO_Init+0x1c4>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a69      	ldr	r2, [pc, #420]	; (80013fc <MX_GPIO_Init+0x1c4>)
 8001258:	f043 0310 	orr.w	r3, r3, #16
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b67      	ldr	r3, [pc, #412]	; (80013fc <MX_GPIO_Init+0x1c4>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0310 	and.w	r3, r3, #16
 8001266:	61bb      	str	r3, [r7, #24]
 8001268:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	617b      	str	r3, [r7, #20]
 800126e:	4b63      	ldr	r3, [pc, #396]	; (80013fc <MX_GPIO_Init+0x1c4>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a62      	ldr	r2, [pc, #392]	; (80013fc <MX_GPIO_Init+0x1c4>)
 8001274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b60      	ldr	r3, [pc, #384]	; (80013fc <MX_GPIO_Init+0x1c4>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001282:	617b      	str	r3, [r7, #20]
 8001284:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	613b      	str	r3, [r7, #16]
 800128a:	4b5c      	ldr	r3, [pc, #368]	; (80013fc <MX_GPIO_Init+0x1c4>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a5b      	ldr	r2, [pc, #364]	; (80013fc <MX_GPIO_Init+0x1c4>)
 8001290:	f043 0304 	orr.w	r3, r3, #4
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b59      	ldr	r3, [pc, #356]	; (80013fc <MX_GPIO_Init+0x1c4>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0304 	and.w	r3, r3, #4
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	4b55      	ldr	r3, [pc, #340]	; (80013fc <MX_GPIO_Init+0x1c4>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a54      	ldr	r2, [pc, #336]	; (80013fc <MX_GPIO_Init+0x1c4>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b52      	ldr	r3, [pc, #328]	; (80013fc <MX_GPIO_Init+0x1c4>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	4b4e      	ldr	r3, [pc, #312]	; (80013fc <MX_GPIO_Init+0x1c4>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a4d      	ldr	r2, [pc, #308]	; (80013fc <MX_GPIO_Init+0x1c4>)
 80012c8:	f043 0302 	orr.w	r3, r3, #2
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b4b      	ldr	r3, [pc, #300]	; (80013fc <MX_GPIO_Init+0x1c4>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	4b47      	ldr	r3, [pc, #284]	; (80013fc <MX_GPIO_Init+0x1c4>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a46      	ldr	r2, [pc, #280]	; (80013fc <MX_GPIO_Init+0x1c4>)
 80012e4:	f043 0308 	orr.w	r3, r3, #8
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b44      	ldr	r3, [pc, #272]	; (80013fc <MX_GPIO_Init+0x1c4>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0308 	and.w	r3, r3, #8
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2108      	movs	r1, #8
 80012fa:	4841      	ldr	r0, [pc, #260]	; (8001400 <MX_GPIO_Init+0x1c8>)
 80012fc:	f001 f8c2 	bl	8002484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001300:	2201      	movs	r2, #1
 8001302:	2101      	movs	r1, #1
 8001304:	483f      	ldr	r0, [pc, #252]	; (8001404 <MX_GPIO_Init+0x1cc>)
 8001306:	f001 f8bd 	bl	8002484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CSNpin_Pin|CEpin_Pin, GPIO_PIN_RESET);
 800130a:	2200      	movs	r2, #0
 800130c:	2130      	movs	r1, #48	; 0x30
 800130e:	483d      	ldr	r0, [pc, #244]	; (8001404 <MX_GPIO_Init+0x1cc>)
 8001310:	f001 f8b8 	bl	8002484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001314:	2200      	movs	r2, #0
 8001316:	f24f 0110 	movw	r1, #61456	; 0xf010
 800131a:	483b      	ldr	r0, [pc, #236]	; (8001408 <MX_GPIO_Init+0x1d0>)
 800131c:	f001 f8b2 	bl	8002484 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8001320:	2304      	movs	r3, #4
 8001322:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001324:	2300      	movs	r3, #0
 8001326:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 800132c:	f107 031c 	add.w	r3, r7, #28
 8001330:	4619      	mov	r1, r3
 8001332:	4833      	ldr	r0, [pc, #204]	; (8001400 <MX_GPIO_Init+0x1c8>)
 8001334:	f000 ff22 	bl	800217c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001338:	2308      	movs	r3, #8
 800133a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133c:	2301      	movs	r3, #1
 800133e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001344:	2300      	movs	r3, #0
 8001346:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001348:	f107 031c 	add.w	r3, r7, #28
 800134c:	4619      	mov	r1, r3
 800134e:	482c      	ldr	r0, [pc, #176]	; (8001400 <MX_GPIO_Init+0x1c8>)
 8001350:	f000 ff14 	bl	800217c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8001354:	2332      	movs	r3, #50	; 0x32
 8001356:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001358:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800135c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001362:	f107 031c 	add.w	r3, r7, #28
 8001366:	4619      	mov	r1, r3
 8001368:	4825      	ldr	r0, [pc, #148]	; (8001400 <MX_GPIO_Init+0x1c8>)
 800136a:	f000 ff07 	bl	800217c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|CSNpin_Pin|CEpin_Pin;
 800136e:	2331      	movs	r3, #49	; 0x31
 8001370:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001372:	2301      	movs	r3, #1
 8001374:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137a:	2300      	movs	r3, #0
 800137c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800137e:	f107 031c 	add.w	r3, r7, #28
 8001382:	4619      	mov	r1, r3
 8001384:	481f      	ldr	r0, [pc, #124]	; (8001404 <MX_GPIO_Init+0x1cc>)
 8001386:	f000 fef9 	bl	800217c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800138a:	2301      	movs	r3, #1
 800138c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800138e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001392:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001398:	f107 031c 	add.w	r3, r7, #28
 800139c:	4619      	mov	r1, r3
 800139e:	481b      	ldr	r0, [pc, #108]	; (800140c <MX_GPIO_Init+0x1d4>)
 80013a0:	f000 feec 	bl	800217c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80013a4:	f24f 0310 	movw	r3, #61456	; 0xf010
 80013a8:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013aa:	2301      	movs	r3, #1
 80013ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2300      	movs	r3, #0
 80013b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013b6:	f107 031c 	add.w	r3, r7, #28
 80013ba:	4619      	mov	r1, r3
 80013bc:	4812      	ldr	r0, [pc, #72]	; (8001408 <MX_GPIO_Init+0x1d0>)
 80013be:	f000 fedd 	bl	800217c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80013c2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80013c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013c8:	2312      	movs	r3, #18
 80013ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013cc:	2301      	movs	r3, #1
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d0:	2300      	movs	r3, #0
 80013d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013d4:	2304      	movs	r3, #4
 80013d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d8:	f107 031c 	add.w	r3, r7, #28
 80013dc:	4619      	mov	r1, r3
 80013de:	480c      	ldr	r0, [pc, #48]	; (8001410 <MX_GPIO_Init+0x1d8>)
 80013e0:	f000 fecc 	bl	800217c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80013e4:	2200      	movs	r2, #0
 80013e6:	2100      	movs	r1, #0
 80013e8:	2006      	movs	r0, #6
 80013ea:	f000 fdfe 	bl	8001fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80013ee:	2006      	movs	r0, #6
 80013f0:	f000 fe17 	bl	8002022 <HAL_NVIC_EnableIRQ>

}
 80013f4:	bf00      	nop
 80013f6:	3730      	adds	r7, #48	; 0x30
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40023800 	.word	0x40023800
 8001400:	40021000 	.word	0x40021000
 8001404:	40020800 	.word	0x40020800
 8001408:	40020c00 	.word	0x40020c00
 800140c:	40020000 	.word	0x40020000
 8001410:	40020400 	.word	0x40020400

08001414 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <MX_I2C2_Init+0x50>)
 800141a:	4a13      	ldr	r2, [pc, #76]	; (8001468 <MX_I2C2_Init+0x54>)
 800141c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800141e:	4b11      	ldr	r3, [pc, #68]	; (8001464 <MX_I2C2_Init+0x50>)
 8001420:	4a12      	ldr	r2, [pc, #72]	; (800146c <MX_I2C2_Init+0x58>)
 8001422:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001424:	4b0f      	ldr	r3, [pc, #60]	; (8001464 <MX_I2C2_Init+0x50>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800142a:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <MX_I2C2_Init+0x50>)
 800142c:	2200      	movs	r2, #0
 800142e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001430:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <MX_I2C2_Init+0x50>)
 8001432:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001436:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001438:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <MX_I2C2_Init+0x50>)
 800143a:	2200      	movs	r2, #0
 800143c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800143e:	4b09      	ldr	r3, [pc, #36]	; (8001464 <MX_I2C2_Init+0x50>)
 8001440:	2200      	movs	r2, #0
 8001442:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001444:	4b07      	ldr	r3, [pc, #28]	; (8001464 <MX_I2C2_Init+0x50>)
 8001446:	2200      	movs	r2, #0
 8001448:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800144a:	4b06      	ldr	r3, [pc, #24]	; (8001464 <MX_I2C2_Init+0x50>)
 800144c:	2200      	movs	r2, #0
 800144e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001450:	4804      	ldr	r0, [pc, #16]	; (8001464 <MX_I2C2_Init+0x50>)
 8001452:	f001 f855 	bl	8002500 <HAL_I2C_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800145c:	f000 f9e6 	bl	800182c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}
 8001464:	2000059c 	.word	0x2000059c
 8001468:	40005800 	.word	0x40005800
 800146c:	000186a0 	.word	0x000186a0

08001470 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	; 0x28
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a21      	ldr	r2, [pc, #132]	; (8001514 <HAL_I2C_MspInit+0xa4>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d13c      	bne.n	800150c <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	4b20      	ldr	r3, [pc, #128]	; (8001518 <HAL_I2C_MspInit+0xa8>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a1f      	ldr	r2, [pc, #124]	; (8001518 <HAL_I2C_MspInit+0xa8>)
 800149c:	f043 0302 	orr.w	r3, r3, #2
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b1d      	ldr	r3, [pc, #116]	; (8001518 <HAL_I2C_MspInit+0xa8>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	613b      	str	r3, [r7, #16]
 80014ac:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014b4:	2312      	movs	r3, #18
 80014b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014bc:	2303      	movs	r3, #3
 80014be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014c0:	2304      	movs	r3, #4
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	4619      	mov	r1, r3
 80014ca:	4814      	ldr	r0, [pc, #80]	; (800151c <HAL_I2C_MspInit+0xac>)
 80014cc:	f000 fe56 	bl	800217c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014d0:	2308      	movs	r3, #8
 80014d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014d4:	2312      	movs	r3, #18
 80014d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014dc:	2303      	movs	r3, #3
 80014de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80014e0:	2309      	movs	r3, #9
 80014e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	4619      	mov	r1, r3
 80014ea:	480c      	ldr	r0, [pc, #48]	; (800151c <HAL_I2C_MspInit+0xac>)
 80014ec:	f000 fe46 	bl	800217c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014f0:	2300      	movs	r3, #0
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	4b08      	ldr	r3, [pc, #32]	; (8001518 <HAL_I2C_MspInit+0xa8>)
 80014f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f8:	4a07      	ldr	r2, [pc, #28]	; (8001518 <HAL_I2C_MspInit+0xa8>)
 80014fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001500:	4b05      	ldr	r3, [pc, #20]	; (8001518 <HAL_I2C_MspInit+0xa8>)
 8001502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001504:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800150c:	bf00      	nop
 800150e:	3728      	adds	r7, #40	; 0x28
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40005800 	.word	0x40005800
 8001518:	40023800 	.word	0x40023800
 800151c:	40020400 	.word	0x40020400

08001520 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001520:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001524:	b0aa      	sub	sp, #168	; 0xa8
 8001526:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001528:	f000 fbee 	bl	8001d08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800152c:	f000 f916 	bl	800175c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001530:	f7ff fe82 	bl	8001238 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8001534:	f007 fc94 	bl	8008e60 <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 8001538:	f000 fb42 	bl	8001bc0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800153c:	f000 f97c 	bl	8001838 <MX_SPI1_Init>
  MX_I2C2_Init();
 8001540:	f7ff ff68 	bl	8001414 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  uint8_t DataToSend[40] = {0}; // Tablica zawierajaca dane do wyslania
 8001544:	2300      	movs	r3, #0
 8001546:	647b      	str	r3, [r7, #68]	; 0x44
 8001548:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800154c:	2224      	movs	r2, #36	; 0x24
 800154e:	2100      	movs	r1, #0
 8001550:	4618      	mov	r0, r3
 8001552:	f008 f9db 	bl	800990c <memset>
  uint8_t MessageLength = 0; // Zawiera dlugosc wysylanej wiadomosci
 8001556:	2300      	movs	r3, #0
 8001558:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
  const uint8_t mes_count = 10;
 800155c:	230a      	movs	r3, #10
 800155e:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a

  //struktura przechowująca dane odczytane z mierników
  MPU6050_data sensor_data, tmp_data;
  sensor_data.acc_x = 0;
 8001562:	f04f 0300 	mov.w	r3, #0
 8001566:	62fb      	str	r3, [r7, #44]	; 0x2c
  sensor_data.acc_y = 0;
 8001568:	f04f 0300 	mov.w	r3, #0
 800156c:	633b      	str	r3, [r7, #48]	; 0x30
  sensor_data.acc_z = 0;
 800156e:	f04f 0300 	mov.w	r3, #0
 8001572:	637b      	str	r3, [r7, #52]	; 0x34
  sensor_data.gyro_x = 0;
 8001574:	f04f 0300 	mov.w	r3, #0
 8001578:	63bb      	str	r3, [r7, #56]	; 0x38
  sensor_data.gyro_y = 0;
 800157a:	f04f 0300 	mov.w	r3, #0
 800157e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sensor_data.gyro_z = 0;
 8001580:	f04f 0300 	mov.w	r3, #0
 8001584:	643b      	str	r3, [r7, #64]	; 0x40

  //częstotliwość pomiarów w Hz, domyślnie 5; wartość można edytować z poziomu komputera
  uint32_t measurementsFreq = 2, prevTime = HAL_GetTick(), recVal=0;
 8001586:	2302      	movs	r3, #2
 8001588:	677b      	str	r3, [r7, #116]	; 0x74
 800158a:	f000 fc23 	bl	8001dd4 <HAL_GetTick>
 800158e:	6738      	str	r0, [r7, #112]	; 0x70
 8001590:	2300      	movs	r3, #0
 8001592:	66fb      	str	r3, [r7, #108]	; 0x6c


  //inicjalizacja czujnika MPU6050
  MPU6050_init();
 8001594:	f7ff fcdc 	bl	8000f50 <MPU6050_init>
//	if(ReceivedDataFlag == 1){
//
//		ReceivedDataFlag = 0;
//
//		if(*ReceivedData == *message) {
	  for(int i=0;i<mes_count;i++){
 8001598:	2300      	movs	r3, #0
 800159a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800159c:	e03a      	b.n	8001614 <main+0xf4>
		  MPU6050_measure(&tmp_data);
 800159e:	f107 0314 	add.w	r3, r7, #20
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff fd10 	bl	8000fc8 <MPU6050_measure>
		  sensor_data.acc_x += tmp_data.acc_x;
 80015a8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80015ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80015b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015b4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		  sensor_data.acc_y += tmp_data.acc_y;
 80015b8:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80015bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80015c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015c4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		  sensor_data.acc_z += tmp_data.acc_z;
 80015c8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80015cc:	edd7 7a07 	vldr	s15, [r7, #28]
 80015d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		  sensor_data.gyro_x += tmp_data.gyro_x;
 80015d8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80015dc:	edd7 7a08 	vldr	s15, [r7, #32]
 80015e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015e4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		  sensor_data.gyro_y += tmp_data.gyro_y;
 80015e8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80015ec:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80015f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015f4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		  sensor_data.gyro_z += tmp_data.gyro_z;
 80015f8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80015fc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001600:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001604:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		  HAL_Delay(5);
 8001608:	2005      	movs	r0, #5
 800160a:	f000 fbef 	bl	8001dec <HAL_Delay>
	  for(int i=0;i<mes_count;i++){
 800160e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001610:	3301      	adds	r3, #1
 8001612:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001614:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8001618:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800161a:	429a      	cmp	r2, r3
 800161c:	dbbf      	blt.n	800159e <main+0x7e>
	  }
	  	  	  sensor_data.acc_x /= (float)mes_count;
 800161e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001622:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8001626:	ee07 3a90 	vmov	s15, r3
 800162a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800162e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001632:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	  		  sensor_data.acc_y /= (float)mes_count;
 8001636:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800163a:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 800163e:	ee07 3a90 	vmov	s15, r3
 8001642:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001646:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800164a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	  		  sensor_data.acc_z /= (float)mes_count;
 800164e:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8001652:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8001656:	ee07 3a90 	vmov	s15, r3
 800165a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800165e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001662:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	  		  sensor_data.gyro_x /= (float)mes_count;
 8001666:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800166a:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 800166e:	ee07 3a90 	vmov	s15, r3
 8001672:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001676:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800167a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	  		  sensor_data.gyro_y /= (float)mes_count;
 800167e:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8001682:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8001686:	ee07 3a90 	vmov	s15, r3
 800168a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800168e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001692:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	  		  sensor_data.gyro_z /= (float)mes_count;
 8001696:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800169a:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 800169e:	ee07 3a90 	vmov	s15, r3
 80016a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016aa:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

			MessageLength = sprintf(DataToSend, "%0.2f %0.2f %0.2f %0.2f %0.2f %0.2f \n\r", sensor_data.acc_x,sensor_data.acc_y,sensor_data.acc_z,sensor_data.gyro_x,sensor_data.gyro_y,sensor_data.gyro_z);
 80016ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7fe ff51 	bl	8000558 <__aeabi_f2d>
 80016b6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80016ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016bc:	4618      	mov	r0, r3
 80016be:	f7fe ff4b 	bl	8000558 <__aeabi_f2d>
 80016c2:	4604      	mov	r4, r0
 80016c4:	460d      	mov	r5, r1
 80016c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7fe ff45 	bl	8000558 <__aeabi_f2d>
 80016ce:	4680      	mov	r8, r0
 80016d0:	4689      	mov	r9, r1
 80016d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7fe ff3f 	bl	8000558 <__aeabi_f2d>
 80016da:	4682      	mov	sl, r0
 80016dc:	468b      	mov	fp, r1
 80016de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7fe ff39 	bl	8000558 <__aeabi_f2d>
 80016e6:	e9c7 0100 	strd	r0, r1, [r7]
 80016ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7fe ff33 	bl	8000558 <__aeabi_f2d>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80016fa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80016fe:	ed97 7b00 	vldr	d7, [r7]
 8001702:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001706:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800170a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800170e:	e9cd 4500 	strd	r4, r5, [sp]
 8001712:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001716:	4910      	ldr	r1, [pc, #64]	; (8001758 <main+0x238>)
 8001718:	f008 fd6a 	bl	800a1f0 <siprintf>
 800171c:	4603      	mov	r3, r0
 800171e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

			CDC_Transmit_FS(DataToSend, MessageLength);
 8001722:	f897 207b 	ldrb.w	r2, [r7, #123]	; 0x7b
 8001726:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800172a:	4611      	mov	r1, r2
 800172c:	4618      	mov	r0, r3
 800172e:	f007 fc55 	bl	8008fdc <CDC_Transmit_FS>

			  sensor_data.acc_x = 0;
 8001732:	f04f 0300 	mov.w	r3, #0
 8001736:	62fb      	str	r3, [r7, #44]	; 0x2c
			  sensor_data.acc_y = 0;
 8001738:	f04f 0300 	mov.w	r3, #0
 800173c:	633b      	str	r3, [r7, #48]	; 0x30
			  sensor_data.acc_z = 0;
 800173e:	f04f 0300 	mov.w	r3, #0
 8001742:	637b      	str	r3, [r7, #52]	; 0x34
			  sensor_data.gyro_x = 0;
 8001744:	f04f 0300 	mov.w	r3, #0
 8001748:	63bb      	str	r3, [r7, #56]	; 0x38
			  sensor_data.gyro_y = 0;
 800174a:	f04f 0300 	mov.w	r3, #0
 800174e:	63fb      	str	r3, [r7, #60]	; 0x3c
			  sensor_data.gyro_z = 0;
 8001750:	f04f 0300 	mov.w	r3, #0
 8001754:	643b      	str	r3, [r7, #64]	; 0x40
  {
 8001756:	e71f      	b.n	8001598 <main+0x78>
 8001758:	0800c640 	.word	0x0800c640

0800175c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b094      	sub	sp, #80	; 0x50
 8001760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001762:	f107 0320 	add.w	r3, r7, #32
 8001766:	2230      	movs	r2, #48	; 0x30
 8001768:	2100      	movs	r1, #0
 800176a:	4618      	mov	r0, r3
 800176c:	f008 f8ce 	bl	800990c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001770:	f107 030c 	add.w	r3, r7, #12
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001780:	2300      	movs	r3, #0
 8001782:	60bb      	str	r3, [r7, #8]
 8001784:	4b27      	ldr	r3, [pc, #156]	; (8001824 <SystemClock_Config+0xc8>)
 8001786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001788:	4a26      	ldr	r2, [pc, #152]	; (8001824 <SystemClock_Config+0xc8>)
 800178a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800178e:	6413      	str	r3, [r2, #64]	; 0x40
 8001790:	4b24      	ldr	r3, [pc, #144]	; (8001824 <SystemClock_Config+0xc8>)
 8001792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800179c:	2300      	movs	r3, #0
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	4b21      	ldr	r3, [pc, #132]	; (8001828 <SystemClock_Config+0xcc>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a20      	ldr	r2, [pc, #128]	; (8001828 <SystemClock_Config+0xcc>)
 80017a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017aa:	6013      	str	r3, [r2, #0]
 80017ac:	4b1e      	ldr	r3, [pc, #120]	; (8001828 <SystemClock_Config+0xcc>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017b4:	607b      	str	r3, [r7, #4]
 80017b6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017b8:	2301      	movs	r3, #1
 80017ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017c2:	2302      	movs	r3, #2
 80017c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80017cc:	2304      	movs	r3, #4
 80017ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80017d0:	2348      	movs	r3, #72	; 0x48
 80017d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017d4:	2302      	movs	r3, #2
 80017d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80017d8:	2303      	movs	r3, #3
 80017da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017dc:	f107 0320 	add.w	r3, r7, #32
 80017e0:	4618      	mov	r0, r3
 80017e2:	f002 ffcf 	bl	8004784 <HAL_RCC_OscConfig>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80017ec:	f000 f81e 	bl	800182c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017f0:	230f      	movs	r3, #15
 80017f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017f4:	2302      	movs	r3, #2
 80017f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001800:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001802:	2300      	movs	r3, #0
 8001804:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001806:	f107 030c 	add.w	r3, r7, #12
 800180a:	2102      	movs	r1, #2
 800180c:	4618      	mov	r0, r3
 800180e:	f003 fa31 	bl	8004c74 <HAL_RCC_ClockConfig>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001818:	f000 f808 	bl	800182c <Error_Handler>
  }
}
 800181c:	bf00      	nop
 800181e:	3750      	adds	r7, #80	; 0x50
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40023800 	.word	0x40023800
 8001828:	40007000 	.word	0x40007000

0800182c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001830:	b672      	cpsid	i
}
 8001832:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001834:	e7fe      	b.n	8001834 <Error_Handler+0x8>
	...

08001838 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800183c:	4b17      	ldr	r3, [pc, #92]	; (800189c <MX_SPI1_Init+0x64>)
 800183e:	4a18      	ldr	r2, [pc, #96]	; (80018a0 <MX_SPI1_Init+0x68>)
 8001840:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001842:	4b16      	ldr	r3, [pc, #88]	; (800189c <MX_SPI1_Init+0x64>)
 8001844:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001848:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800184a:	4b14      	ldr	r3, [pc, #80]	; (800189c <MX_SPI1_Init+0x64>)
 800184c:	2200      	movs	r2, #0
 800184e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001850:	4b12      	ldr	r3, [pc, #72]	; (800189c <MX_SPI1_Init+0x64>)
 8001852:	2200      	movs	r2, #0
 8001854:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001856:	4b11      	ldr	r3, [pc, #68]	; (800189c <MX_SPI1_Init+0x64>)
 8001858:	2200      	movs	r2, #0
 800185a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800185c:	4b0f      	ldr	r3, [pc, #60]	; (800189c <MX_SPI1_Init+0x64>)
 800185e:	2200      	movs	r2, #0
 8001860:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001862:	4b0e      	ldr	r3, [pc, #56]	; (800189c <MX_SPI1_Init+0x64>)
 8001864:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001868:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800186a:	4b0c      	ldr	r3, [pc, #48]	; (800189c <MX_SPI1_Init+0x64>)
 800186c:	2220      	movs	r2, #32
 800186e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001870:	4b0a      	ldr	r3, [pc, #40]	; (800189c <MX_SPI1_Init+0x64>)
 8001872:	2200      	movs	r2, #0
 8001874:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001876:	4b09      	ldr	r3, [pc, #36]	; (800189c <MX_SPI1_Init+0x64>)
 8001878:	2200      	movs	r2, #0
 800187a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800187c:	4b07      	ldr	r3, [pc, #28]	; (800189c <MX_SPI1_Init+0x64>)
 800187e:	2200      	movs	r2, #0
 8001880:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <MX_SPI1_Init+0x64>)
 8001884:	220a      	movs	r2, #10
 8001886:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001888:	4804      	ldr	r0, [pc, #16]	; (800189c <MX_SPI1_Init+0x64>)
 800188a:	f003 fbef 	bl	800506c <HAL_SPI_Init>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001894:	f7ff ffca 	bl	800182c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001898:	bf00      	nop
 800189a:	bd80      	pop	{r7, pc}
 800189c:	200005f0 	.word	0x200005f0
 80018a0:	40013000 	.word	0x40013000

080018a4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08a      	sub	sp, #40	; 0x28
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a19      	ldr	r2, [pc, #100]	; (8001928 <HAL_SPI_MspInit+0x84>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d12b      	bne.n	800191e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	613b      	str	r3, [r7, #16]
 80018ca:	4b18      	ldr	r3, [pc, #96]	; (800192c <HAL_SPI_MspInit+0x88>)
 80018cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ce:	4a17      	ldr	r2, [pc, #92]	; (800192c <HAL_SPI_MspInit+0x88>)
 80018d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018d4:	6453      	str	r3, [r2, #68]	; 0x44
 80018d6:	4b15      	ldr	r3, [pc, #84]	; (800192c <HAL_SPI_MspInit+0x88>)
 80018d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018de:	613b      	str	r3, [r7, #16]
 80018e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	4b11      	ldr	r3, [pc, #68]	; (800192c <HAL_SPI_MspInit+0x88>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	4a10      	ldr	r2, [pc, #64]	; (800192c <HAL_SPI_MspInit+0x88>)
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	6313      	str	r3, [r2, #48]	; 0x30
 80018f2:	4b0e      	ldr	r3, [pc, #56]	; (800192c <HAL_SPI_MspInit+0x88>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80018fe:	23e0      	movs	r3, #224	; 0xe0
 8001900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001902:	2302      	movs	r3, #2
 8001904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800190a:	2303      	movs	r3, #3
 800190c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800190e:	2305      	movs	r3, #5
 8001910:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001912:	f107 0314 	add.w	r3, r7, #20
 8001916:	4619      	mov	r1, r3
 8001918:	4805      	ldr	r0, [pc, #20]	; (8001930 <HAL_SPI_MspInit+0x8c>)
 800191a:	f000 fc2f 	bl	800217c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800191e:	bf00      	nop
 8001920:	3728      	adds	r7, #40	; 0x28
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40013000 	.word	0x40013000
 800192c:	40023800 	.word	0x40023800
 8001930:	40020000 	.word	0x40020000

08001934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	607b      	str	r3, [r7, #4]
 800193e:	4b10      	ldr	r3, [pc, #64]	; (8001980 <HAL_MspInit+0x4c>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001942:	4a0f      	ldr	r2, [pc, #60]	; (8001980 <HAL_MspInit+0x4c>)
 8001944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001948:	6453      	str	r3, [r2, #68]	; 0x44
 800194a:	4b0d      	ldr	r3, [pc, #52]	; (8001980 <HAL_MspInit+0x4c>)
 800194c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001952:	607b      	str	r3, [r7, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	603b      	str	r3, [r7, #0]
 800195a:	4b09      	ldr	r3, [pc, #36]	; (8001980 <HAL_MspInit+0x4c>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	4a08      	ldr	r2, [pc, #32]	; (8001980 <HAL_MspInit+0x4c>)
 8001960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001964:	6413      	str	r3, [r2, #64]	; 0x40
 8001966:	4b06      	ldr	r3, [pc, #24]	; (8001980 <HAL_MspInit+0x4c>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196e:	603b      	str	r3, [r7, #0]
 8001970:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001972:	2007      	movs	r0, #7
 8001974:	f000 fb2e 	bl	8001fd4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001978:	bf00      	nop
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40023800 	.word	0x40023800

08001984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001988:	e7fe      	b.n	8001988 <NMI_Handler+0x4>

0800198a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800198a:	b480      	push	{r7}
 800198c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800198e:	e7fe      	b.n	800198e <HardFault_Handler+0x4>

08001990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001994:	e7fe      	b.n	8001994 <MemManage_Handler+0x4>

08001996 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001996:	b480      	push	{r7}
 8001998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800199a:	e7fe      	b.n	800199a <BusFault_Handler+0x4>

0800199c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019a0:	e7fe      	b.n	80019a0 <UsageFault_Handler+0x4>

080019a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019a2:	b480      	push	{r7}
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019d0:	f000 f9ec 	bl	8001dac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019d4:	bf00      	nop
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PH0_OSC_IN_Pin);
 80019dc:	2001      	movs	r0, #1
 80019de:	f000 fd6b 	bl	80024b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
	...

080019e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019ec:	4802      	ldr	r0, [pc, #8]	; (80019f8 <USART2_IRQHandler+0x10>)
 80019ee:	f003 fc13 	bl	8005218 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20000648 	.word	0x20000648

080019fc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001a00:	4802      	ldr	r0, [pc, #8]	; (8001a0c <OTG_FS_IRQHandler+0x10>)
 8001a02:	f001 fe8c 	bl	800371e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20001b60 	.word	0x20001b60

08001a10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
	return 1;
 8001a14:	2301      	movs	r3, #1
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <_kill>:

int _kill(int pid, int sig)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a2a:	f007 ff37 	bl	800989c <__errno>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2216      	movs	r2, #22
 8001a32:	601a      	str	r2, [r3, #0]
	return -1;
 8001a34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <_exit>:

void _exit (int status)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a48:	f04f 31ff 	mov.w	r1, #4294967295
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff ffe7 	bl	8001a20 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a52:	e7fe      	b.n	8001a52 <_exit+0x12>

08001a54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]
 8001a64:	e00a      	b.n	8001a7c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a66:	f3af 8000 	nop.w
 8001a6a:	4601      	mov	r1, r0
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	1c5a      	adds	r2, r3, #1
 8001a70:	60ba      	str	r2, [r7, #8]
 8001a72:	b2ca      	uxtb	r2, r1
 8001a74:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	617b      	str	r3, [r7, #20]
 8001a7c:	697a      	ldr	r2, [r7, #20]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	dbf0      	blt.n	8001a66 <_read+0x12>
	}

return len;
 8001a84:	687b      	ldr	r3, [r7, #4]
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3718      	adds	r7, #24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b086      	sub	sp, #24
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	60f8      	str	r0, [r7, #12]
 8001a96:	60b9      	str	r1, [r7, #8]
 8001a98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	617b      	str	r3, [r7, #20]
 8001a9e:	e009      	b.n	8001ab4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	1c5a      	adds	r2, r3, #1
 8001aa4:	60ba      	str	r2, [r7, #8]
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	617b      	str	r3, [r7, #20]
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	dbf1      	blt.n	8001aa0 <_write+0x12>
	}

	return len;
 8001abc:	687b      	ldr	r3, [r7, #4]
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3718      	adds	r7, #24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <_close>:

int _close(int file)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	b083      	sub	sp, #12
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
	return -1;
 8001ace:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b083      	sub	sp, #12
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
 8001ae6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001aee:	605a      	str	r2, [r3, #4]
	return 0;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <_isatty>:

int _isatty(int file)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
	return 1;
 8001b06:	2301      	movs	r3, #1
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
	return 0;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3714      	adds	r7, #20
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
	...

08001b30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b38:	4a14      	ldr	r2, [pc, #80]	; (8001b8c <_sbrk+0x5c>)
 8001b3a:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <_sbrk+0x60>)
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b44:	4b13      	ldr	r3, [pc, #76]	; (8001b94 <_sbrk+0x64>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d102      	bne.n	8001b52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b4c:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <_sbrk+0x64>)
 8001b4e:	4a12      	ldr	r2, [pc, #72]	; (8001b98 <_sbrk+0x68>)
 8001b50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b52:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <_sbrk+0x64>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4413      	add	r3, r2
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d207      	bcs.n	8001b70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b60:	f007 fe9c 	bl	800989c <__errno>
 8001b64:	4603      	mov	r3, r0
 8001b66:	220c      	movs	r2, #12
 8001b68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6e:	e009      	b.n	8001b84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b70:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <_sbrk+0x64>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b76:	4b07      	ldr	r3, [pc, #28]	; (8001b94 <_sbrk+0x64>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	4a05      	ldr	r2, [pc, #20]	; (8001b94 <_sbrk+0x64>)
 8001b80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b82:	68fb      	ldr	r3, [r7, #12]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20020000 	.word	0x20020000
 8001b90:	00000400 	.word	0x00000400
 8001b94:	2000036c 	.word	0x2000036c
 8001b98:	20001f78 	.word	0x20001f78

08001b9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <SystemInit+0x20>)
 8001ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ba6:	4a05      	ldr	r2, [pc, #20]	; (8001bbc <SystemInit+0x20>)
 8001ba8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bc4:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <MX_USART2_UART_Init+0x4c>)
 8001bc6:	4a12      	ldr	r2, [pc, #72]	; (8001c10 <MX_USART2_UART_Init+0x50>)
 8001bc8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bca:	4b10      	ldr	r3, [pc, #64]	; (8001c0c <MX_USART2_UART_Init+0x4c>)
 8001bcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bd0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bd2:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <MX_USART2_UART_Init+0x4c>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bd8:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <MX_USART2_UART_Init+0x4c>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bde:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <MX_USART2_UART_Init+0x4c>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001be4:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <MX_USART2_UART_Init+0x4c>)
 8001be6:	220c      	movs	r2, #12
 8001be8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bea:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <MX_USART2_UART_Init+0x4c>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bf0:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <MX_USART2_UART_Init+0x4c>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bf6:	4805      	ldr	r0, [pc, #20]	; (8001c0c <MX_USART2_UART_Init+0x4c>)
 8001bf8:	f003 fac1 	bl	800517e <HAL_UART_Init>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c02:	f7ff fe13 	bl	800182c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000648 	.word	0x20000648
 8001c10:	40004400 	.word	0x40004400

08001c14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b08a      	sub	sp, #40	; 0x28
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1c:	f107 0314 	add.w	r3, r7, #20
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	605a      	str	r2, [r3, #4]
 8001c26:	609a      	str	r2, [r3, #8]
 8001c28:	60da      	str	r2, [r3, #12]
 8001c2a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a1d      	ldr	r2, [pc, #116]	; (8001ca8 <HAL_UART_MspInit+0x94>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d133      	bne.n	8001c9e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	613b      	str	r3, [r7, #16]
 8001c3a:	4b1c      	ldr	r3, [pc, #112]	; (8001cac <HAL_UART_MspInit+0x98>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	4a1b      	ldr	r2, [pc, #108]	; (8001cac <HAL_UART_MspInit+0x98>)
 8001c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c44:	6413      	str	r3, [r2, #64]	; 0x40
 8001c46:	4b19      	ldr	r3, [pc, #100]	; (8001cac <HAL_UART_MspInit+0x98>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4e:	613b      	str	r3, [r7, #16]
 8001c50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	4b15      	ldr	r3, [pc, #84]	; (8001cac <HAL_UART_MspInit+0x98>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	4a14      	ldr	r2, [pc, #80]	; (8001cac <HAL_UART_MspInit+0x98>)
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	6313      	str	r3, [r2, #48]	; 0x30
 8001c62:	4b12      	ldr	r3, [pc, #72]	; (8001cac <HAL_UART_MspInit+0x98>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c6e:	230c      	movs	r3, #12
 8001c70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c72:	2302      	movs	r3, #2
 8001c74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c7e:	2307      	movs	r3, #7
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c82:	f107 0314 	add.w	r3, r7, #20
 8001c86:	4619      	mov	r1, r3
 8001c88:	4809      	ldr	r0, [pc, #36]	; (8001cb0 <HAL_UART_MspInit+0x9c>)
 8001c8a:	f000 fa77 	bl	800217c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2100      	movs	r1, #0
 8001c92:	2026      	movs	r0, #38	; 0x26
 8001c94:	f000 f9a9 	bl	8001fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c98:	2026      	movs	r0, #38	; 0x26
 8001c9a:	f000 f9c2 	bl	8002022 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c9e:	bf00      	nop
 8001ca0:	3728      	adds	r7, #40	; 0x28
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40004400 	.word	0x40004400
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	40020000 	.word	0x40020000

08001cb4 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:   ldr   sp, =_estack    		 /* set stack pointer */
 8001cb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cb8:	480d      	ldr	r0, [pc, #52]	; (8001cf0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cba:	490e      	ldr	r1, [pc, #56]	; (8001cf4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cbc:	4a0e      	ldr	r2, [pc, #56]	; (8001cf8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cc0:	e002      	b.n	8001cc8 <LoopCopyDataInit>

08001cc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cc6:	3304      	adds	r3, #4

08001cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ccc:	d3f9      	bcc.n	8001cc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cce:	4a0b      	ldr	r2, [pc, #44]	; (8001cfc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001cd0:	4c0b      	ldr	r4, [pc, #44]	; (8001d00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cd4:	e001      	b.n	8001cda <LoopFillZerobss>

08001cd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cd8:	3204      	adds	r2, #4

08001cda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cdc:	d3fb      	bcc.n	8001cd6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001cde:	f7ff ff5d 	bl	8001b9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ce2:	f007 fde1 	bl	80098a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ce6:	f7ff fc1b 	bl	8001520 <main>
  bx  lr    
 8001cea:	4770      	bx	lr
Reset_Handler:   ldr   sp, =_estack    		 /* set stack pointer */
 8001cec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cf4:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 8001cf8:	0800cabc 	.word	0x0800cabc
  ldr r2, =_sbss
 8001cfc:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 8001d00:	20001f78 	.word	0x20001f78

08001d04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d04:	e7fe      	b.n	8001d04 <ADC_IRQHandler>
	...

08001d08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d0c:	4b0e      	ldr	r3, [pc, #56]	; (8001d48 <HAL_Init+0x40>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a0d      	ldr	r2, [pc, #52]	; (8001d48 <HAL_Init+0x40>)
 8001d12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d18:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <HAL_Init+0x40>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a0a      	ldr	r2, [pc, #40]	; (8001d48 <HAL_Init+0x40>)
 8001d1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d24:	4b08      	ldr	r3, [pc, #32]	; (8001d48 <HAL_Init+0x40>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a07      	ldr	r2, [pc, #28]	; (8001d48 <HAL_Init+0x40>)
 8001d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d30:	2003      	movs	r0, #3
 8001d32:	f000 f94f 	bl	8001fd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d36:	2000      	movs	r0, #0
 8001d38:	f000 f808 	bl	8001d4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d3c:	f7ff fdfa 	bl	8001934 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40023c00 	.word	0x40023c00

08001d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d54:	4b12      	ldr	r3, [pc, #72]	; (8001da0 <HAL_InitTick+0x54>)
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	4b12      	ldr	r3, [pc, #72]	; (8001da4 <HAL_InitTick+0x58>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f000 f967 	bl	800203e <HAL_SYSTICK_Config>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e00e      	b.n	8001d98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2b0f      	cmp	r3, #15
 8001d7e:	d80a      	bhi.n	8001d96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d80:	2200      	movs	r2, #0
 8001d82:	6879      	ldr	r1, [r7, #4]
 8001d84:	f04f 30ff 	mov.w	r0, #4294967295
 8001d88:	f000 f92f 	bl	8001fea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d8c:	4a06      	ldr	r2, [pc, #24]	; (8001da8 <HAL_InitTick+0x5c>)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d92:	2300      	movs	r3, #0
 8001d94:	e000      	b.n	8001d98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	20000000 	.word	0x20000000
 8001da4:	20000008 	.word	0x20000008
 8001da8:	20000004 	.word	0x20000004

08001dac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001db0:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <HAL_IncTick+0x20>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	461a      	mov	r2, r3
 8001db6:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <HAL_IncTick+0x24>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4413      	add	r3, r2
 8001dbc:	4a04      	ldr	r2, [pc, #16]	; (8001dd0 <HAL_IncTick+0x24>)
 8001dbe:	6013      	str	r3, [r2, #0]
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	20000008 	.word	0x20000008
 8001dd0:	2000068c 	.word	0x2000068c

08001dd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001dd8:	4b03      	ldr	r3, [pc, #12]	; (8001de8 <HAL_GetTick+0x14>)
 8001dda:	681b      	ldr	r3, [r3, #0]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	2000068c 	.word	0x2000068c

08001dec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001df4:	f7ff ffee 	bl	8001dd4 <HAL_GetTick>
 8001df8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e04:	d005      	beq.n	8001e12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e06:	4b0a      	ldr	r3, [pc, #40]	; (8001e30 <HAL_Delay+0x44>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	4413      	add	r3, r2
 8001e10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e12:	bf00      	nop
 8001e14:	f7ff ffde 	bl	8001dd4 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d8f7      	bhi.n	8001e14 <HAL_Delay+0x28>
  {
  }
}
 8001e24:	bf00      	nop
 8001e26:	bf00      	nop
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20000008 	.word	0x20000008

08001e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e44:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <__NVIC_SetPriorityGrouping+0x44>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e4a:	68ba      	ldr	r2, [r7, #8]
 8001e4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e50:	4013      	ands	r3, r2
 8001e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e66:	4a04      	ldr	r2, [pc, #16]	; (8001e78 <__NVIC_SetPriorityGrouping+0x44>)
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	60d3      	str	r3, [r2, #12]
}
 8001e6c:	bf00      	nop
 8001e6e:	3714      	adds	r7, #20
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	e000ed00 	.word	0xe000ed00

08001e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e80:	4b04      	ldr	r3, [pc, #16]	; (8001e94 <__NVIC_GetPriorityGrouping+0x18>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	0a1b      	lsrs	r3, r3, #8
 8001e86:	f003 0307 	and.w	r3, r3, #7
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	e000ed00 	.word	0xe000ed00

08001e98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	db0b      	blt.n	8001ec2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eaa:	79fb      	ldrb	r3, [r7, #7]
 8001eac:	f003 021f 	and.w	r2, r3, #31
 8001eb0:	4907      	ldr	r1, [pc, #28]	; (8001ed0 <__NVIC_EnableIRQ+0x38>)
 8001eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb6:	095b      	lsrs	r3, r3, #5
 8001eb8:	2001      	movs	r0, #1
 8001eba:	fa00 f202 	lsl.w	r2, r0, r2
 8001ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	e000e100 	.word	0xe000e100

08001ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	6039      	str	r1, [r7, #0]
 8001ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	db0a      	blt.n	8001efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	b2da      	uxtb	r2, r3
 8001eec:	490c      	ldr	r1, [pc, #48]	; (8001f20 <__NVIC_SetPriority+0x4c>)
 8001eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef2:	0112      	lsls	r2, r2, #4
 8001ef4:	b2d2      	uxtb	r2, r2
 8001ef6:	440b      	add	r3, r1
 8001ef8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001efc:	e00a      	b.n	8001f14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	4908      	ldr	r1, [pc, #32]	; (8001f24 <__NVIC_SetPriority+0x50>)
 8001f04:	79fb      	ldrb	r3, [r7, #7]
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	3b04      	subs	r3, #4
 8001f0c:	0112      	lsls	r2, r2, #4
 8001f0e:	b2d2      	uxtb	r2, r2
 8001f10:	440b      	add	r3, r1
 8001f12:	761a      	strb	r2, [r3, #24]
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	e000e100 	.word	0xe000e100
 8001f24:	e000ed00 	.word	0xe000ed00

08001f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b089      	sub	sp, #36	; 0x24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	f1c3 0307 	rsb	r3, r3, #7
 8001f42:	2b04      	cmp	r3, #4
 8001f44:	bf28      	it	cs
 8001f46:	2304      	movcs	r3, #4
 8001f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	3304      	adds	r3, #4
 8001f4e:	2b06      	cmp	r3, #6
 8001f50:	d902      	bls.n	8001f58 <NVIC_EncodePriority+0x30>
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	3b03      	subs	r3, #3
 8001f56:	e000      	b.n	8001f5a <NVIC_EncodePriority+0x32>
 8001f58:	2300      	movs	r3, #0
 8001f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	43da      	mvns	r2, r3
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	401a      	ands	r2, r3
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f70:	f04f 31ff 	mov.w	r1, #4294967295
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7a:	43d9      	mvns	r1, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f80:	4313      	orrs	r3, r2
         );
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3724      	adds	r7, #36	; 0x24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
	...

08001f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fa0:	d301      	bcc.n	8001fa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e00f      	b.n	8001fc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fa6:	4a0a      	ldr	r2, [pc, #40]	; (8001fd0 <SysTick_Config+0x40>)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3b01      	subs	r3, #1
 8001fac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fae:	210f      	movs	r1, #15
 8001fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb4:	f7ff ff8e 	bl	8001ed4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fb8:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <SysTick_Config+0x40>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fbe:	4b04      	ldr	r3, [pc, #16]	; (8001fd0 <SysTick_Config+0x40>)
 8001fc0:	2207      	movs	r2, #7
 8001fc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	e000e010 	.word	0xe000e010

08001fd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f7ff ff29 	bl	8001e34 <__NVIC_SetPriorityGrouping>
}
 8001fe2:	bf00      	nop
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b086      	sub	sp, #24
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	60b9      	str	r1, [r7, #8]
 8001ff4:	607a      	str	r2, [r7, #4]
 8001ff6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ffc:	f7ff ff3e 	bl	8001e7c <__NVIC_GetPriorityGrouping>
 8002000:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	68b9      	ldr	r1, [r7, #8]
 8002006:	6978      	ldr	r0, [r7, #20]
 8002008:	f7ff ff8e 	bl	8001f28 <NVIC_EncodePriority>
 800200c:	4602      	mov	r2, r0
 800200e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002012:	4611      	mov	r1, r2
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff ff5d 	bl	8001ed4 <__NVIC_SetPriority>
}
 800201a:	bf00      	nop
 800201c:	3718      	adds	r7, #24
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b082      	sub	sp, #8
 8002026:	af00      	add	r7, sp, #0
 8002028:	4603      	mov	r3, r0
 800202a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800202c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff ff31 	bl	8001e98 <__NVIC_EnableIRQ>
}
 8002036:	bf00      	nop
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b082      	sub	sp, #8
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7ff ffa2 	bl	8001f90 <SysTick_Config>
 800204c:	4603      	mov	r3, r0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b084      	sub	sp, #16
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002062:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002064:	f7ff feb6 	bl	8001dd4 <HAL_GetTick>
 8002068:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d008      	beq.n	8002088 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2280      	movs	r2, #128	; 0x80
 800207a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e052      	b.n	800212e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 0216 	bic.w	r2, r2, #22
 8002096:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	695a      	ldr	r2, [r3, #20]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020a6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d103      	bne.n	80020b8 <HAL_DMA_Abort+0x62>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d007      	beq.n	80020c8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f022 0208 	bic.w	r2, r2, #8
 80020c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 0201 	bic.w	r2, r2, #1
 80020d6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020d8:	e013      	b.n	8002102 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020da:	f7ff fe7b 	bl	8001dd4 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b05      	cmp	r3, #5
 80020e6:	d90c      	bls.n	8002102 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2220      	movs	r2, #32
 80020ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2203      	movs	r2, #3
 80020f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e015      	b.n	800212e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	2b00      	cmp	r3, #0
 800210e:	d1e4      	bne.n	80020da <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002114:	223f      	movs	r2, #63	; 0x3f
 8002116:	409a      	lsls	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d004      	beq.n	8002154 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2280      	movs	r2, #128	; 0x80
 800214e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e00c      	b.n	800216e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2205      	movs	r2, #5
 8002158:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f022 0201 	bic.w	r2, r2, #1
 800216a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
	...

0800217c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800217c:	b480      	push	{r7}
 800217e:	b089      	sub	sp, #36	; 0x24
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002186:	2300      	movs	r3, #0
 8002188:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800218a:	2300      	movs	r3, #0
 800218c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800218e:	2300      	movs	r3, #0
 8002190:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002192:	2300      	movs	r3, #0
 8002194:	61fb      	str	r3, [r7, #28]
 8002196:	e159      	b.n	800244c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002198:	2201      	movs	r2, #1
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	697a      	ldr	r2, [r7, #20]
 80021a8:	4013      	ands	r3, r2
 80021aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	f040 8148 	bne.w	8002446 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f003 0303 	and.w	r3, r3, #3
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d005      	beq.n	80021ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d130      	bne.n	8002230 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	2203      	movs	r2, #3
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	43db      	mvns	r3, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4013      	ands	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	68da      	ldr	r2, [r3, #12]
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002204:	2201      	movs	r2, #1
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	43db      	mvns	r3, r3
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4013      	ands	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	091b      	lsrs	r3, r3, #4
 800221a:	f003 0201 	and.w	r2, r3, #1
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4313      	orrs	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f003 0303 	and.w	r3, r3, #3
 8002238:	2b03      	cmp	r3, #3
 800223a:	d017      	beq.n	800226c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	2203      	movs	r2, #3
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	43db      	mvns	r3, r3
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	4013      	ands	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4313      	orrs	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f003 0303 	and.w	r3, r3, #3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d123      	bne.n	80022c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	08da      	lsrs	r2, r3, #3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3208      	adds	r2, #8
 8002280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002284:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	f003 0307 	and.w	r3, r3, #7
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	220f      	movs	r2, #15
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	43db      	mvns	r3, r3
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4013      	ands	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	691a      	ldr	r2, [r3, #16]
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	08da      	lsrs	r2, r3, #3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	3208      	adds	r2, #8
 80022ba:	69b9      	ldr	r1, [r7, #24]
 80022bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	2203      	movs	r2, #3
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	43db      	mvns	r3, r3
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4013      	ands	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f003 0203 	and.w	r2, r3, #3
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f000 80a2 	beq.w	8002446 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	4b57      	ldr	r3, [pc, #348]	; (8002464 <HAL_GPIO_Init+0x2e8>)
 8002308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230a:	4a56      	ldr	r2, [pc, #344]	; (8002464 <HAL_GPIO_Init+0x2e8>)
 800230c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002310:	6453      	str	r3, [r2, #68]	; 0x44
 8002312:	4b54      	ldr	r3, [pc, #336]	; (8002464 <HAL_GPIO_Init+0x2e8>)
 8002314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002316:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800231e:	4a52      	ldr	r2, [pc, #328]	; (8002468 <HAL_GPIO_Init+0x2ec>)
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	089b      	lsrs	r3, r3, #2
 8002324:	3302      	adds	r3, #2
 8002326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800232a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	f003 0303 	and.w	r3, r3, #3
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	220f      	movs	r2, #15
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	43db      	mvns	r3, r3
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4013      	ands	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a49      	ldr	r2, [pc, #292]	; (800246c <HAL_GPIO_Init+0x2f0>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d019      	beq.n	800237e <HAL_GPIO_Init+0x202>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a48      	ldr	r2, [pc, #288]	; (8002470 <HAL_GPIO_Init+0x2f4>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d013      	beq.n	800237a <HAL_GPIO_Init+0x1fe>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a47      	ldr	r2, [pc, #284]	; (8002474 <HAL_GPIO_Init+0x2f8>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d00d      	beq.n	8002376 <HAL_GPIO_Init+0x1fa>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a46      	ldr	r2, [pc, #280]	; (8002478 <HAL_GPIO_Init+0x2fc>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d007      	beq.n	8002372 <HAL_GPIO_Init+0x1f6>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a45      	ldr	r2, [pc, #276]	; (800247c <HAL_GPIO_Init+0x300>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d101      	bne.n	800236e <HAL_GPIO_Init+0x1f2>
 800236a:	2304      	movs	r3, #4
 800236c:	e008      	b.n	8002380 <HAL_GPIO_Init+0x204>
 800236e:	2307      	movs	r3, #7
 8002370:	e006      	b.n	8002380 <HAL_GPIO_Init+0x204>
 8002372:	2303      	movs	r3, #3
 8002374:	e004      	b.n	8002380 <HAL_GPIO_Init+0x204>
 8002376:	2302      	movs	r3, #2
 8002378:	e002      	b.n	8002380 <HAL_GPIO_Init+0x204>
 800237a:	2301      	movs	r3, #1
 800237c:	e000      	b.n	8002380 <HAL_GPIO_Init+0x204>
 800237e:	2300      	movs	r3, #0
 8002380:	69fa      	ldr	r2, [r7, #28]
 8002382:	f002 0203 	and.w	r2, r2, #3
 8002386:	0092      	lsls	r2, r2, #2
 8002388:	4093      	lsls	r3, r2
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4313      	orrs	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002390:	4935      	ldr	r1, [pc, #212]	; (8002468 <HAL_GPIO_Init+0x2ec>)
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	089b      	lsrs	r3, r3, #2
 8002396:	3302      	adds	r3, #2
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800239e:	4b38      	ldr	r3, [pc, #224]	; (8002480 <HAL_GPIO_Init+0x304>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	43db      	mvns	r3, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4013      	ands	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	4313      	orrs	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023c2:	4a2f      	ldr	r2, [pc, #188]	; (8002480 <HAL_GPIO_Init+0x304>)
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80023c8:	4b2d      	ldr	r3, [pc, #180]	; (8002480 <HAL_GPIO_Init+0x304>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	43db      	mvns	r3, r3
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4013      	ands	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d003      	beq.n	80023ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023ec:	4a24      	ldr	r2, [pc, #144]	; (8002480 <HAL_GPIO_Init+0x304>)
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023f2:	4b23      	ldr	r3, [pc, #140]	; (8002480 <HAL_GPIO_Init+0x304>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	43db      	mvns	r3, r3
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	4013      	ands	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	4313      	orrs	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002416:	4a1a      	ldr	r2, [pc, #104]	; (8002480 <HAL_GPIO_Init+0x304>)
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800241c:	4b18      	ldr	r3, [pc, #96]	; (8002480 <HAL_GPIO_Init+0x304>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	43db      	mvns	r3, r3
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4013      	ands	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d003      	beq.n	8002440 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	4313      	orrs	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002440:	4a0f      	ldr	r2, [pc, #60]	; (8002480 <HAL_GPIO_Init+0x304>)
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	3301      	adds	r3, #1
 800244a:	61fb      	str	r3, [r7, #28]
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	2b0f      	cmp	r3, #15
 8002450:	f67f aea2 	bls.w	8002198 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002454:	bf00      	nop
 8002456:	bf00      	nop
 8002458:	3724      	adds	r7, #36	; 0x24
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	40023800 	.word	0x40023800
 8002468:	40013800 	.word	0x40013800
 800246c:	40020000 	.word	0x40020000
 8002470:	40020400 	.word	0x40020400
 8002474:	40020800 	.word	0x40020800
 8002478:	40020c00 	.word	0x40020c00
 800247c:	40021000 	.word	0x40021000
 8002480:	40013c00 	.word	0x40013c00

08002484 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	460b      	mov	r3, r1
 800248e:	807b      	strh	r3, [r7, #2]
 8002490:	4613      	mov	r3, r2
 8002492:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002494:	787b      	ldrb	r3, [r7, #1]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d003      	beq.n	80024a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800249a:	887a      	ldrh	r2, [r7, #2]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024a0:	e003      	b.n	80024aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024a2:	887b      	ldrh	r3, [r7, #2]
 80024a4:	041a      	lsls	r2, r3, #16
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	619a      	str	r2, [r3, #24]
}
 80024aa:	bf00      	nop
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
	...

080024b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	4603      	mov	r3, r0
 80024c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80024c2:	4b08      	ldr	r3, [pc, #32]	; (80024e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024c4:	695a      	ldr	r2, [r3, #20]
 80024c6:	88fb      	ldrh	r3, [r7, #6]
 80024c8:	4013      	ands	r3, r2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d006      	beq.n	80024dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024ce:	4a05      	ldr	r2, [pc, #20]	; (80024e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024d0:	88fb      	ldrh	r3, [r7, #6]
 80024d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024d4:	88fb      	ldrh	r3, [r7, #6]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f000 f806 	bl	80024e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80024dc:	bf00      	nop
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40013c00 	.word	0x40013c00

080024e8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	4603      	mov	r3, r0
 80024f0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80024f2:	bf00      	nop
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
	...

08002500 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e12b      	b.n	800276a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d106      	bne.n	800252c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7fe ffa2 	bl	8001470 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2224      	movs	r2, #36	; 0x24
 8002530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 0201 	bic.w	r2, r2, #1
 8002542:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002552:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002562:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002564:	f002 fd5a 	bl	800501c <HAL_RCC_GetPCLK1Freq>
 8002568:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	4a81      	ldr	r2, [pc, #516]	; (8002774 <HAL_I2C_Init+0x274>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d807      	bhi.n	8002584 <HAL_I2C_Init+0x84>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	4a80      	ldr	r2, [pc, #512]	; (8002778 <HAL_I2C_Init+0x278>)
 8002578:	4293      	cmp	r3, r2
 800257a:	bf94      	ite	ls
 800257c:	2301      	movls	r3, #1
 800257e:	2300      	movhi	r3, #0
 8002580:	b2db      	uxtb	r3, r3
 8002582:	e006      	b.n	8002592 <HAL_I2C_Init+0x92>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	4a7d      	ldr	r2, [pc, #500]	; (800277c <HAL_I2C_Init+0x27c>)
 8002588:	4293      	cmp	r3, r2
 800258a:	bf94      	ite	ls
 800258c:	2301      	movls	r3, #1
 800258e:	2300      	movhi	r3, #0
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e0e7      	b.n	800276a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	4a78      	ldr	r2, [pc, #480]	; (8002780 <HAL_I2C_Init+0x280>)
 800259e:	fba2 2303 	umull	r2, r3, r2, r3
 80025a2:	0c9b      	lsrs	r3, r3, #18
 80025a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68ba      	ldr	r2, [r7, #8]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	4a6a      	ldr	r2, [pc, #424]	; (8002774 <HAL_I2C_Init+0x274>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d802      	bhi.n	80025d4 <HAL_I2C_Init+0xd4>
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	3301      	adds	r3, #1
 80025d2:	e009      	b.n	80025e8 <HAL_I2C_Init+0xe8>
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025da:	fb02 f303 	mul.w	r3, r2, r3
 80025de:	4a69      	ldr	r2, [pc, #420]	; (8002784 <HAL_I2C_Init+0x284>)
 80025e0:	fba2 2303 	umull	r2, r3, r2, r3
 80025e4:	099b      	lsrs	r3, r3, #6
 80025e6:	3301      	adds	r3, #1
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	6812      	ldr	r2, [r2, #0]
 80025ec:	430b      	orrs	r3, r1
 80025ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80025fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	495c      	ldr	r1, [pc, #368]	; (8002774 <HAL_I2C_Init+0x274>)
 8002604:	428b      	cmp	r3, r1
 8002606:	d819      	bhi.n	800263c <HAL_I2C_Init+0x13c>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	1e59      	subs	r1, r3, #1
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	fbb1 f3f3 	udiv	r3, r1, r3
 8002616:	1c59      	adds	r1, r3, #1
 8002618:	f640 73fc 	movw	r3, #4092	; 0xffc
 800261c:	400b      	ands	r3, r1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00a      	beq.n	8002638 <HAL_I2C_Init+0x138>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	1e59      	subs	r1, r3, #1
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002630:	3301      	adds	r3, #1
 8002632:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002636:	e051      	b.n	80026dc <HAL_I2C_Init+0x1dc>
 8002638:	2304      	movs	r3, #4
 800263a:	e04f      	b.n	80026dc <HAL_I2C_Init+0x1dc>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d111      	bne.n	8002668 <HAL_I2C_Init+0x168>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	1e58      	subs	r0, r3, #1
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6859      	ldr	r1, [r3, #4]
 800264c:	460b      	mov	r3, r1
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	440b      	add	r3, r1
 8002652:	fbb0 f3f3 	udiv	r3, r0, r3
 8002656:	3301      	adds	r3, #1
 8002658:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800265c:	2b00      	cmp	r3, #0
 800265e:	bf0c      	ite	eq
 8002660:	2301      	moveq	r3, #1
 8002662:	2300      	movne	r3, #0
 8002664:	b2db      	uxtb	r3, r3
 8002666:	e012      	b.n	800268e <HAL_I2C_Init+0x18e>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	1e58      	subs	r0, r3, #1
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6859      	ldr	r1, [r3, #4]
 8002670:	460b      	mov	r3, r1
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	440b      	add	r3, r1
 8002676:	0099      	lsls	r1, r3, #2
 8002678:	440b      	add	r3, r1
 800267a:	fbb0 f3f3 	udiv	r3, r0, r3
 800267e:	3301      	adds	r3, #1
 8002680:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002684:	2b00      	cmp	r3, #0
 8002686:	bf0c      	ite	eq
 8002688:	2301      	moveq	r3, #1
 800268a:	2300      	movne	r3, #0
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <HAL_I2C_Init+0x196>
 8002692:	2301      	movs	r3, #1
 8002694:	e022      	b.n	80026dc <HAL_I2C_Init+0x1dc>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10e      	bne.n	80026bc <HAL_I2C_Init+0x1bc>
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	1e58      	subs	r0, r3, #1
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6859      	ldr	r1, [r3, #4]
 80026a6:	460b      	mov	r3, r1
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	440b      	add	r3, r1
 80026ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80026b0:	3301      	adds	r3, #1
 80026b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026ba:	e00f      	b.n	80026dc <HAL_I2C_Init+0x1dc>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	1e58      	subs	r0, r3, #1
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6859      	ldr	r1, [r3, #4]
 80026c4:	460b      	mov	r3, r1
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	440b      	add	r3, r1
 80026ca:	0099      	lsls	r1, r3, #2
 80026cc:	440b      	add	r3, r1
 80026ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80026d2:	3301      	adds	r3, #1
 80026d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026dc:	6879      	ldr	r1, [r7, #4]
 80026de:	6809      	ldr	r1, [r1, #0]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	69da      	ldr	r2, [r3, #28]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	431a      	orrs	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	430a      	orrs	r2, r1
 80026fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800270a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	6911      	ldr	r1, [r2, #16]
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	68d2      	ldr	r2, [r2, #12]
 8002716:	4311      	orrs	r1, r2
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	6812      	ldr	r2, [r2, #0]
 800271c:	430b      	orrs	r3, r1
 800271e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	695a      	ldr	r2, [r3, #20]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	431a      	orrs	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	430a      	orrs	r2, r1
 800273a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f042 0201 	orr.w	r2, r2, #1
 800274a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2220      	movs	r2, #32
 8002756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	000186a0 	.word	0x000186a0
 8002778:	001e847f 	.word	0x001e847f
 800277c:	003d08ff 	.word	0x003d08ff
 8002780:	431bde83 	.word	0x431bde83
 8002784:	10624dd3 	.word	0x10624dd3

08002788 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b088      	sub	sp, #32
 800278c:	af02      	add	r7, sp, #8
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	4608      	mov	r0, r1
 8002792:	4611      	mov	r1, r2
 8002794:	461a      	mov	r2, r3
 8002796:	4603      	mov	r3, r0
 8002798:	817b      	strh	r3, [r7, #10]
 800279a:	460b      	mov	r3, r1
 800279c:	813b      	strh	r3, [r7, #8]
 800279e:	4613      	mov	r3, r2
 80027a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027a2:	f7ff fb17 	bl	8001dd4 <HAL_GetTick>
 80027a6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b20      	cmp	r3, #32
 80027b2:	f040 80d9 	bne.w	8002968 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	9300      	str	r3, [sp, #0]
 80027ba:	2319      	movs	r3, #25
 80027bc:	2201      	movs	r2, #1
 80027be:	496d      	ldr	r1, [pc, #436]	; (8002974 <HAL_I2C_Mem_Write+0x1ec>)
 80027c0:	68f8      	ldr	r0, [r7, #12]
 80027c2:	f000 fc7f 	bl	80030c4 <I2C_WaitOnFlagUntilTimeout>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80027cc:	2302      	movs	r3, #2
 80027ce:	e0cc      	b.n	800296a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d101      	bne.n	80027de <HAL_I2C_Mem_Write+0x56>
 80027da:	2302      	movs	r3, #2
 80027dc:	e0c5      	b.n	800296a <HAL_I2C_Mem_Write+0x1e2>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d007      	beq.n	8002804 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f042 0201 	orr.w	r2, r2, #1
 8002802:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002812:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2221      	movs	r2, #33	; 0x21
 8002818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2240      	movs	r2, #64	; 0x40
 8002820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6a3a      	ldr	r2, [r7, #32]
 800282e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002834:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800283a:	b29a      	uxth	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	4a4d      	ldr	r2, [pc, #308]	; (8002978 <HAL_I2C_Mem_Write+0x1f0>)
 8002844:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002846:	88f8      	ldrh	r0, [r7, #6]
 8002848:	893a      	ldrh	r2, [r7, #8]
 800284a:	8979      	ldrh	r1, [r7, #10]
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	9301      	str	r3, [sp, #4]
 8002850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002852:	9300      	str	r3, [sp, #0]
 8002854:	4603      	mov	r3, r0
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f000 fab6 	bl	8002dc8 <I2C_RequestMemoryWrite>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d052      	beq.n	8002908 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e081      	b.n	800296a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f000 fd00 	bl	8003270 <I2C_WaitOnTXEFlagUntilTimeout>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00d      	beq.n	8002892 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	2b04      	cmp	r3, #4
 800287c:	d107      	bne.n	800288e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800288c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e06b      	b.n	800296a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002896:	781a      	ldrb	r2, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a2:	1c5a      	adds	r2, r3, #1
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ac:	3b01      	subs	r3, #1
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	3b01      	subs	r3, #1
 80028bc:	b29a      	uxth	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	2b04      	cmp	r3, #4
 80028ce:	d11b      	bne.n	8002908 <HAL_I2C_Mem_Write+0x180>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d017      	beq.n	8002908 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028dc:	781a      	ldrb	r2, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e8:	1c5a      	adds	r2, r3, #1
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f2:	3b01      	subs	r3, #1
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028fe:	b29b      	uxth	r3, r3
 8002900:	3b01      	subs	r3, #1
 8002902:	b29a      	uxth	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800290c:	2b00      	cmp	r3, #0
 800290e:	d1aa      	bne.n	8002866 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002914:	68f8      	ldr	r0, [r7, #12]
 8002916:	f000 fcec 	bl	80032f2 <I2C_WaitOnBTFFlagUntilTimeout>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00d      	beq.n	800293c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	2b04      	cmp	r3, #4
 8002926:	d107      	bne.n	8002938 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002936:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e016      	b.n	800296a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800294a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2220      	movs	r2, #32
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002964:	2300      	movs	r3, #0
 8002966:	e000      	b.n	800296a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002968:	2302      	movs	r3, #2
  }
}
 800296a:	4618      	mov	r0, r3
 800296c:	3718      	adds	r7, #24
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	00100002 	.word	0x00100002
 8002978:	ffff0000 	.word	0xffff0000

0800297c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b08c      	sub	sp, #48	; 0x30
 8002980:	af02      	add	r7, sp, #8
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	4608      	mov	r0, r1
 8002986:	4611      	mov	r1, r2
 8002988:	461a      	mov	r2, r3
 800298a:	4603      	mov	r3, r0
 800298c:	817b      	strh	r3, [r7, #10]
 800298e:	460b      	mov	r3, r1
 8002990:	813b      	strh	r3, [r7, #8]
 8002992:	4613      	mov	r3, r2
 8002994:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002996:	f7ff fa1d 	bl	8001dd4 <HAL_GetTick>
 800299a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b20      	cmp	r3, #32
 80029a6:	f040 8208 	bne.w	8002dba <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	2319      	movs	r3, #25
 80029b0:	2201      	movs	r2, #1
 80029b2:	497b      	ldr	r1, [pc, #492]	; (8002ba0 <HAL_I2C_Mem_Read+0x224>)
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f000 fb85 	bl	80030c4 <I2C_WaitOnFlagUntilTimeout>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80029c0:	2302      	movs	r3, #2
 80029c2:	e1fb      	b.n	8002dbc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d101      	bne.n	80029d2 <HAL_I2C_Mem_Read+0x56>
 80029ce:	2302      	movs	r3, #2
 80029d0:	e1f4      	b.n	8002dbc <HAL_I2C_Mem_Read+0x440>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0301 	and.w	r3, r3, #1
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d007      	beq.n	80029f8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f042 0201 	orr.w	r2, r2, #1
 80029f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2222      	movs	r2, #34	; 0x22
 8002a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2240      	movs	r2, #64	; 0x40
 8002a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002a28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	4a5b      	ldr	r2, [pc, #364]	; (8002ba4 <HAL_I2C_Mem_Read+0x228>)
 8002a38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a3a:	88f8      	ldrh	r0, [r7, #6]
 8002a3c:	893a      	ldrh	r2, [r7, #8]
 8002a3e:	8979      	ldrh	r1, [r7, #10]
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	9301      	str	r3, [sp, #4]
 8002a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	4603      	mov	r3, r0
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f000 fa52 	bl	8002ef4 <I2C_RequestMemoryRead>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e1b0      	b.n	8002dbc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d113      	bne.n	8002a8a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a62:	2300      	movs	r3, #0
 8002a64:	623b      	str	r3, [r7, #32]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	623b      	str	r3, [r7, #32]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	623b      	str	r3, [r7, #32]
 8002a76:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	e184      	b.n	8002d94 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d11b      	bne.n	8002aca <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aa0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	61fb      	str	r3, [r7, #28]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	61fb      	str	r3, [r7, #28]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	61fb      	str	r3, [r7, #28]
 8002ab6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	e164      	b.n	8002d94 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d11b      	bne.n	8002b0a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ae0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002af0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002af2:	2300      	movs	r3, #0
 8002af4:	61bb      	str	r3, [r7, #24]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	61bb      	str	r3, [r7, #24]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	61bb      	str	r3, [r7, #24]
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	e144      	b.n	8002d94 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	617b      	str	r3, [r7, #20]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	617b      	str	r3, [r7, #20]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	617b      	str	r3, [r7, #20]
 8002b1e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002b20:	e138      	b.n	8002d94 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b26:	2b03      	cmp	r3, #3
 8002b28:	f200 80f1 	bhi.w	8002d0e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d123      	bne.n	8002b7c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f000 fc1b 	bl	8003374 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e139      	b.n	8002dbc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	691a      	ldr	r2, [r3, #16]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b52:	b2d2      	uxtb	r2, r2
 8002b54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5a:	1c5a      	adds	r2, r3, #1
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b64:	3b01      	subs	r3, #1
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	3b01      	subs	r3, #1
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b7a:	e10b      	b.n	8002d94 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d14e      	bne.n	8002c22 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	4906      	ldr	r1, [pc, #24]	; (8002ba8 <HAL_I2C_Mem_Read+0x22c>)
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f000 fa98 	bl	80030c4 <I2C_WaitOnFlagUntilTimeout>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d008      	beq.n	8002bac <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e10e      	b.n	8002dbc <HAL_I2C_Mem_Read+0x440>
 8002b9e:	bf00      	nop
 8002ba0:	00100002 	.word	0x00100002
 8002ba4:	ffff0000 	.word	0xffff0000
 8002ba8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	691a      	ldr	r2, [r3, #16]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc6:	b2d2      	uxtb	r2, r2
 8002bc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bce:	1c5a      	adds	r2, r3, #1
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	3b01      	subs	r3, #1
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	691a      	ldr	r2, [r3, #16]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf8:	b2d2      	uxtb	r2, r2
 8002bfa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c00:	1c5a      	adds	r2, r3, #1
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c20:	e0b8      	b.n	8002d94 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c24:	9300      	str	r3, [sp, #0]
 8002c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c28:	2200      	movs	r2, #0
 8002c2a:	4966      	ldr	r1, [pc, #408]	; (8002dc4 <HAL_I2C_Mem_Read+0x448>)
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	f000 fa49 	bl	80030c4 <I2C_WaitOnFlagUntilTimeout>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e0bf      	b.n	8002dbc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	691a      	ldr	r2, [r3, #16]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5e:	1c5a      	adds	r2, r3, #1
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	3b01      	subs	r3, #1
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c80:	9300      	str	r3, [sp, #0]
 8002c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c84:	2200      	movs	r2, #0
 8002c86:	494f      	ldr	r1, [pc, #316]	; (8002dc4 <HAL_I2C_Mem_Read+0x448>)
 8002c88:	68f8      	ldr	r0, [r7, #12]
 8002c8a:	f000 fa1b 	bl	80030c4 <I2C_WaitOnFlagUntilTimeout>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e091      	b.n	8002dbc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ca6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	691a      	ldr	r2, [r3, #16]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb2:	b2d2      	uxtb	r2, r2
 8002cb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cba:	1c5a      	adds	r2, r3, #1
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	691a      	ldr	r2, [r3, #16]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce4:	b2d2      	uxtb	r2, r2
 8002ce6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cec:	1c5a      	adds	r2, r3, #1
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	3b01      	subs	r3, #1
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d0c:	e042      	b.n	8002d94 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d10:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f000 fb2e 	bl	8003374 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e04c      	b.n	8002dbc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	691a      	ldr	r2, [r3, #16]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2c:	b2d2      	uxtb	r2, r2
 8002d2e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d34:	1c5a      	adds	r2, r3, #1
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	f003 0304 	and.w	r3, r3, #4
 8002d5e:	2b04      	cmp	r3, #4
 8002d60:	d118      	bne.n	8002d94 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	691a      	ldr	r2, [r3, #16]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6c:	b2d2      	uxtb	r2, r2
 8002d6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d74:	1c5a      	adds	r2, r3, #1
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f47f aec2 	bne.w	8002b22 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2220      	movs	r2, #32
 8002da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002db6:	2300      	movs	r3, #0
 8002db8:	e000      	b.n	8002dbc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002dba:	2302      	movs	r3, #2
  }
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3728      	adds	r7, #40	; 0x28
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	00010004 	.word	0x00010004

08002dc8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b088      	sub	sp, #32
 8002dcc:	af02      	add	r7, sp, #8
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	4608      	mov	r0, r1
 8002dd2:	4611      	mov	r1, r2
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	817b      	strh	r3, [r7, #10]
 8002dda:	460b      	mov	r3, r1
 8002ddc:	813b      	strh	r3, [r7, #8]
 8002dde:	4613      	mov	r3, r2
 8002de0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002df0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	9300      	str	r3, [sp, #0]
 8002df6:	6a3b      	ldr	r3, [r7, #32]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 f960 	bl	80030c4 <I2C_WaitOnFlagUntilTimeout>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00d      	beq.n	8002e26 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e18:	d103      	bne.n	8002e22 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e20:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e05f      	b.n	8002ee6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e26:	897b      	ldrh	r3, [r7, #10]
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e34:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e38:	6a3a      	ldr	r2, [r7, #32]
 8002e3a:	492d      	ldr	r1, [pc, #180]	; (8002ef0 <I2C_RequestMemoryWrite+0x128>)
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f000 f998 	bl	8003172 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e04c      	b.n	8002ee6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	617b      	str	r3, [r7, #20]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	617b      	str	r3, [r7, #20]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	617b      	str	r3, [r7, #20]
 8002e60:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e64:	6a39      	ldr	r1, [r7, #32]
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f000 fa02 	bl	8003270 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00d      	beq.n	8002e8e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	2b04      	cmp	r3, #4
 8002e78:	d107      	bne.n	8002e8a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e88:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e02b      	b.n	8002ee6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e8e:	88fb      	ldrh	r3, [r7, #6]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d105      	bne.n	8002ea0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e94:	893b      	ldrh	r3, [r7, #8]
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	611a      	str	r2, [r3, #16]
 8002e9e:	e021      	b.n	8002ee4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ea0:	893b      	ldrh	r3, [r7, #8]
 8002ea2:	0a1b      	lsrs	r3, r3, #8
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	b2da      	uxtb	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eb0:	6a39      	ldr	r1, [r7, #32]
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f000 f9dc 	bl	8003270 <I2C_WaitOnTXEFlagUntilTimeout>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00d      	beq.n	8002eda <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	2b04      	cmp	r3, #4
 8002ec4:	d107      	bne.n	8002ed6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ed4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e005      	b.n	8002ee6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002eda:	893b      	ldrh	r3, [r7, #8]
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3718      	adds	r7, #24
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	00010002 	.word	0x00010002

08002ef4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b088      	sub	sp, #32
 8002ef8:	af02      	add	r7, sp, #8
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	4608      	mov	r0, r1
 8002efe:	4611      	mov	r1, r2
 8002f00:	461a      	mov	r2, r3
 8002f02:	4603      	mov	r3, r0
 8002f04:	817b      	strh	r3, [r7, #10]
 8002f06:	460b      	mov	r3, r1
 8002f08:	813b      	strh	r3, [r7, #8]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f1c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f2c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f30:	9300      	str	r3, [sp, #0]
 8002f32:	6a3b      	ldr	r3, [r7, #32]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f000 f8c2 	bl	80030c4 <I2C_WaitOnFlagUntilTimeout>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00d      	beq.n	8002f62 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f54:	d103      	bne.n	8002f5e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f5c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e0aa      	b.n	80030b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f62:	897b      	ldrh	r3, [r7, #10]
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	461a      	mov	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f70:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f74:	6a3a      	ldr	r2, [r7, #32]
 8002f76:	4952      	ldr	r1, [pc, #328]	; (80030c0 <I2C_RequestMemoryRead+0x1cc>)
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f000 f8fa 	bl	8003172 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e097      	b.n	80030b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f88:	2300      	movs	r3, #0
 8002f8a:	617b      	str	r3, [r7, #20]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	617b      	str	r3, [r7, #20]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	617b      	str	r3, [r7, #20]
 8002f9c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa0:	6a39      	ldr	r1, [r7, #32]
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f000 f964 	bl	8003270 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00d      	beq.n	8002fca <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	d107      	bne.n	8002fc6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fc4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e076      	b.n	80030b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002fca:	88fb      	ldrh	r3, [r7, #6]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d105      	bne.n	8002fdc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fd0:	893b      	ldrh	r3, [r7, #8]
 8002fd2:	b2da      	uxtb	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	611a      	str	r2, [r3, #16]
 8002fda:	e021      	b.n	8003020 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002fdc:	893b      	ldrh	r3, [r7, #8]
 8002fde:	0a1b      	lsrs	r3, r3, #8
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	b2da      	uxtb	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fec:	6a39      	ldr	r1, [r7, #32]
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f000 f93e 	bl	8003270 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00d      	beq.n	8003016 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	2b04      	cmp	r3, #4
 8003000:	d107      	bne.n	8003012 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003010:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e050      	b.n	80030b8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003016:	893b      	ldrh	r3, [r7, #8]
 8003018:	b2da      	uxtb	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003022:	6a39      	ldr	r1, [r7, #32]
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f000 f923 	bl	8003270 <I2C_WaitOnTXEFlagUntilTimeout>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00d      	beq.n	800304c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003034:	2b04      	cmp	r3, #4
 8003036:	d107      	bne.n	8003048 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003046:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e035      	b.n	80030b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800305a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800305c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305e:	9300      	str	r3, [sp, #0]
 8003060:	6a3b      	ldr	r3, [r7, #32]
 8003062:	2200      	movs	r2, #0
 8003064:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f000 f82b 	bl	80030c4 <I2C_WaitOnFlagUntilTimeout>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00d      	beq.n	8003090 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800307e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003082:	d103      	bne.n	800308c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f44f 7200 	mov.w	r2, #512	; 0x200
 800308a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e013      	b.n	80030b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003090:	897b      	ldrh	r3, [r7, #10]
 8003092:	b2db      	uxtb	r3, r3
 8003094:	f043 0301 	orr.w	r3, r3, #1
 8003098:	b2da      	uxtb	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a2:	6a3a      	ldr	r2, [r7, #32]
 80030a4:	4906      	ldr	r1, [pc, #24]	; (80030c0 <I2C_RequestMemoryRead+0x1cc>)
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f000 f863 	bl	8003172 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e000      	b.n	80030b8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3718      	adds	r7, #24
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	00010002 	.word	0x00010002

080030c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	603b      	str	r3, [r7, #0]
 80030d0:	4613      	mov	r3, r2
 80030d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030d4:	e025      	b.n	8003122 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030dc:	d021      	beq.n	8003122 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030de:	f7fe fe79 	bl	8001dd4 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d302      	bcc.n	80030f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d116      	bne.n	8003122 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2220      	movs	r2, #32
 80030fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	f043 0220 	orr.w	r2, r3, #32
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e023      	b.n	800316a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	0c1b      	lsrs	r3, r3, #16
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2b01      	cmp	r3, #1
 800312a:	d10d      	bne.n	8003148 <I2C_WaitOnFlagUntilTimeout+0x84>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	43da      	mvns	r2, r3
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	4013      	ands	r3, r2
 8003138:	b29b      	uxth	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	bf0c      	ite	eq
 800313e:	2301      	moveq	r3, #1
 8003140:	2300      	movne	r3, #0
 8003142:	b2db      	uxtb	r3, r3
 8003144:	461a      	mov	r2, r3
 8003146:	e00c      	b.n	8003162 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	43da      	mvns	r2, r3
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	4013      	ands	r3, r2
 8003154:	b29b      	uxth	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	bf0c      	ite	eq
 800315a:	2301      	moveq	r3, #1
 800315c:	2300      	movne	r3, #0
 800315e:	b2db      	uxtb	r3, r3
 8003160:	461a      	mov	r2, r3
 8003162:	79fb      	ldrb	r3, [r7, #7]
 8003164:	429a      	cmp	r2, r3
 8003166:	d0b6      	beq.n	80030d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b084      	sub	sp, #16
 8003176:	af00      	add	r7, sp, #0
 8003178:	60f8      	str	r0, [r7, #12]
 800317a:	60b9      	str	r1, [r7, #8]
 800317c:	607a      	str	r2, [r7, #4]
 800317e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003180:	e051      	b.n	8003226 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800318c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003190:	d123      	bne.n	80031da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031a0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031aa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2220      	movs	r2, #32
 80031b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	f043 0204 	orr.w	r2, r3, #4
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e046      	b.n	8003268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e0:	d021      	beq.n	8003226 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031e2:	f7fe fdf7 	bl	8001dd4 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d302      	bcc.n	80031f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d116      	bne.n	8003226 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2220      	movs	r2, #32
 8003202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	f043 0220 	orr.w	r2, r3, #32
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e020      	b.n	8003268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	0c1b      	lsrs	r3, r3, #16
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b01      	cmp	r3, #1
 800322e:	d10c      	bne.n	800324a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	43da      	mvns	r2, r3
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	4013      	ands	r3, r2
 800323c:	b29b      	uxth	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	bf14      	ite	ne
 8003242:	2301      	movne	r3, #1
 8003244:	2300      	moveq	r3, #0
 8003246:	b2db      	uxtb	r3, r3
 8003248:	e00b      	b.n	8003262 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	43da      	mvns	r2, r3
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	4013      	ands	r3, r2
 8003256:	b29b      	uxth	r3, r3
 8003258:	2b00      	cmp	r3, #0
 800325a:	bf14      	ite	ne
 800325c:	2301      	movne	r3, #1
 800325e:	2300      	moveq	r3, #0
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d18d      	bne.n	8003182 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800327c:	e02d      	b.n	80032da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f000 f8ce 	bl	8003420 <I2C_IsAcknowledgeFailed>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e02d      	b.n	80032ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003294:	d021      	beq.n	80032da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003296:	f7fe fd9d 	bl	8001dd4 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	68ba      	ldr	r2, [r7, #8]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d302      	bcc.n	80032ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d116      	bne.n	80032da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2220      	movs	r2, #32
 80032b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	f043 0220 	orr.w	r2, r3, #32
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e007      	b.n	80032ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e4:	2b80      	cmp	r3, #128	; 0x80
 80032e6:	d1ca      	bne.n	800327e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3710      	adds	r7, #16
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b084      	sub	sp, #16
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	60f8      	str	r0, [r7, #12]
 80032fa:	60b9      	str	r1, [r7, #8]
 80032fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032fe:	e02d      	b.n	800335c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	f000 f88d 	bl	8003420 <I2C_IsAcknowledgeFailed>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e02d      	b.n	800336c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003316:	d021      	beq.n	800335c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003318:	f7fe fd5c 	bl	8001dd4 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	68ba      	ldr	r2, [r7, #8]
 8003324:	429a      	cmp	r2, r3
 8003326:	d302      	bcc.n	800332e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d116      	bne.n	800335c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2220      	movs	r2, #32
 8003338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003348:	f043 0220 	orr.w	r2, r3, #32
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e007      	b.n	800336c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	f003 0304 	and.w	r3, r3, #4
 8003366:	2b04      	cmp	r3, #4
 8003368:	d1ca      	bne.n	8003300 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003380:	e042      	b.n	8003408 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	f003 0310 	and.w	r3, r3, #16
 800338c:	2b10      	cmp	r3, #16
 800338e:	d119      	bne.n	80033c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f06f 0210 	mvn.w	r2, #16
 8003398:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2220      	movs	r2, #32
 80033a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e029      	b.n	8003418 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033c4:	f7fe fd06 	bl	8001dd4 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	68ba      	ldr	r2, [r7, #8]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d302      	bcc.n	80033da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d116      	bne.n	8003408 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2220      	movs	r2, #32
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f4:	f043 0220 	orr.w	r2, r3, #32
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e007      	b.n	8003418 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003412:	2b40      	cmp	r3, #64	; 0x40
 8003414:	d1b5      	bne.n	8003382 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003432:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003436:	d11b      	bne.n	8003470 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003440:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2220      	movs	r2, #32
 800344c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345c:	f043 0204 	orr.w	r2, r3, #4
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e000      	b.n	8003472 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr

0800347e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800347e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003480:	b08f      	sub	sp, #60	; 0x3c
 8003482:	af0a      	add	r7, sp, #40	; 0x28
 8003484:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d101      	bne.n	8003490 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e10f      	b.n	80036b0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d106      	bne.n	80034b0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f005 fede 	bl	800926c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2203      	movs	r2, #3
 80034b4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d102      	bne.n	80034ca <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f002 fdd1 	bl	8006076 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	603b      	str	r3, [r7, #0]
 80034da:	687e      	ldr	r6, [r7, #4]
 80034dc:	466d      	mov	r5, sp
 80034de:	f106 0410 	add.w	r4, r6, #16
 80034e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80034ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80034f2:	1d33      	adds	r3, r6, #4
 80034f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034f6:	6838      	ldr	r0, [r7, #0]
 80034f8:	f002 fca8 	bl	8005e4c <USB_CoreInit>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d005      	beq.n	800350e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2202      	movs	r2, #2
 8003506:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e0d0      	b.n	80036b0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2100      	movs	r1, #0
 8003514:	4618      	mov	r0, r3
 8003516:	f002 fdbf 	bl	8006098 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800351a:	2300      	movs	r3, #0
 800351c:	73fb      	strb	r3, [r7, #15]
 800351e:	e04a      	b.n	80035b6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003520:	7bfa      	ldrb	r2, [r7, #15]
 8003522:	6879      	ldr	r1, [r7, #4]
 8003524:	4613      	mov	r3, r2
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	1a9b      	subs	r3, r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	440b      	add	r3, r1
 800352e:	333d      	adds	r3, #61	; 0x3d
 8003530:	2201      	movs	r2, #1
 8003532:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003534:	7bfa      	ldrb	r2, [r7, #15]
 8003536:	6879      	ldr	r1, [r7, #4]
 8003538:	4613      	mov	r3, r2
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	1a9b      	subs	r3, r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	440b      	add	r3, r1
 8003542:	333c      	adds	r3, #60	; 0x3c
 8003544:	7bfa      	ldrb	r2, [r7, #15]
 8003546:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003548:	7bfa      	ldrb	r2, [r7, #15]
 800354a:	7bfb      	ldrb	r3, [r7, #15]
 800354c:	b298      	uxth	r0, r3
 800354e:	6879      	ldr	r1, [r7, #4]
 8003550:	4613      	mov	r3, r2
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	1a9b      	subs	r3, r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	440b      	add	r3, r1
 800355a:	3342      	adds	r3, #66	; 0x42
 800355c:	4602      	mov	r2, r0
 800355e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003560:	7bfa      	ldrb	r2, [r7, #15]
 8003562:	6879      	ldr	r1, [r7, #4]
 8003564:	4613      	mov	r3, r2
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	1a9b      	subs	r3, r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	440b      	add	r3, r1
 800356e:	333f      	adds	r3, #63	; 0x3f
 8003570:	2200      	movs	r2, #0
 8003572:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003574:	7bfa      	ldrb	r2, [r7, #15]
 8003576:	6879      	ldr	r1, [r7, #4]
 8003578:	4613      	mov	r3, r2
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	1a9b      	subs	r3, r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	440b      	add	r3, r1
 8003582:	3344      	adds	r3, #68	; 0x44
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003588:	7bfa      	ldrb	r2, [r7, #15]
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	4613      	mov	r3, r2
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	1a9b      	subs	r3, r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	440b      	add	r3, r1
 8003596:	3348      	adds	r3, #72	; 0x48
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800359c:	7bfa      	ldrb	r2, [r7, #15]
 800359e:	6879      	ldr	r1, [r7, #4]
 80035a0:	4613      	mov	r3, r2
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	1a9b      	subs	r3, r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	440b      	add	r3, r1
 80035aa:	3350      	adds	r3, #80	; 0x50
 80035ac:	2200      	movs	r2, #0
 80035ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035b0:	7bfb      	ldrb	r3, [r7, #15]
 80035b2:	3301      	adds	r3, #1
 80035b4:	73fb      	strb	r3, [r7, #15]
 80035b6:	7bfa      	ldrb	r2, [r7, #15]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d3af      	bcc.n	8003520 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035c0:	2300      	movs	r3, #0
 80035c2:	73fb      	strb	r3, [r7, #15]
 80035c4:	e044      	b.n	8003650 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80035c6:	7bfa      	ldrb	r2, [r7, #15]
 80035c8:	6879      	ldr	r1, [r7, #4]
 80035ca:	4613      	mov	r3, r2
 80035cc:	00db      	lsls	r3, r3, #3
 80035ce:	1a9b      	subs	r3, r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	440b      	add	r3, r1
 80035d4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80035d8:	2200      	movs	r2, #0
 80035da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80035dc:	7bfa      	ldrb	r2, [r7, #15]
 80035de:	6879      	ldr	r1, [r7, #4]
 80035e0:	4613      	mov	r3, r2
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	1a9b      	subs	r3, r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	440b      	add	r3, r1
 80035ea:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80035ee:	7bfa      	ldrb	r2, [r7, #15]
 80035f0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035f2:	7bfa      	ldrb	r2, [r7, #15]
 80035f4:	6879      	ldr	r1, [r7, #4]
 80035f6:	4613      	mov	r3, r2
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	1a9b      	subs	r3, r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	440b      	add	r3, r1
 8003600:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003604:	2200      	movs	r2, #0
 8003606:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003608:	7bfa      	ldrb	r2, [r7, #15]
 800360a:	6879      	ldr	r1, [r7, #4]
 800360c:	4613      	mov	r3, r2
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	1a9b      	subs	r3, r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	440b      	add	r3, r1
 8003616:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800361a:	2200      	movs	r2, #0
 800361c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800361e:	7bfa      	ldrb	r2, [r7, #15]
 8003620:	6879      	ldr	r1, [r7, #4]
 8003622:	4613      	mov	r3, r2
 8003624:	00db      	lsls	r3, r3, #3
 8003626:	1a9b      	subs	r3, r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	440b      	add	r3, r1
 800362c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003630:	2200      	movs	r2, #0
 8003632:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003634:	7bfa      	ldrb	r2, [r7, #15]
 8003636:	6879      	ldr	r1, [r7, #4]
 8003638:	4613      	mov	r3, r2
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	1a9b      	subs	r3, r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	440b      	add	r3, r1
 8003642:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003646:	2200      	movs	r2, #0
 8003648:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800364a:	7bfb      	ldrb	r3, [r7, #15]
 800364c:	3301      	adds	r3, #1
 800364e:	73fb      	strb	r3, [r7, #15]
 8003650:	7bfa      	ldrb	r2, [r7, #15]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	429a      	cmp	r2, r3
 8003658:	d3b5      	bcc.n	80035c6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	603b      	str	r3, [r7, #0]
 8003660:	687e      	ldr	r6, [r7, #4]
 8003662:	466d      	mov	r5, sp
 8003664:	f106 0410 	add.w	r4, r6, #16
 8003668:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800366a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800366c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800366e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003670:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003674:	e885 0003 	stmia.w	r5, {r0, r1}
 8003678:	1d33      	adds	r3, r6, #4
 800367a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800367c:	6838      	ldr	r0, [r7, #0]
 800367e:	f002 fd57 	bl	8006130 <USB_DevInit>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d005      	beq.n	8003694 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2202      	movs	r2, #2
 800368c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e00d      	b.n	80036b0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f003 fdd3 	bl	8007254 <USB_DevDisconnect>

  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3714      	adds	r7, #20
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036b8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d101      	bne.n	80036d4 <HAL_PCD_Start+0x1c>
 80036d0:	2302      	movs	r3, #2
 80036d2:	e020      	b.n	8003716 <HAL_PCD_Start+0x5e>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d109      	bne.n	80036f8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d005      	beq.n	80036f8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f002 fca9 	bl	8006054 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4618      	mov	r0, r3
 8003708:	f003 fd83 	bl	8007212 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800371e:	b590      	push	{r4, r7, lr}
 8003720:	b08d      	sub	sp, #52	; 0x34
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800372c:	6a3b      	ldr	r3, [r7, #32]
 800372e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4618      	mov	r0, r3
 8003736:	f003 fe41 	bl	80073bc <USB_GetMode>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	f040 839d 	bne.w	8003e7c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4618      	mov	r0, r3
 8003748:	f003 fda5 	bl	8007296 <USB_ReadInterrupts>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	f000 8393 	beq.w	8003e7a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4618      	mov	r0, r3
 800375a:	f003 fd9c 	bl	8007296 <USB_ReadInterrupts>
 800375e:	4603      	mov	r3, r0
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b02      	cmp	r3, #2
 8003766:	d107      	bne.n	8003778 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	695a      	ldr	r2, [r3, #20]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f002 0202 	and.w	r2, r2, #2
 8003776:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4618      	mov	r0, r3
 800377e:	f003 fd8a 	bl	8007296 <USB_ReadInterrupts>
 8003782:	4603      	mov	r3, r0
 8003784:	f003 0310 	and.w	r3, r3, #16
 8003788:	2b10      	cmp	r3, #16
 800378a:	d161      	bne.n	8003850 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	699a      	ldr	r2, [r3, #24]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 0210 	bic.w	r2, r2, #16
 800379a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800379c:	6a3b      	ldr	r3, [r7, #32]
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	f003 020f 	and.w	r2, r3, #15
 80037a8:	4613      	mov	r3, r2
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	1a9b      	subs	r3, r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	4413      	add	r3, r2
 80037b8:	3304      	adds	r3, #4
 80037ba:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	0c5b      	lsrs	r3, r3, #17
 80037c0:	f003 030f 	and.w	r3, r3, #15
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d124      	bne.n	8003812 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80037ce:	4013      	ands	r3, r2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d035      	beq.n	8003840 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	091b      	lsrs	r3, r3, #4
 80037dc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80037de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	461a      	mov	r2, r3
 80037e6:	6a38      	ldr	r0, [r7, #32]
 80037e8:	f003 fbc1 	bl	8006f6e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	68da      	ldr	r2, [r3, #12]
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	091b      	lsrs	r3, r3, #4
 80037f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037f8:	441a      	add	r2, r3
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	699a      	ldr	r2, [r3, #24]
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	091b      	lsrs	r3, r3, #4
 8003806:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800380a:	441a      	add	r2, r3
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	619a      	str	r2, [r3, #24]
 8003810:	e016      	b.n	8003840 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	0c5b      	lsrs	r3, r3, #17
 8003816:	f003 030f 	and.w	r3, r3, #15
 800381a:	2b06      	cmp	r3, #6
 800381c:	d110      	bne.n	8003840 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003824:	2208      	movs	r2, #8
 8003826:	4619      	mov	r1, r3
 8003828:	6a38      	ldr	r0, [r7, #32]
 800382a:	f003 fba0 	bl	8006f6e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	699a      	ldr	r2, [r3, #24]
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	091b      	lsrs	r3, r3, #4
 8003836:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800383a:	441a      	add	r2, r3
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	699a      	ldr	r2, [r3, #24]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f042 0210 	orr.w	r2, r2, #16
 800384e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4618      	mov	r0, r3
 8003856:	f003 fd1e 	bl	8007296 <USB_ReadInterrupts>
 800385a:	4603      	mov	r3, r0
 800385c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003860:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003864:	d16e      	bne.n	8003944 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003866:	2300      	movs	r3, #0
 8003868:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4618      	mov	r0, r3
 8003870:	f003 fd24 	bl	80072bc <USB_ReadDevAllOutEpInterrupt>
 8003874:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003876:	e062      	b.n	800393e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b00      	cmp	r3, #0
 8003880:	d057      	beq.n	8003932 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003888:	b2d2      	uxtb	r2, r2
 800388a:	4611      	mov	r1, r2
 800388c:	4618      	mov	r0, r3
 800388e:	f003 fd49 	bl	8007324 <USB_ReadDevOutEPInterrupt>
 8003892:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00c      	beq.n	80038b8 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800389e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a0:	015a      	lsls	r2, r3, #5
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	4413      	add	r3, r2
 80038a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038aa:	461a      	mov	r2, r3
 80038ac:	2301      	movs	r3, #1
 80038ae:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80038b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 fdb0 	bl	8004418 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	f003 0308 	and.w	r3, r3, #8
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00c      	beq.n	80038dc <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80038c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c4:	015a      	lsls	r2, r3, #5
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	4413      	add	r3, r2
 80038ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ce:	461a      	mov	r2, r3
 80038d0:	2308      	movs	r3, #8
 80038d2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80038d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 feaa 	bl	8004630 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	f003 0310 	and.w	r3, r3, #16
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d008      	beq.n	80038f8 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	015a      	lsls	r2, r3, #5
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	4413      	add	r3, r2
 80038ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038f2:	461a      	mov	r2, r3
 80038f4:	2310      	movs	r3, #16
 80038f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	f003 0320 	and.w	r3, r3, #32
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d008      	beq.n	8003914 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003904:	015a      	lsls	r2, r3, #5
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	4413      	add	r3, r2
 800390a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800390e:	461a      	mov	r2, r3
 8003910:	2320      	movs	r3, #32
 8003912:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d009      	beq.n	8003932 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800391e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003920:	015a      	lsls	r2, r3, #5
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	4413      	add	r3, r2
 8003926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800392a:	461a      	mov	r2, r3
 800392c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003930:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003934:	3301      	adds	r3, #1
 8003936:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393a:	085b      	lsrs	r3, r3, #1
 800393c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800393e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003940:	2b00      	cmp	r3, #0
 8003942:	d199      	bne.n	8003878 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4618      	mov	r0, r3
 800394a:	f003 fca4 	bl	8007296 <USB_ReadInterrupts>
 800394e:	4603      	mov	r3, r0
 8003950:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003954:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003958:	f040 80c0 	bne.w	8003adc <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4618      	mov	r0, r3
 8003962:	f003 fcc5 	bl	80072f0 <USB_ReadDevAllInEpInterrupt>
 8003966:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003968:	2300      	movs	r3, #0
 800396a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800396c:	e0b2      	b.n	8003ad4 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800396e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b00      	cmp	r3, #0
 8003976:	f000 80a7 	beq.w	8003ac8 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003980:	b2d2      	uxtb	r2, r2
 8003982:	4611      	mov	r1, r2
 8003984:	4618      	mov	r0, r3
 8003986:	f003 fceb 	bl	8007360 <USB_ReadDevInEPInterrupt>
 800398a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	2b00      	cmp	r3, #0
 8003994:	d057      	beq.n	8003a46 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003998:	f003 030f 	and.w	r3, r3, #15
 800399c:	2201      	movs	r2, #1
 800399e:	fa02 f303 	lsl.w	r3, r2, r3
 80039a2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	43db      	mvns	r3, r3
 80039b0:	69f9      	ldr	r1, [r7, #28]
 80039b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039b6:	4013      	ands	r3, r2
 80039b8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80039ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039bc:	015a      	lsls	r2, r3, #5
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	4413      	add	r3, r2
 80039c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039c6:	461a      	mov	r2, r3
 80039c8:	2301      	movs	r3, #1
 80039ca:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d132      	bne.n	8003a3a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80039d4:	6879      	ldr	r1, [r7, #4]
 80039d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039d8:	4613      	mov	r3, r2
 80039da:	00db      	lsls	r3, r3, #3
 80039dc:	1a9b      	subs	r3, r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	440b      	add	r3, r1
 80039e2:	3348      	adds	r3, #72	; 0x48
 80039e4:	6819      	ldr	r1, [r3, #0]
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ea:	4613      	mov	r3, r2
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	1a9b      	subs	r3, r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	4403      	add	r3, r0
 80039f4:	3344      	adds	r3, #68	; 0x44
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4419      	add	r1, r3
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039fe:	4613      	mov	r3, r2
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	1a9b      	subs	r3, r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4403      	add	r3, r0
 8003a08:	3348      	adds	r3, #72	; 0x48
 8003a0a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d113      	bne.n	8003a3a <HAL_PCD_IRQHandler+0x31c>
 8003a12:	6879      	ldr	r1, [r7, #4]
 8003a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a16:	4613      	mov	r3, r2
 8003a18:	00db      	lsls	r3, r3, #3
 8003a1a:	1a9b      	subs	r3, r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	440b      	add	r3, r1
 8003a20:	3350      	adds	r3, #80	; 0x50
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d108      	bne.n	8003a3a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6818      	ldr	r0, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003a32:	461a      	mov	r2, r3
 8003a34:	2101      	movs	r1, #1
 8003a36:	f003 fcf3 	bl	8007420 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	4619      	mov	r1, r3
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f005 fca2 	bl	800938a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	f003 0308 	and.w	r3, r3, #8
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d008      	beq.n	8003a62 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a52:	015a      	lsls	r2, r3, #5
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	4413      	add	r3, r2
 8003a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	2308      	movs	r3, #8
 8003a60:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	f003 0310 	and.w	r3, r3, #16
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d008      	beq.n	8003a7e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6e:	015a      	lsls	r2, r3, #5
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	4413      	add	r3, r2
 8003a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a78:	461a      	mov	r2, r3
 8003a7a:	2310      	movs	r3, #16
 8003a7c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d008      	beq.n	8003a9a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8a:	015a      	lsls	r2, r3, #5
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	4413      	add	r3, r2
 8003a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a94:	461a      	mov	r2, r3
 8003a96:	2340      	movs	r3, #64	; 0x40
 8003a98:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d008      	beq.n	8003ab6 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa6:	015a      	lsls	r2, r3, #5
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	4413      	add	r3, r2
 8003aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d003      	beq.n	8003ac8 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003ac0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 fc1b 	bl	80042fe <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aca:	3301      	adds	r3, #1
 8003acc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad0:	085b      	lsrs	r3, r3, #1
 8003ad2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f47f af49 	bne.w	800396e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f003 fbd8 	bl	8007296 <USB_ReadInterrupts>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003aec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003af0:	d122      	bne.n	8003b38 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	69fa      	ldr	r2, [r7, #28]
 8003afc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b00:	f023 0301 	bic.w	r3, r3, #1
 8003b04:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d108      	bne.n	8003b22 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003b18:	2100      	movs	r1, #0
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 fe26 	bl	800476c <HAL_PCDEx_LPM_Callback>
 8003b20:	e002      	b.n	8003b28 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f005 fc9e 	bl	8009464 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	695a      	ldr	r2, [r3, #20]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003b36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f003 fbaa 	bl	8007296 <USB_ReadInterrupts>
 8003b42:	4603      	mov	r3, r0
 8003b44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b4c:	d112      	bne.n	8003b74 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d102      	bne.n	8003b64 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f005 fc5a 	bl	8009418 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	695a      	ldr	r2, [r3, #20]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003b72:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f003 fb8c 	bl	8007296 <USB_ReadInterrupts>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b88:	f040 80c7 	bne.w	8003d1a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	69fa      	ldr	r2, [r7, #28]
 8003b96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b9a:	f023 0301 	bic.w	r3, r3, #1
 8003b9e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2110      	movs	r1, #16
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f002 fc26 	bl	80063f8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bac:	2300      	movs	r3, #0
 8003bae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bb0:	e056      	b.n	8003c60 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb4:	015a      	lsls	r2, r3, #5
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	4413      	add	r3, r2
 8003bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003bc4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc8:	015a      	lsls	r2, r3, #5
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	4413      	add	r3, r2
 8003bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bd6:	0151      	lsls	r1, r2, #5
 8003bd8:	69fa      	ldr	r2, [r7, #28]
 8003bda:	440a      	add	r2, r1
 8003bdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003be0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003be4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be8:	015a      	lsls	r2, r3, #5
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	4413      	add	r3, r2
 8003bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bf6:	0151      	lsls	r1, r2, #5
 8003bf8:	69fa      	ldr	r2, [r7, #28]
 8003bfa:	440a      	add	r2, r1
 8003bfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c00:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c04:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c08:	015a      	lsls	r2, r3, #5
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c12:	461a      	mov	r2, r3
 8003c14:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c18:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c1c:	015a      	lsls	r2, r3, #5
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	4413      	add	r3, r2
 8003c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c2a:	0151      	lsls	r1, r2, #5
 8003c2c:	69fa      	ldr	r2, [r7, #28]
 8003c2e:	440a      	add	r2, r1
 8003c30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c34:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c38:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c3c:	015a      	lsls	r2, r3, #5
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	4413      	add	r3, r2
 8003c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c4a:	0151      	lsls	r1, r2, #5
 8003c4c:	69fa      	ldr	r2, [r7, #28]
 8003c4e:	440a      	add	r2, r1
 8003c50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c54:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c58:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d3a3      	bcc.n	8003bb2 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c70:	69db      	ldr	r3, [r3, #28]
 8003c72:	69fa      	ldr	r2, [r7, #28]
 8003c74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c78:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003c7c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d016      	beq.n	8003cb4 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c90:	69fa      	ldr	r2, [r7, #28]
 8003c92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c96:	f043 030b 	orr.w	r3, r3, #11
 8003c9a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca6:	69fa      	ldr	r2, [r7, #28]
 8003ca8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cac:	f043 030b 	orr.w	r3, r3, #11
 8003cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8003cb2:	e015      	b.n	8003ce0 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	69fa      	ldr	r2, [r7, #28]
 8003cbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cc2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003cc6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003cca:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	69fa      	ldr	r2, [r7, #28]
 8003cd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cda:	f043 030b 	orr.w	r3, r3, #11
 8003cde:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	69fa      	ldr	r2, [r7, #28]
 8003cea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003cf2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6818      	ldr	r0, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d04:	461a      	mov	r2, r3
 8003d06:	f003 fb8b 	bl	8007420 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	695a      	ldr	r2, [r3, #20]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003d18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f003 fab9 	bl	8007296 <USB_ReadInterrupts>
 8003d24:	4603      	mov	r3, r0
 8003d26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d2e:	d124      	bne.n	8003d7a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f003 fb4f 	bl	80073d8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f002 fbb7 	bl	80064b2 <USB_GetDevSpeed>
 8003d44:	4603      	mov	r3, r0
 8003d46:	461a      	mov	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681c      	ldr	r4, [r3, #0]
 8003d50:	f001 f958 	bl	8005004 <HAL_RCC_GetHCLKFreq>
 8003d54:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	4620      	mov	r0, r4
 8003d60:	f002 f8d6 	bl	8005f10 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f005 fb38 	bl	80093da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	695a      	ldr	r2, [r3, #20]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003d78:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f003 fa89 	bl	8007296 <USB_ReadInterrupts>
 8003d84:	4603      	mov	r3, r0
 8003d86:	f003 0308 	and.w	r3, r3, #8
 8003d8a:	2b08      	cmp	r3, #8
 8003d8c:	d10a      	bne.n	8003da4 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f005 fb15 	bl	80093be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	695a      	ldr	r2, [r3, #20]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f002 0208 	and.w	r2, r2, #8
 8003da2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f003 fa74 	bl	8007296 <USB_ReadInterrupts>
 8003dae:	4603      	mov	r3, r0
 8003db0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003db4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003db8:	d10f      	bne.n	8003dda <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f005 fb6d 	bl	80094a4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	695a      	ldr	r2, [r3, #20]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003dd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f003 fa59 	bl	8007296 <USB_ReadInterrupts>
 8003de4:	4603      	mov	r3, r0
 8003de6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003dee:	d10f      	bne.n	8003e10 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003df0:	2300      	movs	r3, #0
 8003df2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	4619      	mov	r1, r3
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f005 fb40 	bl	8009480 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	695a      	ldr	r2, [r3, #20]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003e0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4618      	mov	r0, r3
 8003e16:	f003 fa3e 	bl	8007296 <USB_ReadInterrupts>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e24:	d10a      	bne.n	8003e3c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f005 fb4e 	bl	80094c8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695a      	ldr	r2, [r3, #20]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003e3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4618      	mov	r0, r3
 8003e42:	f003 fa28 	bl	8007296 <USB_ReadInterrupts>
 8003e46:	4603      	mov	r3, r0
 8003e48:	f003 0304 	and.w	r3, r3, #4
 8003e4c:	2b04      	cmp	r3, #4
 8003e4e:	d115      	bne.n	8003e7c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	f003 0304 	and.w	r3, r3, #4
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d002      	beq.n	8003e68 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f005 fb3e 	bl	80094e4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	6859      	ldr	r1, [r3, #4]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	69ba      	ldr	r2, [r7, #24]
 8003e74:	430a      	orrs	r2, r1
 8003e76:	605a      	str	r2, [r3, #4]
 8003e78:	e000      	b.n	8003e7c <HAL_PCD_IRQHandler+0x75e>
      return;
 8003e7a:	bf00      	nop
    }
  }
}
 8003e7c:	3734      	adds	r7, #52	; 0x34
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd90      	pop	{r4, r7, pc}

08003e82 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b082      	sub	sp, #8
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d101      	bne.n	8003e9c <HAL_PCD_SetAddress+0x1a>
 8003e98:	2302      	movs	r3, #2
 8003e9a:	e013      	b.n	8003ec4 <HAL_PCD_SetAddress+0x42>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	78fa      	ldrb	r2, [r7, #3]
 8003ea8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	78fa      	ldrb	r2, [r7, #3]
 8003eb2:	4611      	mov	r1, r2
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f003 f986 	bl	80071c6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3708      	adds	r7, #8
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	4608      	mov	r0, r1
 8003ed6:	4611      	mov	r1, r2
 8003ed8:	461a      	mov	r2, r3
 8003eda:	4603      	mov	r3, r0
 8003edc:	70fb      	strb	r3, [r7, #3]
 8003ede:	460b      	mov	r3, r1
 8003ee0:	803b      	strh	r3, [r7, #0]
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003eea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	da0f      	bge.n	8003f12 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ef2:	78fb      	ldrb	r3, [r7, #3]
 8003ef4:	f003 020f 	and.w	r2, r3, #15
 8003ef8:	4613      	mov	r3, r2
 8003efa:	00db      	lsls	r3, r3, #3
 8003efc:	1a9b      	subs	r3, r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	3338      	adds	r3, #56	; 0x38
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	4413      	add	r3, r2
 8003f06:	3304      	adds	r3, #4
 8003f08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	705a      	strb	r2, [r3, #1]
 8003f10:	e00f      	b.n	8003f32 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f12:	78fb      	ldrb	r3, [r7, #3]
 8003f14:	f003 020f 	and.w	r2, r3, #15
 8003f18:	4613      	mov	r3, r2
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	1a9b      	subs	r3, r3, r2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	4413      	add	r3, r2
 8003f28:	3304      	adds	r3, #4
 8003f2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003f32:	78fb      	ldrb	r3, [r7, #3]
 8003f34:	f003 030f 	and.w	r3, r3, #15
 8003f38:	b2da      	uxtb	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003f3e:	883a      	ldrh	r2, [r7, #0]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	78ba      	ldrb	r2, [r7, #2]
 8003f48:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	785b      	ldrb	r3, [r3, #1]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d004      	beq.n	8003f5c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003f5c:	78bb      	ldrb	r3, [r7, #2]
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d102      	bne.n	8003f68 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d101      	bne.n	8003f76 <HAL_PCD_EP_Open+0xaa>
 8003f72:	2302      	movs	r3, #2
 8003f74:	e00e      	b.n	8003f94 <HAL_PCD_EP_Open+0xc8>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68f9      	ldr	r1, [r7, #12]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f002 fab9 	bl	80064fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003f92:	7afb      	ldrb	r3, [r7, #11]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003fa8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	da0f      	bge.n	8003fd0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fb0:	78fb      	ldrb	r3, [r7, #3]
 8003fb2:	f003 020f 	and.w	r2, r3, #15
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	00db      	lsls	r3, r3, #3
 8003fba:	1a9b      	subs	r3, r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	3338      	adds	r3, #56	; 0x38
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	3304      	adds	r3, #4
 8003fc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	705a      	strb	r2, [r3, #1]
 8003fce:	e00f      	b.n	8003ff0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fd0:	78fb      	ldrb	r3, [r7, #3]
 8003fd2:	f003 020f 	and.w	r2, r3, #15
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	00db      	lsls	r3, r3, #3
 8003fda:	1a9b      	subs	r3, r3, r2
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	3304      	adds	r3, #4
 8003fe8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003ff0:	78fb      	ldrb	r3, [r7, #3]
 8003ff2:	f003 030f 	and.w	r3, r3, #15
 8003ff6:	b2da      	uxtb	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004002:	2b01      	cmp	r3, #1
 8004004:	d101      	bne.n	800400a <HAL_PCD_EP_Close+0x6e>
 8004006:	2302      	movs	r3, #2
 8004008:	e00e      	b.n	8004028 <HAL_PCD_EP_Close+0x8c>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68f9      	ldr	r1, [r7, #12]
 8004018:	4618      	mov	r0, r3
 800401a:	f002 faf7 	bl	800660c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b086      	sub	sp, #24
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	607a      	str	r2, [r7, #4]
 800403a:	603b      	str	r3, [r7, #0]
 800403c:	460b      	mov	r3, r1
 800403e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004040:	7afb      	ldrb	r3, [r7, #11]
 8004042:	f003 020f 	and.w	r2, r3, #15
 8004046:	4613      	mov	r3, r2
 8004048:	00db      	lsls	r3, r3, #3
 800404a:	1a9b      	subs	r3, r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	4413      	add	r3, r2
 8004056:	3304      	adds	r3, #4
 8004058:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	683a      	ldr	r2, [r7, #0]
 8004064:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	2200      	movs	r2, #0
 800406a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	2200      	movs	r2, #0
 8004070:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004072:	7afb      	ldrb	r3, [r7, #11]
 8004074:	f003 030f 	and.w	r3, r3, #15
 8004078:	b2da      	uxtb	r2, r3
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d102      	bne.n	800408c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800408c:	7afb      	ldrb	r3, [r7, #11]
 800408e:	f003 030f 	and.w	r3, r3, #15
 8004092:	2b00      	cmp	r3, #0
 8004094:	d109      	bne.n	80040aa <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6818      	ldr	r0, [r3, #0]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	461a      	mov	r2, r3
 80040a2:	6979      	ldr	r1, [r7, #20]
 80040a4:	f002 fdd2 	bl	8006c4c <USB_EP0StartXfer>
 80040a8:	e008      	b.n	80040bc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6818      	ldr	r0, [r3, #0]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	461a      	mov	r2, r3
 80040b6:	6979      	ldr	r1, [r7, #20]
 80040b8:	f002 fb84 	bl	80067c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3718      	adds	r7, #24
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b083      	sub	sp, #12
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
 80040ce:	460b      	mov	r3, r1
 80040d0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80040d2:	78fb      	ldrb	r3, [r7, #3]
 80040d4:	f003 020f 	and.w	r2, r3, #15
 80040d8:	6879      	ldr	r1, [r7, #4]
 80040da:	4613      	mov	r3, r2
 80040dc:	00db      	lsls	r3, r3, #3
 80040de:	1a9b      	subs	r3, r3, r2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	440b      	add	r3, r1
 80040e4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80040e8:	681b      	ldr	r3, [r3, #0]
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr

080040f6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b086      	sub	sp, #24
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	60f8      	str	r0, [r7, #12]
 80040fe:	607a      	str	r2, [r7, #4]
 8004100:	603b      	str	r3, [r7, #0]
 8004102:	460b      	mov	r3, r1
 8004104:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004106:	7afb      	ldrb	r3, [r7, #11]
 8004108:	f003 020f 	and.w	r2, r3, #15
 800410c:	4613      	mov	r3, r2
 800410e:	00db      	lsls	r3, r3, #3
 8004110:	1a9b      	subs	r3, r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	3338      	adds	r3, #56	; 0x38
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	4413      	add	r3, r2
 800411a:	3304      	adds	r3, #4
 800411c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	683a      	ldr	r2, [r7, #0]
 8004128:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	2200      	movs	r2, #0
 800412e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	2201      	movs	r2, #1
 8004134:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004136:	7afb      	ldrb	r3, [r7, #11]
 8004138:	f003 030f 	and.w	r3, r3, #15
 800413c:	b2da      	uxtb	r2, r3
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d102      	bne.n	8004150 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004150:	7afb      	ldrb	r3, [r7, #11]
 8004152:	f003 030f 	and.w	r3, r3, #15
 8004156:	2b00      	cmp	r3, #0
 8004158:	d109      	bne.n	800416e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6818      	ldr	r0, [r3, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	b2db      	uxtb	r3, r3
 8004164:	461a      	mov	r2, r3
 8004166:	6979      	ldr	r1, [r7, #20]
 8004168:	f002 fd70 	bl	8006c4c <USB_EP0StartXfer>
 800416c:	e008      	b.n	8004180 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6818      	ldr	r0, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	b2db      	uxtb	r3, r3
 8004178:	461a      	mov	r2, r3
 800417a:	6979      	ldr	r1, [r7, #20]
 800417c:	f002 fb22 	bl	80067c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3718      	adds	r7, #24
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b084      	sub	sp, #16
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
 8004192:	460b      	mov	r3, r1
 8004194:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004196:	78fb      	ldrb	r3, [r7, #3]
 8004198:	f003 020f 	and.w	r2, r3, #15
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d901      	bls.n	80041a8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e050      	b.n	800424a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80041a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	da0f      	bge.n	80041d0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041b0:	78fb      	ldrb	r3, [r7, #3]
 80041b2:	f003 020f 	and.w	r2, r3, #15
 80041b6:	4613      	mov	r3, r2
 80041b8:	00db      	lsls	r3, r3, #3
 80041ba:	1a9b      	subs	r3, r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	3338      	adds	r3, #56	; 0x38
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	4413      	add	r3, r2
 80041c4:	3304      	adds	r3, #4
 80041c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2201      	movs	r2, #1
 80041cc:	705a      	strb	r2, [r3, #1]
 80041ce:	e00d      	b.n	80041ec <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80041d0:	78fa      	ldrb	r2, [r7, #3]
 80041d2:	4613      	mov	r3, r2
 80041d4:	00db      	lsls	r3, r3, #3
 80041d6:	1a9b      	subs	r3, r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	4413      	add	r3, r2
 80041e2:	3304      	adds	r3, #4
 80041e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2201      	movs	r2, #1
 80041f0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041f2:	78fb      	ldrb	r3, [r7, #3]
 80041f4:	f003 030f 	and.w	r3, r3, #15
 80041f8:	b2da      	uxtb	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004204:	2b01      	cmp	r3, #1
 8004206:	d101      	bne.n	800420c <HAL_PCD_EP_SetStall+0x82>
 8004208:	2302      	movs	r3, #2
 800420a:	e01e      	b.n	800424a <HAL_PCD_EP_SetStall+0xc0>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68f9      	ldr	r1, [r7, #12]
 800421a:	4618      	mov	r0, r3
 800421c:	f002 feff 	bl	800701e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004220:	78fb      	ldrb	r3, [r7, #3]
 8004222:	f003 030f 	and.w	r3, r3, #15
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10a      	bne.n	8004240 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6818      	ldr	r0, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	b2d9      	uxtb	r1, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800423a:	461a      	mov	r2, r3
 800423c:	f003 f8f0 	bl	8007420 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b084      	sub	sp, #16
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
 800425a:	460b      	mov	r3, r1
 800425c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800425e:	78fb      	ldrb	r3, [r7, #3]
 8004260:	f003 020f 	and.w	r2, r3, #15
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	429a      	cmp	r2, r3
 800426a:	d901      	bls.n	8004270 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e042      	b.n	80042f6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004270:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004274:	2b00      	cmp	r3, #0
 8004276:	da0f      	bge.n	8004298 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004278:	78fb      	ldrb	r3, [r7, #3]
 800427a:	f003 020f 	and.w	r2, r3, #15
 800427e:	4613      	mov	r3, r2
 8004280:	00db      	lsls	r3, r3, #3
 8004282:	1a9b      	subs	r3, r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	3338      	adds	r3, #56	; 0x38
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	4413      	add	r3, r2
 800428c:	3304      	adds	r3, #4
 800428e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2201      	movs	r2, #1
 8004294:	705a      	strb	r2, [r3, #1]
 8004296:	e00f      	b.n	80042b8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004298:	78fb      	ldrb	r3, [r7, #3]
 800429a:	f003 020f 	and.w	r2, r3, #15
 800429e:	4613      	mov	r3, r2
 80042a0:	00db      	lsls	r3, r3, #3
 80042a2:	1a9b      	subs	r3, r3, r2
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	4413      	add	r3, r2
 80042ae:	3304      	adds	r3, #4
 80042b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042be:	78fb      	ldrb	r3, [r7, #3]
 80042c0:	f003 030f 	and.w	r3, r3, #15
 80042c4:	b2da      	uxtb	r2, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d101      	bne.n	80042d8 <HAL_PCD_EP_ClrStall+0x86>
 80042d4:	2302      	movs	r3, #2
 80042d6:	e00e      	b.n	80042f6 <HAL_PCD_EP_ClrStall+0xa4>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68f9      	ldr	r1, [r7, #12]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f002 ff07 	bl	80070fa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b08a      	sub	sp, #40	; 0x28
 8004302:	af02      	add	r7, sp, #8
 8004304:	6078      	str	r0, [r7, #4]
 8004306:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004312:	683a      	ldr	r2, [r7, #0]
 8004314:	4613      	mov	r3, r2
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	1a9b      	subs	r3, r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	3338      	adds	r3, #56	; 0x38
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	4413      	add	r3, r2
 8004322:	3304      	adds	r3, #4
 8004324:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	699a      	ldr	r2, [r3, #24]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	429a      	cmp	r2, r3
 8004330:	d901      	bls.n	8004336 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e06c      	b.n	8004410 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	695a      	ldr	r2, [r3, #20]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	69fa      	ldr	r2, [r7, #28]
 8004348:	429a      	cmp	r2, r3
 800434a:	d902      	bls.n	8004352 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	3303      	adds	r3, #3
 8004356:	089b      	lsrs	r3, r3, #2
 8004358:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800435a:	e02b      	b.n	80043b4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	695a      	ldr	r2, [r3, #20]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	69fa      	ldr	r2, [r7, #28]
 800436e:	429a      	cmp	r2, r3
 8004370:	d902      	bls.n	8004378 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	3303      	adds	r3, #3
 800437c:	089b      	lsrs	r3, r3, #2
 800437e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	68d9      	ldr	r1, [r3, #12]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	b2da      	uxtb	r2, r3
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004390:	b2db      	uxtb	r3, r3
 8004392:	9300      	str	r3, [sp, #0]
 8004394:	4603      	mov	r3, r0
 8004396:	6978      	ldr	r0, [r7, #20]
 8004398:	f002 fdab 	bl	8006ef2 <USB_WritePacket>

    ep->xfer_buff  += len;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	68da      	ldr	r2, [r3, #12]
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	441a      	add	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	699a      	ldr	r2, [r3, #24]
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	441a      	add	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	015a      	lsls	r2, r3, #5
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	4413      	add	r3, r2
 80043bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d809      	bhi.n	80043de <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	699a      	ldr	r2, [r3, #24]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d203      	bcs.n	80043de <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1be      	bne.n	800435c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	695a      	ldr	r2, [r3, #20]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d811      	bhi.n	800440e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	f003 030f 	and.w	r3, r3, #15
 80043f0:	2201      	movs	r2, #1
 80043f2:	fa02 f303 	lsl.w	r3, r2, r3
 80043f6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	43db      	mvns	r3, r3
 8004404:	6939      	ldr	r1, [r7, #16]
 8004406:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800440a:	4013      	ands	r3, r2
 800440c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3720      	adds	r7, #32
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	333c      	adds	r3, #60	; 0x3c
 8004430:	3304      	adds	r3, #4
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	015a      	lsls	r2, r3, #5
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	4413      	add	r3, r2
 800443e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	2b01      	cmp	r3, #1
 800444c:	f040 80a0 	bne.w	8004590 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	f003 0308 	and.w	r3, r3, #8
 8004456:	2b00      	cmp	r3, #0
 8004458:	d015      	beq.n	8004486 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	4a72      	ldr	r2, [pc, #456]	; (8004628 <PCD_EP_OutXfrComplete_int+0x210>)
 800445e:	4293      	cmp	r3, r2
 8004460:	f240 80dd 	bls.w	800461e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800446a:	2b00      	cmp	r3, #0
 800446c:	f000 80d7 	beq.w	800461e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	015a      	lsls	r2, r3, #5
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	4413      	add	r3, r2
 8004478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800447c:	461a      	mov	r2, r3
 800447e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004482:	6093      	str	r3, [r2, #8]
 8004484:	e0cb      	b.n	800461e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	f003 0320 	and.w	r3, r3, #32
 800448c:	2b00      	cmp	r3, #0
 800448e:	d009      	beq.n	80044a4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	015a      	lsls	r2, r3, #5
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	4413      	add	r3, r2
 8004498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800449c:	461a      	mov	r2, r3
 800449e:	2320      	movs	r3, #32
 80044a0:	6093      	str	r3, [r2, #8]
 80044a2:	e0bc      	b.n	800461e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f040 80b7 	bne.w	800461e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	4a5d      	ldr	r2, [pc, #372]	; (8004628 <PCD_EP_OutXfrComplete_int+0x210>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d90f      	bls.n	80044d8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00a      	beq.n	80044d8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	015a      	lsls	r2, r3, #5
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	4413      	add	r3, r2
 80044ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ce:	461a      	mov	r2, r3
 80044d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044d4:	6093      	str	r3, [r2, #8]
 80044d6:	e0a2      	b.n	800461e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80044d8:	6879      	ldr	r1, [r7, #4]
 80044da:	683a      	ldr	r2, [r7, #0]
 80044dc:	4613      	mov	r3, r2
 80044de:	00db      	lsls	r3, r3, #3
 80044e0:	1a9b      	subs	r3, r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	440b      	add	r3, r1
 80044e6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80044ea:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	0159      	lsls	r1, r3, #5
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	440b      	add	r3, r1
 80044f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80044fe:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	683a      	ldr	r2, [r7, #0]
 8004504:	4613      	mov	r3, r2
 8004506:	00db      	lsls	r3, r3, #3
 8004508:	1a9b      	subs	r3, r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	4403      	add	r3, r0
 800450e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004512:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004514:	6879      	ldr	r1, [r7, #4]
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	4613      	mov	r3, r2
 800451a:	00db      	lsls	r3, r3, #3
 800451c:	1a9b      	subs	r3, r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	440b      	add	r3, r1
 8004522:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004526:	6819      	ldr	r1, [r3, #0]
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	4613      	mov	r3, r2
 800452e:	00db      	lsls	r3, r3, #3
 8004530:	1a9b      	subs	r3, r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	4403      	add	r3, r0
 8004536:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4419      	add	r1, r3
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	683a      	ldr	r2, [r7, #0]
 8004542:	4613      	mov	r3, r2
 8004544:	00db      	lsls	r3, r3, #3
 8004546:	1a9b      	subs	r3, r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	4403      	add	r3, r0
 800454c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004550:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d114      	bne.n	8004582 <PCD_EP_OutXfrComplete_int+0x16a>
 8004558:	6879      	ldr	r1, [r7, #4]
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	4613      	mov	r3, r2
 800455e:	00db      	lsls	r3, r3, #3
 8004560:	1a9b      	subs	r3, r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	440b      	add	r3, r1
 8004566:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d108      	bne.n	8004582 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6818      	ldr	r0, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800457a:	461a      	mov	r2, r3
 800457c:	2101      	movs	r1, #1
 800457e:	f002 ff4f 	bl	8007420 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	b2db      	uxtb	r3, r3
 8004586:	4619      	mov	r1, r3
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f004 fee3 	bl	8009354 <HAL_PCD_DataOutStageCallback>
 800458e:	e046      	b.n	800461e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	4a26      	ldr	r2, [pc, #152]	; (800462c <PCD_EP_OutXfrComplete_int+0x214>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d124      	bne.n	80045e2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00a      	beq.n	80045b8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	015a      	lsls	r2, r3, #5
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	4413      	add	r3, r2
 80045aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ae:	461a      	mov	r2, r3
 80045b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045b4:	6093      	str	r3, [r2, #8]
 80045b6:	e032      	b.n	800461e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	f003 0320 	and.w	r3, r3, #32
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d008      	beq.n	80045d4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	015a      	lsls	r2, r3, #5
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	4413      	add	r3, r2
 80045ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ce:	461a      	mov	r2, r3
 80045d0:	2320      	movs	r3, #32
 80045d2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	4619      	mov	r1, r3
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f004 feba 	bl	8009354 <HAL_PCD_DataOutStageCallback>
 80045e0:	e01d      	b.n	800461e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d114      	bne.n	8004612 <PCD_EP_OutXfrComplete_int+0x1fa>
 80045e8:	6879      	ldr	r1, [r7, #4]
 80045ea:	683a      	ldr	r2, [r7, #0]
 80045ec:	4613      	mov	r3, r2
 80045ee:	00db      	lsls	r3, r3, #3
 80045f0:	1a9b      	subs	r3, r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	440b      	add	r3, r1
 80045f6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d108      	bne.n	8004612 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6818      	ldr	r0, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800460a:	461a      	mov	r2, r3
 800460c:	2100      	movs	r1, #0
 800460e:	f002 ff07 	bl	8007420 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	b2db      	uxtb	r3, r3
 8004616:	4619      	mov	r1, r3
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f004 fe9b 	bl	8009354 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3718      	adds	r7, #24
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	4f54300a 	.word	0x4f54300a
 800462c:	4f54310a 	.word	0x4f54310a

08004630 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b086      	sub	sp, #24
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	333c      	adds	r3, #60	; 0x3c
 8004648:	3304      	adds	r3, #4
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	015a      	lsls	r2, r3, #5
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	4413      	add	r3, r2
 8004656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	4a15      	ldr	r2, [pc, #84]	; (80046b8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d90e      	bls.n	8004684 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800466c:	2b00      	cmp	r3, #0
 800466e:	d009      	beq.n	8004684 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	015a      	lsls	r2, r3, #5
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	4413      	add	r3, r2
 8004678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800467c:	461a      	mov	r2, r3
 800467e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004682:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f004 fe53 	bl	8009330 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	4a0a      	ldr	r2, [pc, #40]	; (80046b8 <PCD_EP_OutSetupPacket_int+0x88>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d90c      	bls.n	80046ac <PCD_EP_OutSetupPacket_int+0x7c>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d108      	bne.n	80046ac <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6818      	ldr	r0, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80046a4:	461a      	mov	r2, r3
 80046a6:	2101      	movs	r1, #1
 80046a8:	f002 feba 	bl	8007420 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3718      	adds	r7, #24
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	4f54300a 	.word	0x4f54300a

080046bc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	460b      	mov	r3, r1
 80046c6:	70fb      	strb	r3, [r7, #3]
 80046c8:	4613      	mov	r3, r2
 80046ca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80046d4:	78fb      	ldrb	r3, [r7, #3]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d107      	bne.n	80046ea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80046da:	883b      	ldrh	r3, [r7, #0]
 80046dc:	0419      	lsls	r1, r3, #16
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68ba      	ldr	r2, [r7, #8]
 80046e4:	430a      	orrs	r2, r1
 80046e6:	629a      	str	r2, [r3, #40]	; 0x28
 80046e8:	e028      	b.n	800473c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f0:	0c1b      	lsrs	r3, r3, #16
 80046f2:	68ba      	ldr	r2, [r7, #8]
 80046f4:	4413      	add	r3, r2
 80046f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80046f8:	2300      	movs	r3, #0
 80046fa:	73fb      	strb	r3, [r7, #15]
 80046fc:	e00d      	b.n	800471a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	7bfb      	ldrb	r3, [r7, #15]
 8004704:	3340      	adds	r3, #64	; 0x40
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	4413      	add	r3, r2
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	0c1b      	lsrs	r3, r3, #16
 800470e:	68ba      	ldr	r2, [r7, #8]
 8004710:	4413      	add	r3, r2
 8004712:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004714:	7bfb      	ldrb	r3, [r7, #15]
 8004716:	3301      	adds	r3, #1
 8004718:	73fb      	strb	r3, [r7, #15]
 800471a:	7bfa      	ldrb	r2, [r7, #15]
 800471c:	78fb      	ldrb	r3, [r7, #3]
 800471e:	3b01      	subs	r3, #1
 8004720:	429a      	cmp	r2, r3
 8004722:	d3ec      	bcc.n	80046fe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004724:	883b      	ldrh	r3, [r7, #0]
 8004726:	0418      	lsls	r0, r3, #16
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6819      	ldr	r1, [r3, #0]
 800472c:	78fb      	ldrb	r3, [r7, #3]
 800472e:	3b01      	subs	r3, #1
 8004730:	68ba      	ldr	r2, [r7, #8]
 8004732:	4302      	orrs	r2, r0
 8004734:	3340      	adds	r3, #64	; 0x40
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	440b      	add	r3, r1
 800473a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3714      	adds	r7, #20
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr

0800474a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800474a:	b480      	push	{r7}
 800474c:	b083      	sub	sp, #12
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
 8004752:	460b      	mov	r3, r1
 8004754:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	887a      	ldrh	r2, [r7, #2]
 800475c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	460b      	mov	r3, r1
 8004776:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004778:	bf00      	nop
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b086      	sub	sp, #24
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e264      	b.n	8004c60 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d075      	beq.n	800488e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047a2:	4ba3      	ldr	r3, [pc, #652]	; (8004a30 <HAL_RCC_OscConfig+0x2ac>)
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f003 030c 	and.w	r3, r3, #12
 80047aa:	2b04      	cmp	r3, #4
 80047ac:	d00c      	beq.n	80047c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047ae:	4ba0      	ldr	r3, [pc, #640]	; (8004a30 <HAL_RCC_OscConfig+0x2ac>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047b6:	2b08      	cmp	r3, #8
 80047b8:	d112      	bne.n	80047e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047ba:	4b9d      	ldr	r3, [pc, #628]	; (8004a30 <HAL_RCC_OscConfig+0x2ac>)
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047c6:	d10b      	bne.n	80047e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047c8:	4b99      	ldr	r3, [pc, #612]	; (8004a30 <HAL_RCC_OscConfig+0x2ac>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d05b      	beq.n	800488c <HAL_RCC_OscConfig+0x108>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d157      	bne.n	800488c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e23f      	b.n	8004c60 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047e8:	d106      	bne.n	80047f8 <HAL_RCC_OscConfig+0x74>
 80047ea:	4b91      	ldr	r3, [pc, #580]	; (8004a30 <HAL_RCC_OscConfig+0x2ac>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a90      	ldr	r2, [pc, #576]	; (8004a30 <HAL_RCC_OscConfig+0x2ac>)
 80047f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047f4:	6013      	str	r3, [r2, #0]
 80047f6:	e01d      	b.n	8004834 <HAL_RCC_OscConfig+0xb0>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004800:	d10c      	bne.n	800481c <HAL_RCC_OscConfig+0x98>
 8004802:	4b8b      	ldr	r3, [pc, #556]	; (8004a30 <HAL_RCC_OscConfig+0x2ac>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a8a      	ldr	r2, [pc, #552]	; (8004a30 <HAL_RCC_OscConfig+0x2ac>)
 8004808:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800480c:	6013      	str	r3, [r2, #0]
 800480e:	4b88      	ldr	r3, [pc, #544]	; (8004a30 <HAL_RCC_OscConfig+0x2ac>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a87      	ldr	r2, [pc, #540]	; (8004a30 <HAL_RCC_OscConfig+0x2ac>)
 8004814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004818:	6013      	str	r3, [r2, #0]
 800481a:	e00b      	b.n	8004834 <HAL_RCC_OscConfig+0xb0>
 800481c:	4b84      	ldr	r3, [pc, #528]	; (8004a30 <HAL_RCC_OscConfig+0x2ac>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a83      	ldr	r2, [pc, #524]	; (8004a30 <HAL_RCC_OscConfig+0x2ac>)
 8004822:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004826:	6013      	str	r3, [r2, #0]
 8004828:	4b81      	ldr	r3, [pc, #516]	; (8004a30 <HAL_RCC_OscConfig+0x2ac>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a80      	ldr	r2, [pc, #512]	; (8004a30 <HAL_RCC_OscConfig+0x2ac>)
 800482e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004832:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d013      	beq.n	8004864 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800483c:	f7fd faca 	bl	8001dd4 <HAL_GetTick>
 8004840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004842:	e008      	b.n	8004856 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004844:	f7fd fac6 	bl	8001dd4 <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	2b64      	cmp	r3, #100	; 0x64
 8004850:	d901      	bls.n	8004856 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e204      	b.n	8004c60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004856:	4b76      	ldr	r3, [pc, #472]	; (8004a30 <HAL_RCC_OscConfig+0x2ac>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d0f0      	beq.n	8004844 <HAL_RCC_OscConfig+0xc0>
 8004862:	e014      	b.n	800488e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004864:	f7fd fab6 	bl	8001dd4 <HAL_GetTick>
 8004868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800486a:	e008      	b.n	800487e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800486c:	f7fd fab2 	bl	8001dd4 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b64      	cmp	r3, #100	; 0x64
 8004878:	d901      	bls.n	800487e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e1f0      	b.n	8004c60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800487e:	4b6c      	ldr	r3, [pc, #432]	; (8004a30 <HAL_RCC_OscConfig+0x2ac>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1f0      	bne.n	800486c <HAL_RCC_OscConfig+0xe8>
 800488a:	e000      	b.n	800488e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800488c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d063      	beq.n	8004962 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800489a:	4b65      	ldr	r3, [pc, #404]	; (8004a30 <HAL_RCC_OscConfig+0x2ac>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f003 030c 	and.w	r3, r3, #12
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00b      	beq.n	80048be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048a6:	4b62      	ldr	r3, [pc, #392]	; (8004a30 <HAL_RCC_OscConfig+0x2ac>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048ae:	2b08      	cmp	r3, #8
 80048b0:	d11c      	bne.n	80048ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048b2:	4b5f      	ldr	r3, [pc, #380]	; (8004a30 <HAL_RCC_OscConfig+0x2ac>)
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d116      	bne.n	80048ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048be:	4b5c      	ldr	r3, [pc, #368]	; (8004a30 <HAL_RCC_OscConfig+0x2ac>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d005      	beq.n	80048d6 <HAL_RCC_OscConfig+0x152>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d001      	beq.n	80048d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e1c4      	b.n	8004c60 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048d6:	4b56      	ldr	r3, [pc, #344]	; (8004a30 <HAL_RCC_OscConfig+0x2ac>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	00db      	lsls	r3, r3, #3
 80048e4:	4952      	ldr	r1, [pc, #328]	; (8004a30 <HAL_RCC_OscConfig+0x2ac>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ea:	e03a      	b.n	8004962 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d020      	beq.n	8004936 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048f4:	4b4f      	ldr	r3, [pc, #316]	; (8004a34 <HAL_RCC_OscConfig+0x2b0>)
 80048f6:	2201      	movs	r2, #1
 80048f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048fa:	f7fd fa6b 	bl	8001dd4 <HAL_GetTick>
 80048fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004900:	e008      	b.n	8004914 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004902:	f7fd fa67 	bl	8001dd4 <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	2b02      	cmp	r3, #2
 800490e:	d901      	bls.n	8004914 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e1a5      	b.n	8004c60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004914:	4b46      	ldr	r3, [pc, #280]	; (8004a30 <HAL_RCC_OscConfig+0x2ac>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0302 	and.w	r3, r3, #2
 800491c:	2b00      	cmp	r3, #0
 800491e:	d0f0      	beq.n	8004902 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004920:	4b43      	ldr	r3, [pc, #268]	; (8004a30 <HAL_RCC_OscConfig+0x2ac>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	00db      	lsls	r3, r3, #3
 800492e:	4940      	ldr	r1, [pc, #256]	; (8004a30 <HAL_RCC_OscConfig+0x2ac>)
 8004930:	4313      	orrs	r3, r2
 8004932:	600b      	str	r3, [r1, #0]
 8004934:	e015      	b.n	8004962 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004936:	4b3f      	ldr	r3, [pc, #252]	; (8004a34 <HAL_RCC_OscConfig+0x2b0>)
 8004938:	2200      	movs	r2, #0
 800493a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800493c:	f7fd fa4a 	bl	8001dd4 <HAL_GetTick>
 8004940:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004942:	e008      	b.n	8004956 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004944:	f7fd fa46 	bl	8001dd4 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	2b02      	cmp	r3, #2
 8004950:	d901      	bls.n	8004956 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e184      	b.n	8004c60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004956:	4b36      	ldr	r3, [pc, #216]	; (8004a30 <HAL_RCC_OscConfig+0x2ac>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1f0      	bne.n	8004944 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0308 	and.w	r3, r3, #8
 800496a:	2b00      	cmp	r3, #0
 800496c:	d030      	beq.n	80049d0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d016      	beq.n	80049a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004976:	4b30      	ldr	r3, [pc, #192]	; (8004a38 <HAL_RCC_OscConfig+0x2b4>)
 8004978:	2201      	movs	r2, #1
 800497a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800497c:	f7fd fa2a 	bl	8001dd4 <HAL_GetTick>
 8004980:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004982:	e008      	b.n	8004996 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004984:	f7fd fa26 	bl	8001dd4 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b02      	cmp	r3, #2
 8004990:	d901      	bls.n	8004996 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e164      	b.n	8004c60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004996:	4b26      	ldr	r3, [pc, #152]	; (8004a30 <HAL_RCC_OscConfig+0x2ac>)
 8004998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d0f0      	beq.n	8004984 <HAL_RCC_OscConfig+0x200>
 80049a2:	e015      	b.n	80049d0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049a4:	4b24      	ldr	r3, [pc, #144]	; (8004a38 <HAL_RCC_OscConfig+0x2b4>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049aa:	f7fd fa13 	bl	8001dd4 <HAL_GetTick>
 80049ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049b0:	e008      	b.n	80049c4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049b2:	f7fd fa0f 	bl	8001dd4 <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d901      	bls.n	80049c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e14d      	b.n	8004c60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049c4:	4b1a      	ldr	r3, [pc, #104]	; (8004a30 <HAL_RCC_OscConfig+0x2ac>)
 80049c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049c8:	f003 0302 	and.w	r3, r3, #2
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1f0      	bne.n	80049b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0304 	and.w	r3, r3, #4
 80049d8:	2b00      	cmp	r3, #0
 80049da:	f000 80a0 	beq.w	8004b1e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049de:	2300      	movs	r3, #0
 80049e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049e2:	4b13      	ldr	r3, [pc, #76]	; (8004a30 <HAL_RCC_OscConfig+0x2ac>)
 80049e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d10f      	bne.n	8004a0e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049ee:	2300      	movs	r3, #0
 80049f0:	60bb      	str	r3, [r7, #8]
 80049f2:	4b0f      	ldr	r3, [pc, #60]	; (8004a30 <HAL_RCC_OscConfig+0x2ac>)
 80049f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f6:	4a0e      	ldr	r2, [pc, #56]	; (8004a30 <HAL_RCC_OscConfig+0x2ac>)
 80049f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049fc:	6413      	str	r3, [r2, #64]	; 0x40
 80049fe:	4b0c      	ldr	r3, [pc, #48]	; (8004a30 <HAL_RCC_OscConfig+0x2ac>)
 8004a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a06:	60bb      	str	r3, [r7, #8]
 8004a08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a0e:	4b0b      	ldr	r3, [pc, #44]	; (8004a3c <HAL_RCC_OscConfig+0x2b8>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d121      	bne.n	8004a5e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a1a:	4b08      	ldr	r3, [pc, #32]	; (8004a3c <HAL_RCC_OscConfig+0x2b8>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a07      	ldr	r2, [pc, #28]	; (8004a3c <HAL_RCC_OscConfig+0x2b8>)
 8004a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a26:	f7fd f9d5 	bl	8001dd4 <HAL_GetTick>
 8004a2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a2c:	e011      	b.n	8004a52 <HAL_RCC_OscConfig+0x2ce>
 8004a2e:	bf00      	nop
 8004a30:	40023800 	.word	0x40023800
 8004a34:	42470000 	.word	0x42470000
 8004a38:	42470e80 	.word	0x42470e80
 8004a3c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a40:	f7fd f9c8 	bl	8001dd4 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e106      	b.n	8004c60 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a52:	4b85      	ldr	r3, [pc, #532]	; (8004c68 <HAL_RCC_OscConfig+0x4e4>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d0f0      	beq.n	8004a40 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d106      	bne.n	8004a74 <HAL_RCC_OscConfig+0x2f0>
 8004a66:	4b81      	ldr	r3, [pc, #516]	; (8004c6c <HAL_RCC_OscConfig+0x4e8>)
 8004a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a6a:	4a80      	ldr	r2, [pc, #512]	; (8004c6c <HAL_RCC_OscConfig+0x4e8>)
 8004a6c:	f043 0301 	orr.w	r3, r3, #1
 8004a70:	6713      	str	r3, [r2, #112]	; 0x70
 8004a72:	e01c      	b.n	8004aae <HAL_RCC_OscConfig+0x32a>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	2b05      	cmp	r3, #5
 8004a7a:	d10c      	bne.n	8004a96 <HAL_RCC_OscConfig+0x312>
 8004a7c:	4b7b      	ldr	r3, [pc, #492]	; (8004c6c <HAL_RCC_OscConfig+0x4e8>)
 8004a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a80:	4a7a      	ldr	r2, [pc, #488]	; (8004c6c <HAL_RCC_OscConfig+0x4e8>)
 8004a82:	f043 0304 	orr.w	r3, r3, #4
 8004a86:	6713      	str	r3, [r2, #112]	; 0x70
 8004a88:	4b78      	ldr	r3, [pc, #480]	; (8004c6c <HAL_RCC_OscConfig+0x4e8>)
 8004a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a8c:	4a77      	ldr	r2, [pc, #476]	; (8004c6c <HAL_RCC_OscConfig+0x4e8>)
 8004a8e:	f043 0301 	orr.w	r3, r3, #1
 8004a92:	6713      	str	r3, [r2, #112]	; 0x70
 8004a94:	e00b      	b.n	8004aae <HAL_RCC_OscConfig+0x32a>
 8004a96:	4b75      	ldr	r3, [pc, #468]	; (8004c6c <HAL_RCC_OscConfig+0x4e8>)
 8004a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a9a:	4a74      	ldr	r2, [pc, #464]	; (8004c6c <HAL_RCC_OscConfig+0x4e8>)
 8004a9c:	f023 0301 	bic.w	r3, r3, #1
 8004aa0:	6713      	str	r3, [r2, #112]	; 0x70
 8004aa2:	4b72      	ldr	r3, [pc, #456]	; (8004c6c <HAL_RCC_OscConfig+0x4e8>)
 8004aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa6:	4a71      	ldr	r2, [pc, #452]	; (8004c6c <HAL_RCC_OscConfig+0x4e8>)
 8004aa8:	f023 0304 	bic.w	r3, r3, #4
 8004aac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d015      	beq.n	8004ae2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ab6:	f7fd f98d 	bl	8001dd4 <HAL_GetTick>
 8004aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004abc:	e00a      	b.n	8004ad4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004abe:	f7fd f989 	bl	8001dd4 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d901      	bls.n	8004ad4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e0c5      	b.n	8004c60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ad4:	4b65      	ldr	r3, [pc, #404]	; (8004c6c <HAL_RCC_OscConfig+0x4e8>)
 8004ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad8:	f003 0302 	and.w	r3, r3, #2
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d0ee      	beq.n	8004abe <HAL_RCC_OscConfig+0x33a>
 8004ae0:	e014      	b.n	8004b0c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ae2:	f7fd f977 	bl	8001dd4 <HAL_GetTick>
 8004ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ae8:	e00a      	b.n	8004b00 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004aea:	f7fd f973 	bl	8001dd4 <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d901      	bls.n	8004b00 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e0af      	b.n	8004c60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b00:	4b5a      	ldr	r3, [pc, #360]	; (8004c6c <HAL_RCC_OscConfig+0x4e8>)
 8004b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1ee      	bne.n	8004aea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b0c:	7dfb      	ldrb	r3, [r7, #23]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d105      	bne.n	8004b1e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b12:	4b56      	ldr	r3, [pc, #344]	; (8004c6c <HAL_RCC_OscConfig+0x4e8>)
 8004b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b16:	4a55      	ldr	r2, [pc, #340]	; (8004c6c <HAL_RCC_OscConfig+0x4e8>)
 8004b18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b1c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f000 809b 	beq.w	8004c5e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b28:	4b50      	ldr	r3, [pc, #320]	; (8004c6c <HAL_RCC_OscConfig+0x4e8>)
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f003 030c 	and.w	r3, r3, #12
 8004b30:	2b08      	cmp	r3, #8
 8004b32:	d05c      	beq.n	8004bee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d141      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b3c:	4b4c      	ldr	r3, [pc, #304]	; (8004c70 <HAL_RCC_OscConfig+0x4ec>)
 8004b3e:	2200      	movs	r2, #0
 8004b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b42:	f7fd f947 	bl	8001dd4 <HAL_GetTick>
 8004b46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b48:	e008      	b.n	8004b5c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b4a:	f7fd f943 	bl	8001dd4 <HAL_GetTick>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d901      	bls.n	8004b5c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e081      	b.n	8004c60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b5c:	4b43      	ldr	r3, [pc, #268]	; (8004c6c <HAL_RCC_OscConfig+0x4e8>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d1f0      	bne.n	8004b4a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	69da      	ldr	r2, [r3, #28]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a1b      	ldr	r3, [r3, #32]
 8004b70:	431a      	orrs	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b76:	019b      	lsls	r3, r3, #6
 8004b78:	431a      	orrs	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b7e:	085b      	lsrs	r3, r3, #1
 8004b80:	3b01      	subs	r3, #1
 8004b82:	041b      	lsls	r3, r3, #16
 8004b84:	431a      	orrs	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8a:	061b      	lsls	r3, r3, #24
 8004b8c:	4937      	ldr	r1, [pc, #220]	; (8004c6c <HAL_RCC_OscConfig+0x4e8>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b92:	4b37      	ldr	r3, [pc, #220]	; (8004c70 <HAL_RCC_OscConfig+0x4ec>)
 8004b94:	2201      	movs	r2, #1
 8004b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b98:	f7fd f91c 	bl	8001dd4 <HAL_GetTick>
 8004b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b9e:	e008      	b.n	8004bb2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ba0:	f7fd f918 	bl	8001dd4 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e056      	b.n	8004c60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bb2:	4b2e      	ldr	r3, [pc, #184]	; (8004c6c <HAL_RCC_OscConfig+0x4e8>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d0f0      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x41c>
 8004bbe:	e04e      	b.n	8004c5e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bc0:	4b2b      	ldr	r3, [pc, #172]	; (8004c70 <HAL_RCC_OscConfig+0x4ec>)
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc6:	f7fd f905 	bl	8001dd4 <HAL_GetTick>
 8004bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bcc:	e008      	b.n	8004be0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bce:	f7fd f901 	bl	8001dd4 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d901      	bls.n	8004be0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e03f      	b.n	8004c60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004be0:	4b22      	ldr	r3, [pc, #136]	; (8004c6c <HAL_RCC_OscConfig+0x4e8>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1f0      	bne.n	8004bce <HAL_RCC_OscConfig+0x44a>
 8004bec:	e037      	b.n	8004c5e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d101      	bne.n	8004bfa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e032      	b.n	8004c60 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004bfa:	4b1c      	ldr	r3, [pc, #112]	; (8004c6c <HAL_RCC_OscConfig+0x4e8>)
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d028      	beq.n	8004c5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d121      	bne.n	8004c5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d11a      	bne.n	8004c5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c24:	68fa      	ldr	r2, [r7, #12]
 8004c26:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c30:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d111      	bne.n	8004c5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c40:	085b      	lsrs	r3, r3, #1
 8004c42:	3b01      	subs	r3, #1
 8004c44:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d107      	bne.n	8004c5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c54:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d001      	beq.n	8004c5e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e000      	b.n	8004c60 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3718      	adds	r7, #24
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	40007000 	.word	0x40007000
 8004c6c:	40023800 	.word	0x40023800
 8004c70:	42470060 	.word	0x42470060

08004c74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d101      	bne.n	8004c88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e0cc      	b.n	8004e22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c88:	4b68      	ldr	r3, [pc, #416]	; (8004e2c <HAL_RCC_ClockConfig+0x1b8>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0307 	and.w	r3, r3, #7
 8004c90:	683a      	ldr	r2, [r7, #0]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d90c      	bls.n	8004cb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c96:	4b65      	ldr	r3, [pc, #404]	; (8004e2c <HAL_RCC_ClockConfig+0x1b8>)
 8004c98:	683a      	ldr	r2, [r7, #0]
 8004c9a:	b2d2      	uxtb	r2, r2
 8004c9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c9e:	4b63      	ldr	r3, [pc, #396]	; (8004e2c <HAL_RCC_ClockConfig+0x1b8>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0307 	and.w	r3, r3, #7
 8004ca6:	683a      	ldr	r2, [r7, #0]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d001      	beq.n	8004cb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e0b8      	b.n	8004e22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0302 	and.w	r3, r3, #2
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d020      	beq.n	8004cfe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0304 	and.w	r3, r3, #4
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d005      	beq.n	8004cd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cc8:	4b59      	ldr	r3, [pc, #356]	; (8004e30 <HAL_RCC_ClockConfig+0x1bc>)
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	4a58      	ldr	r2, [pc, #352]	; (8004e30 <HAL_RCC_ClockConfig+0x1bc>)
 8004cce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004cd2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0308 	and.w	r3, r3, #8
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d005      	beq.n	8004cec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ce0:	4b53      	ldr	r3, [pc, #332]	; (8004e30 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	4a52      	ldr	r2, [pc, #328]	; (8004e30 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004cea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cec:	4b50      	ldr	r3, [pc, #320]	; (8004e30 <HAL_RCC_ClockConfig+0x1bc>)
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	494d      	ldr	r1, [pc, #308]	; (8004e30 <HAL_RCC_ClockConfig+0x1bc>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0301 	and.w	r3, r3, #1
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d044      	beq.n	8004d94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d107      	bne.n	8004d22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d12:	4b47      	ldr	r3, [pc, #284]	; (8004e30 <HAL_RCC_ClockConfig+0x1bc>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d119      	bne.n	8004d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e07f      	b.n	8004e22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d003      	beq.n	8004d32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d2e:	2b03      	cmp	r3, #3
 8004d30:	d107      	bne.n	8004d42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d32:	4b3f      	ldr	r3, [pc, #252]	; (8004e30 <HAL_RCC_ClockConfig+0x1bc>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d109      	bne.n	8004d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e06f      	b.n	8004e22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d42:	4b3b      	ldr	r3, [pc, #236]	; (8004e30 <HAL_RCC_ClockConfig+0x1bc>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0302 	and.w	r3, r3, #2
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d101      	bne.n	8004d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e067      	b.n	8004e22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d52:	4b37      	ldr	r3, [pc, #220]	; (8004e30 <HAL_RCC_ClockConfig+0x1bc>)
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f023 0203 	bic.w	r2, r3, #3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	4934      	ldr	r1, [pc, #208]	; (8004e30 <HAL_RCC_ClockConfig+0x1bc>)
 8004d60:	4313      	orrs	r3, r2
 8004d62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d64:	f7fd f836 	bl	8001dd4 <HAL_GetTick>
 8004d68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d6a:	e00a      	b.n	8004d82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d6c:	f7fd f832 	bl	8001dd4 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e04f      	b.n	8004e22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d82:	4b2b      	ldr	r3, [pc, #172]	; (8004e30 <HAL_RCC_ClockConfig+0x1bc>)
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f003 020c 	and.w	r2, r3, #12
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d1eb      	bne.n	8004d6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d94:	4b25      	ldr	r3, [pc, #148]	; (8004e2c <HAL_RCC_ClockConfig+0x1b8>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0307 	and.w	r3, r3, #7
 8004d9c:	683a      	ldr	r2, [r7, #0]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d20c      	bcs.n	8004dbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004da2:	4b22      	ldr	r3, [pc, #136]	; (8004e2c <HAL_RCC_ClockConfig+0x1b8>)
 8004da4:	683a      	ldr	r2, [r7, #0]
 8004da6:	b2d2      	uxtb	r2, r2
 8004da8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004daa:	4b20      	ldr	r3, [pc, #128]	; (8004e2c <HAL_RCC_ClockConfig+0x1b8>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0307 	and.w	r3, r3, #7
 8004db2:	683a      	ldr	r2, [r7, #0]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d001      	beq.n	8004dbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e032      	b.n	8004e22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0304 	and.w	r3, r3, #4
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d008      	beq.n	8004dda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dc8:	4b19      	ldr	r3, [pc, #100]	; (8004e30 <HAL_RCC_ClockConfig+0x1bc>)
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	4916      	ldr	r1, [pc, #88]	; (8004e30 <HAL_RCC_ClockConfig+0x1bc>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0308 	and.w	r3, r3, #8
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d009      	beq.n	8004dfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004de6:	4b12      	ldr	r3, [pc, #72]	; (8004e30 <HAL_RCC_ClockConfig+0x1bc>)
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	00db      	lsls	r3, r3, #3
 8004df4:	490e      	ldr	r1, [pc, #56]	; (8004e30 <HAL_RCC_ClockConfig+0x1bc>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004dfa:	f000 f821 	bl	8004e40 <HAL_RCC_GetSysClockFreq>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	4b0b      	ldr	r3, [pc, #44]	; (8004e30 <HAL_RCC_ClockConfig+0x1bc>)
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	091b      	lsrs	r3, r3, #4
 8004e06:	f003 030f 	and.w	r3, r3, #15
 8004e0a:	490a      	ldr	r1, [pc, #40]	; (8004e34 <HAL_RCC_ClockConfig+0x1c0>)
 8004e0c:	5ccb      	ldrb	r3, [r1, r3]
 8004e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e12:	4a09      	ldr	r2, [pc, #36]	; (8004e38 <HAL_RCC_ClockConfig+0x1c4>)
 8004e14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e16:	4b09      	ldr	r3, [pc, #36]	; (8004e3c <HAL_RCC_ClockConfig+0x1c8>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7fc ff96 	bl	8001d4c <HAL_InitTick>

  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3710      	adds	r7, #16
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	40023c00 	.word	0x40023c00
 8004e30:	40023800 	.word	0x40023800
 8004e34:	0800c6b0 	.word	0x0800c6b0
 8004e38:	20000000 	.word	0x20000000
 8004e3c:	20000004 	.word	0x20000004

08004e40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e40:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004e44:	b084      	sub	sp, #16
 8004e46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	607b      	str	r3, [r7, #4]
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	60fb      	str	r3, [r7, #12]
 8004e50:	2300      	movs	r3, #0
 8004e52:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004e54:	2300      	movs	r3, #0
 8004e56:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e58:	4b67      	ldr	r3, [pc, #412]	; (8004ff8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f003 030c 	and.w	r3, r3, #12
 8004e60:	2b08      	cmp	r3, #8
 8004e62:	d00d      	beq.n	8004e80 <HAL_RCC_GetSysClockFreq+0x40>
 8004e64:	2b08      	cmp	r3, #8
 8004e66:	f200 80bd 	bhi.w	8004fe4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d002      	beq.n	8004e74 <HAL_RCC_GetSysClockFreq+0x34>
 8004e6e:	2b04      	cmp	r3, #4
 8004e70:	d003      	beq.n	8004e7a <HAL_RCC_GetSysClockFreq+0x3a>
 8004e72:	e0b7      	b.n	8004fe4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e74:	4b61      	ldr	r3, [pc, #388]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004e76:	60bb      	str	r3, [r7, #8]
       break;
 8004e78:	e0b7      	b.n	8004fea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e7a:	4b61      	ldr	r3, [pc, #388]	; (8005000 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004e7c:	60bb      	str	r3, [r7, #8]
      break;
 8004e7e:	e0b4      	b.n	8004fea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e80:	4b5d      	ldr	r3, [pc, #372]	; (8004ff8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e88:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e8a:	4b5b      	ldr	r3, [pc, #364]	; (8004ff8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d04d      	beq.n	8004f32 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e96:	4b58      	ldr	r3, [pc, #352]	; (8004ff8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	099b      	lsrs	r3, r3, #6
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	f04f 0300 	mov.w	r3, #0
 8004ea2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004ea6:	f04f 0100 	mov.w	r1, #0
 8004eaa:	ea02 0800 	and.w	r8, r2, r0
 8004eae:	ea03 0901 	and.w	r9, r3, r1
 8004eb2:	4640      	mov	r0, r8
 8004eb4:	4649      	mov	r1, r9
 8004eb6:	f04f 0200 	mov.w	r2, #0
 8004eba:	f04f 0300 	mov.w	r3, #0
 8004ebe:	014b      	lsls	r3, r1, #5
 8004ec0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004ec4:	0142      	lsls	r2, r0, #5
 8004ec6:	4610      	mov	r0, r2
 8004ec8:	4619      	mov	r1, r3
 8004eca:	ebb0 0008 	subs.w	r0, r0, r8
 8004ece:	eb61 0109 	sbc.w	r1, r1, r9
 8004ed2:	f04f 0200 	mov.w	r2, #0
 8004ed6:	f04f 0300 	mov.w	r3, #0
 8004eda:	018b      	lsls	r3, r1, #6
 8004edc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004ee0:	0182      	lsls	r2, r0, #6
 8004ee2:	1a12      	subs	r2, r2, r0
 8004ee4:	eb63 0301 	sbc.w	r3, r3, r1
 8004ee8:	f04f 0000 	mov.w	r0, #0
 8004eec:	f04f 0100 	mov.w	r1, #0
 8004ef0:	00d9      	lsls	r1, r3, #3
 8004ef2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ef6:	00d0      	lsls	r0, r2, #3
 8004ef8:	4602      	mov	r2, r0
 8004efa:	460b      	mov	r3, r1
 8004efc:	eb12 0208 	adds.w	r2, r2, r8
 8004f00:	eb43 0309 	adc.w	r3, r3, r9
 8004f04:	f04f 0000 	mov.w	r0, #0
 8004f08:	f04f 0100 	mov.w	r1, #0
 8004f0c:	0259      	lsls	r1, r3, #9
 8004f0e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004f12:	0250      	lsls	r0, r2, #9
 8004f14:	4602      	mov	r2, r0
 8004f16:	460b      	mov	r3, r1
 8004f18:	4610      	mov	r0, r2
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	f04f 0300 	mov.w	r3, #0
 8004f24:	f7fb fe98 	bl	8000c58 <__aeabi_uldivmod>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	60fb      	str	r3, [r7, #12]
 8004f30:	e04a      	b.n	8004fc8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f32:	4b31      	ldr	r3, [pc, #196]	; (8004ff8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	099b      	lsrs	r3, r3, #6
 8004f38:	461a      	mov	r2, r3
 8004f3a:	f04f 0300 	mov.w	r3, #0
 8004f3e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004f42:	f04f 0100 	mov.w	r1, #0
 8004f46:	ea02 0400 	and.w	r4, r2, r0
 8004f4a:	ea03 0501 	and.w	r5, r3, r1
 8004f4e:	4620      	mov	r0, r4
 8004f50:	4629      	mov	r1, r5
 8004f52:	f04f 0200 	mov.w	r2, #0
 8004f56:	f04f 0300 	mov.w	r3, #0
 8004f5a:	014b      	lsls	r3, r1, #5
 8004f5c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004f60:	0142      	lsls	r2, r0, #5
 8004f62:	4610      	mov	r0, r2
 8004f64:	4619      	mov	r1, r3
 8004f66:	1b00      	subs	r0, r0, r4
 8004f68:	eb61 0105 	sbc.w	r1, r1, r5
 8004f6c:	f04f 0200 	mov.w	r2, #0
 8004f70:	f04f 0300 	mov.w	r3, #0
 8004f74:	018b      	lsls	r3, r1, #6
 8004f76:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004f7a:	0182      	lsls	r2, r0, #6
 8004f7c:	1a12      	subs	r2, r2, r0
 8004f7e:	eb63 0301 	sbc.w	r3, r3, r1
 8004f82:	f04f 0000 	mov.w	r0, #0
 8004f86:	f04f 0100 	mov.w	r1, #0
 8004f8a:	00d9      	lsls	r1, r3, #3
 8004f8c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f90:	00d0      	lsls	r0, r2, #3
 8004f92:	4602      	mov	r2, r0
 8004f94:	460b      	mov	r3, r1
 8004f96:	1912      	adds	r2, r2, r4
 8004f98:	eb45 0303 	adc.w	r3, r5, r3
 8004f9c:	f04f 0000 	mov.w	r0, #0
 8004fa0:	f04f 0100 	mov.w	r1, #0
 8004fa4:	0299      	lsls	r1, r3, #10
 8004fa6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004faa:	0290      	lsls	r0, r2, #10
 8004fac:	4602      	mov	r2, r0
 8004fae:	460b      	mov	r3, r1
 8004fb0:	4610      	mov	r0, r2
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	f04f 0300 	mov.w	r3, #0
 8004fbc:	f7fb fe4c 	bl	8000c58 <__aeabi_uldivmod>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004fc8:	4b0b      	ldr	r3, [pc, #44]	; (8004ff8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	0c1b      	lsrs	r3, r3, #16
 8004fce:	f003 0303 	and.w	r3, r3, #3
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	005b      	lsls	r3, r3, #1
 8004fd6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fe0:	60bb      	str	r3, [r7, #8]
      break;
 8004fe2:	e002      	b.n	8004fea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fe4:	4b05      	ldr	r3, [pc, #20]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004fe6:	60bb      	str	r3, [r7, #8]
      break;
 8004fe8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fea:	68bb      	ldr	r3, [r7, #8]
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3710      	adds	r7, #16
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004ff6:	bf00      	nop
 8004ff8:	40023800 	.word	0x40023800
 8004ffc:	00f42400 	.word	0x00f42400
 8005000:	007a1200 	.word	0x007a1200

08005004 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005004:	b480      	push	{r7}
 8005006:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005008:	4b03      	ldr	r3, [pc, #12]	; (8005018 <HAL_RCC_GetHCLKFreq+0x14>)
 800500a:	681b      	ldr	r3, [r3, #0]
}
 800500c:	4618      	mov	r0, r3
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	20000000 	.word	0x20000000

0800501c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005020:	f7ff fff0 	bl	8005004 <HAL_RCC_GetHCLKFreq>
 8005024:	4602      	mov	r2, r0
 8005026:	4b05      	ldr	r3, [pc, #20]	; (800503c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	0a9b      	lsrs	r3, r3, #10
 800502c:	f003 0307 	and.w	r3, r3, #7
 8005030:	4903      	ldr	r1, [pc, #12]	; (8005040 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005032:	5ccb      	ldrb	r3, [r1, r3]
 8005034:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005038:	4618      	mov	r0, r3
 800503a:	bd80      	pop	{r7, pc}
 800503c:	40023800 	.word	0x40023800
 8005040:	0800c6c0 	.word	0x0800c6c0

08005044 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005048:	f7ff ffdc 	bl	8005004 <HAL_RCC_GetHCLKFreq>
 800504c:	4602      	mov	r2, r0
 800504e:	4b05      	ldr	r3, [pc, #20]	; (8005064 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	0b5b      	lsrs	r3, r3, #13
 8005054:	f003 0307 	and.w	r3, r3, #7
 8005058:	4903      	ldr	r1, [pc, #12]	; (8005068 <HAL_RCC_GetPCLK2Freq+0x24>)
 800505a:	5ccb      	ldrb	r3, [r1, r3]
 800505c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005060:	4618      	mov	r0, r3
 8005062:	bd80      	pop	{r7, pc}
 8005064:	40023800 	.word	0x40023800
 8005068:	0800c6c0 	.word	0x0800c6c0

0800506c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d101      	bne.n	800507e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e07b      	b.n	8005176 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005082:	2b00      	cmp	r3, #0
 8005084:	d108      	bne.n	8005098 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800508e:	d009      	beq.n	80050a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	61da      	str	r2, [r3, #28]
 8005096:	e005      	b.n	80050a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d106      	bne.n	80050c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f7fc fbf0 	bl	80018a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2202      	movs	r2, #2
 80050c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80050ec:	431a      	orrs	r2, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050f6:	431a      	orrs	r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	f003 0302 	and.w	r3, r3, #2
 8005100:	431a      	orrs	r2, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	f003 0301 	and.w	r3, r3, #1
 800510a:	431a      	orrs	r2, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	699b      	ldr	r3, [r3, #24]
 8005110:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005114:	431a      	orrs	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	69db      	ldr	r3, [r3, #28]
 800511a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800511e:	431a      	orrs	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a1b      	ldr	r3, [r3, #32]
 8005124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005128:	ea42 0103 	orr.w	r1, r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005130:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	430a      	orrs	r2, r1
 800513a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	699b      	ldr	r3, [r3, #24]
 8005140:	0c1b      	lsrs	r3, r3, #16
 8005142:	f003 0104 	and.w	r1, r3, #4
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514a:	f003 0210 	and.w	r2, r3, #16
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	430a      	orrs	r2, r1
 8005154:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	69da      	ldr	r2, [r3, #28]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005164:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3708      	adds	r7, #8
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800517e:	b580      	push	{r7, lr}
 8005180:	b082      	sub	sp, #8
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d101      	bne.n	8005190 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e03f      	b.n	8005210 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005196:	b2db      	uxtb	r3, r3
 8005198:	2b00      	cmp	r3, #0
 800519a:	d106      	bne.n	80051aa <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f7fc fd35 	bl	8001c14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2224      	movs	r2, #36	; 0x24
 80051ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68da      	ldr	r2, [r3, #12]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051c0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 fc7a 	bl	8005abc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	691a      	ldr	r2, [r3, #16]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051d6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	695a      	ldr	r2, [r3, #20]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051e6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68da      	ldr	r2, [r3, #12]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051f6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2220      	movs	r2, #32
 8005202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2220      	movs	r2, #32
 800520a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800520e:	2300      	movs	r3, #0
}
 8005210:	4618      	mov	r0, r3
 8005212:	3708      	adds	r7, #8
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b0ba      	sub	sp, #232	; 0xe8
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	695b      	ldr	r3, [r3, #20]
 800523a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800523e:	2300      	movs	r3, #0
 8005240:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005244:	2300      	movs	r3, #0
 8005246:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800524a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800524e:	f003 030f 	and.w	r3, r3, #15
 8005252:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005256:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800525a:	2b00      	cmp	r3, #0
 800525c:	d10f      	bne.n	800527e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800525e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005262:	f003 0320 	and.w	r3, r3, #32
 8005266:	2b00      	cmp	r3, #0
 8005268:	d009      	beq.n	800527e <HAL_UART_IRQHandler+0x66>
 800526a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800526e:	f003 0320 	and.w	r3, r3, #32
 8005272:	2b00      	cmp	r3, #0
 8005274:	d003      	beq.n	800527e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 fb65 	bl	8005946 <UART_Receive_IT>
      return;
 800527c:	e256      	b.n	800572c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800527e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005282:	2b00      	cmp	r3, #0
 8005284:	f000 80de 	beq.w	8005444 <HAL_UART_IRQHandler+0x22c>
 8005288:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800528c:	f003 0301 	and.w	r3, r3, #1
 8005290:	2b00      	cmp	r3, #0
 8005292:	d106      	bne.n	80052a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005298:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800529c:	2b00      	cmp	r3, #0
 800529e:	f000 80d1 	beq.w	8005444 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80052a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00b      	beq.n	80052c6 <HAL_UART_IRQHandler+0xae>
 80052ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d005      	beq.n	80052c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052be:	f043 0201 	orr.w	r2, r3, #1
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ca:	f003 0304 	and.w	r3, r3, #4
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00b      	beq.n	80052ea <HAL_UART_IRQHandler+0xd2>
 80052d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052d6:	f003 0301 	and.w	r3, r3, #1
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d005      	beq.n	80052ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e2:	f043 0202 	orr.w	r2, r3, #2
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ee:	f003 0302 	and.w	r3, r3, #2
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00b      	beq.n	800530e <HAL_UART_IRQHandler+0xf6>
 80052f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d005      	beq.n	800530e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005306:	f043 0204 	orr.w	r2, r3, #4
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800530e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005312:	f003 0308 	and.w	r3, r3, #8
 8005316:	2b00      	cmp	r3, #0
 8005318:	d011      	beq.n	800533e <HAL_UART_IRQHandler+0x126>
 800531a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800531e:	f003 0320 	and.w	r3, r3, #32
 8005322:	2b00      	cmp	r3, #0
 8005324:	d105      	bne.n	8005332 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005326:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800532a:	f003 0301 	and.w	r3, r3, #1
 800532e:	2b00      	cmp	r3, #0
 8005330:	d005      	beq.n	800533e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005336:	f043 0208 	orr.w	r2, r3, #8
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005342:	2b00      	cmp	r3, #0
 8005344:	f000 81ed 	beq.w	8005722 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800534c:	f003 0320 	and.w	r3, r3, #32
 8005350:	2b00      	cmp	r3, #0
 8005352:	d008      	beq.n	8005366 <HAL_UART_IRQHandler+0x14e>
 8005354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005358:	f003 0320 	and.w	r3, r3, #32
 800535c:	2b00      	cmp	r3, #0
 800535e:	d002      	beq.n	8005366 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 faf0 	bl	8005946 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	695b      	ldr	r3, [r3, #20]
 800536c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005370:	2b40      	cmp	r3, #64	; 0x40
 8005372:	bf0c      	ite	eq
 8005374:	2301      	moveq	r3, #1
 8005376:	2300      	movne	r3, #0
 8005378:	b2db      	uxtb	r3, r3
 800537a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005382:	f003 0308 	and.w	r3, r3, #8
 8005386:	2b00      	cmp	r3, #0
 8005388:	d103      	bne.n	8005392 <HAL_UART_IRQHandler+0x17a>
 800538a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800538e:	2b00      	cmp	r3, #0
 8005390:	d04f      	beq.n	8005432 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f9f8 	bl	8005788 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	695b      	ldr	r3, [r3, #20]
 800539e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a2:	2b40      	cmp	r3, #64	; 0x40
 80053a4:	d141      	bne.n	800542a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	3314      	adds	r3, #20
 80053ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80053b4:	e853 3f00 	ldrex	r3, [r3]
 80053b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80053bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80053c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	3314      	adds	r3, #20
 80053ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80053d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80053d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80053de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80053e2:	e841 2300 	strex	r3, r2, [r1]
 80053e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80053ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d1d9      	bne.n	80053a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d013      	beq.n	8005422 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fe:	4a7d      	ldr	r2, [pc, #500]	; (80055f4 <HAL_UART_IRQHandler+0x3dc>)
 8005400:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005406:	4618      	mov	r0, r3
 8005408:	f7fc fe95 	bl	8002136 <HAL_DMA_Abort_IT>
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d016      	beq.n	8005440 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800541c:	4610      	mov	r0, r2
 800541e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005420:	e00e      	b.n	8005440 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 f99a 	bl	800575c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005428:	e00a      	b.n	8005440 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 f996 	bl	800575c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005430:	e006      	b.n	8005440 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 f992 	bl	800575c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800543e:	e170      	b.n	8005722 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005440:	bf00      	nop
    return;
 8005442:	e16e      	b.n	8005722 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005448:	2b01      	cmp	r3, #1
 800544a:	f040 814a 	bne.w	80056e2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800544e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005452:	f003 0310 	and.w	r3, r3, #16
 8005456:	2b00      	cmp	r3, #0
 8005458:	f000 8143 	beq.w	80056e2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800545c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005460:	f003 0310 	and.w	r3, r3, #16
 8005464:	2b00      	cmp	r3, #0
 8005466:	f000 813c 	beq.w	80056e2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800546a:	2300      	movs	r3, #0
 800546c:	60bb      	str	r3, [r7, #8]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	60bb      	str	r3, [r7, #8]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	60bb      	str	r3, [r7, #8]
 800547e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800548a:	2b40      	cmp	r3, #64	; 0x40
 800548c:	f040 80b4 	bne.w	80055f8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800549c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f000 8140 	beq.w	8005726 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80054aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054ae:	429a      	cmp	r2, r3
 80054b0:	f080 8139 	bcs.w	8005726 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054ba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c0:	69db      	ldr	r3, [r3, #28]
 80054c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054c6:	f000 8088 	beq.w	80055da <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	330c      	adds	r3, #12
 80054d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80054d8:	e853 3f00 	ldrex	r3, [r3]
 80054dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80054e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	330c      	adds	r3, #12
 80054f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80054f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80054fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005502:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005506:	e841 2300 	strex	r3, r2, [r1]
 800550a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800550e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1d9      	bne.n	80054ca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	3314      	adds	r3, #20
 800551c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005520:	e853 3f00 	ldrex	r3, [r3]
 8005524:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005526:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005528:	f023 0301 	bic.w	r3, r3, #1
 800552c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	3314      	adds	r3, #20
 8005536:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800553a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800553e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005540:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005542:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005546:	e841 2300 	strex	r3, r2, [r1]
 800554a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800554c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1e1      	bne.n	8005516 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	3314      	adds	r3, #20
 8005558:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800555c:	e853 3f00 	ldrex	r3, [r3]
 8005560:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005562:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005564:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005568:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	3314      	adds	r3, #20
 8005572:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005576:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005578:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800557c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800557e:	e841 2300 	strex	r3, r2, [r1]
 8005582:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005584:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005586:	2b00      	cmp	r3, #0
 8005588:	d1e3      	bne.n	8005552 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2220      	movs	r2, #32
 800558e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	330c      	adds	r3, #12
 800559e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055a2:	e853 3f00 	ldrex	r3, [r3]
 80055a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80055a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055aa:	f023 0310 	bic.w	r3, r3, #16
 80055ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	330c      	adds	r3, #12
 80055b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80055bc:	65ba      	str	r2, [r7, #88]	; 0x58
 80055be:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80055c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80055c4:	e841 2300 	strex	r3, r2, [r1]
 80055c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80055ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d1e3      	bne.n	8005598 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d4:	4618      	mov	r0, r3
 80055d6:	f7fc fd3e 	bl	8002056 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	4619      	mov	r1, r3
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 f8c0 	bl	8005770 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80055f0:	e099      	b.n	8005726 <HAL_UART_IRQHandler+0x50e>
 80055f2:	bf00      	nop
 80055f4:	0800584f 	.word	0x0800584f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005600:	b29b      	uxth	r3, r3
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800560c:	b29b      	uxth	r3, r3
 800560e:	2b00      	cmp	r3, #0
 8005610:	f000 808b 	beq.w	800572a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005614:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005618:	2b00      	cmp	r3, #0
 800561a:	f000 8086 	beq.w	800572a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	330c      	adds	r3, #12
 8005624:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005628:	e853 3f00 	ldrex	r3, [r3]
 800562c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800562e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005630:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005634:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	330c      	adds	r3, #12
 800563e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005642:	647a      	str	r2, [r7, #68]	; 0x44
 8005644:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005646:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005648:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800564a:	e841 2300 	strex	r3, r2, [r1]
 800564e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005652:	2b00      	cmp	r3, #0
 8005654:	d1e3      	bne.n	800561e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	3314      	adds	r3, #20
 800565c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005660:	e853 3f00 	ldrex	r3, [r3]
 8005664:	623b      	str	r3, [r7, #32]
   return(result);
 8005666:	6a3b      	ldr	r3, [r7, #32]
 8005668:	f023 0301 	bic.w	r3, r3, #1
 800566c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	3314      	adds	r3, #20
 8005676:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800567a:	633a      	str	r2, [r7, #48]	; 0x30
 800567c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005680:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005682:	e841 2300 	strex	r3, r2, [r1]
 8005686:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1e3      	bne.n	8005656 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2220      	movs	r2, #32
 8005692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	330c      	adds	r3, #12
 80056a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	e853 3f00 	ldrex	r3, [r3]
 80056aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f023 0310 	bic.w	r3, r3, #16
 80056b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	330c      	adds	r3, #12
 80056bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80056c0:	61fa      	str	r2, [r7, #28]
 80056c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c4:	69b9      	ldr	r1, [r7, #24]
 80056c6:	69fa      	ldr	r2, [r7, #28]
 80056c8:	e841 2300 	strex	r3, r2, [r1]
 80056cc:	617b      	str	r3, [r7, #20]
   return(result);
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d1e3      	bne.n	800569c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80056d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80056d8:	4619      	mov	r1, r3
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f848 	bl	8005770 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80056e0:	e023      	b.n	800572a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80056e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d009      	beq.n	8005702 <HAL_UART_IRQHandler+0x4ea>
 80056ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d003      	beq.n	8005702 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 f8bb 	bl	8005876 <UART_Transmit_IT>
    return;
 8005700:	e014      	b.n	800572c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00e      	beq.n	800572c <HAL_UART_IRQHandler+0x514>
 800570e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005716:	2b00      	cmp	r3, #0
 8005718:	d008      	beq.n	800572c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f8fb 	bl	8005916 <UART_EndTransmit_IT>
    return;
 8005720:	e004      	b.n	800572c <HAL_UART_IRQHandler+0x514>
    return;
 8005722:	bf00      	nop
 8005724:	e002      	b.n	800572c <HAL_UART_IRQHandler+0x514>
      return;
 8005726:	bf00      	nop
 8005728:	e000      	b.n	800572c <HAL_UART_IRQHandler+0x514>
      return;
 800572a:	bf00      	nop
  }
}
 800572c:	37e8      	adds	r7, #232	; 0xe8
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop

08005734 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800573c:	bf00      	nop
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005750:	bf00      	nop
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005764:	bf00      	nop
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	460b      	mov	r3, r1
 800577a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800577c:	bf00      	nop
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005788:	b480      	push	{r7}
 800578a:	b095      	sub	sp, #84	; 0x54
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	330c      	adds	r3, #12
 8005796:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800579a:	e853 3f00 	ldrex	r3, [r3]
 800579e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80057a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	330c      	adds	r3, #12
 80057ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80057b0:	643a      	str	r2, [r7, #64]	; 0x40
 80057b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80057b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80057b8:	e841 2300 	strex	r3, r2, [r1]
 80057bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d1e5      	bne.n	8005790 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	3314      	adds	r3, #20
 80057ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057cc:	6a3b      	ldr	r3, [r7, #32]
 80057ce:	e853 3f00 	ldrex	r3, [r3]
 80057d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	f023 0301 	bic.w	r3, r3, #1
 80057da:	64bb      	str	r3, [r7, #72]	; 0x48
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	3314      	adds	r3, #20
 80057e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057ec:	e841 2300 	strex	r3, r2, [r1]
 80057f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d1e5      	bne.n	80057c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d119      	bne.n	8005834 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	330c      	adds	r3, #12
 8005806:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	e853 3f00 	ldrex	r3, [r3]
 800580e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	f023 0310 	bic.w	r3, r3, #16
 8005816:	647b      	str	r3, [r7, #68]	; 0x44
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	330c      	adds	r3, #12
 800581e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005820:	61ba      	str	r2, [r7, #24]
 8005822:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005824:	6979      	ldr	r1, [r7, #20]
 8005826:	69ba      	ldr	r2, [r7, #24]
 8005828:	e841 2300 	strex	r3, r2, [r1]
 800582c:	613b      	str	r3, [r7, #16]
   return(result);
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d1e5      	bne.n	8005800 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2220      	movs	r2, #32
 8005838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005842:	bf00      	nop
 8005844:	3754      	adds	r7, #84	; 0x54
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr

0800584e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800584e:	b580      	push	{r7, lr}
 8005850:	b084      	sub	sp, #16
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f7ff ff77 	bl	800575c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800586e:	bf00      	nop
 8005870:	3710      	adds	r7, #16
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}

08005876 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005876:	b480      	push	{r7}
 8005878:	b085      	sub	sp, #20
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b21      	cmp	r3, #33	; 0x21
 8005888:	d13e      	bne.n	8005908 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005892:	d114      	bne.n	80058be <UART_Transmit_IT+0x48>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d110      	bne.n	80058be <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a1b      	ldr	r3, [r3, #32]
 80058a0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	881b      	ldrh	r3, [r3, #0]
 80058a6:	461a      	mov	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058b0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	1c9a      	adds	r2, r3, #2
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	621a      	str	r2, [r3, #32]
 80058bc:	e008      	b.n	80058d0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a1b      	ldr	r3, [r3, #32]
 80058c2:	1c59      	adds	r1, r3, #1
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	6211      	str	r1, [r2, #32]
 80058c8:	781a      	ldrb	r2, [r3, #0]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	3b01      	subs	r3, #1
 80058d8:	b29b      	uxth	r3, r3
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	4619      	mov	r1, r3
 80058de:	84d1      	strh	r1, [r2, #38]	; 0x26
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d10f      	bne.n	8005904 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68da      	ldr	r2, [r3, #12]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058f2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68da      	ldr	r2, [r3, #12]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005902:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005904:	2300      	movs	r3, #0
 8005906:	e000      	b.n	800590a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005908:	2302      	movs	r3, #2
  }
}
 800590a:	4618      	mov	r0, r3
 800590c:	3714      	adds	r7, #20
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr

08005916 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005916:	b580      	push	{r7, lr}
 8005918:	b082      	sub	sp, #8
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68da      	ldr	r2, [r3, #12]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800592c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2220      	movs	r2, #32
 8005932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f7ff fefc 	bl	8005734 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3708      	adds	r7, #8
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}

08005946 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005946:	b580      	push	{r7, lr}
 8005948:	b08c      	sub	sp, #48	; 0x30
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005954:	b2db      	uxtb	r3, r3
 8005956:	2b22      	cmp	r3, #34	; 0x22
 8005958:	f040 80ab 	bne.w	8005ab2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005964:	d117      	bne.n	8005996 <UART_Receive_IT+0x50>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d113      	bne.n	8005996 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800596e:	2300      	movs	r3, #0
 8005970:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005976:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	b29b      	uxth	r3, r3
 8005980:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005984:	b29a      	uxth	r2, r3
 8005986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005988:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598e:	1c9a      	adds	r2, r3, #2
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	629a      	str	r2, [r3, #40]	; 0x28
 8005994:	e026      	b.n	80059e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800599a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800599c:	2300      	movs	r3, #0
 800599e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059a8:	d007      	beq.n	80059ba <UART_Receive_IT+0x74>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d10a      	bne.n	80059c8 <UART_Receive_IT+0x82>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d106      	bne.n	80059c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	b2da      	uxtb	r2, r3
 80059c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c4:	701a      	strb	r2, [r3, #0]
 80059c6:	e008      	b.n	80059da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059d4:	b2da      	uxtb	r2, r3
 80059d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059de:	1c5a      	adds	r2, r3, #1
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	3b01      	subs	r3, #1
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	4619      	mov	r1, r3
 80059f2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d15a      	bne.n	8005aae <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68da      	ldr	r2, [r3, #12]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f022 0220 	bic.w	r2, r2, #32
 8005a06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68da      	ldr	r2, [r3, #12]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	695a      	ldr	r2, [r3, #20]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f022 0201 	bic.w	r2, r2, #1
 8005a26:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2220      	movs	r2, #32
 8005a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d135      	bne.n	8005aa4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	330c      	adds	r3, #12
 8005a44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	e853 3f00 	ldrex	r3, [r3]
 8005a4c:	613b      	str	r3, [r7, #16]
   return(result);
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	f023 0310 	bic.w	r3, r3, #16
 8005a54:	627b      	str	r3, [r7, #36]	; 0x24
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	330c      	adds	r3, #12
 8005a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a5e:	623a      	str	r2, [r7, #32]
 8005a60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a62:	69f9      	ldr	r1, [r7, #28]
 8005a64:	6a3a      	ldr	r2, [r7, #32]
 8005a66:	e841 2300 	strex	r3, r2, [r1]
 8005a6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d1e5      	bne.n	8005a3e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0310 	and.w	r3, r3, #16
 8005a7c:	2b10      	cmp	r3, #16
 8005a7e:	d10a      	bne.n	8005a96 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a80:	2300      	movs	r3, #0
 8005a82:	60fb      	str	r3, [r7, #12]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	60fb      	str	r3, [r7, #12]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	60fb      	str	r3, [r7, #12]
 8005a94:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f7ff fe67 	bl	8005770 <HAL_UARTEx_RxEventCallback>
 8005aa2:	e002      	b.n	8005aaa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f7ff fe4f 	bl	8005748 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	e002      	b.n	8005ab4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	e000      	b.n	8005ab4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005ab2:	2302      	movs	r3, #2
  }
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3730      	adds	r7, #48	; 0x30
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ac0:	b09f      	sub	sp, #124	; 0x7c
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005ad0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ad2:	68d9      	ldr	r1, [r3, #12]
 8005ad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	ea40 0301 	orr.w	r3, r0, r1
 8005adc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ae0:	689a      	ldr	r2, [r3, #8]
 8005ae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	431a      	orrs	r2, r3
 8005ae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aea:	695b      	ldr	r3, [r3, #20]
 8005aec:	431a      	orrs	r2, r3
 8005aee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005af0:	69db      	ldr	r3, [r3, #28]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005b00:	f021 010c 	bic.w	r1, r1, #12
 8005b04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b0a:	430b      	orrs	r3, r1
 8005b0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	695b      	ldr	r3, [r3, #20]
 8005b14:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005b18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b1a:	6999      	ldr	r1, [r3, #24]
 8005b1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	ea40 0301 	orr.w	r3, r0, r1
 8005b24:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	4bc5      	ldr	r3, [pc, #788]	; (8005e40 <UART_SetConfig+0x384>)
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d004      	beq.n	8005b3a <UART_SetConfig+0x7e>
 8005b30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	4bc3      	ldr	r3, [pc, #780]	; (8005e44 <UART_SetConfig+0x388>)
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d103      	bne.n	8005b42 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b3a:	f7ff fa83 	bl	8005044 <HAL_RCC_GetPCLK2Freq>
 8005b3e:	6778      	str	r0, [r7, #116]	; 0x74
 8005b40:	e002      	b.n	8005b48 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b42:	f7ff fa6b 	bl	800501c <HAL_RCC_GetPCLK1Freq>
 8005b46:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b4a:	69db      	ldr	r3, [r3, #28]
 8005b4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b50:	f040 80b6 	bne.w	8005cc0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b56:	461c      	mov	r4, r3
 8005b58:	f04f 0500 	mov.w	r5, #0
 8005b5c:	4622      	mov	r2, r4
 8005b5e:	462b      	mov	r3, r5
 8005b60:	1891      	adds	r1, r2, r2
 8005b62:	6439      	str	r1, [r7, #64]	; 0x40
 8005b64:	415b      	adcs	r3, r3
 8005b66:	647b      	str	r3, [r7, #68]	; 0x44
 8005b68:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005b6c:	1912      	adds	r2, r2, r4
 8005b6e:	eb45 0303 	adc.w	r3, r5, r3
 8005b72:	f04f 0000 	mov.w	r0, #0
 8005b76:	f04f 0100 	mov.w	r1, #0
 8005b7a:	00d9      	lsls	r1, r3, #3
 8005b7c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b80:	00d0      	lsls	r0, r2, #3
 8005b82:	4602      	mov	r2, r0
 8005b84:	460b      	mov	r3, r1
 8005b86:	1911      	adds	r1, r2, r4
 8005b88:	6639      	str	r1, [r7, #96]	; 0x60
 8005b8a:	416b      	adcs	r3, r5
 8005b8c:	667b      	str	r3, [r7, #100]	; 0x64
 8005b8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	461a      	mov	r2, r3
 8005b94:	f04f 0300 	mov.w	r3, #0
 8005b98:	1891      	adds	r1, r2, r2
 8005b9a:	63b9      	str	r1, [r7, #56]	; 0x38
 8005b9c:	415b      	adcs	r3, r3
 8005b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ba0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005ba4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005ba8:	f7fb f856 	bl	8000c58 <__aeabi_uldivmod>
 8005bac:	4602      	mov	r2, r0
 8005bae:	460b      	mov	r3, r1
 8005bb0:	4ba5      	ldr	r3, [pc, #660]	; (8005e48 <UART_SetConfig+0x38c>)
 8005bb2:	fba3 2302 	umull	r2, r3, r3, r2
 8005bb6:	095b      	lsrs	r3, r3, #5
 8005bb8:	011e      	lsls	r6, r3, #4
 8005bba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bbc:	461c      	mov	r4, r3
 8005bbe:	f04f 0500 	mov.w	r5, #0
 8005bc2:	4622      	mov	r2, r4
 8005bc4:	462b      	mov	r3, r5
 8005bc6:	1891      	adds	r1, r2, r2
 8005bc8:	6339      	str	r1, [r7, #48]	; 0x30
 8005bca:	415b      	adcs	r3, r3
 8005bcc:	637b      	str	r3, [r7, #52]	; 0x34
 8005bce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005bd2:	1912      	adds	r2, r2, r4
 8005bd4:	eb45 0303 	adc.w	r3, r5, r3
 8005bd8:	f04f 0000 	mov.w	r0, #0
 8005bdc:	f04f 0100 	mov.w	r1, #0
 8005be0:	00d9      	lsls	r1, r3, #3
 8005be2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005be6:	00d0      	lsls	r0, r2, #3
 8005be8:	4602      	mov	r2, r0
 8005bea:	460b      	mov	r3, r1
 8005bec:	1911      	adds	r1, r2, r4
 8005bee:	65b9      	str	r1, [r7, #88]	; 0x58
 8005bf0:	416b      	adcs	r3, r5
 8005bf2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	f04f 0300 	mov.w	r3, #0
 8005bfe:	1891      	adds	r1, r2, r2
 8005c00:	62b9      	str	r1, [r7, #40]	; 0x28
 8005c02:	415b      	adcs	r3, r3
 8005c04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c0a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005c0e:	f7fb f823 	bl	8000c58 <__aeabi_uldivmod>
 8005c12:	4602      	mov	r2, r0
 8005c14:	460b      	mov	r3, r1
 8005c16:	4b8c      	ldr	r3, [pc, #560]	; (8005e48 <UART_SetConfig+0x38c>)
 8005c18:	fba3 1302 	umull	r1, r3, r3, r2
 8005c1c:	095b      	lsrs	r3, r3, #5
 8005c1e:	2164      	movs	r1, #100	; 0x64
 8005c20:	fb01 f303 	mul.w	r3, r1, r3
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	00db      	lsls	r3, r3, #3
 8005c28:	3332      	adds	r3, #50	; 0x32
 8005c2a:	4a87      	ldr	r2, [pc, #540]	; (8005e48 <UART_SetConfig+0x38c>)
 8005c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c30:	095b      	lsrs	r3, r3, #5
 8005c32:	005b      	lsls	r3, r3, #1
 8005c34:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c38:	441e      	add	r6, r3
 8005c3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f04f 0100 	mov.w	r1, #0
 8005c42:	4602      	mov	r2, r0
 8005c44:	460b      	mov	r3, r1
 8005c46:	1894      	adds	r4, r2, r2
 8005c48:	623c      	str	r4, [r7, #32]
 8005c4a:	415b      	adcs	r3, r3
 8005c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c52:	1812      	adds	r2, r2, r0
 8005c54:	eb41 0303 	adc.w	r3, r1, r3
 8005c58:	f04f 0400 	mov.w	r4, #0
 8005c5c:	f04f 0500 	mov.w	r5, #0
 8005c60:	00dd      	lsls	r5, r3, #3
 8005c62:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005c66:	00d4      	lsls	r4, r2, #3
 8005c68:	4622      	mov	r2, r4
 8005c6a:	462b      	mov	r3, r5
 8005c6c:	1814      	adds	r4, r2, r0
 8005c6e:	653c      	str	r4, [r7, #80]	; 0x50
 8005c70:	414b      	adcs	r3, r1
 8005c72:	657b      	str	r3, [r7, #84]	; 0x54
 8005c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	461a      	mov	r2, r3
 8005c7a:	f04f 0300 	mov.w	r3, #0
 8005c7e:	1891      	adds	r1, r2, r2
 8005c80:	61b9      	str	r1, [r7, #24]
 8005c82:	415b      	adcs	r3, r3
 8005c84:	61fb      	str	r3, [r7, #28]
 8005c86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c8a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005c8e:	f7fa ffe3 	bl	8000c58 <__aeabi_uldivmod>
 8005c92:	4602      	mov	r2, r0
 8005c94:	460b      	mov	r3, r1
 8005c96:	4b6c      	ldr	r3, [pc, #432]	; (8005e48 <UART_SetConfig+0x38c>)
 8005c98:	fba3 1302 	umull	r1, r3, r3, r2
 8005c9c:	095b      	lsrs	r3, r3, #5
 8005c9e:	2164      	movs	r1, #100	; 0x64
 8005ca0:	fb01 f303 	mul.w	r3, r1, r3
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	00db      	lsls	r3, r3, #3
 8005ca8:	3332      	adds	r3, #50	; 0x32
 8005caa:	4a67      	ldr	r2, [pc, #412]	; (8005e48 <UART_SetConfig+0x38c>)
 8005cac:	fba2 2303 	umull	r2, r3, r2, r3
 8005cb0:	095b      	lsrs	r3, r3, #5
 8005cb2:	f003 0207 	and.w	r2, r3, #7
 8005cb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4432      	add	r2, r6
 8005cbc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005cbe:	e0b9      	b.n	8005e34 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cc2:	461c      	mov	r4, r3
 8005cc4:	f04f 0500 	mov.w	r5, #0
 8005cc8:	4622      	mov	r2, r4
 8005cca:	462b      	mov	r3, r5
 8005ccc:	1891      	adds	r1, r2, r2
 8005cce:	6139      	str	r1, [r7, #16]
 8005cd0:	415b      	adcs	r3, r3
 8005cd2:	617b      	str	r3, [r7, #20]
 8005cd4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005cd8:	1912      	adds	r2, r2, r4
 8005cda:	eb45 0303 	adc.w	r3, r5, r3
 8005cde:	f04f 0000 	mov.w	r0, #0
 8005ce2:	f04f 0100 	mov.w	r1, #0
 8005ce6:	00d9      	lsls	r1, r3, #3
 8005ce8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005cec:	00d0      	lsls	r0, r2, #3
 8005cee:	4602      	mov	r2, r0
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	eb12 0804 	adds.w	r8, r2, r4
 8005cf6:	eb43 0905 	adc.w	r9, r3, r5
 8005cfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f04f 0100 	mov.w	r1, #0
 8005d04:	f04f 0200 	mov.w	r2, #0
 8005d08:	f04f 0300 	mov.w	r3, #0
 8005d0c:	008b      	lsls	r3, r1, #2
 8005d0e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005d12:	0082      	lsls	r2, r0, #2
 8005d14:	4640      	mov	r0, r8
 8005d16:	4649      	mov	r1, r9
 8005d18:	f7fa ff9e 	bl	8000c58 <__aeabi_uldivmod>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	460b      	mov	r3, r1
 8005d20:	4b49      	ldr	r3, [pc, #292]	; (8005e48 <UART_SetConfig+0x38c>)
 8005d22:	fba3 2302 	umull	r2, r3, r3, r2
 8005d26:	095b      	lsrs	r3, r3, #5
 8005d28:	011e      	lsls	r6, r3, #4
 8005d2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f04f 0100 	mov.w	r1, #0
 8005d32:	4602      	mov	r2, r0
 8005d34:	460b      	mov	r3, r1
 8005d36:	1894      	adds	r4, r2, r2
 8005d38:	60bc      	str	r4, [r7, #8]
 8005d3a:	415b      	adcs	r3, r3
 8005d3c:	60fb      	str	r3, [r7, #12]
 8005d3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d42:	1812      	adds	r2, r2, r0
 8005d44:	eb41 0303 	adc.w	r3, r1, r3
 8005d48:	f04f 0400 	mov.w	r4, #0
 8005d4c:	f04f 0500 	mov.w	r5, #0
 8005d50:	00dd      	lsls	r5, r3, #3
 8005d52:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005d56:	00d4      	lsls	r4, r2, #3
 8005d58:	4622      	mov	r2, r4
 8005d5a:	462b      	mov	r3, r5
 8005d5c:	1814      	adds	r4, r2, r0
 8005d5e:	64bc      	str	r4, [r7, #72]	; 0x48
 8005d60:	414b      	adcs	r3, r1
 8005d62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f04f 0100 	mov.w	r1, #0
 8005d6e:	f04f 0200 	mov.w	r2, #0
 8005d72:	f04f 0300 	mov.w	r3, #0
 8005d76:	008b      	lsls	r3, r1, #2
 8005d78:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005d7c:	0082      	lsls	r2, r0, #2
 8005d7e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005d82:	f7fa ff69 	bl	8000c58 <__aeabi_uldivmod>
 8005d86:	4602      	mov	r2, r0
 8005d88:	460b      	mov	r3, r1
 8005d8a:	4b2f      	ldr	r3, [pc, #188]	; (8005e48 <UART_SetConfig+0x38c>)
 8005d8c:	fba3 1302 	umull	r1, r3, r3, r2
 8005d90:	095b      	lsrs	r3, r3, #5
 8005d92:	2164      	movs	r1, #100	; 0x64
 8005d94:	fb01 f303 	mul.w	r3, r1, r3
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	011b      	lsls	r3, r3, #4
 8005d9c:	3332      	adds	r3, #50	; 0x32
 8005d9e:	4a2a      	ldr	r2, [pc, #168]	; (8005e48 <UART_SetConfig+0x38c>)
 8005da0:	fba2 2303 	umull	r2, r3, r2, r3
 8005da4:	095b      	lsrs	r3, r3, #5
 8005da6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005daa:	441e      	add	r6, r3
 8005dac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dae:	4618      	mov	r0, r3
 8005db0:	f04f 0100 	mov.w	r1, #0
 8005db4:	4602      	mov	r2, r0
 8005db6:	460b      	mov	r3, r1
 8005db8:	1894      	adds	r4, r2, r2
 8005dba:	603c      	str	r4, [r7, #0]
 8005dbc:	415b      	adcs	r3, r3
 8005dbe:	607b      	str	r3, [r7, #4]
 8005dc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dc4:	1812      	adds	r2, r2, r0
 8005dc6:	eb41 0303 	adc.w	r3, r1, r3
 8005dca:	f04f 0400 	mov.w	r4, #0
 8005dce:	f04f 0500 	mov.w	r5, #0
 8005dd2:	00dd      	lsls	r5, r3, #3
 8005dd4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005dd8:	00d4      	lsls	r4, r2, #3
 8005dda:	4622      	mov	r2, r4
 8005ddc:	462b      	mov	r3, r5
 8005dde:	eb12 0a00 	adds.w	sl, r2, r0
 8005de2:	eb43 0b01 	adc.w	fp, r3, r1
 8005de6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	4618      	mov	r0, r3
 8005dec:	f04f 0100 	mov.w	r1, #0
 8005df0:	f04f 0200 	mov.w	r2, #0
 8005df4:	f04f 0300 	mov.w	r3, #0
 8005df8:	008b      	lsls	r3, r1, #2
 8005dfa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005dfe:	0082      	lsls	r2, r0, #2
 8005e00:	4650      	mov	r0, sl
 8005e02:	4659      	mov	r1, fp
 8005e04:	f7fa ff28 	bl	8000c58 <__aeabi_uldivmod>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	460b      	mov	r3, r1
 8005e0c:	4b0e      	ldr	r3, [pc, #56]	; (8005e48 <UART_SetConfig+0x38c>)
 8005e0e:	fba3 1302 	umull	r1, r3, r3, r2
 8005e12:	095b      	lsrs	r3, r3, #5
 8005e14:	2164      	movs	r1, #100	; 0x64
 8005e16:	fb01 f303 	mul.w	r3, r1, r3
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	011b      	lsls	r3, r3, #4
 8005e1e:	3332      	adds	r3, #50	; 0x32
 8005e20:	4a09      	ldr	r2, [pc, #36]	; (8005e48 <UART_SetConfig+0x38c>)
 8005e22:	fba2 2303 	umull	r2, r3, r2, r3
 8005e26:	095b      	lsrs	r3, r3, #5
 8005e28:	f003 020f 	and.w	r2, r3, #15
 8005e2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4432      	add	r2, r6
 8005e32:	609a      	str	r2, [r3, #8]
}
 8005e34:	bf00      	nop
 8005e36:	377c      	adds	r7, #124	; 0x7c
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e3e:	bf00      	nop
 8005e40:	40011000 	.word	0x40011000
 8005e44:	40011400 	.word	0x40011400
 8005e48:	51eb851f 	.word	0x51eb851f

08005e4c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e4c:	b084      	sub	sp, #16
 8005e4e:	b580      	push	{r7, lr}
 8005e50:	b084      	sub	sp, #16
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
 8005e56:	f107 001c 	add.w	r0, r7, #28
 8005e5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d122      	bne.n	8005eaa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005e78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005e8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d105      	bne.n	8005e9e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f001 fb1c 	bl	80074dc <USB_CoreReset>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	73fb      	strb	r3, [r7, #15]
 8005ea8:	e01a      	b.n	8005ee0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f001 fb10 	bl	80074dc <USB_CoreReset>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005ec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d106      	bne.n	8005ed4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	639a      	str	r2, [r3, #56]	; 0x38
 8005ed2:	e005      	b.n	8005ee0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d10b      	bne.n	8005efe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	f043 0206 	orr.w	r2, r3, #6
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	f043 0220 	orr.w	r2, r3, #32
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3710      	adds	r7, #16
 8005f04:	46bd      	mov	sp, r7
 8005f06:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f0a:	b004      	add	sp, #16
 8005f0c:	4770      	bx	lr
	...

08005f10 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b087      	sub	sp, #28
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005f1e:	79fb      	ldrb	r3, [r7, #7]
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d165      	bne.n	8005ff0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	4a41      	ldr	r2, [pc, #260]	; (800602c <USB_SetTurnaroundTime+0x11c>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d906      	bls.n	8005f3a <USB_SetTurnaroundTime+0x2a>
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	4a40      	ldr	r2, [pc, #256]	; (8006030 <USB_SetTurnaroundTime+0x120>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d202      	bcs.n	8005f3a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005f34:	230f      	movs	r3, #15
 8005f36:	617b      	str	r3, [r7, #20]
 8005f38:	e062      	b.n	8006000 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	4a3c      	ldr	r2, [pc, #240]	; (8006030 <USB_SetTurnaroundTime+0x120>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d306      	bcc.n	8005f50 <USB_SetTurnaroundTime+0x40>
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	4a3b      	ldr	r2, [pc, #236]	; (8006034 <USB_SetTurnaroundTime+0x124>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d202      	bcs.n	8005f50 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005f4a:	230e      	movs	r3, #14
 8005f4c:	617b      	str	r3, [r7, #20]
 8005f4e:	e057      	b.n	8006000 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	4a38      	ldr	r2, [pc, #224]	; (8006034 <USB_SetTurnaroundTime+0x124>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d306      	bcc.n	8005f66 <USB_SetTurnaroundTime+0x56>
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	4a37      	ldr	r2, [pc, #220]	; (8006038 <USB_SetTurnaroundTime+0x128>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d202      	bcs.n	8005f66 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005f60:	230d      	movs	r3, #13
 8005f62:	617b      	str	r3, [r7, #20]
 8005f64:	e04c      	b.n	8006000 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	4a33      	ldr	r2, [pc, #204]	; (8006038 <USB_SetTurnaroundTime+0x128>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d306      	bcc.n	8005f7c <USB_SetTurnaroundTime+0x6c>
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	4a32      	ldr	r2, [pc, #200]	; (800603c <USB_SetTurnaroundTime+0x12c>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d802      	bhi.n	8005f7c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005f76:	230c      	movs	r3, #12
 8005f78:	617b      	str	r3, [r7, #20]
 8005f7a:	e041      	b.n	8006000 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	4a2f      	ldr	r2, [pc, #188]	; (800603c <USB_SetTurnaroundTime+0x12c>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d906      	bls.n	8005f92 <USB_SetTurnaroundTime+0x82>
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	4a2e      	ldr	r2, [pc, #184]	; (8006040 <USB_SetTurnaroundTime+0x130>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d802      	bhi.n	8005f92 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005f8c:	230b      	movs	r3, #11
 8005f8e:	617b      	str	r3, [r7, #20]
 8005f90:	e036      	b.n	8006000 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	4a2a      	ldr	r2, [pc, #168]	; (8006040 <USB_SetTurnaroundTime+0x130>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d906      	bls.n	8005fa8 <USB_SetTurnaroundTime+0x98>
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	4a29      	ldr	r2, [pc, #164]	; (8006044 <USB_SetTurnaroundTime+0x134>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d802      	bhi.n	8005fa8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005fa2:	230a      	movs	r3, #10
 8005fa4:	617b      	str	r3, [r7, #20]
 8005fa6:	e02b      	b.n	8006000 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	4a26      	ldr	r2, [pc, #152]	; (8006044 <USB_SetTurnaroundTime+0x134>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d906      	bls.n	8005fbe <USB_SetTurnaroundTime+0xae>
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	4a25      	ldr	r2, [pc, #148]	; (8006048 <USB_SetTurnaroundTime+0x138>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d202      	bcs.n	8005fbe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005fb8:	2309      	movs	r3, #9
 8005fba:	617b      	str	r3, [r7, #20]
 8005fbc:	e020      	b.n	8006000 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	4a21      	ldr	r2, [pc, #132]	; (8006048 <USB_SetTurnaroundTime+0x138>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d306      	bcc.n	8005fd4 <USB_SetTurnaroundTime+0xc4>
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	4a20      	ldr	r2, [pc, #128]	; (800604c <USB_SetTurnaroundTime+0x13c>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d802      	bhi.n	8005fd4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005fce:	2308      	movs	r3, #8
 8005fd0:	617b      	str	r3, [r7, #20]
 8005fd2:	e015      	b.n	8006000 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	4a1d      	ldr	r2, [pc, #116]	; (800604c <USB_SetTurnaroundTime+0x13c>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d906      	bls.n	8005fea <USB_SetTurnaroundTime+0xda>
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	4a1c      	ldr	r2, [pc, #112]	; (8006050 <USB_SetTurnaroundTime+0x140>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d202      	bcs.n	8005fea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005fe4:	2307      	movs	r3, #7
 8005fe6:	617b      	str	r3, [r7, #20]
 8005fe8:	e00a      	b.n	8006000 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005fea:	2306      	movs	r3, #6
 8005fec:	617b      	str	r3, [r7, #20]
 8005fee:	e007      	b.n	8006000 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005ff0:	79fb      	ldrb	r3, [r7, #7]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d102      	bne.n	8005ffc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005ff6:	2309      	movs	r3, #9
 8005ff8:	617b      	str	r3, [r7, #20]
 8005ffa:	e001      	b.n	8006000 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005ffc:	2309      	movs	r3, #9
 8005ffe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	68da      	ldr	r2, [r3, #12]
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	029b      	lsls	r3, r3, #10
 8006014:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006018:	431a      	orrs	r2, r3
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	371c      	adds	r7, #28
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr
 800602c:	00d8acbf 	.word	0x00d8acbf
 8006030:	00e4e1c0 	.word	0x00e4e1c0
 8006034:	00f42400 	.word	0x00f42400
 8006038:	01067380 	.word	0x01067380
 800603c:	011a499f 	.word	0x011a499f
 8006040:	01312cff 	.word	0x01312cff
 8006044:	014ca43f 	.word	0x014ca43f
 8006048:	016e3600 	.word	0x016e3600
 800604c:	01a6ab1f 	.word	0x01a6ab1f
 8006050:	01e84800 	.word	0x01e84800

08006054 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006054:	b480      	push	{r7}
 8006056:	b083      	sub	sp, #12
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	f043 0201 	orr.w	r2, r3, #1
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	370c      	adds	r7, #12
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr

08006076 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006076:	b480      	push	{r7}
 8006078:	b083      	sub	sp, #12
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	f023 0201 	bic.w	r2, r3, #1
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800608a:	2300      	movs	r3, #0
}
 800608c:	4618      	mov	r0, r3
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b084      	sub	sp, #16
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	460b      	mov	r3, r1
 80060a2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80060a4:	2300      	movs	r3, #0
 80060a6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80060b4:	78fb      	ldrb	r3, [r7, #3]
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d115      	bne.n	80060e6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80060c6:	2001      	movs	r0, #1
 80060c8:	f7fb fe90 	bl	8001dec <HAL_Delay>
      ms++;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	3301      	adds	r3, #1
 80060d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f001 f972 	bl	80073bc <USB_GetMode>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d01e      	beq.n	800611c <USB_SetCurrentMode+0x84>
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2b31      	cmp	r3, #49	; 0x31
 80060e2:	d9f0      	bls.n	80060c6 <USB_SetCurrentMode+0x2e>
 80060e4:	e01a      	b.n	800611c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80060e6:	78fb      	ldrb	r3, [r7, #3]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d115      	bne.n	8006118 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80060f8:	2001      	movs	r0, #1
 80060fa:	f7fb fe77 	bl	8001dec <HAL_Delay>
      ms++;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	3301      	adds	r3, #1
 8006102:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f001 f959 	bl	80073bc <USB_GetMode>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d005      	beq.n	800611c <USB_SetCurrentMode+0x84>
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2b31      	cmp	r3, #49	; 0x31
 8006114:	d9f0      	bls.n	80060f8 <USB_SetCurrentMode+0x60>
 8006116:	e001      	b.n	800611c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e005      	b.n	8006128 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2b32      	cmp	r3, #50	; 0x32
 8006120:	d101      	bne.n	8006126 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e000      	b.n	8006128 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006126:	2300      	movs	r3, #0
}
 8006128:	4618      	mov	r0, r3
 800612a:	3710      	adds	r7, #16
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006130:	b084      	sub	sp, #16
 8006132:	b580      	push	{r7, lr}
 8006134:	b086      	sub	sp, #24
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
 800613a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800613e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006142:	2300      	movs	r3, #0
 8006144:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800614a:	2300      	movs	r3, #0
 800614c:	613b      	str	r3, [r7, #16]
 800614e:	e009      	b.n	8006164 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	3340      	adds	r3, #64	; 0x40
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	4413      	add	r3, r2
 800615a:	2200      	movs	r2, #0
 800615c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	3301      	adds	r3, #1
 8006162:	613b      	str	r3, [r7, #16]
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	2b0e      	cmp	r3, #14
 8006168:	d9f2      	bls.n	8006150 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800616a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800616c:	2b00      	cmp	r3, #0
 800616e:	d11c      	bne.n	80061aa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800617e:	f043 0302 	orr.w	r3, r3, #2
 8006182:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006188:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006194:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	639a      	str	r2, [r3, #56]	; 0x38
 80061a8:	e00b      	b.n	80061c2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ae:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80061c8:	461a      	mov	r2, r3
 80061ca:	2300      	movs	r3, #0
 80061cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061d4:	4619      	mov	r1, r3
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061dc:	461a      	mov	r2, r3
 80061de:	680b      	ldr	r3, [r1, #0]
 80061e0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80061e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d10c      	bne.n	8006202 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80061e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d104      	bne.n	80061f8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80061ee:	2100      	movs	r1, #0
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 f945 	bl	8006480 <USB_SetDevSpeed>
 80061f6:	e008      	b.n	800620a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80061f8:	2101      	movs	r1, #1
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 f940 	bl	8006480 <USB_SetDevSpeed>
 8006200:	e003      	b.n	800620a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006202:	2103      	movs	r1, #3
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 f93b 	bl	8006480 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800620a:	2110      	movs	r1, #16
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 f8f3 	bl	80063f8 <USB_FlushTxFifo>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d001      	beq.n	800621c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 f90f 	bl	8006440 <USB_FlushRxFifo>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d001      	beq.n	800622c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006232:	461a      	mov	r2, r3
 8006234:	2300      	movs	r3, #0
 8006236:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800623e:	461a      	mov	r2, r3
 8006240:	2300      	movs	r3, #0
 8006242:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800624a:	461a      	mov	r2, r3
 800624c:	2300      	movs	r3, #0
 800624e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006250:	2300      	movs	r3, #0
 8006252:	613b      	str	r3, [r7, #16]
 8006254:	e043      	b.n	80062de <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	015a      	lsls	r2, r3, #5
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	4413      	add	r3, r2
 800625e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006268:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800626c:	d118      	bne.n	80062a0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d10a      	bne.n	800628a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	015a      	lsls	r2, r3, #5
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	4413      	add	r3, r2
 800627c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006280:	461a      	mov	r2, r3
 8006282:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006286:	6013      	str	r3, [r2, #0]
 8006288:	e013      	b.n	80062b2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	015a      	lsls	r2, r3, #5
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	4413      	add	r3, r2
 8006292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006296:	461a      	mov	r2, r3
 8006298:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800629c:	6013      	str	r3, [r2, #0]
 800629e:	e008      	b.n	80062b2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	015a      	lsls	r2, r3, #5
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	4413      	add	r3, r2
 80062a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ac:	461a      	mov	r2, r3
 80062ae:	2300      	movs	r3, #0
 80062b0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	015a      	lsls	r2, r3, #5
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	4413      	add	r3, r2
 80062ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062be:	461a      	mov	r2, r3
 80062c0:	2300      	movs	r3, #0
 80062c2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	015a      	lsls	r2, r3, #5
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	4413      	add	r3, r2
 80062cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062d0:	461a      	mov	r2, r3
 80062d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80062d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	3301      	adds	r3, #1
 80062dc:	613b      	str	r3, [r7, #16]
 80062de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e0:	693a      	ldr	r2, [r7, #16]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d3b7      	bcc.n	8006256 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062e6:	2300      	movs	r3, #0
 80062e8:	613b      	str	r3, [r7, #16]
 80062ea:	e043      	b.n	8006374 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	015a      	lsls	r2, r3, #5
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	4413      	add	r3, r2
 80062f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006302:	d118      	bne.n	8006336 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d10a      	bne.n	8006320 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	015a      	lsls	r2, r3, #5
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	4413      	add	r3, r2
 8006312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006316:	461a      	mov	r2, r3
 8006318:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800631c:	6013      	str	r3, [r2, #0]
 800631e:	e013      	b.n	8006348 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	015a      	lsls	r2, r3, #5
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	4413      	add	r3, r2
 8006328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800632c:	461a      	mov	r2, r3
 800632e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006332:	6013      	str	r3, [r2, #0]
 8006334:	e008      	b.n	8006348 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	015a      	lsls	r2, r3, #5
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	4413      	add	r3, r2
 800633e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006342:	461a      	mov	r2, r3
 8006344:	2300      	movs	r3, #0
 8006346:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	015a      	lsls	r2, r3, #5
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	4413      	add	r3, r2
 8006350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006354:	461a      	mov	r2, r3
 8006356:	2300      	movs	r3, #0
 8006358:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	015a      	lsls	r2, r3, #5
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	4413      	add	r3, r2
 8006362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006366:	461a      	mov	r2, r3
 8006368:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800636c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	3301      	adds	r3, #1
 8006372:	613b      	str	r3, [r7, #16]
 8006374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006376:	693a      	ldr	r2, [r7, #16]
 8006378:	429a      	cmp	r2, r3
 800637a:	d3b7      	bcc.n	80062ec <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006382:	691b      	ldr	r3, [r3, #16]
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800638a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800638e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800639c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800639e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d105      	bne.n	80063b0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	699b      	ldr	r3, [r3, #24]
 80063a8:	f043 0210 	orr.w	r2, r3, #16
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	699a      	ldr	r2, [r3, #24]
 80063b4:	4b0f      	ldr	r3, [pc, #60]	; (80063f4 <USB_DevInit+0x2c4>)
 80063b6:	4313      	orrs	r3, r2
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80063bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d005      	beq.n	80063ce <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	699b      	ldr	r3, [r3, #24]
 80063c6:	f043 0208 	orr.w	r2, r3, #8
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80063ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d107      	bne.n	80063e4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063dc:	f043 0304 	orr.w	r3, r3, #4
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80063e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3718      	adds	r7, #24
 80063ea:	46bd      	mov	sp, r7
 80063ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063f0:	b004      	add	sp, #16
 80063f2:	4770      	bx	lr
 80063f4:	803c3800 	.word	0x803c3800

080063f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006402:	2300      	movs	r3, #0
 8006404:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	019b      	lsls	r3, r3, #6
 800640a:	f043 0220 	orr.w	r2, r3, #32
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	3301      	adds	r3, #1
 8006416:	60fb      	str	r3, [r7, #12]
 8006418:	4a08      	ldr	r2, [pc, #32]	; (800643c <USB_FlushTxFifo+0x44>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d901      	bls.n	8006422 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800641e:	2303      	movs	r3, #3
 8006420:	e006      	b.n	8006430 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	f003 0320 	and.w	r3, r3, #32
 800642a:	2b20      	cmp	r3, #32
 800642c:	d0f1      	beq.n	8006412 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	3714      	adds	r7, #20
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr
 800643c:	00030d40 	.word	0x00030d40

08006440 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006440:	b480      	push	{r7}
 8006442:	b085      	sub	sp, #20
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006448:	2300      	movs	r3, #0
 800644a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2210      	movs	r2, #16
 8006450:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	3301      	adds	r3, #1
 8006456:	60fb      	str	r3, [r7, #12]
 8006458:	4a08      	ldr	r2, [pc, #32]	; (800647c <USB_FlushRxFifo+0x3c>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d901      	bls.n	8006462 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800645e:	2303      	movs	r3, #3
 8006460:	e006      	b.n	8006470 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	f003 0310 	and.w	r3, r3, #16
 800646a:	2b10      	cmp	r3, #16
 800646c:	d0f1      	beq.n	8006452 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	3714      	adds	r7, #20
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr
 800647c:	00030d40 	.word	0x00030d40

08006480 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006480:	b480      	push	{r7}
 8006482:	b085      	sub	sp, #20
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	460b      	mov	r3, r1
 800648a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	78fb      	ldrb	r3, [r7, #3]
 800649a:	68f9      	ldr	r1, [r7, #12]
 800649c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064a0:	4313      	orrs	r3, r2
 80064a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3714      	adds	r7, #20
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr

080064b2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80064b2:	b480      	push	{r7}
 80064b4:	b087      	sub	sp, #28
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	f003 0306 	and.w	r3, r3, #6
 80064ca:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d102      	bne.n	80064d8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80064d2:	2300      	movs	r3, #0
 80064d4:	75fb      	strb	r3, [r7, #23]
 80064d6:	e00a      	b.n	80064ee <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d002      	beq.n	80064e4 <USB_GetDevSpeed+0x32>
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2b06      	cmp	r3, #6
 80064e2:	d102      	bne.n	80064ea <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80064e4:	2302      	movs	r3, #2
 80064e6:	75fb      	strb	r3, [r7, #23]
 80064e8:	e001      	b.n	80064ee <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80064ea:	230f      	movs	r3, #15
 80064ec:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80064ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	371c      	adds	r7, #28
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b085      	sub	sp, #20
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	785b      	ldrb	r3, [r3, #1]
 8006514:	2b01      	cmp	r3, #1
 8006516:	d13a      	bne.n	800658e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800651e:	69da      	ldr	r2, [r3, #28]
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	f003 030f 	and.w	r3, r3, #15
 8006528:	2101      	movs	r1, #1
 800652a:	fa01 f303 	lsl.w	r3, r1, r3
 800652e:	b29b      	uxth	r3, r3
 8006530:	68f9      	ldr	r1, [r7, #12]
 8006532:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006536:	4313      	orrs	r3, r2
 8006538:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	015a      	lsls	r2, r3, #5
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	4413      	add	r3, r2
 8006542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800654c:	2b00      	cmp	r3, #0
 800654e:	d155      	bne.n	80065fc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	015a      	lsls	r2, r3, #5
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	4413      	add	r3, r2
 8006558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	78db      	ldrb	r3, [r3, #3]
 800656a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800656c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	059b      	lsls	r3, r3, #22
 8006572:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006574:	4313      	orrs	r3, r2
 8006576:	68ba      	ldr	r2, [r7, #8]
 8006578:	0151      	lsls	r1, r2, #5
 800657a:	68fa      	ldr	r2, [r7, #12]
 800657c:	440a      	add	r2, r1
 800657e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006586:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800658a:	6013      	str	r3, [r2, #0]
 800658c:	e036      	b.n	80065fc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006594:	69da      	ldr	r2, [r3, #28]
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	f003 030f 	and.w	r3, r3, #15
 800659e:	2101      	movs	r1, #1
 80065a0:	fa01 f303 	lsl.w	r3, r1, r3
 80065a4:	041b      	lsls	r3, r3, #16
 80065a6:	68f9      	ldr	r1, [r7, #12]
 80065a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065ac:	4313      	orrs	r3, r2
 80065ae:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	015a      	lsls	r2, r3, #5
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	4413      	add	r3, r2
 80065b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d11a      	bne.n	80065fc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	015a      	lsls	r2, r3, #5
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	4413      	add	r3, r2
 80065ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	78db      	ldrb	r3, [r3, #3]
 80065e0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80065e2:	430b      	orrs	r3, r1
 80065e4:	4313      	orrs	r3, r2
 80065e6:	68ba      	ldr	r2, [r7, #8]
 80065e8:	0151      	lsls	r1, r2, #5
 80065ea:	68fa      	ldr	r2, [r7, #12]
 80065ec:	440a      	add	r2, r1
 80065ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065fa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3714      	adds	r7, #20
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr
	...

0800660c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800660c:	b480      	push	{r7}
 800660e:	b085      	sub	sp, #20
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	785b      	ldrb	r3, [r3, #1]
 8006624:	2b01      	cmp	r3, #1
 8006626:	d161      	bne.n	80066ec <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	015a      	lsls	r2, r3, #5
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	4413      	add	r3, r2
 8006630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800663a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800663e:	d11f      	bne.n	8006680 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	015a      	lsls	r2, r3, #5
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	4413      	add	r3, r2
 8006648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68ba      	ldr	r2, [r7, #8]
 8006650:	0151      	lsls	r1, r2, #5
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	440a      	add	r2, r1
 8006656:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800665a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800665e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	015a      	lsls	r2, r3, #5
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	4413      	add	r3, r2
 8006668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68ba      	ldr	r2, [r7, #8]
 8006670:	0151      	lsls	r1, r2, #5
 8006672:	68fa      	ldr	r2, [r7, #12]
 8006674:	440a      	add	r2, r1
 8006676:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800667a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800667e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006686:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	f003 030f 	and.w	r3, r3, #15
 8006690:	2101      	movs	r1, #1
 8006692:	fa01 f303 	lsl.w	r3, r1, r3
 8006696:	b29b      	uxth	r3, r3
 8006698:	43db      	mvns	r3, r3
 800669a:	68f9      	ldr	r1, [r7, #12]
 800669c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066a0:	4013      	ands	r3, r2
 80066a2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066aa:	69da      	ldr	r2, [r3, #28]
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	f003 030f 	and.w	r3, r3, #15
 80066b4:	2101      	movs	r1, #1
 80066b6:	fa01 f303 	lsl.w	r3, r1, r3
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	43db      	mvns	r3, r3
 80066be:	68f9      	ldr	r1, [r7, #12]
 80066c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066c4:	4013      	ands	r3, r2
 80066c6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	015a      	lsls	r2, r3, #5
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	4413      	add	r3, r2
 80066d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	0159      	lsls	r1, r3, #5
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	440b      	add	r3, r1
 80066de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066e2:	4619      	mov	r1, r3
 80066e4:	4b35      	ldr	r3, [pc, #212]	; (80067bc <USB_DeactivateEndpoint+0x1b0>)
 80066e6:	4013      	ands	r3, r2
 80066e8:	600b      	str	r3, [r1, #0]
 80066ea:	e060      	b.n	80067ae <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	015a      	lsls	r2, r3, #5
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	4413      	add	r3, r2
 80066f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006702:	d11f      	bne.n	8006744 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	015a      	lsls	r2, r3, #5
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	4413      	add	r3, r2
 800670c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68ba      	ldr	r2, [r7, #8]
 8006714:	0151      	lsls	r1, r2, #5
 8006716:	68fa      	ldr	r2, [r7, #12]
 8006718:	440a      	add	r2, r1
 800671a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800671e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006722:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	015a      	lsls	r2, r3, #5
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	4413      	add	r3, r2
 800672c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68ba      	ldr	r2, [r7, #8]
 8006734:	0151      	lsls	r1, r2, #5
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	440a      	add	r2, r1
 800673a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800673e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006742:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800674a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	f003 030f 	and.w	r3, r3, #15
 8006754:	2101      	movs	r1, #1
 8006756:	fa01 f303 	lsl.w	r3, r1, r3
 800675a:	041b      	lsls	r3, r3, #16
 800675c:	43db      	mvns	r3, r3
 800675e:	68f9      	ldr	r1, [r7, #12]
 8006760:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006764:	4013      	ands	r3, r2
 8006766:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800676e:	69da      	ldr	r2, [r3, #28]
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	f003 030f 	and.w	r3, r3, #15
 8006778:	2101      	movs	r1, #1
 800677a:	fa01 f303 	lsl.w	r3, r1, r3
 800677e:	041b      	lsls	r3, r3, #16
 8006780:	43db      	mvns	r3, r3
 8006782:	68f9      	ldr	r1, [r7, #12]
 8006784:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006788:	4013      	ands	r3, r2
 800678a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	015a      	lsls	r2, r3, #5
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	4413      	add	r3, r2
 8006794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	0159      	lsls	r1, r3, #5
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	440b      	add	r3, r1
 80067a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a6:	4619      	mov	r1, r3
 80067a8:	4b05      	ldr	r3, [pc, #20]	; (80067c0 <USB_DeactivateEndpoint+0x1b4>)
 80067aa:	4013      	ands	r3, r2
 80067ac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80067ae:	2300      	movs	r3, #0
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3714      	adds	r7, #20
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr
 80067bc:	ec337800 	.word	0xec337800
 80067c0:	eff37800 	.word	0xeff37800

080067c4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b08a      	sub	sp, #40	; 0x28
 80067c8:	af02      	add	r7, sp, #8
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	4613      	mov	r3, r2
 80067d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	785b      	ldrb	r3, [r3, #1]
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	f040 815c 	bne.w	8006a9e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	695b      	ldr	r3, [r3, #20]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d132      	bne.n	8006854 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	015a      	lsls	r2, r3, #5
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	4413      	add	r3, r2
 80067f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	69ba      	ldr	r2, [r7, #24]
 80067fe:	0151      	lsls	r1, r2, #5
 8006800:	69fa      	ldr	r2, [r7, #28]
 8006802:	440a      	add	r2, r1
 8006804:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006808:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800680c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006810:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	015a      	lsls	r2, r3, #5
 8006816:	69fb      	ldr	r3, [r7, #28]
 8006818:	4413      	add	r3, r2
 800681a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800681e:	691b      	ldr	r3, [r3, #16]
 8006820:	69ba      	ldr	r2, [r7, #24]
 8006822:	0151      	lsls	r1, r2, #5
 8006824:	69fa      	ldr	r2, [r7, #28]
 8006826:	440a      	add	r2, r1
 8006828:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800682c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006830:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006832:	69bb      	ldr	r3, [r7, #24]
 8006834:	015a      	lsls	r2, r3, #5
 8006836:	69fb      	ldr	r3, [r7, #28]
 8006838:	4413      	add	r3, r2
 800683a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	69ba      	ldr	r2, [r7, #24]
 8006842:	0151      	lsls	r1, r2, #5
 8006844:	69fa      	ldr	r2, [r7, #28]
 8006846:	440a      	add	r2, r1
 8006848:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800684c:	0cdb      	lsrs	r3, r3, #19
 800684e:	04db      	lsls	r3, r3, #19
 8006850:	6113      	str	r3, [r2, #16]
 8006852:	e074      	b.n	800693e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006854:	69bb      	ldr	r3, [r7, #24]
 8006856:	015a      	lsls	r2, r3, #5
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	4413      	add	r3, r2
 800685c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	69ba      	ldr	r2, [r7, #24]
 8006864:	0151      	lsls	r1, r2, #5
 8006866:	69fa      	ldr	r2, [r7, #28]
 8006868:	440a      	add	r2, r1
 800686a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800686e:	0cdb      	lsrs	r3, r3, #19
 8006870:	04db      	lsls	r3, r3, #19
 8006872:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	015a      	lsls	r2, r3, #5
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	4413      	add	r3, r2
 800687c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	69ba      	ldr	r2, [r7, #24]
 8006884:	0151      	lsls	r1, r2, #5
 8006886:	69fa      	ldr	r2, [r7, #28]
 8006888:	440a      	add	r2, r1
 800688a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800688e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006892:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006896:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	015a      	lsls	r2, r3, #5
 800689c:	69fb      	ldr	r3, [r7, #28]
 800689e:	4413      	add	r3, r2
 80068a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068a4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	6959      	ldr	r1, [r3, #20]
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	440b      	add	r3, r1
 80068b0:	1e59      	subs	r1, r3, #1
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80068ba:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80068bc:	4b9d      	ldr	r3, [pc, #628]	; (8006b34 <USB_EPStartXfer+0x370>)
 80068be:	400b      	ands	r3, r1
 80068c0:	69b9      	ldr	r1, [r7, #24]
 80068c2:	0148      	lsls	r0, r1, #5
 80068c4:	69f9      	ldr	r1, [r7, #28]
 80068c6:	4401      	add	r1, r0
 80068c8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80068cc:	4313      	orrs	r3, r2
 80068ce:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	015a      	lsls	r2, r3, #5
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	4413      	add	r3, r2
 80068d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068dc:	691a      	ldr	r2, [r3, #16]
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	695b      	ldr	r3, [r3, #20]
 80068e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068e6:	69b9      	ldr	r1, [r7, #24]
 80068e8:	0148      	lsls	r0, r1, #5
 80068ea:	69f9      	ldr	r1, [r7, #28]
 80068ec:	4401      	add	r1, r0
 80068ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80068f2:	4313      	orrs	r3, r2
 80068f4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	78db      	ldrb	r3, [r3, #3]
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d11f      	bne.n	800693e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	015a      	lsls	r2, r3, #5
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	4413      	add	r3, r2
 8006906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	69ba      	ldr	r2, [r7, #24]
 800690e:	0151      	lsls	r1, r2, #5
 8006910:	69fa      	ldr	r2, [r7, #28]
 8006912:	440a      	add	r2, r1
 8006914:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006918:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800691c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	015a      	lsls	r2, r3, #5
 8006922:	69fb      	ldr	r3, [r7, #28]
 8006924:	4413      	add	r3, r2
 8006926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800692a:	691b      	ldr	r3, [r3, #16]
 800692c:	69ba      	ldr	r2, [r7, #24]
 800692e:	0151      	lsls	r1, r2, #5
 8006930:	69fa      	ldr	r2, [r7, #28]
 8006932:	440a      	add	r2, r1
 8006934:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006938:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800693c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800693e:	79fb      	ldrb	r3, [r7, #7]
 8006940:	2b01      	cmp	r3, #1
 8006942:	d14b      	bne.n	80069dc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	691b      	ldr	r3, [r3, #16]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d009      	beq.n	8006960 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800694c:	69bb      	ldr	r3, [r7, #24]
 800694e:	015a      	lsls	r2, r3, #5
 8006950:	69fb      	ldr	r3, [r7, #28]
 8006952:	4413      	add	r3, r2
 8006954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006958:	461a      	mov	r2, r3
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	78db      	ldrb	r3, [r3, #3]
 8006964:	2b01      	cmp	r3, #1
 8006966:	d128      	bne.n	80069ba <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006974:	2b00      	cmp	r3, #0
 8006976:	d110      	bne.n	800699a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006978:	69bb      	ldr	r3, [r7, #24]
 800697a:	015a      	lsls	r2, r3, #5
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	4413      	add	r3, r2
 8006980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	69ba      	ldr	r2, [r7, #24]
 8006988:	0151      	lsls	r1, r2, #5
 800698a:	69fa      	ldr	r2, [r7, #28]
 800698c:	440a      	add	r2, r1
 800698e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006992:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006996:	6013      	str	r3, [r2, #0]
 8006998:	e00f      	b.n	80069ba <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	015a      	lsls	r2, r3, #5
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	4413      	add	r3, r2
 80069a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	69ba      	ldr	r2, [r7, #24]
 80069aa:	0151      	lsls	r1, r2, #5
 80069ac:	69fa      	ldr	r2, [r7, #28]
 80069ae:	440a      	add	r2, r1
 80069b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069b8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	015a      	lsls	r2, r3, #5
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	4413      	add	r3, r2
 80069c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	69ba      	ldr	r2, [r7, #24]
 80069ca:	0151      	lsls	r1, r2, #5
 80069cc:	69fa      	ldr	r2, [r7, #28]
 80069ce:	440a      	add	r2, r1
 80069d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80069d8:	6013      	str	r3, [r2, #0]
 80069da:	e12f      	b.n	8006c3c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80069dc:	69bb      	ldr	r3, [r7, #24]
 80069de:	015a      	lsls	r2, r3, #5
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	4413      	add	r3, r2
 80069e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	69ba      	ldr	r2, [r7, #24]
 80069ec:	0151      	lsls	r1, r2, #5
 80069ee:	69fa      	ldr	r2, [r7, #28]
 80069f0:	440a      	add	r2, r1
 80069f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80069fa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	78db      	ldrb	r3, [r3, #3]
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d015      	beq.n	8006a30 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	695b      	ldr	r3, [r3, #20]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	f000 8117 	beq.w	8006c3c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	f003 030f 	and.w	r3, r3, #15
 8006a1e:	2101      	movs	r1, #1
 8006a20:	fa01 f303 	lsl.w	r3, r1, r3
 8006a24:	69f9      	ldr	r1, [r7, #28]
 8006a26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	634b      	str	r3, [r1, #52]	; 0x34
 8006a2e:	e105      	b.n	8006c3c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006a30:	69fb      	ldr	r3, [r7, #28]
 8006a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d110      	bne.n	8006a62 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	015a      	lsls	r2, r3, #5
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	4413      	add	r3, r2
 8006a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	69ba      	ldr	r2, [r7, #24]
 8006a50:	0151      	lsls	r1, r2, #5
 8006a52:	69fa      	ldr	r2, [r7, #28]
 8006a54:	440a      	add	r2, r1
 8006a56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a5e:	6013      	str	r3, [r2, #0]
 8006a60:	e00f      	b.n	8006a82 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	015a      	lsls	r2, r3, #5
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	4413      	add	r3, r2
 8006a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	69ba      	ldr	r2, [r7, #24]
 8006a72:	0151      	lsls	r1, r2, #5
 8006a74:	69fa      	ldr	r2, [r7, #28]
 8006a76:	440a      	add	r2, r1
 8006a78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a80:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	68d9      	ldr	r1, [r3, #12]
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	781a      	ldrb	r2, [r3, #0]
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	695b      	ldr	r3, [r3, #20]
 8006a8e:	b298      	uxth	r0, r3
 8006a90:	79fb      	ldrb	r3, [r7, #7]
 8006a92:	9300      	str	r3, [sp, #0]
 8006a94:	4603      	mov	r3, r0
 8006a96:	68f8      	ldr	r0, [r7, #12]
 8006a98:	f000 fa2b 	bl	8006ef2 <USB_WritePacket>
 8006a9c:	e0ce      	b.n	8006c3c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006a9e:	69bb      	ldr	r3, [r7, #24]
 8006aa0:	015a      	lsls	r2, r3, #5
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	4413      	add	r3, r2
 8006aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	69ba      	ldr	r2, [r7, #24]
 8006aae:	0151      	lsls	r1, r2, #5
 8006ab0:	69fa      	ldr	r2, [r7, #28]
 8006ab2:	440a      	add	r2, r1
 8006ab4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ab8:	0cdb      	lsrs	r3, r3, #19
 8006aba:	04db      	lsls	r3, r3, #19
 8006abc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	015a      	lsls	r2, r3, #5
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	69ba      	ldr	r2, [r7, #24]
 8006ace:	0151      	lsls	r1, r2, #5
 8006ad0:	69fa      	ldr	r2, [r7, #28]
 8006ad2:	440a      	add	r2, r1
 8006ad4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ad8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006adc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ae0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	695b      	ldr	r3, [r3, #20]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d126      	bne.n	8006b38 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	015a      	lsls	r2, r3, #5
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	4413      	add	r3, r2
 8006af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006af6:	691a      	ldr	r2, [r3, #16]
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b00:	69b9      	ldr	r1, [r7, #24]
 8006b02:	0148      	lsls	r0, r1, #5
 8006b04:	69f9      	ldr	r1, [r7, #28]
 8006b06:	4401      	add	r1, r0
 8006b08:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	015a      	lsls	r2, r3, #5
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	4413      	add	r3, r2
 8006b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b1c:	691b      	ldr	r3, [r3, #16]
 8006b1e:	69ba      	ldr	r2, [r7, #24]
 8006b20:	0151      	lsls	r1, r2, #5
 8006b22:	69fa      	ldr	r2, [r7, #28]
 8006b24:	440a      	add	r2, r1
 8006b26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b2e:	6113      	str	r3, [r2, #16]
 8006b30:	e036      	b.n	8006ba0 <USB_EPStartXfer+0x3dc>
 8006b32:	bf00      	nop
 8006b34:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	695a      	ldr	r2, [r3, #20]
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	4413      	add	r3, r2
 8006b42:	1e5a      	subs	r2, r3, #1
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b4c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	015a      	lsls	r2, r3, #5
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	4413      	add	r3, r2
 8006b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b5a:	691a      	ldr	r2, [r3, #16]
 8006b5c:	8afb      	ldrh	r3, [r7, #22]
 8006b5e:	04d9      	lsls	r1, r3, #19
 8006b60:	4b39      	ldr	r3, [pc, #228]	; (8006c48 <USB_EPStartXfer+0x484>)
 8006b62:	400b      	ands	r3, r1
 8006b64:	69b9      	ldr	r1, [r7, #24]
 8006b66:	0148      	lsls	r0, r1, #5
 8006b68:	69f9      	ldr	r1, [r7, #28]
 8006b6a:	4401      	add	r1, r0
 8006b6c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006b70:	4313      	orrs	r3, r2
 8006b72:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	015a      	lsls	r2, r3, #5
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b80:	691a      	ldr	r2, [r3, #16]
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	8af9      	ldrh	r1, [r7, #22]
 8006b88:	fb01 f303 	mul.w	r3, r1, r3
 8006b8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b90:	69b9      	ldr	r1, [r7, #24]
 8006b92:	0148      	lsls	r0, r1, #5
 8006b94:	69f9      	ldr	r1, [r7, #28]
 8006b96:	4401      	add	r1, r0
 8006b98:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006ba0:	79fb      	ldrb	r3, [r7, #7]
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d10d      	bne.n	8006bc2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d009      	beq.n	8006bc2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	68d9      	ldr	r1, [r3, #12]
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	015a      	lsls	r2, r3, #5
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	4413      	add	r3, r2
 8006bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bbe:	460a      	mov	r2, r1
 8006bc0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	78db      	ldrb	r3, [r3, #3]
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d128      	bne.n	8006c1c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d110      	bne.n	8006bfc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006bda:	69bb      	ldr	r3, [r7, #24]
 8006bdc:	015a      	lsls	r2, r3, #5
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	4413      	add	r3, r2
 8006be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	69ba      	ldr	r2, [r7, #24]
 8006bea:	0151      	lsls	r1, r2, #5
 8006bec:	69fa      	ldr	r2, [r7, #28]
 8006bee:	440a      	add	r2, r1
 8006bf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bf4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006bf8:	6013      	str	r3, [r2, #0]
 8006bfa:	e00f      	b.n	8006c1c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	015a      	lsls	r2, r3, #5
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	4413      	add	r3, r2
 8006c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	69ba      	ldr	r2, [r7, #24]
 8006c0c:	0151      	lsls	r1, r2, #5
 8006c0e:	69fa      	ldr	r2, [r7, #28]
 8006c10:	440a      	add	r2, r1
 8006c12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c1a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	015a      	lsls	r2, r3, #5
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	4413      	add	r3, r2
 8006c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	69ba      	ldr	r2, [r7, #24]
 8006c2c:	0151      	lsls	r1, r2, #5
 8006c2e:	69fa      	ldr	r2, [r7, #28]
 8006c30:	440a      	add	r2, r1
 8006c32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3720      	adds	r7, #32
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	1ff80000 	.word	0x1ff80000

08006c4c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b087      	sub	sp, #28
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	4613      	mov	r3, r2
 8006c58:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	785b      	ldrb	r3, [r3, #1]
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	f040 80cd 	bne.w	8006e08 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	695b      	ldr	r3, [r3, #20]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d132      	bne.n	8006cdc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	015a      	lsls	r2, r3, #5
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	4413      	add	r3, r2
 8006c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c82:	691b      	ldr	r3, [r3, #16]
 8006c84:	693a      	ldr	r2, [r7, #16]
 8006c86:	0151      	lsls	r1, r2, #5
 8006c88:	697a      	ldr	r2, [r7, #20]
 8006c8a:	440a      	add	r2, r1
 8006c8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c90:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c94:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	015a      	lsls	r2, r3, #5
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ca6:	691b      	ldr	r3, [r3, #16]
 8006ca8:	693a      	ldr	r2, [r7, #16]
 8006caa:	0151      	lsls	r1, r2, #5
 8006cac:	697a      	ldr	r2, [r7, #20]
 8006cae:	440a      	add	r2, r1
 8006cb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006cb8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	015a      	lsls	r2, r3, #5
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cc6:	691b      	ldr	r3, [r3, #16]
 8006cc8:	693a      	ldr	r2, [r7, #16]
 8006cca:	0151      	lsls	r1, r2, #5
 8006ccc:	697a      	ldr	r2, [r7, #20]
 8006cce:	440a      	add	r2, r1
 8006cd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cd4:	0cdb      	lsrs	r3, r3, #19
 8006cd6:	04db      	lsls	r3, r3, #19
 8006cd8:	6113      	str	r3, [r2, #16]
 8006cda:	e04e      	b.n	8006d7a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	015a      	lsls	r2, r3, #5
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ce8:	691b      	ldr	r3, [r3, #16]
 8006cea:	693a      	ldr	r2, [r7, #16]
 8006cec:	0151      	lsls	r1, r2, #5
 8006cee:	697a      	ldr	r2, [r7, #20]
 8006cf0:	440a      	add	r2, r1
 8006cf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cf6:	0cdb      	lsrs	r3, r3, #19
 8006cf8:	04db      	lsls	r3, r3, #19
 8006cfa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	015a      	lsls	r2, r3, #5
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	4413      	add	r3, r2
 8006d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d08:	691b      	ldr	r3, [r3, #16]
 8006d0a:	693a      	ldr	r2, [r7, #16]
 8006d0c:	0151      	lsls	r1, r2, #5
 8006d0e:	697a      	ldr	r2, [r7, #20]
 8006d10:	440a      	add	r2, r1
 8006d12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d16:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d1a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d1e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	695a      	ldr	r2, [r3, #20]
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d903      	bls.n	8006d34 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	689a      	ldr	r2, [r3, #8]
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	015a      	lsls	r2, r3, #5
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	4413      	add	r3, r2
 8006d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	693a      	ldr	r2, [r7, #16]
 8006d44:	0151      	lsls	r1, r2, #5
 8006d46:	697a      	ldr	r2, [r7, #20]
 8006d48:	440a      	add	r2, r1
 8006d4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	015a      	lsls	r2, r3, #5
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	4413      	add	r3, r2
 8006d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d60:	691a      	ldr	r2, [r3, #16]
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	695b      	ldr	r3, [r3, #20]
 8006d66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d6a:	6939      	ldr	r1, [r7, #16]
 8006d6c:	0148      	lsls	r0, r1, #5
 8006d6e:	6979      	ldr	r1, [r7, #20]
 8006d70:	4401      	add	r1, r0
 8006d72:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006d76:	4313      	orrs	r3, r2
 8006d78:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006d7a:	79fb      	ldrb	r3, [r7, #7]
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d11e      	bne.n	8006dbe <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d009      	beq.n	8006d9c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	015a      	lsls	r2, r3, #5
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	4413      	add	r3, r2
 8006d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d94:	461a      	mov	r2, r3
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	015a      	lsls	r2, r3, #5
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	4413      	add	r3, r2
 8006da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	693a      	ldr	r2, [r7, #16]
 8006dac:	0151      	lsls	r1, r2, #5
 8006dae:	697a      	ldr	r2, [r7, #20]
 8006db0:	440a      	add	r2, r1
 8006db2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006db6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006dba:	6013      	str	r3, [r2, #0]
 8006dbc:	e092      	b.n	8006ee4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	015a      	lsls	r2, r3, #5
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	693a      	ldr	r2, [r7, #16]
 8006dce:	0151      	lsls	r1, r2, #5
 8006dd0:	697a      	ldr	r2, [r7, #20]
 8006dd2:	440a      	add	r2, r1
 8006dd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dd8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ddc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	695b      	ldr	r3, [r3, #20]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d07e      	beq.n	8006ee4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	f003 030f 	and.w	r3, r3, #15
 8006df6:	2101      	movs	r1, #1
 8006df8:	fa01 f303 	lsl.w	r3, r1, r3
 8006dfc:	6979      	ldr	r1, [r7, #20]
 8006dfe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e02:	4313      	orrs	r3, r2
 8006e04:	634b      	str	r3, [r1, #52]	; 0x34
 8006e06:	e06d      	b.n	8006ee4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	015a      	lsls	r2, r3, #5
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	4413      	add	r3, r2
 8006e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	693a      	ldr	r2, [r7, #16]
 8006e18:	0151      	lsls	r1, r2, #5
 8006e1a:	697a      	ldr	r2, [r7, #20]
 8006e1c:	440a      	add	r2, r1
 8006e1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e22:	0cdb      	lsrs	r3, r3, #19
 8006e24:	04db      	lsls	r3, r3, #19
 8006e26:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	015a      	lsls	r2, r3, #5
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	4413      	add	r3, r2
 8006e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	693a      	ldr	r2, [r7, #16]
 8006e38:	0151      	lsls	r1, r2, #5
 8006e3a:	697a      	ldr	r2, [r7, #20]
 8006e3c:	440a      	add	r2, r1
 8006e3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e42:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e46:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e4a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	695b      	ldr	r3, [r3, #20]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d003      	beq.n	8006e5c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	689a      	ldr	r2, [r3, #8]
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	015a      	lsls	r2, r3, #5
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	4413      	add	r3, r2
 8006e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	693a      	ldr	r2, [r7, #16]
 8006e6c:	0151      	lsls	r1, r2, #5
 8006e6e:	697a      	ldr	r2, [r7, #20]
 8006e70:	440a      	add	r2, r1
 8006e72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e7a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	015a      	lsls	r2, r3, #5
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	4413      	add	r3, r2
 8006e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e88:	691a      	ldr	r2, [r3, #16]
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e92:	6939      	ldr	r1, [r7, #16]
 8006e94:	0148      	lsls	r0, r1, #5
 8006e96:	6979      	ldr	r1, [r7, #20]
 8006e98:	4401      	add	r1, r0
 8006e9a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006ea2:	79fb      	ldrb	r3, [r7, #7]
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d10d      	bne.n	8006ec4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d009      	beq.n	8006ec4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	68d9      	ldr	r1, [r3, #12]
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	015a      	lsls	r2, r3, #5
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	4413      	add	r3, r2
 8006ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ec0:	460a      	mov	r2, r1
 8006ec2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	015a      	lsls	r2, r3, #5
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	4413      	add	r3, r2
 8006ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	693a      	ldr	r2, [r7, #16]
 8006ed4:	0151      	lsls	r1, r2, #5
 8006ed6:	697a      	ldr	r2, [r7, #20]
 8006ed8:	440a      	add	r2, r1
 8006eda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ede:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ee2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	371c      	adds	r7, #28
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr

08006ef2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006ef2:	b480      	push	{r7}
 8006ef4:	b089      	sub	sp, #36	; 0x24
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	60f8      	str	r0, [r7, #12]
 8006efa:	60b9      	str	r1, [r7, #8]
 8006efc:	4611      	mov	r1, r2
 8006efe:	461a      	mov	r2, r3
 8006f00:	460b      	mov	r3, r1
 8006f02:	71fb      	strb	r3, [r7, #7]
 8006f04:	4613      	mov	r3, r2
 8006f06:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006f10:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d123      	bne.n	8006f60 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006f18:	88bb      	ldrh	r3, [r7, #4]
 8006f1a:	3303      	adds	r3, #3
 8006f1c:	089b      	lsrs	r3, r3, #2
 8006f1e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006f20:	2300      	movs	r3, #0
 8006f22:	61bb      	str	r3, [r7, #24]
 8006f24:	e018      	b.n	8006f58 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006f26:	79fb      	ldrb	r3, [r7, #7]
 8006f28:	031a      	lsls	r2, r3, #12
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f32:	461a      	mov	r2, r3
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	3301      	adds	r3, #1
 8006f44:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f46:	69fb      	ldr	r3, [r7, #28]
 8006f48:	3301      	adds	r3, #1
 8006f4a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	3301      	adds	r3, #1
 8006f50:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006f52:	69bb      	ldr	r3, [r7, #24]
 8006f54:	3301      	adds	r3, #1
 8006f56:	61bb      	str	r3, [r7, #24]
 8006f58:	69ba      	ldr	r2, [r7, #24]
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d3e2      	bcc.n	8006f26 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006f60:	2300      	movs	r3, #0
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3724      	adds	r7, #36	; 0x24
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr

08006f6e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006f6e:	b480      	push	{r7}
 8006f70:	b08b      	sub	sp, #44	; 0x2c
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	60f8      	str	r0, [r7, #12]
 8006f76:	60b9      	str	r1, [r7, #8]
 8006f78:	4613      	mov	r3, r2
 8006f7a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006f84:	88fb      	ldrh	r3, [r7, #6]
 8006f86:	089b      	lsrs	r3, r3, #2
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006f8c:	88fb      	ldrh	r3, [r7, #6]
 8006f8e:	f003 0303 	and.w	r3, r3, #3
 8006f92:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006f94:	2300      	movs	r3, #0
 8006f96:	623b      	str	r3, [r7, #32]
 8006f98:	e014      	b.n	8006fc4 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa4:	601a      	str	r2, [r3, #0]
    pDest++;
 8006fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa8:	3301      	adds	r3, #1
 8006faa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fae:	3301      	adds	r3, #1
 8006fb0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fba:	3301      	adds	r3, #1
 8006fbc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006fbe:	6a3b      	ldr	r3, [r7, #32]
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	623b      	str	r3, [r7, #32]
 8006fc4:	6a3a      	ldr	r2, [r7, #32]
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d3e6      	bcc.n	8006f9a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006fcc:	8bfb      	ldrh	r3, [r7, #30]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d01e      	beq.n	8007010 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006fd6:	69bb      	ldr	r3, [r7, #24]
 8006fd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fdc:	461a      	mov	r2, r3
 8006fde:	f107 0310 	add.w	r3, r7, #16
 8006fe2:	6812      	ldr	r2, [r2, #0]
 8006fe4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006fe6:	693a      	ldr	r2, [r7, #16]
 8006fe8:	6a3b      	ldr	r3, [r7, #32]
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	00db      	lsls	r3, r3, #3
 8006fee:	fa22 f303 	lsr.w	r3, r2, r3
 8006ff2:	b2da      	uxtb	r2, r3
 8006ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff6:	701a      	strb	r2, [r3, #0]
      i++;
 8006ff8:	6a3b      	ldr	r3, [r7, #32]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	623b      	str	r3, [r7, #32]
      pDest++;
 8006ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007000:	3301      	adds	r3, #1
 8007002:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007004:	8bfb      	ldrh	r3, [r7, #30]
 8007006:	3b01      	subs	r3, #1
 8007008:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800700a:	8bfb      	ldrh	r3, [r7, #30]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d1ea      	bne.n	8006fe6 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007012:	4618      	mov	r0, r3
 8007014:	372c      	adds	r7, #44	; 0x2c
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr

0800701e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800701e:	b480      	push	{r7}
 8007020:	b085      	sub	sp, #20
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
 8007026:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	785b      	ldrb	r3, [r3, #1]
 8007036:	2b01      	cmp	r3, #1
 8007038:	d12c      	bne.n	8007094 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	015a      	lsls	r2, r3, #5
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	4413      	add	r3, r2
 8007042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2b00      	cmp	r3, #0
 800704a:	db12      	blt.n	8007072 <USB_EPSetStall+0x54>
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d00f      	beq.n	8007072 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	015a      	lsls	r2, r3, #5
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	4413      	add	r3, r2
 800705a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	68ba      	ldr	r2, [r7, #8]
 8007062:	0151      	lsls	r1, r2, #5
 8007064:	68fa      	ldr	r2, [r7, #12]
 8007066:	440a      	add	r2, r1
 8007068:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800706c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007070:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	015a      	lsls	r2, r3, #5
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	4413      	add	r3, r2
 800707a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	68ba      	ldr	r2, [r7, #8]
 8007082:	0151      	lsls	r1, r2, #5
 8007084:	68fa      	ldr	r2, [r7, #12]
 8007086:	440a      	add	r2, r1
 8007088:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800708c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007090:	6013      	str	r3, [r2, #0]
 8007092:	e02b      	b.n	80070ec <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	015a      	lsls	r2, r3, #5
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	4413      	add	r3, r2
 800709c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	db12      	blt.n	80070cc <USB_EPSetStall+0xae>
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d00f      	beq.n	80070cc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	015a      	lsls	r2, r3, #5
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	4413      	add	r3, r2
 80070b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68ba      	ldr	r2, [r7, #8]
 80070bc:	0151      	lsls	r1, r2, #5
 80070be:	68fa      	ldr	r2, [r7, #12]
 80070c0:	440a      	add	r2, r1
 80070c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80070ca:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	015a      	lsls	r2, r3, #5
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	4413      	add	r3, r2
 80070d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	68ba      	ldr	r2, [r7, #8]
 80070dc:	0151      	lsls	r1, r2, #5
 80070de:	68fa      	ldr	r2, [r7, #12]
 80070e0:	440a      	add	r2, r1
 80070e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80070ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3714      	adds	r7, #20
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr

080070fa <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80070fa:	b480      	push	{r7}
 80070fc:	b085      	sub	sp, #20
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
 8007102:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	785b      	ldrb	r3, [r3, #1]
 8007112:	2b01      	cmp	r3, #1
 8007114:	d128      	bne.n	8007168 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	015a      	lsls	r2, r3, #5
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	4413      	add	r3, r2
 800711e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	68ba      	ldr	r2, [r7, #8]
 8007126:	0151      	lsls	r1, r2, #5
 8007128:	68fa      	ldr	r2, [r7, #12]
 800712a:	440a      	add	r2, r1
 800712c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007130:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007134:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	78db      	ldrb	r3, [r3, #3]
 800713a:	2b03      	cmp	r3, #3
 800713c:	d003      	beq.n	8007146 <USB_EPClearStall+0x4c>
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	78db      	ldrb	r3, [r3, #3]
 8007142:	2b02      	cmp	r3, #2
 8007144:	d138      	bne.n	80071b8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	015a      	lsls	r2, r3, #5
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	4413      	add	r3, r2
 800714e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	68ba      	ldr	r2, [r7, #8]
 8007156:	0151      	lsls	r1, r2, #5
 8007158:	68fa      	ldr	r2, [r7, #12]
 800715a:	440a      	add	r2, r1
 800715c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007164:	6013      	str	r3, [r2, #0]
 8007166:	e027      	b.n	80071b8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	015a      	lsls	r2, r3, #5
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	4413      	add	r3, r2
 8007170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68ba      	ldr	r2, [r7, #8]
 8007178:	0151      	lsls	r1, r2, #5
 800717a:	68fa      	ldr	r2, [r7, #12]
 800717c:	440a      	add	r2, r1
 800717e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007182:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007186:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	78db      	ldrb	r3, [r3, #3]
 800718c:	2b03      	cmp	r3, #3
 800718e:	d003      	beq.n	8007198 <USB_EPClearStall+0x9e>
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	78db      	ldrb	r3, [r3, #3]
 8007194:	2b02      	cmp	r3, #2
 8007196:	d10f      	bne.n	80071b8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	015a      	lsls	r2, r3, #5
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	4413      	add	r3, r2
 80071a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	68ba      	ldr	r2, [r7, #8]
 80071a8:	0151      	lsls	r1, r2, #5
 80071aa:	68fa      	ldr	r2, [r7, #12]
 80071ac:	440a      	add	r2, r1
 80071ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071b6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80071b8:	2300      	movs	r3, #0
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3714      	adds	r7, #20
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr

080071c6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80071c6:	b480      	push	{r7}
 80071c8:	b085      	sub	sp, #20
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
 80071ce:	460b      	mov	r3, r1
 80071d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071e4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80071e8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	78fb      	ldrb	r3, [r7, #3]
 80071f4:	011b      	lsls	r3, r3, #4
 80071f6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80071fa:	68f9      	ldr	r1, [r7, #12]
 80071fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007200:	4313      	orrs	r3, r2
 8007202:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3714      	adds	r7, #20
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr

08007212 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007212:	b480      	push	{r7}
 8007214:	b085      	sub	sp, #20
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	68fa      	ldr	r2, [r7, #12]
 8007228:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800722c:	f023 0303 	bic.w	r3, r3, #3
 8007230:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	68fa      	ldr	r2, [r7, #12]
 800723c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007240:	f023 0302 	bic.w	r3, r3, #2
 8007244:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007246:	2300      	movs	r3, #0
}
 8007248:	4618      	mov	r0, r3
 800724a:	3714      	adds	r7, #20
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007254:	b480      	push	{r7}
 8007256:	b085      	sub	sp, #20
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	68fa      	ldr	r2, [r7, #12]
 800726a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800726e:	f023 0303 	bic.w	r3, r3, #3
 8007272:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007282:	f043 0302 	orr.w	r3, r3, #2
 8007286:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3714      	adds	r7, #20
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr

08007296 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007296:	b480      	push	{r7}
 8007298:	b085      	sub	sp, #20
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	695b      	ldr	r3, [r3, #20]
 80072a2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	699b      	ldr	r3, [r3, #24]
 80072a8:	68fa      	ldr	r2, [r7, #12]
 80072aa:	4013      	ands	r3, r2
 80072ac:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80072ae:	68fb      	ldr	r3, [r7, #12]
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3714      	adds	r7, #20
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80072bc:	b480      	push	{r7}
 80072be:	b085      	sub	sp, #20
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072ce:	699b      	ldr	r3, [r3, #24]
 80072d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072d8:	69db      	ldr	r3, [r3, #28]
 80072da:	68ba      	ldr	r2, [r7, #8]
 80072dc:	4013      	ands	r3, r2
 80072de:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	0c1b      	lsrs	r3, r3, #16
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3714      	adds	r7, #20
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b085      	sub	sp, #20
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007302:	699b      	ldr	r3, [r3, #24]
 8007304:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800730c:	69db      	ldr	r3, [r3, #28]
 800730e:	68ba      	ldr	r2, [r7, #8]
 8007310:	4013      	ands	r3, r2
 8007312:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	b29b      	uxth	r3, r3
}
 8007318:	4618      	mov	r0, r3
 800731a:	3714      	adds	r7, #20
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007324:	b480      	push	{r7}
 8007326:	b085      	sub	sp, #20
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	460b      	mov	r3, r1
 800732e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007334:	78fb      	ldrb	r3, [r7, #3]
 8007336:	015a      	lsls	r2, r3, #5
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	4413      	add	r3, r2
 800733c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800734a:	695b      	ldr	r3, [r3, #20]
 800734c:	68ba      	ldr	r2, [r7, #8]
 800734e:	4013      	ands	r3, r2
 8007350:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007352:	68bb      	ldr	r3, [r7, #8]
}
 8007354:	4618      	mov	r0, r3
 8007356:	3714      	adds	r7, #20
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007360:	b480      	push	{r7}
 8007362:	b087      	sub	sp, #28
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	460b      	mov	r3, r1
 800736a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007382:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007384:	78fb      	ldrb	r3, [r7, #3]
 8007386:	f003 030f 	and.w	r3, r3, #15
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	fa22 f303 	lsr.w	r3, r2, r3
 8007390:	01db      	lsls	r3, r3, #7
 8007392:	b2db      	uxtb	r3, r3
 8007394:	693a      	ldr	r2, [r7, #16]
 8007396:	4313      	orrs	r3, r2
 8007398:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800739a:	78fb      	ldrb	r3, [r7, #3]
 800739c:	015a      	lsls	r2, r3, #5
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	4413      	add	r3, r2
 80073a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	693a      	ldr	r2, [r7, #16]
 80073aa:	4013      	ands	r3, r2
 80073ac:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80073ae:	68bb      	ldr	r3, [r7, #8]
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	371c      	adds	r7, #28
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80073bc:	b480      	push	{r7}
 80073be:	b083      	sub	sp, #12
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	695b      	ldr	r3, [r3, #20]
 80073c8:	f003 0301 	and.w	r3, r3, #1
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	370c      	adds	r7, #12
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80073d8:	b480      	push	{r7}
 80073da:	b085      	sub	sp, #20
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	68fa      	ldr	r2, [r7, #12]
 80073ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073f2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80073f6:	f023 0307 	bic.w	r3, r3, #7
 80073fa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800740a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800740e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	3714      	adds	r7, #20
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr
	...

08007420 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007420:	b480      	push	{r7}
 8007422:	b087      	sub	sp, #28
 8007424:	af00      	add	r7, sp, #0
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	460b      	mov	r3, r1
 800742a:	607a      	str	r2, [r7, #4]
 800742c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	333c      	adds	r3, #60	; 0x3c
 8007436:	3304      	adds	r3, #4
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	4a26      	ldr	r2, [pc, #152]	; (80074d8 <USB_EP0_OutStart+0xb8>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d90a      	bls.n	800745a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007450:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007454:	d101      	bne.n	800745a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007456:	2300      	movs	r3, #0
 8007458:	e037      	b.n	80074ca <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007460:	461a      	mov	r2, r3
 8007462:	2300      	movs	r3, #0
 8007464:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	697a      	ldr	r2, [r7, #20]
 8007470:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007474:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007478:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007480:	691b      	ldr	r3, [r3, #16]
 8007482:	697a      	ldr	r2, [r7, #20]
 8007484:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007488:	f043 0318 	orr.w	r3, r3, #24
 800748c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	697a      	ldr	r2, [r7, #20]
 8007498:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800749c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80074a0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80074a2:	7afb      	ldrb	r3, [r7, #11]
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d10f      	bne.n	80074c8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ae:	461a      	mov	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	697a      	ldr	r2, [r7, #20]
 80074be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074c2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80074c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	371c      	adds	r7, #28
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr
 80074d6:	bf00      	nop
 80074d8:	4f54300a 	.word	0x4f54300a

080074dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80074dc:	b480      	push	{r7}
 80074de:	b085      	sub	sp, #20
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80074e4:	2300      	movs	r3, #0
 80074e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	3301      	adds	r3, #1
 80074ec:	60fb      	str	r3, [r7, #12]
 80074ee:	4a13      	ldr	r2, [pc, #76]	; (800753c <USB_CoreReset+0x60>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d901      	bls.n	80074f8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80074f4:	2303      	movs	r3, #3
 80074f6:	e01a      	b.n	800752e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	691b      	ldr	r3, [r3, #16]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	daf3      	bge.n	80074e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007500:	2300      	movs	r3, #0
 8007502:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	f043 0201 	orr.w	r2, r3, #1
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	3301      	adds	r3, #1
 8007514:	60fb      	str	r3, [r7, #12]
 8007516:	4a09      	ldr	r2, [pc, #36]	; (800753c <USB_CoreReset+0x60>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d901      	bls.n	8007520 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800751c:	2303      	movs	r3, #3
 800751e:	e006      	b.n	800752e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	691b      	ldr	r3, [r3, #16]
 8007524:	f003 0301 	and.w	r3, r3, #1
 8007528:	2b01      	cmp	r3, #1
 800752a:	d0f1      	beq.n	8007510 <USB_CoreReset+0x34>

  return HAL_OK;
 800752c:	2300      	movs	r3, #0
}
 800752e:	4618      	mov	r0, r3
 8007530:	3714      	adds	r7, #20
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr
 800753a:	bf00      	nop
 800753c:	00030d40 	.word	0x00030d40

08007540 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	460b      	mov	r3, r1
 800754a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800754c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007550:	f002 f960 	bl	8009814 <USBD_static_malloc>
 8007554:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d105      	bne.n	8007568 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007564:	2302      	movs	r3, #2
 8007566:	e066      	b.n	8007636 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	68fa      	ldr	r2, [r7, #12]
 800756c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	7c1b      	ldrb	r3, [r3, #16]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d119      	bne.n	80075ac <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007578:	f44f 7300 	mov.w	r3, #512	; 0x200
 800757c:	2202      	movs	r2, #2
 800757e:	2181      	movs	r1, #129	; 0x81
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f002 f824 	bl	80095ce <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2201      	movs	r2, #1
 800758a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800758c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007590:	2202      	movs	r2, #2
 8007592:	2101      	movs	r1, #1
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f002 f81a 	bl	80095ce <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2201      	movs	r2, #1
 800759e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2210      	movs	r2, #16
 80075a6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80075aa:	e016      	b.n	80075da <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80075ac:	2340      	movs	r3, #64	; 0x40
 80075ae:	2202      	movs	r2, #2
 80075b0:	2181      	movs	r1, #129	; 0x81
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f002 f80b 	bl	80095ce <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2201      	movs	r2, #1
 80075bc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80075be:	2340      	movs	r3, #64	; 0x40
 80075c0:	2202      	movs	r2, #2
 80075c2:	2101      	movs	r1, #1
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f002 f802 	bl	80095ce <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2201      	movs	r2, #1
 80075ce:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2210      	movs	r2, #16
 80075d6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80075da:	2308      	movs	r3, #8
 80075dc:	2203      	movs	r2, #3
 80075de:	2182      	movs	r1, #130	; 0x82
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f001 fff4 	bl	80095ce <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2201      	movs	r2, #1
 80075ea:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2200      	movs	r2, #0
 80075fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2200      	movs	r2, #0
 8007604:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	7c1b      	ldrb	r3, [r3, #16]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d109      	bne.n	8007624 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007616:	f44f 7300 	mov.w	r3, #512	; 0x200
 800761a:	2101      	movs	r1, #1
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f002 f8c5 	bl	80097ac <USBD_LL_PrepareReceive>
 8007622:	e007      	b.n	8007634 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800762a:	2340      	movs	r3, #64	; 0x40
 800762c:	2101      	movs	r1, #1
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f002 f8bc 	bl	80097ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3710      	adds	r7, #16
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}

0800763e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800763e:	b580      	push	{r7, lr}
 8007640:	b082      	sub	sp, #8
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
 8007646:	460b      	mov	r3, r1
 8007648:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800764a:	2181      	movs	r1, #129	; 0x81
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f001 ffe4 	bl	800961a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007658:	2101      	movs	r1, #1
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f001 ffdd 	bl	800961a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007668:	2182      	movs	r1, #130	; 0x82
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f001 ffd5 	bl	800961a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007686:	2b00      	cmp	r3, #0
 8007688:	d00e      	beq.n	80076a8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800769a:	4618      	mov	r0, r3
 800769c:	f002 f8c8 	bl	8009830 <USBD_static_free>
    pdev->pClassData = NULL;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3708      	adds	r7, #8
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
	...

080076b4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b086      	sub	sp, #24
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076c4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80076c6:	2300      	movs	r3, #0
 80076c8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80076ca:	2300      	movs	r3, #0
 80076cc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80076ce:	2300      	movs	r3, #0
 80076d0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d101      	bne.n	80076dc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80076d8:	2303      	movs	r3, #3
 80076da:	e0af      	b.n	800783c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d03f      	beq.n	8007768 <USBD_CDC_Setup+0xb4>
 80076e8:	2b20      	cmp	r3, #32
 80076ea:	f040 809f 	bne.w	800782c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	88db      	ldrh	r3, [r3, #6]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d02e      	beq.n	8007754 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	b25b      	sxtb	r3, r3
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	da16      	bge.n	800772e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	683a      	ldr	r2, [r7, #0]
 800770a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800770c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800770e:	683a      	ldr	r2, [r7, #0]
 8007710:	88d2      	ldrh	r2, [r2, #6]
 8007712:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	88db      	ldrh	r3, [r3, #6]
 8007718:	2b07      	cmp	r3, #7
 800771a:	bf28      	it	cs
 800771c:	2307      	movcs	r3, #7
 800771e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	89fa      	ldrh	r2, [r7, #14]
 8007724:	4619      	mov	r1, r3
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f001 fb19 	bl	8008d5e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800772c:	e085      	b.n	800783a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	785a      	ldrb	r2, [r3, #1]
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	88db      	ldrh	r3, [r3, #6]
 800773c:	b2da      	uxtb	r2, r3
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007744:	6939      	ldr	r1, [r7, #16]
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	88db      	ldrh	r3, [r3, #6]
 800774a:	461a      	mov	r2, r3
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f001 fb32 	bl	8008db6 <USBD_CtlPrepareRx>
      break;
 8007752:	e072      	b.n	800783a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	683a      	ldr	r2, [r7, #0]
 800775e:	7850      	ldrb	r0, [r2, #1]
 8007760:	2200      	movs	r2, #0
 8007762:	6839      	ldr	r1, [r7, #0]
 8007764:	4798      	blx	r3
      break;
 8007766:	e068      	b.n	800783a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	785b      	ldrb	r3, [r3, #1]
 800776c:	2b0b      	cmp	r3, #11
 800776e:	d852      	bhi.n	8007816 <USBD_CDC_Setup+0x162>
 8007770:	a201      	add	r2, pc, #4	; (adr r2, 8007778 <USBD_CDC_Setup+0xc4>)
 8007772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007776:	bf00      	nop
 8007778:	080077a9 	.word	0x080077a9
 800777c:	08007825 	.word	0x08007825
 8007780:	08007817 	.word	0x08007817
 8007784:	08007817 	.word	0x08007817
 8007788:	08007817 	.word	0x08007817
 800778c:	08007817 	.word	0x08007817
 8007790:	08007817 	.word	0x08007817
 8007794:	08007817 	.word	0x08007817
 8007798:	08007817 	.word	0x08007817
 800779c:	08007817 	.word	0x08007817
 80077a0:	080077d3 	.word	0x080077d3
 80077a4:	080077fd 	.word	0x080077fd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	2b03      	cmp	r3, #3
 80077b2:	d107      	bne.n	80077c4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80077b4:	f107 030a 	add.w	r3, r7, #10
 80077b8:	2202      	movs	r2, #2
 80077ba:	4619      	mov	r1, r3
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f001 face 	bl	8008d5e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80077c2:	e032      	b.n	800782a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80077c4:	6839      	ldr	r1, [r7, #0]
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f001 fa58 	bl	8008c7c <USBD_CtlError>
            ret = USBD_FAIL;
 80077cc:	2303      	movs	r3, #3
 80077ce:	75fb      	strb	r3, [r7, #23]
          break;
 80077d0:	e02b      	b.n	800782a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	2b03      	cmp	r3, #3
 80077dc:	d107      	bne.n	80077ee <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80077de:	f107 030d 	add.w	r3, r7, #13
 80077e2:	2201      	movs	r2, #1
 80077e4:	4619      	mov	r1, r3
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f001 fab9 	bl	8008d5e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80077ec:	e01d      	b.n	800782a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80077ee:	6839      	ldr	r1, [r7, #0]
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f001 fa43 	bl	8008c7c <USBD_CtlError>
            ret = USBD_FAIL;
 80077f6:	2303      	movs	r3, #3
 80077f8:	75fb      	strb	r3, [r7, #23]
          break;
 80077fa:	e016      	b.n	800782a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007802:	b2db      	uxtb	r3, r3
 8007804:	2b03      	cmp	r3, #3
 8007806:	d00f      	beq.n	8007828 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8007808:	6839      	ldr	r1, [r7, #0]
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f001 fa36 	bl	8008c7c <USBD_CtlError>
            ret = USBD_FAIL;
 8007810:	2303      	movs	r3, #3
 8007812:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007814:	e008      	b.n	8007828 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007816:	6839      	ldr	r1, [r7, #0]
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f001 fa2f 	bl	8008c7c <USBD_CtlError>
          ret = USBD_FAIL;
 800781e:	2303      	movs	r3, #3
 8007820:	75fb      	strb	r3, [r7, #23]
          break;
 8007822:	e002      	b.n	800782a <USBD_CDC_Setup+0x176>
          break;
 8007824:	bf00      	nop
 8007826:	e008      	b.n	800783a <USBD_CDC_Setup+0x186>
          break;
 8007828:	bf00      	nop
      }
      break;
 800782a:	e006      	b.n	800783a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800782c:	6839      	ldr	r1, [r7, #0]
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f001 fa24 	bl	8008c7c <USBD_CtlError>
      ret = USBD_FAIL;
 8007834:	2303      	movs	r3, #3
 8007836:	75fb      	strb	r3, [r7, #23]
      break;
 8007838:	bf00      	nop
  }

  return (uint8_t)ret;
 800783a:	7dfb      	ldrb	r3, [r7, #23]
}
 800783c:	4618      	mov	r0, r3
 800783e:	3718      	adds	r7, #24
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	460b      	mov	r3, r1
 800784e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007856:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800785e:	2b00      	cmp	r3, #0
 8007860:	d101      	bne.n	8007866 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007862:	2303      	movs	r3, #3
 8007864:	e04f      	b.n	8007906 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800786c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800786e:	78fa      	ldrb	r2, [r7, #3]
 8007870:	6879      	ldr	r1, [r7, #4]
 8007872:	4613      	mov	r3, r2
 8007874:	009b      	lsls	r3, r3, #2
 8007876:	4413      	add	r3, r2
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	440b      	add	r3, r1
 800787c:	3318      	adds	r3, #24
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d029      	beq.n	80078d8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007884:	78fa      	ldrb	r2, [r7, #3]
 8007886:	6879      	ldr	r1, [r7, #4]
 8007888:	4613      	mov	r3, r2
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	4413      	add	r3, r2
 800788e:	009b      	lsls	r3, r3, #2
 8007890:	440b      	add	r3, r1
 8007892:	3318      	adds	r3, #24
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	78f9      	ldrb	r1, [r7, #3]
 8007898:	68f8      	ldr	r0, [r7, #12]
 800789a:	460b      	mov	r3, r1
 800789c:	00db      	lsls	r3, r3, #3
 800789e:	1a5b      	subs	r3, r3, r1
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	4403      	add	r3, r0
 80078a4:	3344      	adds	r3, #68	; 0x44
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	fbb2 f1f3 	udiv	r1, r2, r3
 80078ac:	fb03 f301 	mul.w	r3, r3, r1
 80078b0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d110      	bne.n	80078d8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80078b6:	78fa      	ldrb	r2, [r7, #3]
 80078b8:	6879      	ldr	r1, [r7, #4]
 80078ba:	4613      	mov	r3, r2
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	4413      	add	r3, r2
 80078c0:	009b      	lsls	r3, r3, #2
 80078c2:	440b      	add	r3, r1
 80078c4:	3318      	adds	r3, #24
 80078c6:	2200      	movs	r2, #0
 80078c8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80078ca:	78f9      	ldrb	r1, [r7, #3]
 80078cc:	2300      	movs	r3, #0
 80078ce:	2200      	movs	r2, #0
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f001 ff4a 	bl	800976a <USBD_LL_Transmit>
 80078d6:	e015      	b.n	8007904 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	2200      	movs	r2, #0
 80078dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80078e6:	691b      	ldr	r3, [r3, #16]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d00b      	beq.n	8007904 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80078f2:	691b      	ldr	r3, [r3, #16]
 80078f4:	68ba      	ldr	r2, [r7, #8]
 80078f6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80078fa:	68ba      	ldr	r2, [r7, #8]
 80078fc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007900:	78fa      	ldrb	r2, [r7, #3]
 8007902:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007904:	2300      	movs	r3, #0
}
 8007906:	4618      	mov	r0, r3
 8007908:	3710      	adds	r7, #16
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}

0800790e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800790e:	b580      	push	{r7, lr}
 8007910:	b084      	sub	sp, #16
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
 8007916:	460b      	mov	r3, r1
 8007918:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007920:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007928:	2b00      	cmp	r3, #0
 800792a:	d101      	bne.n	8007930 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800792c:	2303      	movs	r3, #3
 800792e:	e015      	b.n	800795c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007930:	78fb      	ldrb	r3, [r7, #3]
 8007932:	4619      	mov	r1, r3
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f001 ff5a 	bl	80097ee <USBD_LL_GetRxDataSize>
 800793a:	4602      	mov	r2, r0
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	68fa      	ldr	r2, [r7, #12]
 800794c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007950:	68fa      	ldr	r2, [r7, #12]
 8007952:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007956:	4611      	mov	r1, r2
 8007958:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800795a:	2300      	movs	r3, #0
}
 800795c:	4618      	mov	r0, r3
 800795e:	3710      	adds	r7, #16
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007972:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d101      	bne.n	800797e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800797a:	2303      	movs	r3, #3
 800797c:	e01b      	b.n	80079b6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007984:	2b00      	cmp	r3, #0
 8007986:	d015      	beq.n	80079b4 <USBD_CDC_EP0_RxReady+0x50>
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800798e:	2bff      	cmp	r3, #255	; 0xff
 8007990:	d010      	beq.n	80079b4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	68fa      	ldr	r2, [r7, #12]
 800799c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80079a0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80079a2:	68fa      	ldr	r2, [r7, #12]
 80079a4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80079a8:	b292      	uxth	r2, r2
 80079aa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	22ff      	movs	r2, #255	; 0xff
 80079b0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80079b4:	2300      	movs	r3, #0
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3710      	adds	r7, #16
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
	...

080079c0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b083      	sub	sp, #12
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2243      	movs	r2, #67	; 0x43
 80079cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80079ce:	4b03      	ldr	r3, [pc, #12]	; (80079dc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	370c      	adds	r7, #12
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr
 80079dc:	20000094 	.word	0x20000094

080079e0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b083      	sub	sp, #12
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2243      	movs	r2, #67	; 0x43
 80079ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80079ee:	4b03      	ldr	r3, [pc, #12]	; (80079fc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	370c      	adds	r7, #12
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr
 80079fc:	20000050 	.word	0x20000050

08007a00 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b083      	sub	sp, #12
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2243      	movs	r2, #67	; 0x43
 8007a0c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007a0e:	4b03      	ldr	r3, [pc, #12]	; (8007a1c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	370c      	adds	r7, #12
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr
 8007a1c:	200000d8 	.word	0x200000d8

08007a20 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	220a      	movs	r2, #10
 8007a2c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007a2e:	4b03      	ldr	r3, [pc, #12]	; (8007a3c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	370c      	adds	r7, #12
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr
 8007a3c:	2000000c 	.word	0x2000000c

08007a40 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b083      	sub	sp, #12
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d101      	bne.n	8007a54 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007a50:	2303      	movs	r3, #3
 8007a52:	e004      	b.n	8007a5e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	683a      	ldr	r2, [r7, #0]
 8007a58:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007a5c:	2300      	movs	r3, #0
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	370c      	adds	r7, #12
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr

08007a6a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007a6a:	b480      	push	{r7}
 8007a6c:	b087      	sub	sp, #28
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	60f8      	str	r0, [r7, #12]
 8007a72:	60b9      	str	r1, [r7, #8]
 8007a74:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a7c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d101      	bne.n	8007a88 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007a84:	2303      	movs	r3, #3
 8007a86:	e008      	b.n	8007a9a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	68ba      	ldr	r2, [r7, #8]
 8007a8c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007a98:	2300      	movs	r3, #0
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	371c      	adds	r7, #28
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr

08007aa6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007aa6:	b480      	push	{r7}
 8007aa8:	b085      	sub	sp, #20
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
 8007aae:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ab6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d101      	bne.n	8007ac2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8007abe:	2303      	movs	r3, #3
 8007ac0:	e004      	b.n	8007acc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	683a      	ldr	r2, [r7, #0]
 8007ac6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007aca:	2300      	movs	r3, #0
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3714      	adds	r7, #20
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ae6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d101      	bne.n	8007afa <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007af6:	2303      	movs	r3, #3
 8007af8:	e01a      	b.n	8007b30 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d114      	bne.n	8007b2e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	2201      	movs	r2, #1
 8007b08:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007b22:	2181      	movs	r1, #129	; 0x81
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f001 fe20 	bl	800976a <USBD_LL_Transmit>

    ret = USBD_OK;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3710      	adds	r7, #16
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b46:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d101      	bne.n	8007b56 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007b52:	2303      	movs	r3, #3
 8007b54:	e016      	b.n	8007b84 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	7c1b      	ldrb	r3, [r3, #16]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d109      	bne.n	8007b72 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007b64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b68:	2101      	movs	r1, #1
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f001 fe1e 	bl	80097ac <USBD_LL_PrepareReceive>
 8007b70:	e007      	b.n	8007b82 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007b78:	2340      	movs	r3, #64	; 0x40
 8007b7a:	2101      	movs	r1, #1
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f001 fe15 	bl	80097ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007b82:	2300      	movs	r3, #0
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3710      	adds	r7, #16
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b086      	sub	sp, #24
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	4613      	mov	r3, r2
 8007b98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d101      	bne.n	8007ba4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	e01f      	b.n	8007be4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d003      	beq.n	8007bca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	68ba      	ldr	r2, [r7, #8]
 8007bc6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2201      	movs	r2, #1
 8007bce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	79fa      	ldrb	r2, [r7, #7]
 8007bd6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007bd8:	68f8      	ldr	r0, [r7, #12]
 8007bda:	f001 fc91 	bl	8009500 <USBD_LL_Init>
 8007bde:	4603      	mov	r3, r0
 8007be0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007be2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3718      	adds	r7, #24
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d101      	bne.n	8007c04 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007c00:	2303      	movs	r3, #3
 8007c02:	e016      	b.n	8007c32 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	683a      	ldr	r2, [r7, #0]
 8007c08:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d00b      	beq.n	8007c30 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c20:	f107 020e 	add.w	r2, r7, #14
 8007c24:	4610      	mov	r0, r2
 8007c26:	4798      	blx	r3
 8007c28:	4602      	mov	r2, r0
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	b082      	sub	sp, #8
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f001 fca8 	bl	8009598 <USBD_LL_Start>
 8007c48:	4603      	mov	r3, r0
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3708      	adds	r7, #8
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}

08007c52 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007c52:	b480      	push	{r7}
 8007c54:	b083      	sub	sp, #12
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007c5a:	2300      	movs	r3, #0
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	370c      	adds	r7, #12
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	460b      	mov	r3, r1
 8007c72:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007c74:	2303      	movs	r3, #3
 8007c76:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d009      	beq.n	8007c96 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	78fa      	ldrb	r2, [r7, #3]
 8007c8c:	4611      	mov	r1, r2
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	4798      	blx	r3
 8007c92:	4603      	mov	r3, r0
 8007c94:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3710      	adds	r7, #16
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b082      	sub	sp, #8
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	460b      	mov	r3, r1
 8007caa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d007      	beq.n	8007cc6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	78fa      	ldrb	r2, [r7, #3]
 8007cc0:	4611      	mov	r1, r2
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	4798      	blx	r3
  }

  return USBD_OK;
 8007cc6:	2300      	movs	r3, #0
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3708      	adds	r7, #8
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007ce0:	6839      	ldr	r1, [r7, #0]
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f000 ff90 	bl	8008c08 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2201      	movs	r2, #1
 8007cec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007d04:	f003 031f 	and.w	r3, r3, #31
 8007d08:	2b02      	cmp	r3, #2
 8007d0a:	d01a      	beq.n	8007d42 <USBD_LL_SetupStage+0x72>
 8007d0c:	2b02      	cmp	r3, #2
 8007d0e:	d822      	bhi.n	8007d56 <USBD_LL_SetupStage+0x86>
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d002      	beq.n	8007d1a <USBD_LL_SetupStage+0x4a>
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d00a      	beq.n	8007d2e <USBD_LL_SetupStage+0x5e>
 8007d18:	e01d      	b.n	8007d56 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d20:	4619      	mov	r1, r3
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 fa62 	bl	80081ec <USBD_StdDevReq>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	73fb      	strb	r3, [r7, #15]
      break;
 8007d2c:	e020      	b.n	8007d70 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d34:	4619      	mov	r1, r3
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 fac6 	bl	80082c8 <USBD_StdItfReq>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	73fb      	strb	r3, [r7, #15]
      break;
 8007d40:	e016      	b.n	8007d70 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d48:	4619      	mov	r1, r3
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 fb05 	bl	800835a <USBD_StdEPReq>
 8007d50:	4603      	mov	r3, r0
 8007d52:	73fb      	strb	r3, [r7, #15]
      break;
 8007d54:	e00c      	b.n	8007d70 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007d5c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	4619      	mov	r1, r3
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f001 fc77 	bl	8009658 <USBD_LL_StallEP>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	73fb      	strb	r3, [r7, #15]
      break;
 8007d6e:	bf00      	nop
  }

  return ret;
 8007d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3710      	adds	r7, #16
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}

08007d7a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007d7a:	b580      	push	{r7, lr}
 8007d7c:	b086      	sub	sp, #24
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	60f8      	str	r0, [r7, #12]
 8007d82:	460b      	mov	r3, r1
 8007d84:	607a      	str	r2, [r7, #4]
 8007d86:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007d88:	7afb      	ldrb	r3, [r7, #11]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d138      	bne.n	8007e00 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007d94:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d9c:	2b03      	cmp	r3, #3
 8007d9e:	d14a      	bne.n	8007e36 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	689a      	ldr	r2, [r3, #8]
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d913      	bls.n	8007dd4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	689a      	ldr	r2, [r3, #8]
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	1ad2      	subs	r2, r2, r3
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	68da      	ldr	r2, [r3, #12]
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	bf28      	it	cs
 8007dc6:	4613      	movcs	r3, r2
 8007dc8:	461a      	mov	r2, r3
 8007dca:	6879      	ldr	r1, [r7, #4]
 8007dcc:	68f8      	ldr	r0, [r7, #12]
 8007dce:	f001 f80f 	bl	8008df0 <USBD_CtlContinueRx>
 8007dd2:	e030      	b.n	8007e36 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	2b03      	cmp	r3, #3
 8007dde:	d10b      	bne.n	8007df8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007de6:	691b      	ldr	r3, [r3, #16]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d005      	beq.n	8007df8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007df2:	691b      	ldr	r3, [r3, #16]
 8007df4:	68f8      	ldr	r0, [r7, #12]
 8007df6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007df8:	68f8      	ldr	r0, [r7, #12]
 8007dfa:	f001 f80a 	bl	8008e12 <USBD_CtlSendStatus>
 8007dfe:	e01a      	b.n	8007e36 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	2b03      	cmp	r3, #3
 8007e0a:	d114      	bne.n	8007e36 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e12:	699b      	ldr	r3, [r3, #24]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d00e      	beq.n	8007e36 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e1e:	699b      	ldr	r3, [r3, #24]
 8007e20:	7afa      	ldrb	r2, [r7, #11]
 8007e22:	4611      	mov	r1, r2
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	4798      	blx	r3
 8007e28:	4603      	mov	r3, r0
 8007e2a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007e2c:	7dfb      	ldrb	r3, [r7, #23]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d001      	beq.n	8007e36 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007e32:	7dfb      	ldrb	r3, [r7, #23]
 8007e34:	e000      	b.n	8007e38 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007e36:	2300      	movs	r3, #0
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3718      	adds	r7, #24
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b086      	sub	sp, #24
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	460b      	mov	r3, r1
 8007e4a:	607a      	str	r2, [r7, #4]
 8007e4c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007e4e:	7afb      	ldrb	r3, [r7, #11]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d16b      	bne.n	8007f2c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	3314      	adds	r3, #20
 8007e58:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e60:	2b02      	cmp	r3, #2
 8007e62:	d156      	bne.n	8007f12 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	689a      	ldr	r2, [r3, #8]
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	68db      	ldr	r3, [r3, #12]
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d914      	bls.n	8007e9a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	689a      	ldr	r2, [r3, #8]
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	68db      	ldr	r3, [r3, #12]
 8007e78:	1ad2      	subs	r2, r2, r3
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	461a      	mov	r2, r3
 8007e84:	6879      	ldr	r1, [r7, #4]
 8007e86:	68f8      	ldr	r0, [r7, #12]
 8007e88:	f000 ff84 	bl	8008d94 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	2200      	movs	r2, #0
 8007e90:	2100      	movs	r1, #0
 8007e92:	68f8      	ldr	r0, [r7, #12]
 8007e94:	f001 fc8a 	bl	80097ac <USBD_LL_PrepareReceive>
 8007e98:	e03b      	b.n	8007f12 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	68da      	ldr	r2, [r3, #12]
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d11c      	bne.n	8007ee0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	685a      	ldr	r2, [r3, #4]
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d316      	bcc.n	8007ee0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	685a      	ldr	r2, [r3, #4]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d20f      	bcs.n	8007ee0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	2100      	movs	r1, #0
 8007ec4:	68f8      	ldr	r0, [r7, #12]
 8007ec6:	f000 ff65 	bl	8008d94 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	2100      	movs	r1, #0
 8007ed8:	68f8      	ldr	r0, [r7, #12]
 8007eda:	f001 fc67 	bl	80097ac <USBD_LL_PrepareReceive>
 8007ede:	e018      	b.n	8007f12 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	2b03      	cmp	r3, #3
 8007eea:	d10b      	bne.n	8007f04 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d005      	beq.n	8007f04 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007efe:	68db      	ldr	r3, [r3, #12]
 8007f00:	68f8      	ldr	r0, [r7, #12]
 8007f02:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f04:	2180      	movs	r1, #128	; 0x80
 8007f06:	68f8      	ldr	r0, [r7, #12]
 8007f08:	f001 fba6 	bl	8009658 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007f0c:	68f8      	ldr	r0, [r7, #12]
 8007f0e:	f000 ff93 	bl	8008e38 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d122      	bne.n	8007f62 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007f1c:	68f8      	ldr	r0, [r7, #12]
 8007f1e:	f7ff fe98 	bl	8007c52 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2200      	movs	r2, #0
 8007f26:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007f2a:	e01a      	b.n	8007f62 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	2b03      	cmp	r3, #3
 8007f36:	d114      	bne.n	8007f62 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f3e:	695b      	ldr	r3, [r3, #20]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d00e      	beq.n	8007f62 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f4a:	695b      	ldr	r3, [r3, #20]
 8007f4c:	7afa      	ldrb	r2, [r7, #11]
 8007f4e:	4611      	mov	r1, r2
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	4798      	blx	r3
 8007f54:	4603      	mov	r3, r0
 8007f56:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007f58:	7dfb      	ldrb	r3, [r7, #23]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d001      	beq.n	8007f62 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007f5e:	7dfb      	ldrb	r3, [r7, #23]
 8007f60:	e000      	b.n	8007f64 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007f62:	2300      	movs	r3, #0
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3718      	adds	r7, #24
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2200      	movs	r2, #0
 8007f88:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d101      	bne.n	8007fa0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007f9c:	2303      	movs	r3, #3
 8007f9e:	e02f      	b.n	8008000 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d00f      	beq.n	8007fca <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d009      	beq.n	8007fca <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	6852      	ldr	r2, [r2, #4]
 8007fc2:	b2d2      	uxtb	r2, r2
 8007fc4:	4611      	mov	r1, r2
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007fca:	2340      	movs	r3, #64	; 0x40
 8007fcc:	2200      	movs	r2, #0
 8007fce:	2100      	movs	r1, #0
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f001 fafc 	bl	80095ce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2201      	movs	r2, #1
 8007fda:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2240      	movs	r2, #64	; 0x40
 8007fe2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007fe6:	2340      	movs	r3, #64	; 0x40
 8007fe8:	2200      	movs	r2, #0
 8007fea:	2180      	movs	r1, #128	; 0x80
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f001 faee 	bl	80095ce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2240      	movs	r2, #64	; 0x40
 8007ffc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007ffe:	2300      	movs	r3, #0
}
 8008000:	4618      	mov	r0, r3
 8008002:	3708      	adds	r7, #8
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008008:	b480      	push	{r7}
 800800a:	b083      	sub	sp, #12
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	460b      	mov	r3, r1
 8008012:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	78fa      	ldrb	r2, [r7, #3]
 8008018:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800801a:	2300      	movs	r3, #0
}
 800801c:	4618      	mov	r0, r3
 800801e:	370c      	adds	r7, #12
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr

08008028 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008036:	b2da      	uxtb	r2, r3
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2204      	movs	r2, #4
 8008042:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008046:	2300      	movs	r3, #0
}
 8008048:	4618      	mov	r0, r3
 800804a:	370c      	adds	r7, #12
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr

08008054 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008054:	b480      	push	{r7}
 8008056:	b083      	sub	sp, #12
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008062:	b2db      	uxtb	r3, r3
 8008064:	2b04      	cmp	r3, #4
 8008066:	d106      	bne.n	8008076 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800806e:	b2da      	uxtb	r2, r3
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008076:	2300      	movs	r3, #0
}
 8008078:	4618      	mov	r0, r3
 800807a:	370c      	adds	r7, #12
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr

08008084 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b082      	sub	sp, #8
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008092:	2b00      	cmp	r3, #0
 8008094:	d101      	bne.n	800809a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008096:	2303      	movs	r3, #3
 8008098:	e012      	b.n	80080c0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	2b03      	cmp	r3, #3
 80080a4:	d10b      	bne.n	80080be <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080ac:	69db      	ldr	r3, [r3, #28]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d005      	beq.n	80080be <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080b8:	69db      	ldr	r3, [r3, #28]
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80080be:	2300      	movs	r3, #0
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3708      	adds	r7, #8
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	460b      	mov	r3, r1
 80080d2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d101      	bne.n	80080e2 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80080de:	2303      	movs	r3, #3
 80080e0:	e014      	b.n	800810c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	2b03      	cmp	r3, #3
 80080ec:	d10d      	bne.n	800810a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080f4:	6a1b      	ldr	r3, [r3, #32]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d007      	beq.n	800810a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008100:	6a1b      	ldr	r3, [r3, #32]
 8008102:	78fa      	ldrb	r2, [r7, #3]
 8008104:	4611      	mov	r1, r2
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800810a:	2300      	movs	r3, #0
}
 800810c:	4618      	mov	r0, r3
 800810e:	3708      	adds	r7, #8
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b082      	sub	sp, #8
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	460b      	mov	r3, r1
 800811e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008126:	2b00      	cmp	r3, #0
 8008128:	d101      	bne.n	800812e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800812a:	2303      	movs	r3, #3
 800812c:	e014      	b.n	8008158 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008134:	b2db      	uxtb	r3, r3
 8008136:	2b03      	cmp	r3, #3
 8008138:	d10d      	bne.n	8008156 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008142:	2b00      	cmp	r3, #0
 8008144:	d007      	beq.n	8008156 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800814c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814e:	78fa      	ldrb	r2, [r7, #3]
 8008150:	4611      	mov	r1, r2
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008156:	2300      	movs	r3, #0
}
 8008158:	4618      	mov	r0, r3
 800815a:	3708      	adds	r7, #8
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008160:	b480      	push	{r7}
 8008162:	b083      	sub	sp, #12
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008168:	2300      	movs	r3, #0
}
 800816a:	4618      	mov	r0, r3
 800816c:	370c      	adds	r7, #12
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr

08008176 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008176:	b580      	push	{r7, lr}
 8008178:	b082      	sub	sp, #8
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2201      	movs	r2, #1
 8008182:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800818c:	2b00      	cmp	r3, #0
 800818e:	d009      	beq.n	80081a4 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	6852      	ldr	r2, [r2, #4]
 800819c:	b2d2      	uxtb	r2, r2
 800819e:	4611      	mov	r1, r2
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	4798      	blx	r3
  }

  return USBD_OK;
 80081a4:	2300      	movs	r3, #0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3708      	adds	r7, #8
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80081ae:	b480      	push	{r7}
 80081b0:	b087      	sub	sp, #28
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	3301      	adds	r3, #1
 80081c4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80081cc:	8a3b      	ldrh	r3, [r7, #16]
 80081ce:	021b      	lsls	r3, r3, #8
 80081d0:	b21a      	sxth	r2, r3
 80081d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80081d6:	4313      	orrs	r3, r2
 80081d8:	b21b      	sxth	r3, r3
 80081da:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80081dc:	89fb      	ldrh	r3, [r7, #14]
}
 80081de:	4618      	mov	r0, r3
 80081e0:	371c      	adds	r7, #28
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr
	...

080081ec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80081f6:	2300      	movs	r3, #0
 80081f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008202:	2b40      	cmp	r3, #64	; 0x40
 8008204:	d005      	beq.n	8008212 <USBD_StdDevReq+0x26>
 8008206:	2b40      	cmp	r3, #64	; 0x40
 8008208:	d853      	bhi.n	80082b2 <USBD_StdDevReq+0xc6>
 800820a:	2b00      	cmp	r3, #0
 800820c:	d00b      	beq.n	8008226 <USBD_StdDevReq+0x3a>
 800820e:	2b20      	cmp	r3, #32
 8008210:	d14f      	bne.n	80082b2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008218:	689b      	ldr	r3, [r3, #8]
 800821a:	6839      	ldr	r1, [r7, #0]
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	4798      	blx	r3
 8008220:	4603      	mov	r3, r0
 8008222:	73fb      	strb	r3, [r7, #15]
      break;
 8008224:	e04a      	b.n	80082bc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	785b      	ldrb	r3, [r3, #1]
 800822a:	2b09      	cmp	r3, #9
 800822c:	d83b      	bhi.n	80082a6 <USBD_StdDevReq+0xba>
 800822e:	a201      	add	r2, pc, #4	; (adr r2, 8008234 <USBD_StdDevReq+0x48>)
 8008230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008234:	08008289 	.word	0x08008289
 8008238:	0800829d 	.word	0x0800829d
 800823c:	080082a7 	.word	0x080082a7
 8008240:	08008293 	.word	0x08008293
 8008244:	080082a7 	.word	0x080082a7
 8008248:	08008267 	.word	0x08008267
 800824c:	0800825d 	.word	0x0800825d
 8008250:	080082a7 	.word	0x080082a7
 8008254:	0800827f 	.word	0x0800827f
 8008258:	08008271 	.word	0x08008271
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800825c:	6839      	ldr	r1, [r7, #0]
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 f9de 	bl	8008620 <USBD_GetDescriptor>
          break;
 8008264:	e024      	b.n	80082b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008266:	6839      	ldr	r1, [r7, #0]
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 fb43 	bl	80088f4 <USBD_SetAddress>
          break;
 800826e:	e01f      	b.n	80082b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008270:	6839      	ldr	r1, [r7, #0]
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 fb82 	bl	800897c <USBD_SetConfig>
 8008278:	4603      	mov	r3, r0
 800827a:	73fb      	strb	r3, [r7, #15]
          break;
 800827c:	e018      	b.n	80082b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800827e:	6839      	ldr	r1, [r7, #0]
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 fc21 	bl	8008ac8 <USBD_GetConfig>
          break;
 8008286:	e013      	b.n	80082b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008288:	6839      	ldr	r1, [r7, #0]
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 fc52 	bl	8008b34 <USBD_GetStatus>
          break;
 8008290:	e00e      	b.n	80082b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008292:	6839      	ldr	r1, [r7, #0]
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 fc81 	bl	8008b9c <USBD_SetFeature>
          break;
 800829a:	e009      	b.n	80082b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800829c:	6839      	ldr	r1, [r7, #0]
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 fc90 	bl	8008bc4 <USBD_ClrFeature>
          break;
 80082a4:	e004      	b.n	80082b0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80082a6:	6839      	ldr	r1, [r7, #0]
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 fce7 	bl	8008c7c <USBD_CtlError>
          break;
 80082ae:	bf00      	nop
      }
      break;
 80082b0:	e004      	b.n	80082bc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80082b2:	6839      	ldr	r1, [r7, #0]
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 fce1 	bl	8008c7c <USBD_CtlError>
      break;
 80082ba:	bf00      	nop
  }

  return ret;
 80082bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3710      	adds	r7, #16
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	bf00      	nop

080082c8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80082d2:	2300      	movs	r3, #0
 80082d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082de:	2b40      	cmp	r3, #64	; 0x40
 80082e0:	d005      	beq.n	80082ee <USBD_StdItfReq+0x26>
 80082e2:	2b40      	cmp	r3, #64	; 0x40
 80082e4:	d82f      	bhi.n	8008346 <USBD_StdItfReq+0x7e>
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d001      	beq.n	80082ee <USBD_StdItfReq+0x26>
 80082ea:	2b20      	cmp	r3, #32
 80082ec:	d12b      	bne.n	8008346 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082f4:	b2db      	uxtb	r3, r3
 80082f6:	3b01      	subs	r3, #1
 80082f8:	2b02      	cmp	r3, #2
 80082fa:	d81d      	bhi.n	8008338 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	889b      	ldrh	r3, [r3, #4]
 8008300:	b2db      	uxtb	r3, r3
 8008302:	2b01      	cmp	r3, #1
 8008304:	d813      	bhi.n	800832e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	6839      	ldr	r1, [r7, #0]
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	4798      	blx	r3
 8008314:	4603      	mov	r3, r0
 8008316:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	88db      	ldrh	r3, [r3, #6]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d110      	bne.n	8008342 <USBD_StdItfReq+0x7a>
 8008320:	7bfb      	ldrb	r3, [r7, #15]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d10d      	bne.n	8008342 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 fd73 	bl	8008e12 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800832c:	e009      	b.n	8008342 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800832e:	6839      	ldr	r1, [r7, #0]
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f000 fca3 	bl	8008c7c <USBD_CtlError>
          break;
 8008336:	e004      	b.n	8008342 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008338:	6839      	ldr	r1, [r7, #0]
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 fc9e 	bl	8008c7c <USBD_CtlError>
          break;
 8008340:	e000      	b.n	8008344 <USBD_StdItfReq+0x7c>
          break;
 8008342:	bf00      	nop
      }
      break;
 8008344:	e004      	b.n	8008350 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008346:	6839      	ldr	r1, [r7, #0]
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 fc97 	bl	8008c7c <USBD_CtlError>
      break;
 800834e:	bf00      	nop
  }

  return ret;
 8008350:	7bfb      	ldrb	r3, [r7, #15]
}
 8008352:	4618      	mov	r0, r3
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}

0800835a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b084      	sub	sp, #16
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
 8008362:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008364:	2300      	movs	r3, #0
 8008366:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	889b      	ldrh	r3, [r3, #4]
 800836c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	781b      	ldrb	r3, [r3, #0]
 8008372:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008376:	2b40      	cmp	r3, #64	; 0x40
 8008378:	d007      	beq.n	800838a <USBD_StdEPReq+0x30>
 800837a:	2b40      	cmp	r3, #64	; 0x40
 800837c:	f200 8145 	bhi.w	800860a <USBD_StdEPReq+0x2b0>
 8008380:	2b00      	cmp	r3, #0
 8008382:	d00c      	beq.n	800839e <USBD_StdEPReq+0x44>
 8008384:	2b20      	cmp	r3, #32
 8008386:	f040 8140 	bne.w	800860a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	6839      	ldr	r1, [r7, #0]
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	4798      	blx	r3
 8008398:	4603      	mov	r3, r0
 800839a:	73fb      	strb	r3, [r7, #15]
      break;
 800839c:	e13a      	b.n	8008614 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	785b      	ldrb	r3, [r3, #1]
 80083a2:	2b03      	cmp	r3, #3
 80083a4:	d007      	beq.n	80083b6 <USBD_StdEPReq+0x5c>
 80083a6:	2b03      	cmp	r3, #3
 80083a8:	f300 8129 	bgt.w	80085fe <USBD_StdEPReq+0x2a4>
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d07f      	beq.n	80084b0 <USBD_StdEPReq+0x156>
 80083b0:	2b01      	cmp	r3, #1
 80083b2:	d03c      	beq.n	800842e <USBD_StdEPReq+0xd4>
 80083b4:	e123      	b.n	80085fe <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	2b02      	cmp	r3, #2
 80083c0:	d002      	beq.n	80083c8 <USBD_StdEPReq+0x6e>
 80083c2:	2b03      	cmp	r3, #3
 80083c4:	d016      	beq.n	80083f4 <USBD_StdEPReq+0x9a>
 80083c6:	e02c      	b.n	8008422 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083c8:	7bbb      	ldrb	r3, [r7, #14]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d00d      	beq.n	80083ea <USBD_StdEPReq+0x90>
 80083ce:	7bbb      	ldrb	r3, [r7, #14]
 80083d0:	2b80      	cmp	r3, #128	; 0x80
 80083d2:	d00a      	beq.n	80083ea <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80083d4:	7bbb      	ldrb	r3, [r7, #14]
 80083d6:	4619      	mov	r1, r3
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f001 f93d 	bl	8009658 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80083de:	2180      	movs	r1, #128	; 0x80
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f001 f939 	bl	8009658 <USBD_LL_StallEP>
 80083e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80083e8:	e020      	b.n	800842c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80083ea:	6839      	ldr	r1, [r7, #0]
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 fc45 	bl	8008c7c <USBD_CtlError>
              break;
 80083f2:	e01b      	b.n	800842c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	885b      	ldrh	r3, [r3, #2]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d10e      	bne.n	800841a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80083fc:	7bbb      	ldrb	r3, [r7, #14]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d00b      	beq.n	800841a <USBD_StdEPReq+0xc0>
 8008402:	7bbb      	ldrb	r3, [r7, #14]
 8008404:	2b80      	cmp	r3, #128	; 0x80
 8008406:	d008      	beq.n	800841a <USBD_StdEPReq+0xc0>
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	88db      	ldrh	r3, [r3, #6]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d104      	bne.n	800841a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008410:	7bbb      	ldrb	r3, [r7, #14]
 8008412:	4619      	mov	r1, r3
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f001 f91f 	bl	8009658 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 fcf9 	bl	8008e12 <USBD_CtlSendStatus>

              break;
 8008420:	e004      	b.n	800842c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008422:	6839      	ldr	r1, [r7, #0]
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 fc29 	bl	8008c7c <USBD_CtlError>
              break;
 800842a:	bf00      	nop
          }
          break;
 800842c:	e0ec      	b.n	8008608 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008434:	b2db      	uxtb	r3, r3
 8008436:	2b02      	cmp	r3, #2
 8008438:	d002      	beq.n	8008440 <USBD_StdEPReq+0xe6>
 800843a:	2b03      	cmp	r3, #3
 800843c:	d016      	beq.n	800846c <USBD_StdEPReq+0x112>
 800843e:	e030      	b.n	80084a2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008440:	7bbb      	ldrb	r3, [r7, #14]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d00d      	beq.n	8008462 <USBD_StdEPReq+0x108>
 8008446:	7bbb      	ldrb	r3, [r7, #14]
 8008448:	2b80      	cmp	r3, #128	; 0x80
 800844a:	d00a      	beq.n	8008462 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800844c:	7bbb      	ldrb	r3, [r7, #14]
 800844e:	4619      	mov	r1, r3
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f001 f901 	bl	8009658 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008456:	2180      	movs	r1, #128	; 0x80
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f001 f8fd 	bl	8009658 <USBD_LL_StallEP>
 800845e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008460:	e025      	b.n	80084ae <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008462:	6839      	ldr	r1, [r7, #0]
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 fc09 	bl	8008c7c <USBD_CtlError>
              break;
 800846a:	e020      	b.n	80084ae <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	885b      	ldrh	r3, [r3, #2]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d11b      	bne.n	80084ac <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008474:	7bbb      	ldrb	r3, [r7, #14]
 8008476:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800847a:	2b00      	cmp	r3, #0
 800847c:	d004      	beq.n	8008488 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800847e:	7bbb      	ldrb	r3, [r7, #14]
 8008480:	4619      	mov	r1, r3
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f001 f907 	bl	8009696 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 fcc2 	bl	8008e12 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	6839      	ldr	r1, [r7, #0]
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	4798      	blx	r3
 800849c:	4603      	mov	r3, r0
 800849e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80084a0:	e004      	b.n	80084ac <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80084a2:	6839      	ldr	r1, [r7, #0]
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 fbe9 	bl	8008c7c <USBD_CtlError>
              break;
 80084aa:	e000      	b.n	80084ae <USBD_StdEPReq+0x154>
              break;
 80084ac:	bf00      	nop
          }
          break;
 80084ae:	e0ab      	b.n	8008608 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	2b02      	cmp	r3, #2
 80084ba:	d002      	beq.n	80084c2 <USBD_StdEPReq+0x168>
 80084bc:	2b03      	cmp	r3, #3
 80084be:	d032      	beq.n	8008526 <USBD_StdEPReq+0x1cc>
 80084c0:	e097      	b.n	80085f2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084c2:	7bbb      	ldrb	r3, [r7, #14]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d007      	beq.n	80084d8 <USBD_StdEPReq+0x17e>
 80084c8:	7bbb      	ldrb	r3, [r7, #14]
 80084ca:	2b80      	cmp	r3, #128	; 0x80
 80084cc:	d004      	beq.n	80084d8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80084ce:	6839      	ldr	r1, [r7, #0]
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 fbd3 	bl	8008c7c <USBD_CtlError>
                break;
 80084d6:	e091      	b.n	80085fc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	da0b      	bge.n	80084f8 <USBD_StdEPReq+0x19e>
 80084e0:	7bbb      	ldrb	r3, [r7, #14]
 80084e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084e6:	4613      	mov	r3, r2
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	4413      	add	r3, r2
 80084ec:	009b      	lsls	r3, r3, #2
 80084ee:	3310      	adds	r3, #16
 80084f0:	687a      	ldr	r2, [r7, #4]
 80084f2:	4413      	add	r3, r2
 80084f4:	3304      	adds	r3, #4
 80084f6:	e00b      	b.n	8008510 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80084f8:	7bbb      	ldrb	r3, [r7, #14]
 80084fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084fe:	4613      	mov	r3, r2
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	4413      	add	r3, r2
 8008504:	009b      	lsls	r3, r3, #2
 8008506:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	4413      	add	r3, r2
 800850e:	3304      	adds	r3, #4
 8008510:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	2200      	movs	r2, #0
 8008516:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	2202      	movs	r2, #2
 800851c:	4619      	mov	r1, r3
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 fc1d 	bl	8008d5e <USBD_CtlSendData>
              break;
 8008524:	e06a      	b.n	80085fc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008526:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800852a:	2b00      	cmp	r3, #0
 800852c:	da11      	bge.n	8008552 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800852e:	7bbb      	ldrb	r3, [r7, #14]
 8008530:	f003 020f 	and.w	r2, r3, #15
 8008534:	6879      	ldr	r1, [r7, #4]
 8008536:	4613      	mov	r3, r2
 8008538:	009b      	lsls	r3, r3, #2
 800853a:	4413      	add	r3, r2
 800853c:	009b      	lsls	r3, r3, #2
 800853e:	440b      	add	r3, r1
 8008540:	3324      	adds	r3, #36	; 0x24
 8008542:	881b      	ldrh	r3, [r3, #0]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d117      	bne.n	8008578 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008548:	6839      	ldr	r1, [r7, #0]
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 fb96 	bl	8008c7c <USBD_CtlError>
                  break;
 8008550:	e054      	b.n	80085fc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008552:	7bbb      	ldrb	r3, [r7, #14]
 8008554:	f003 020f 	and.w	r2, r3, #15
 8008558:	6879      	ldr	r1, [r7, #4]
 800855a:	4613      	mov	r3, r2
 800855c:	009b      	lsls	r3, r3, #2
 800855e:	4413      	add	r3, r2
 8008560:	009b      	lsls	r3, r3, #2
 8008562:	440b      	add	r3, r1
 8008564:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008568:	881b      	ldrh	r3, [r3, #0]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d104      	bne.n	8008578 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800856e:	6839      	ldr	r1, [r7, #0]
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 fb83 	bl	8008c7c <USBD_CtlError>
                  break;
 8008576:	e041      	b.n	80085fc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008578:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800857c:	2b00      	cmp	r3, #0
 800857e:	da0b      	bge.n	8008598 <USBD_StdEPReq+0x23e>
 8008580:	7bbb      	ldrb	r3, [r7, #14]
 8008582:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008586:	4613      	mov	r3, r2
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	4413      	add	r3, r2
 800858c:	009b      	lsls	r3, r3, #2
 800858e:	3310      	adds	r3, #16
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	4413      	add	r3, r2
 8008594:	3304      	adds	r3, #4
 8008596:	e00b      	b.n	80085b0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008598:	7bbb      	ldrb	r3, [r7, #14]
 800859a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800859e:	4613      	mov	r3, r2
 80085a0:	009b      	lsls	r3, r3, #2
 80085a2:	4413      	add	r3, r2
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	4413      	add	r3, r2
 80085ae:	3304      	adds	r3, #4
 80085b0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80085b2:	7bbb      	ldrb	r3, [r7, #14]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d002      	beq.n	80085be <USBD_StdEPReq+0x264>
 80085b8:	7bbb      	ldrb	r3, [r7, #14]
 80085ba:	2b80      	cmp	r3, #128	; 0x80
 80085bc:	d103      	bne.n	80085c6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	2200      	movs	r2, #0
 80085c2:	601a      	str	r2, [r3, #0]
 80085c4:	e00e      	b.n	80085e4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80085c6:	7bbb      	ldrb	r3, [r7, #14]
 80085c8:	4619      	mov	r1, r3
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f001 f882 	bl	80096d4 <USBD_LL_IsStallEP>
 80085d0:	4603      	mov	r3, r0
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d003      	beq.n	80085de <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	2201      	movs	r2, #1
 80085da:	601a      	str	r2, [r3, #0]
 80085dc:	e002      	b.n	80085e4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	2200      	movs	r2, #0
 80085e2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	2202      	movs	r2, #2
 80085e8:	4619      	mov	r1, r3
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 fbb7 	bl	8008d5e <USBD_CtlSendData>
              break;
 80085f0:	e004      	b.n	80085fc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80085f2:	6839      	ldr	r1, [r7, #0]
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 fb41 	bl	8008c7c <USBD_CtlError>
              break;
 80085fa:	bf00      	nop
          }
          break;
 80085fc:	e004      	b.n	8008608 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80085fe:	6839      	ldr	r1, [r7, #0]
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 fb3b 	bl	8008c7c <USBD_CtlError>
          break;
 8008606:	bf00      	nop
      }
      break;
 8008608:	e004      	b.n	8008614 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800860a:	6839      	ldr	r1, [r7, #0]
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 fb35 	bl	8008c7c <USBD_CtlError>
      break;
 8008612:	bf00      	nop
  }

  return ret;
 8008614:	7bfb      	ldrb	r3, [r7, #15]
}
 8008616:	4618      	mov	r0, r3
 8008618:	3710      	adds	r7, #16
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
	...

08008620 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b084      	sub	sp, #16
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800862a:	2300      	movs	r3, #0
 800862c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800862e:	2300      	movs	r3, #0
 8008630:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008632:	2300      	movs	r3, #0
 8008634:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	885b      	ldrh	r3, [r3, #2]
 800863a:	0a1b      	lsrs	r3, r3, #8
 800863c:	b29b      	uxth	r3, r3
 800863e:	3b01      	subs	r3, #1
 8008640:	2b06      	cmp	r3, #6
 8008642:	f200 8128 	bhi.w	8008896 <USBD_GetDescriptor+0x276>
 8008646:	a201      	add	r2, pc, #4	; (adr r2, 800864c <USBD_GetDescriptor+0x2c>)
 8008648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800864c:	08008669 	.word	0x08008669
 8008650:	08008681 	.word	0x08008681
 8008654:	080086c1 	.word	0x080086c1
 8008658:	08008897 	.word	0x08008897
 800865c:	08008897 	.word	0x08008897
 8008660:	08008837 	.word	0x08008837
 8008664:	08008863 	.word	0x08008863
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	7c12      	ldrb	r2, [r2, #16]
 8008674:	f107 0108 	add.w	r1, r7, #8
 8008678:	4610      	mov	r0, r2
 800867a:	4798      	blx	r3
 800867c:	60f8      	str	r0, [r7, #12]
      break;
 800867e:	e112      	b.n	80088a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	7c1b      	ldrb	r3, [r3, #16]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d10d      	bne.n	80086a4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800868e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008690:	f107 0208 	add.w	r2, r7, #8
 8008694:	4610      	mov	r0, r2
 8008696:	4798      	blx	r3
 8008698:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	3301      	adds	r3, #1
 800869e:	2202      	movs	r2, #2
 80086a0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80086a2:	e100      	b.n	80088a6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ac:	f107 0208 	add.w	r2, r7, #8
 80086b0:	4610      	mov	r0, r2
 80086b2:	4798      	blx	r3
 80086b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	3301      	adds	r3, #1
 80086ba:	2202      	movs	r2, #2
 80086bc:	701a      	strb	r2, [r3, #0]
      break;
 80086be:	e0f2      	b.n	80088a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	885b      	ldrh	r3, [r3, #2]
 80086c4:	b2db      	uxtb	r3, r3
 80086c6:	2b05      	cmp	r3, #5
 80086c8:	f200 80ac 	bhi.w	8008824 <USBD_GetDescriptor+0x204>
 80086cc:	a201      	add	r2, pc, #4	; (adr r2, 80086d4 <USBD_GetDescriptor+0xb4>)
 80086ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086d2:	bf00      	nop
 80086d4:	080086ed 	.word	0x080086ed
 80086d8:	08008721 	.word	0x08008721
 80086dc:	08008755 	.word	0x08008755
 80086e0:	08008789 	.word	0x08008789
 80086e4:	080087bd 	.word	0x080087bd
 80086e8:	080087f1 	.word	0x080087f1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d00b      	beq.n	8008710 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	7c12      	ldrb	r2, [r2, #16]
 8008704:	f107 0108 	add.w	r1, r7, #8
 8008708:	4610      	mov	r0, r2
 800870a:	4798      	blx	r3
 800870c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800870e:	e091      	b.n	8008834 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008710:	6839      	ldr	r1, [r7, #0]
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 fab2 	bl	8008c7c <USBD_CtlError>
            err++;
 8008718:	7afb      	ldrb	r3, [r7, #11]
 800871a:	3301      	adds	r3, #1
 800871c:	72fb      	strb	r3, [r7, #11]
          break;
 800871e:	e089      	b.n	8008834 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008726:	689b      	ldr	r3, [r3, #8]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d00b      	beq.n	8008744 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	7c12      	ldrb	r2, [r2, #16]
 8008738:	f107 0108 	add.w	r1, r7, #8
 800873c:	4610      	mov	r0, r2
 800873e:	4798      	blx	r3
 8008740:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008742:	e077      	b.n	8008834 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008744:	6839      	ldr	r1, [r7, #0]
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 fa98 	bl	8008c7c <USBD_CtlError>
            err++;
 800874c:	7afb      	ldrb	r3, [r7, #11]
 800874e:	3301      	adds	r3, #1
 8008750:	72fb      	strb	r3, [r7, #11]
          break;
 8008752:	e06f      	b.n	8008834 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800875a:	68db      	ldr	r3, [r3, #12]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d00b      	beq.n	8008778 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008766:	68db      	ldr	r3, [r3, #12]
 8008768:	687a      	ldr	r2, [r7, #4]
 800876a:	7c12      	ldrb	r2, [r2, #16]
 800876c:	f107 0108 	add.w	r1, r7, #8
 8008770:	4610      	mov	r0, r2
 8008772:	4798      	blx	r3
 8008774:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008776:	e05d      	b.n	8008834 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008778:	6839      	ldr	r1, [r7, #0]
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 fa7e 	bl	8008c7c <USBD_CtlError>
            err++;
 8008780:	7afb      	ldrb	r3, [r7, #11]
 8008782:	3301      	adds	r3, #1
 8008784:	72fb      	strb	r3, [r7, #11]
          break;
 8008786:	e055      	b.n	8008834 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800878e:	691b      	ldr	r3, [r3, #16]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d00b      	beq.n	80087ac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800879a:	691b      	ldr	r3, [r3, #16]
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	7c12      	ldrb	r2, [r2, #16]
 80087a0:	f107 0108 	add.w	r1, r7, #8
 80087a4:	4610      	mov	r0, r2
 80087a6:	4798      	blx	r3
 80087a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087aa:	e043      	b.n	8008834 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087ac:	6839      	ldr	r1, [r7, #0]
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 fa64 	bl	8008c7c <USBD_CtlError>
            err++;
 80087b4:	7afb      	ldrb	r3, [r7, #11]
 80087b6:	3301      	adds	r3, #1
 80087b8:	72fb      	strb	r3, [r7, #11]
          break;
 80087ba:	e03b      	b.n	8008834 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087c2:	695b      	ldr	r3, [r3, #20]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d00b      	beq.n	80087e0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087ce:	695b      	ldr	r3, [r3, #20]
 80087d0:	687a      	ldr	r2, [r7, #4]
 80087d2:	7c12      	ldrb	r2, [r2, #16]
 80087d4:	f107 0108 	add.w	r1, r7, #8
 80087d8:	4610      	mov	r0, r2
 80087da:	4798      	blx	r3
 80087dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087de:	e029      	b.n	8008834 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087e0:	6839      	ldr	r1, [r7, #0]
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 fa4a 	bl	8008c7c <USBD_CtlError>
            err++;
 80087e8:	7afb      	ldrb	r3, [r7, #11]
 80087ea:	3301      	adds	r3, #1
 80087ec:	72fb      	strb	r3, [r7, #11]
          break;
 80087ee:	e021      	b.n	8008834 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087f6:	699b      	ldr	r3, [r3, #24]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d00b      	beq.n	8008814 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008802:	699b      	ldr	r3, [r3, #24]
 8008804:	687a      	ldr	r2, [r7, #4]
 8008806:	7c12      	ldrb	r2, [r2, #16]
 8008808:	f107 0108 	add.w	r1, r7, #8
 800880c:	4610      	mov	r0, r2
 800880e:	4798      	blx	r3
 8008810:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008812:	e00f      	b.n	8008834 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008814:	6839      	ldr	r1, [r7, #0]
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 fa30 	bl	8008c7c <USBD_CtlError>
            err++;
 800881c:	7afb      	ldrb	r3, [r7, #11]
 800881e:	3301      	adds	r3, #1
 8008820:	72fb      	strb	r3, [r7, #11]
          break;
 8008822:	e007      	b.n	8008834 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008824:	6839      	ldr	r1, [r7, #0]
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 fa28 	bl	8008c7c <USBD_CtlError>
          err++;
 800882c:	7afb      	ldrb	r3, [r7, #11]
 800882e:	3301      	adds	r3, #1
 8008830:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008832:	bf00      	nop
      }
      break;
 8008834:	e037      	b.n	80088a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	7c1b      	ldrb	r3, [r3, #16]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d109      	bne.n	8008852 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008846:	f107 0208 	add.w	r2, r7, #8
 800884a:	4610      	mov	r0, r2
 800884c:	4798      	blx	r3
 800884e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008850:	e029      	b.n	80088a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008852:	6839      	ldr	r1, [r7, #0]
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f000 fa11 	bl	8008c7c <USBD_CtlError>
        err++;
 800885a:	7afb      	ldrb	r3, [r7, #11]
 800885c:	3301      	adds	r3, #1
 800885e:	72fb      	strb	r3, [r7, #11]
      break;
 8008860:	e021      	b.n	80088a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	7c1b      	ldrb	r3, [r3, #16]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d10d      	bne.n	8008886 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008872:	f107 0208 	add.w	r2, r7, #8
 8008876:	4610      	mov	r0, r2
 8008878:	4798      	blx	r3
 800887a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	3301      	adds	r3, #1
 8008880:	2207      	movs	r2, #7
 8008882:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008884:	e00f      	b.n	80088a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008886:	6839      	ldr	r1, [r7, #0]
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 f9f7 	bl	8008c7c <USBD_CtlError>
        err++;
 800888e:	7afb      	ldrb	r3, [r7, #11]
 8008890:	3301      	adds	r3, #1
 8008892:	72fb      	strb	r3, [r7, #11]
      break;
 8008894:	e007      	b.n	80088a6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008896:	6839      	ldr	r1, [r7, #0]
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f000 f9ef 	bl	8008c7c <USBD_CtlError>
      err++;
 800889e:	7afb      	ldrb	r3, [r7, #11]
 80088a0:	3301      	adds	r3, #1
 80088a2:	72fb      	strb	r3, [r7, #11]
      break;
 80088a4:	bf00      	nop
  }

  if (err != 0U)
 80088a6:	7afb      	ldrb	r3, [r7, #11]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d11e      	bne.n	80088ea <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	88db      	ldrh	r3, [r3, #6]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d016      	beq.n	80088e2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80088b4:	893b      	ldrh	r3, [r7, #8]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d00e      	beq.n	80088d8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	88da      	ldrh	r2, [r3, #6]
 80088be:	893b      	ldrh	r3, [r7, #8]
 80088c0:	4293      	cmp	r3, r2
 80088c2:	bf28      	it	cs
 80088c4:	4613      	movcs	r3, r2
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80088ca:	893b      	ldrh	r3, [r7, #8]
 80088cc:	461a      	mov	r2, r3
 80088ce:	68f9      	ldr	r1, [r7, #12]
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 fa44 	bl	8008d5e <USBD_CtlSendData>
 80088d6:	e009      	b.n	80088ec <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80088d8:	6839      	ldr	r1, [r7, #0]
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f000 f9ce 	bl	8008c7c <USBD_CtlError>
 80088e0:	e004      	b.n	80088ec <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 fa95 	bl	8008e12 <USBD_CtlSendStatus>
 80088e8:	e000      	b.n	80088ec <USBD_GetDescriptor+0x2cc>
    return;
 80088ea:	bf00      	nop
  }
}
 80088ec:	3710      	adds	r7, #16
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
 80088f2:	bf00      	nop

080088f4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b084      	sub	sp, #16
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	889b      	ldrh	r3, [r3, #4]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d131      	bne.n	800896a <USBD_SetAddress+0x76>
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	88db      	ldrh	r3, [r3, #6]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d12d      	bne.n	800896a <USBD_SetAddress+0x76>
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	885b      	ldrh	r3, [r3, #2]
 8008912:	2b7f      	cmp	r3, #127	; 0x7f
 8008914:	d829      	bhi.n	800896a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	885b      	ldrh	r3, [r3, #2]
 800891a:	b2db      	uxtb	r3, r3
 800891c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008920:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008928:	b2db      	uxtb	r3, r3
 800892a:	2b03      	cmp	r3, #3
 800892c:	d104      	bne.n	8008938 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800892e:	6839      	ldr	r1, [r7, #0]
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f000 f9a3 	bl	8008c7c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008936:	e01d      	b.n	8008974 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	7bfa      	ldrb	r2, [r7, #15]
 800893c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008940:	7bfb      	ldrb	r3, [r7, #15]
 8008942:	4619      	mov	r1, r3
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 fef1 	bl	800972c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 fa61 	bl	8008e12 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008950:	7bfb      	ldrb	r3, [r7, #15]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d004      	beq.n	8008960 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2202      	movs	r2, #2
 800895a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800895e:	e009      	b.n	8008974 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2201      	movs	r2, #1
 8008964:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008968:	e004      	b.n	8008974 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800896a:	6839      	ldr	r1, [r7, #0]
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f000 f985 	bl	8008c7c <USBD_CtlError>
  }
}
 8008972:	bf00      	nop
 8008974:	bf00      	nop
 8008976:	3710      	adds	r7, #16
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b084      	sub	sp, #16
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
 8008984:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008986:	2300      	movs	r3, #0
 8008988:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	885b      	ldrh	r3, [r3, #2]
 800898e:	b2da      	uxtb	r2, r3
 8008990:	4b4c      	ldr	r3, [pc, #304]	; (8008ac4 <USBD_SetConfig+0x148>)
 8008992:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008994:	4b4b      	ldr	r3, [pc, #300]	; (8008ac4 <USBD_SetConfig+0x148>)
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	2b01      	cmp	r3, #1
 800899a:	d905      	bls.n	80089a8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800899c:	6839      	ldr	r1, [r7, #0]
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f000 f96c 	bl	8008c7c <USBD_CtlError>
    return USBD_FAIL;
 80089a4:	2303      	movs	r3, #3
 80089a6:	e088      	b.n	8008aba <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089ae:	b2db      	uxtb	r3, r3
 80089b0:	2b02      	cmp	r3, #2
 80089b2:	d002      	beq.n	80089ba <USBD_SetConfig+0x3e>
 80089b4:	2b03      	cmp	r3, #3
 80089b6:	d025      	beq.n	8008a04 <USBD_SetConfig+0x88>
 80089b8:	e071      	b.n	8008a9e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80089ba:	4b42      	ldr	r3, [pc, #264]	; (8008ac4 <USBD_SetConfig+0x148>)
 80089bc:	781b      	ldrb	r3, [r3, #0]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d01c      	beq.n	80089fc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80089c2:	4b40      	ldr	r3, [pc, #256]	; (8008ac4 <USBD_SetConfig+0x148>)
 80089c4:	781b      	ldrb	r3, [r3, #0]
 80089c6:	461a      	mov	r2, r3
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80089cc:	4b3d      	ldr	r3, [pc, #244]	; (8008ac4 <USBD_SetConfig+0x148>)
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	4619      	mov	r1, r3
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f7ff f948 	bl	8007c68 <USBD_SetClassConfig>
 80089d8:	4603      	mov	r3, r0
 80089da:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80089dc:	7bfb      	ldrb	r3, [r7, #15]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d004      	beq.n	80089ec <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80089e2:	6839      	ldr	r1, [r7, #0]
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f000 f949 	bl	8008c7c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80089ea:	e065      	b.n	8008ab8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 fa10 	bl	8008e12 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2203      	movs	r2, #3
 80089f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80089fa:	e05d      	b.n	8008ab8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f000 fa08 	bl	8008e12 <USBD_CtlSendStatus>
      break;
 8008a02:	e059      	b.n	8008ab8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008a04:	4b2f      	ldr	r3, [pc, #188]	; (8008ac4 <USBD_SetConfig+0x148>)
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d112      	bne.n	8008a32 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2202      	movs	r2, #2
 8008a10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008a14:	4b2b      	ldr	r3, [pc, #172]	; (8008ac4 <USBD_SetConfig+0x148>)
 8008a16:	781b      	ldrb	r3, [r3, #0]
 8008a18:	461a      	mov	r2, r3
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008a1e:	4b29      	ldr	r3, [pc, #164]	; (8008ac4 <USBD_SetConfig+0x148>)
 8008a20:	781b      	ldrb	r3, [r3, #0]
 8008a22:	4619      	mov	r1, r3
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f7ff f93b 	bl	8007ca0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 f9f1 	bl	8008e12 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008a30:	e042      	b.n	8008ab8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008a32:	4b24      	ldr	r3, [pc, #144]	; (8008ac4 <USBD_SetConfig+0x148>)
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	461a      	mov	r2, r3
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	d02a      	beq.n	8008a96 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	4619      	mov	r1, r3
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f7ff f929 	bl	8007ca0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008a4e:	4b1d      	ldr	r3, [pc, #116]	; (8008ac4 <USBD_SetConfig+0x148>)
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	461a      	mov	r2, r3
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008a58:	4b1a      	ldr	r3, [pc, #104]	; (8008ac4 <USBD_SetConfig+0x148>)
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f7ff f902 	bl	8007c68 <USBD_SetClassConfig>
 8008a64:	4603      	mov	r3, r0
 8008a66:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008a68:	7bfb      	ldrb	r3, [r7, #15]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d00f      	beq.n	8008a8e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008a6e:	6839      	ldr	r1, [r7, #0]
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f000 f903 	bl	8008c7c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	4619      	mov	r1, r3
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f7ff f90e 	bl	8007ca0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2202      	movs	r2, #2
 8008a88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008a8c:	e014      	b.n	8008ab8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f000 f9bf 	bl	8008e12 <USBD_CtlSendStatus>
      break;
 8008a94:	e010      	b.n	8008ab8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 f9bb 	bl	8008e12 <USBD_CtlSendStatus>
      break;
 8008a9c:	e00c      	b.n	8008ab8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008a9e:	6839      	ldr	r1, [r7, #0]
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 f8eb 	bl	8008c7c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008aa6:	4b07      	ldr	r3, [pc, #28]	; (8008ac4 <USBD_SetConfig+0x148>)
 8008aa8:	781b      	ldrb	r3, [r3, #0]
 8008aaa:	4619      	mov	r1, r3
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f7ff f8f7 	bl	8007ca0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008ab2:	2303      	movs	r3, #3
 8008ab4:	73fb      	strb	r3, [r7, #15]
      break;
 8008ab6:	bf00      	nop
  }

  return ret;
 8008ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3710      	adds	r7, #16
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
 8008ac2:	bf00      	nop
 8008ac4:	20000370 	.word	0x20000370

08008ac8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	88db      	ldrh	r3, [r3, #6]
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d004      	beq.n	8008ae4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008ada:	6839      	ldr	r1, [r7, #0]
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f000 f8cd 	bl	8008c7c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008ae2:	e023      	b.n	8008b2c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008aea:	b2db      	uxtb	r3, r3
 8008aec:	2b02      	cmp	r3, #2
 8008aee:	dc02      	bgt.n	8008af6 <USBD_GetConfig+0x2e>
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	dc03      	bgt.n	8008afc <USBD_GetConfig+0x34>
 8008af4:	e015      	b.n	8008b22 <USBD_GetConfig+0x5a>
 8008af6:	2b03      	cmp	r3, #3
 8008af8:	d00b      	beq.n	8008b12 <USBD_GetConfig+0x4a>
 8008afa:	e012      	b.n	8008b22 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2200      	movs	r2, #0
 8008b00:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	3308      	adds	r3, #8
 8008b06:	2201      	movs	r2, #1
 8008b08:	4619      	mov	r1, r3
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 f927 	bl	8008d5e <USBD_CtlSendData>
        break;
 8008b10:	e00c      	b.n	8008b2c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	3304      	adds	r3, #4
 8008b16:	2201      	movs	r2, #1
 8008b18:	4619      	mov	r1, r3
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 f91f 	bl	8008d5e <USBD_CtlSendData>
        break;
 8008b20:	e004      	b.n	8008b2c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008b22:	6839      	ldr	r1, [r7, #0]
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f000 f8a9 	bl	8008c7c <USBD_CtlError>
        break;
 8008b2a:	bf00      	nop
}
 8008b2c:	bf00      	nop
 8008b2e:	3708      	adds	r7, #8
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b082      	sub	sp, #8
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	3b01      	subs	r3, #1
 8008b48:	2b02      	cmp	r3, #2
 8008b4a:	d81e      	bhi.n	8008b8a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	88db      	ldrh	r3, [r3, #6]
 8008b50:	2b02      	cmp	r3, #2
 8008b52:	d004      	beq.n	8008b5e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008b54:	6839      	ldr	r1, [r7, #0]
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f000 f890 	bl	8008c7c <USBD_CtlError>
        break;
 8008b5c:	e01a      	b.n	8008b94 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2201      	movs	r2, #1
 8008b62:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d005      	beq.n	8008b7a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	68db      	ldr	r3, [r3, #12]
 8008b72:	f043 0202 	orr.w	r2, r3, #2
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	330c      	adds	r3, #12
 8008b7e:	2202      	movs	r2, #2
 8008b80:	4619      	mov	r1, r3
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 f8eb 	bl	8008d5e <USBD_CtlSendData>
      break;
 8008b88:	e004      	b.n	8008b94 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008b8a:	6839      	ldr	r1, [r7, #0]
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f000 f875 	bl	8008c7c <USBD_CtlError>
      break;
 8008b92:	bf00      	nop
  }
}
 8008b94:	bf00      	nop
 8008b96:	3708      	adds	r7, #8
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b082      	sub	sp, #8
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	885b      	ldrh	r3, [r3, #2]
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	d106      	bne.n	8008bbc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 f92b 	bl	8008e12 <USBD_CtlSendStatus>
  }
}
 8008bbc:	bf00      	nop
 8008bbe:	3708      	adds	r7, #8
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}

08008bc4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b082      	sub	sp, #8
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bd4:	b2db      	uxtb	r3, r3
 8008bd6:	3b01      	subs	r3, #1
 8008bd8:	2b02      	cmp	r3, #2
 8008bda:	d80b      	bhi.n	8008bf4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	885b      	ldrh	r3, [r3, #2]
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	d10c      	bne.n	8008bfe <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f000 f910 	bl	8008e12 <USBD_CtlSendStatus>
      }
      break;
 8008bf2:	e004      	b.n	8008bfe <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008bf4:	6839      	ldr	r1, [r7, #0]
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 f840 	bl	8008c7c <USBD_CtlError>
      break;
 8008bfc:	e000      	b.n	8008c00 <USBD_ClrFeature+0x3c>
      break;
 8008bfe:	bf00      	nop
  }
}
 8008c00:	bf00      	nop
 8008c02:	3708      	adds	r7, #8
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}

08008c08 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b084      	sub	sp, #16
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
 8008c10:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	781a      	ldrb	r2, [r3, #0]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	3301      	adds	r3, #1
 8008c22:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	781a      	ldrb	r2, [r3, #0]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	3301      	adds	r3, #1
 8008c30:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008c32:	68f8      	ldr	r0, [r7, #12]
 8008c34:	f7ff fabb 	bl	80081ae <SWAPBYTE>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	3301      	adds	r3, #1
 8008c44:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	3301      	adds	r3, #1
 8008c4a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008c4c:	68f8      	ldr	r0, [r7, #12]
 8008c4e:	f7ff faae 	bl	80081ae <SWAPBYTE>
 8008c52:	4603      	mov	r3, r0
 8008c54:	461a      	mov	r2, r3
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	3301      	adds	r3, #1
 8008c5e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	3301      	adds	r3, #1
 8008c64:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008c66:	68f8      	ldr	r0, [r7, #12]
 8008c68:	f7ff faa1 	bl	80081ae <SWAPBYTE>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	461a      	mov	r2, r3
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	80da      	strh	r2, [r3, #6]
}
 8008c74:	bf00      	nop
 8008c76:	3710      	adds	r7, #16
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b082      	sub	sp, #8
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c86:	2180      	movs	r1, #128	; 0x80
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 fce5 	bl	8009658 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008c8e:	2100      	movs	r1, #0
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f000 fce1 	bl	8009658 <USBD_LL_StallEP>
}
 8008c96:	bf00      	nop
 8008c98:	3708      	adds	r7, #8
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}

08008c9e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008c9e:	b580      	push	{r7, lr}
 8008ca0:	b086      	sub	sp, #24
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	60f8      	str	r0, [r7, #12]
 8008ca6:	60b9      	str	r1, [r7, #8]
 8008ca8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008caa:	2300      	movs	r3, #0
 8008cac:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d036      	beq.n	8008d22 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008cb8:	6938      	ldr	r0, [r7, #16]
 8008cba:	f000 f836 	bl	8008d2a <USBD_GetLen>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	005b      	lsls	r3, r3, #1
 8008cc6:	b29a      	uxth	r2, r3
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008ccc:	7dfb      	ldrb	r3, [r7, #23]
 8008cce:	68ba      	ldr	r2, [r7, #8]
 8008cd0:	4413      	add	r3, r2
 8008cd2:	687a      	ldr	r2, [r7, #4]
 8008cd4:	7812      	ldrb	r2, [r2, #0]
 8008cd6:	701a      	strb	r2, [r3, #0]
  idx++;
 8008cd8:	7dfb      	ldrb	r3, [r7, #23]
 8008cda:	3301      	adds	r3, #1
 8008cdc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008cde:	7dfb      	ldrb	r3, [r7, #23]
 8008ce0:	68ba      	ldr	r2, [r7, #8]
 8008ce2:	4413      	add	r3, r2
 8008ce4:	2203      	movs	r2, #3
 8008ce6:	701a      	strb	r2, [r3, #0]
  idx++;
 8008ce8:	7dfb      	ldrb	r3, [r7, #23]
 8008cea:	3301      	adds	r3, #1
 8008cec:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008cee:	e013      	b.n	8008d18 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008cf0:	7dfb      	ldrb	r3, [r7, #23]
 8008cf2:	68ba      	ldr	r2, [r7, #8]
 8008cf4:	4413      	add	r3, r2
 8008cf6:	693a      	ldr	r2, [r7, #16]
 8008cf8:	7812      	ldrb	r2, [r2, #0]
 8008cfa:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	3301      	adds	r3, #1
 8008d00:	613b      	str	r3, [r7, #16]
    idx++;
 8008d02:	7dfb      	ldrb	r3, [r7, #23]
 8008d04:	3301      	adds	r3, #1
 8008d06:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008d08:	7dfb      	ldrb	r3, [r7, #23]
 8008d0a:	68ba      	ldr	r2, [r7, #8]
 8008d0c:	4413      	add	r3, r2
 8008d0e:	2200      	movs	r2, #0
 8008d10:	701a      	strb	r2, [r3, #0]
    idx++;
 8008d12:	7dfb      	ldrb	r3, [r7, #23]
 8008d14:	3301      	adds	r3, #1
 8008d16:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d1e7      	bne.n	8008cf0 <USBD_GetString+0x52>
 8008d20:	e000      	b.n	8008d24 <USBD_GetString+0x86>
    return;
 8008d22:	bf00      	nop
  }
}
 8008d24:	3718      	adds	r7, #24
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}

08008d2a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008d2a:	b480      	push	{r7}
 8008d2c:	b085      	sub	sp, #20
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008d32:	2300      	movs	r3, #0
 8008d34:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008d3a:	e005      	b.n	8008d48 <USBD_GetLen+0x1e>
  {
    len++;
 8008d3c:	7bfb      	ldrb	r3, [r7, #15]
 8008d3e:	3301      	adds	r3, #1
 8008d40:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	3301      	adds	r3, #1
 8008d46:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	781b      	ldrb	r3, [r3, #0]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d1f5      	bne.n	8008d3c <USBD_GetLen+0x12>
  }

  return len;
 8008d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3714      	adds	r7, #20
 8008d56:	46bd      	mov	sp, r7
 8008d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5c:	4770      	bx	lr

08008d5e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	b084      	sub	sp, #16
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	60f8      	str	r0, [r7, #12]
 8008d66:	60b9      	str	r1, [r7, #8]
 8008d68:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2202      	movs	r2, #2
 8008d6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	687a      	ldr	r2, [r7, #4]
 8008d76:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	687a      	ldr	r2, [r7, #4]
 8008d7c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	68ba      	ldr	r2, [r7, #8]
 8008d82:	2100      	movs	r1, #0
 8008d84:	68f8      	ldr	r0, [r7, #12]
 8008d86:	f000 fcf0 	bl	800976a <USBD_LL_Transmit>

  return USBD_OK;
 8008d8a:	2300      	movs	r3, #0
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3710      	adds	r7, #16
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b084      	sub	sp, #16
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	60f8      	str	r0, [r7, #12]
 8008d9c:	60b9      	str	r1, [r7, #8]
 8008d9e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	68ba      	ldr	r2, [r7, #8]
 8008da4:	2100      	movs	r1, #0
 8008da6:	68f8      	ldr	r0, [r7, #12]
 8008da8:	f000 fcdf 	bl	800976a <USBD_LL_Transmit>

  return USBD_OK;
 8008dac:	2300      	movs	r3, #0
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3710      	adds	r7, #16
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}

08008db6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008db6:	b580      	push	{r7, lr}
 8008db8:	b084      	sub	sp, #16
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	60f8      	str	r0, [r7, #12]
 8008dbe:	60b9      	str	r1, [r7, #8]
 8008dc0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2203      	movs	r2, #3
 8008dc6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	687a      	ldr	r2, [r7, #4]
 8008dce:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	687a      	ldr	r2, [r7, #4]
 8008dd6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	68ba      	ldr	r2, [r7, #8]
 8008dde:	2100      	movs	r1, #0
 8008de0:	68f8      	ldr	r0, [r7, #12]
 8008de2:	f000 fce3 	bl	80097ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008de6:	2300      	movs	r3, #0
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3710      	adds	r7, #16
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	60b9      	str	r1, [r7, #8]
 8008dfa:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	68ba      	ldr	r2, [r7, #8]
 8008e00:	2100      	movs	r1, #0
 8008e02:	68f8      	ldr	r0, [r7, #12]
 8008e04:	f000 fcd2 	bl	80097ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e08:	2300      	movs	r3, #0
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3710      	adds	r7, #16
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}

08008e12 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008e12:	b580      	push	{r7, lr}
 8008e14:	b082      	sub	sp, #8
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2204      	movs	r2, #4
 8008e1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008e22:	2300      	movs	r3, #0
 8008e24:	2200      	movs	r2, #0
 8008e26:	2100      	movs	r1, #0
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f000 fc9e 	bl	800976a <USBD_LL_Transmit>

  return USBD_OK;
 8008e2e:	2300      	movs	r3, #0
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3708      	adds	r7, #8
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b082      	sub	sp, #8
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2205      	movs	r2, #5
 8008e44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e48:	2300      	movs	r3, #0
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	2100      	movs	r1, #0
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 fcac 	bl	80097ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e54:	2300      	movs	r3, #0
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3708      	adds	r7, #8
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
	...

08008e60 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008e64:	2200      	movs	r2, #0
 8008e66:	4912      	ldr	r1, [pc, #72]	; (8008eb0 <MX_USB_DEVICE_Init+0x50>)
 8008e68:	4812      	ldr	r0, [pc, #72]	; (8008eb4 <MX_USB_DEVICE_Init+0x54>)
 8008e6a:	f7fe fe8f 	bl	8007b8c <USBD_Init>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d001      	beq.n	8008e78 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008e74:	f7f8 fcda 	bl	800182c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008e78:	490f      	ldr	r1, [pc, #60]	; (8008eb8 <MX_USB_DEVICE_Init+0x58>)
 8008e7a:	480e      	ldr	r0, [pc, #56]	; (8008eb4 <MX_USB_DEVICE_Init+0x54>)
 8008e7c:	f7fe feb6 	bl	8007bec <USBD_RegisterClass>
 8008e80:	4603      	mov	r3, r0
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d001      	beq.n	8008e8a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008e86:	f7f8 fcd1 	bl	800182c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008e8a:	490c      	ldr	r1, [pc, #48]	; (8008ebc <MX_USB_DEVICE_Init+0x5c>)
 8008e8c:	4809      	ldr	r0, [pc, #36]	; (8008eb4 <MX_USB_DEVICE_Init+0x54>)
 8008e8e:	f7fe fdd7 	bl	8007a40 <USBD_CDC_RegisterInterface>
 8008e92:	4603      	mov	r3, r0
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d001      	beq.n	8008e9c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008e98:	f7f8 fcc8 	bl	800182c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008e9c:	4805      	ldr	r0, [pc, #20]	; (8008eb4 <MX_USB_DEVICE_Init+0x54>)
 8008e9e:	f7fe fecc 	bl	8007c3a <USBD_Start>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d001      	beq.n	8008eac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008ea8:	f7f8 fcc0 	bl	800182c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008eac:	bf00      	nop
 8008eae:	bd80      	pop	{r7, pc}
 8008eb0:	20000130 	.word	0x20000130
 8008eb4:	20000690 	.word	0x20000690
 8008eb8:	20000018 	.word	0x20000018
 8008ebc:	2000011c 	.word	0x2000011c

08008ec0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	4905      	ldr	r1, [pc, #20]	; (8008edc <CDC_Init_FS+0x1c>)
 8008ec8:	4805      	ldr	r0, [pc, #20]	; (8008ee0 <CDC_Init_FS+0x20>)
 8008eca:	f7fe fdce 	bl	8007a6a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008ece:	4905      	ldr	r1, [pc, #20]	; (8008ee4 <CDC_Init_FS+0x24>)
 8008ed0:	4803      	ldr	r0, [pc, #12]	; (8008ee0 <CDC_Init_FS+0x20>)
 8008ed2:	f7fe fde8 	bl	8007aa6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008ed6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	bd80      	pop	{r7, pc}
 8008edc:	20001160 	.word	0x20001160
 8008ee0:	20000690 	.word	0x20000690
 8008ee4:	20000960 	.word	0x20000960

08008ee8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008eec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr

08008ef8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b083      	sub	sp, #12
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	4603      	mov	r3, r0
 8008f00:	6039      	str	r1, [r7, #0]
 8008f02:	71fb      	strb	r3, [r7, #7]
 8008f04:	4613      	mov	r3, r2
 8008f06:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008f08:	79fb      	ldrb	r3, [r7, #7]
 8008f0a:	2b23      	cmp	r3, #35	; 0x23
 8008f0c:	d84a      	bhi.n	8008fa4 <CDC_Control_FS+0xac>
 8008f0e:	a201      	add	r2, pc, #4	; (adr r2, 8008f14 <CDC_Control_FS+0x1c>)
 8008f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f14:	08008fa5 	.word	0x08008fa5
 8008f18:	08008fa5 	.word	0x08008fa5
 8008f1c:	08008fa5 	.word	0x08008fa5
 8008f20:	08008fa5 	.word	0x08008fa5
 8008f24:	08008fa5 	.word	0x08008fa5
 8008f28:	08008fa5 	.word	0x08008fa5
 8008f2c:	08008fa5 	.word	0x08008fa5
 8008f30:	08008fa5 	.word	0x08008fa5
 8008f34:	08008fa5 	.word	0x08008fa5
 8008f38:	08008fa5 	.word	0x08008fa5
 8008f3c:	08008fa5 	.word	0x08008fa5
 8008f40:	08008fa5 	.word	0x08008fa5
 8008f44:	08008fa5 	.word	0x08008fa5
 8008f48:	08008fa5 	.word	0x08008fa5
 8008f4c:	08008fa5 	.word	0x08008fa5
 8008f50:	08008fa5 	.word	0x08008fa5
 8008f54:	08008fa5 	.word	0x08008fa5
 8008f58:	08008fa5 	.word	0x08008fa5
 8008f5c:	08008fa5 	.word	0x08008fa5
 8008f60:	08008fa5 	.word	0x08008fa5
 8008f64:	08008fa5 	.word	0x08008fa5
 8008f68:	08008fa5 	.word	0x08008fa5
 8008f6c:	08008fa5 	.word	0x08008fa5
 8008f70:	08008fa5 	.word	0x08008fa5
 8008f74:	08008fa5 	.word	0x08008fa5
 8008f78:	08008fa5 	.word	0x08008fa5
 8008f7c:	08008fa5 	.word	0x08008fa5
 8008f80:	08008fa5 	.word	0x08008fa5
 8008f84:	08008fa5 	.word	0x08008fa5
 8008f88:	08008fa5 	.word	0x08008fa5
 8008f8c:	08008fa5 	.word	0x08008fa5
 8008f90:	08008fa5 	.word	0x08008fa5
 8008f94:	08008fa5 	.word	0x08008fa5
 8008f98:	08008fa5 	.word	0x08008fa5
 8008f9c:	08008fa5 	.word	0x08008fa5
 8008fa0:	08008fa5 	.word	0x08008fa5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008fa4:	bf00      	nop
  }

  return (USBD_OK);
 8008fa6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	370c      	adds	r7, #12
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr

08008fb4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b082      	sub	sp, #8
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008fbe:	6879      	ldr	r1, [r7, #4]
 8008fc0:	4805      	ldr	r0, [pc, #20]	; (8008fd8 <CDC_Receive_FS+0x24>)
 8008fc2:	f7fe fd70 	bl	8007aa6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008fc6:	4804      	ldr	r0, [pc, #16]	; (8008fd8 <CDC_Receive_FS+0x24>)
 8008fc8:	f7fe fdb6 	bl	8007b38 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008fcc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3708      	adds	r7, #8
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	bf00      	nop
 8008fd8:	20000690 	.word	0x20000690

08008fdc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b084      	sub	sp, #16
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008fec:	4b0d      	ldr	r3, [pc, #52]	; (8009024 <CDC_Transmit_FS+0x48>)
 8008fee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ff2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d001      	beq.n	8009002 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008ffe:	2301      	movs	r3, #1
 8009000:	e00b      	b.n	800901a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009002:	887b      	ldrh	r3, [r7, #2]
 8009004:	461a      	mov	r2, r3
 8009006:	6879      	ldr	r1, [r7, #4]
 8009008:	4806      	ldr	r0, [pc, #24]	; (8009024 <CDC_Transmit_FS+0x48>)
 800900a:	f7fe fd2e 	bl	8007a6a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800900e:	4805      	ldr	r0, [pc, #20]	; (8009024 <CDC_Transmit_FS+0x48>)
 8009010:	f7fe fd62 	bl	8007ad8 <USBD_CDC_TransmitPacket>
 8009014:	4603      	mov	r3, r0
 8009016:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009018:	7bfb      	ldrb	r3, [r7, #15]
}
 800901a:	4618      	mov	r0, r3
 800901c:	3710      	adds	r7, #16
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop
 8009024:	20000690 	.word	0x20000690

08009028 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009028:	b480      	push	{r7}
 800902a:	b087      	sub	sp, #28
 800902c:	af00      	add	r7, sp, #0
 800902e:	60f8      	str	r0, [r7, #12]
 8009030:	60b9      	str	r1, [r7, #8]
 8009032:	4613      	mov	r3, r2
 8009034:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009036:	2300      	movs	r3, #0
 8009038:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800903a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800903e:	4618      	mov	r0, r3
 8009040:	371c      	adds	r7, #28
 8009042:	46bd      	mov	sp, r7
 8009044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009048:	4770      	bx	lr
	...

0800904c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800904c:	b480      	push	{r7}
 800904e:	b083      	sub	sp, #12
 8009050:	af00      	add	r7, sp, #0
 8009052:	4603      	mov	r3, r0
 8009054:	6039      	str	r1, [r7, #0]
 8009056:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	2212      	movs	r2, #18
 800905c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800905e:	4b03      	ldr	r3, [pc, #12]	; (800906c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009060:	4618      	mov	r0, r3
 8009062:	370c      	adds	r7, #12
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr
 800906c:	2000014c 	.word	0x2000014c

08009070 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009070:	b480      	push	{r7}
 8009072:	b083      	sub	sp, #12
 8009074:	af00      	add	r7, sp, #0
 8009076:	4603      	mov	r3, r0
 8009078:	6039      	str	r1, [r7, #0]
 800907a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	2204      	movs	r2, #4
 8009080:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009082:	4b03      	ldr	r3, [pc, #12]	; (8009090 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009084:	4618      	mov	r0, r3
 8009086:	370c      	adds	r7, #12
 8009088:	46bd      	mov	sp, r7
 800908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908e:	4770      	bx	lr
 8009090:	20000160 	.word	0x20000160

08009094 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b082      	sub	sp, #8
 8009098:	af00      	add	r7, sp, #0
 800909a:	4603      	mov	r3, r0
 800909c:	6039      	str	r1, [r7, #0]
 800909e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80090a0:	79fb      	ldrb	r3, [r7, #7]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d105      	bne.n	80090b2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80090a6:	683a      	ldr	r2, [r7, #0]
 80090a8:	4907      	ldr	r1, [pc, #28]	; (80090c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80090aa:	4808      	ldr	r0, [pc, #32]	; (80090cc <USBD_FS_ProductStrDescriptor+0x38>)
 80090ac:	f7ff fdf7 	bl	8008c9e <USBD_GetString>
 80090b0:	e004      	b.n	80090bc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80090b2:	683a      	ldr	r2, [r7, #0]
 80090b4:	4904      	ldr	r1, [pc, #16]	; (80090c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80090b6:	4805      	ldr	r0, [pc, #20]	; (80090cc <USBD_FS_ProductStrDescriptor+0x38>)
 80090b8:	f7ff fdf1 	bl	8008c9e <USBD_GetString>
  }
  return USBD_StrDesc;
 80090bc:	4b02      	ldr	r3, [pc, #8]	; (80090c8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3708      	adds	r7, #8
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}
 80090c6:	bf00      	nop
 80090c8:	20001960 	.word	0x20001960
 80090cc:	0800c668 	.word	0x0800c668

080090d0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b082      	sub	sp, #8
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	4603      	mov	r3, r0
 80090d8:	6039      	str	r1, [r7, #0]
 80090da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80090dc:	683a      	ldr	r2, [r7, #0]
 80090de:	4904      	ldr	r1, [pc, #16]	; (80090f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80090e0:	4804      	ldr	r0, [pc, #16]	; (80090f4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80090e2:	f7ff fddc 	bl	8008c9e <USBD_GetString>
  return USBD_StrDesc;
 80090e6:	4b02      	ldr	r3, [pc, #8]	; (80090f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3708      	adds	r7, #8
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}
 80090f0:	20001960 	.word	0x20001960
 80090f4:	0800c680 	.word	0x0800c680

080090f8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	4603      	mov	r3, r0
 8009100:	6039      	str	r1, [r7, #0]
 8009102:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	221a      	movs	r2, #26
 8009108:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800910a:	f000 f843 	bl	8009194 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800910e:	4b02      	ldr	r3, [pc, #8]	; (8009118 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009110:	4618      	mov	r0, r3
 8009112:	3708      	adds	r7, #8
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}
 8009118:	20000164 	.word	0x20000164

0800911c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b082      	sub	sp, #8
 8009120:	af00      	add	r7, sp, #0
 8009122:	4603      	mov	r3, r0
 8009124:	6039      	str	r1, [r7, #0]
 8009126:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009128:	79fb      	ldrb	r3, [r7, #7]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d105      	bne.n	800913a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800912e:	683a      	ldr	r2, [r7, #0]
 8009130:	4907      	ldr	r1, [pc, #28]	; (8009150 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009132:	4808      	ldr	r0, [pc, #32]	; (8009154 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009134:	f7ff fdb3 	bl	8008c9e <USBD_GetString>
 8009138:	e004      	b.n	8009144 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800913a:	683a      	ldr	r2, [r7, #0]
 800913c:	4904      	ldr	r1, [pc, #16]	; (8009150 <USBD_FS_ConfigStrDescriptor+0x34>)
 800913e:	4805      	ldr	r0, [pc, #20]	; (8009154 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009140:	f7ff fdad 	bl	8008c9e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009144:	4b02      	ldr	r3, [pc, #8]	; (8009150 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009146:	4618      	mov	r0, r3
 8009148:	3708      	adds	r7, #8
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
 800914e:	bf00      	nop
 8009150:	20001960 	.word	0x20001960
 8009154:	0800c694 	.word	0x0800c694

08009158 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b082      	sub	sp, #8
 800915c:	af00      	add	r7, sp, #0
 800915e:	4603      	mov	r3, r0
 8009160:	6039      	str	r1, [r7, #0]
 8009162:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009164:	79fb      	ldrb	r3, [r7, #7]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d105      	bne.n	8009176 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800916a:	683a      	ldr	r2, [r7, #0]
 800916c:	4907      	ldr	r1, [pc, #28]	; (800918c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800916e:	4808      	ldr	r0, [pc, #32]	; (8009190 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009170:	f7ff fd95 	bl	8008c9e <USBD_GetString>
 8009174:	e004      	b.n	8009180 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009176:	683a      	ldr	r2, [r7, #0]
 8009178:	4904      	ldr	r1, [pc, #16]	; (800918c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800917a:	4805      	ldr	r0, [pc, #20]	; (8009190 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800917c:	f7ff fd8f 	bl	8008c9e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009180:	4b02      	ldr	r3, [pc, #8]	; (800918c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009182:	4618      	mov	r0, r3
 8009184:	3708      	adds	r7, #8
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}
 800918a:	bf00      	nop
 800918c:	20001960 	.word	0x20001960
 8009190:	0800c6a0 	.word	0x0800c6a0

08009194 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b084      	sub	sp, #16
 8009198:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800919a:	4b0f      	ldr	r3, [pc, #60]	; (80091d8 <Get_SerialNum+0x44>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80091a0:	4b0e      	ldr	r3, [pc, #56]	; (80091dc <Get_SerialNum+0x48>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80091a6:	4b0e      	ldr	r3, [pc, #56]	; (80091e0 <Get_SerialNum+0x4c>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80091ac:	68fa      	ldr	r2, [r7, #12]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	4413      	add	r3, r2
 80091b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d009      	beq.n	80091ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80091ba:	2208      	movs	r2, #8
 80091bc:	4909      	ldr	r1, [pc, #36]	; (80091e4 <Get_SerialNum+0x50>)
 80091be:	68f8      	ldr	r0, [r7, #12]
 80091c0:	f000 f814 	bl	80091ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80091c4:	2204      	movs	r2, #4
 80091c6:	4908      	ldr	r1, [pc, #32]	; (80091e8 <Get_SerialNum+0x54>)
 80091c8:	68b8      	ldr	r0, [r7, #8]
 80091ca:	f000 f80f 	bl	80091ec <IntToUnicode>
  }
}
 80091ce:	bf00      	nop
 80091d0:	3710      	adds	r7, #16
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	1fff7a10 	.word	0x1fff7a10
 80091dc:	1fff7a14 	.word	0x1fff7a14
 80091e0:	1fff7a18 	.word	0x1fff7a18
 80091e4:	20000166 	.word	0x20000166
 80091e8:	20000176 	.word	0x20000176

080091ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b087      	sub	sp, #28
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	60f8      	str	r0, [r7, #12]
 80091f4:	60b9      	str	r1, [r7, #8]
 80091f6:	4613      	mov	r3, r2
 80091f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80091fa:	2300      	movs	r3, #0
 80091fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80091fe:	2300      	movs	r3, #0
 8009200:	75fb      	strb	r3, [r7, #23]
 8009202:	e027      	b.n	8009254 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	0f1b      	lsrs	r3, r3, #28
 8009208:	2b09      	cmp	r3, #9
 800920a:	d80b      	bhi.n	8009224 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	0f1b      	lsrs	r3, r3, #28
 8009210:	b2da      	uxtb	r2, r3
 8009212:	7dfb      	ldrb	r3, [r7, #23]
 8009214:	005b      	lsls	r3, r3, #1
 8009216:	4619      	mov	r1, r3
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	440b      	add	r3, r1
 800921c:	3230      	adds	r2, #48	; 0x30
 800921e:	b2d2      	uxtb	r2, r2
 8009220:	701a      	strb	r2, [r3, #0]
 8009222:	e00a      	b.n	800923a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	0f1b      	lsrs	r3, r3, #28
 8009228:	b2da      	uxtb	r2, r3
 800922a:	7dfb      	ldrb	r3, [r7, #23]
 800922c:	005b      	lsls	r3, r3, #1
 800922e:	4619      	mov	r1, r3
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	440b      	add	r3, r1
 8009234:	3237      	adds	r2, #55	; 0x37
 8009236:	b2d2      	uxtb	r2, r2
 8009238:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	011b      	lsls	r3, r3, #4
 800923e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009240:	7dfb      	ldrb	r3, [r7, #23]
 8009242:	005b      	lsls	r3, r3, #1
 8009244:	3301      	adds	r3, #1
 8009246:	68ba      	ldr	r2, [r7, #8]
 8009248:	4413      	add	r3, r2
 800924a:	2200      	movs	r2, #0
 800924c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800924e:	7dfb      	ldrb	r3, [r7, #23]
 8009250:	3301      	adds	r3, #1
 8009252:	75fb      	strb	r3, [r7, #23]
 8009254:	7dfa      	ldrb	r2, [r7, #23]
 8009256:	79fb      	ldrb	r3, [r7, #7]
 8009258:	429a      	cmp	r2, r3
 800925a:	d3d3      	bcc.n	8009204 <IntToUnicode+0x18>
  }
}
 800925c:	bf00      	nop
 800925e:	bf00      	nop
 8009260:	371c      	adds	r7, #28
 8009262:	46bd      	mov	sp, r7
 8009264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009268:	4770      	bx	lr
	...

0800926c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b08a      	sub	sp, #40	; 0x28
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009274:	f107 0314 	add.w	r3, r7, #20
 8009278:	2200      	movs	r2, #0
 800927a:	601a      	str	r2, [r3, #0]
 800927c:	605a      	str	r2, [r3, #4]
 800927e:	609a      	str	r2, [r3, #8]
 8009280:	60da      	str	r2, [r3, #12]
 8009282:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800928c:	d147      	bne.n	800931e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800928e:	2300      	movs	r3, #0
 8009290:	613b      	str	r3, [r7, #16]
 8009292:	4b25      	ldr	r3, [pc, #148]	; (8009328 <HAL_PCD_MspInit+0xbc>)
 8009294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009296:	4a24      	ldr	r2, [pc, #144]	; (8009328 <HAL_PCD_MspInit+0xbc>)
 8009298:	f043 0301 	orr.w	r3, r3, #1
 800929c:	6313      	str	r3, [r2, #48]	; 0x30
 800929e:	4b22      	ldr	r3, [pc, #136]	; (8009328 <HAL_PCD_MspInit+0xbc>)
 80092a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092a2:	f003 0301 	and.w	r3, r3, #1
 80092a6:	613b      	str	r3, [r7, #16]
 80092a8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80092aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80092b0:	2300      	movs	r3, #0
 80092b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092b4:	2300      	movs	r3, #0
 80092b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80092b8:	f107 0314 	add.w	r3, r7, #20
 80092bc:	4619      	mov	r1, r3
 80092be:	481b      	ldr	r0, [pc, #108]	; (800932c <HAL_PCD_MspInit+0xc0>)
 80092c0:	f7f8 ff5c 	bl	800217c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80092c4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80092c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092ca:	2302      	movs	r3, #2
 80092cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092ce:	2300      	movs	r3, #0
 80092d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80092d2:	2303      	movs	r3, #3
 80092d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80092d6:	230a      	movs	r3, #10
 80092d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80092da:	f107 0314 	add.w	r3, r7, #20
 80092de:	4619      	mov	r1, r3
 80092e0:	4812      	ldr	r0, [pc, #72]	; (800932c <HAL_PCD_MspInit+0xc0>)
 80092e2:	f7f8 ff4b 	bl	800217c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80092e6:	4b10      	ldr	r3, [pc, #64]	; (8009328 <HAL_PCD_MspInit+0xbc>)
 80092e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092ea:	4a0f      	ldr	r2, [pc, #60]	; (8009328 <HAL_PCD_MspInit+0xbc>)
 80092ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092f0:	6353      	str	r3, [r2, #52]	; 0x34
 80092f2:	2300      	movs	r3, #0
 80092f4:	60fb      	str	r3, [r7, #12]
 80092f6:	4b0c      	ldr	r3, [pc, #48]	; (8009328 <HAL_PCD_MspInit+0xbc>)
 80092f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092fa:	4a0b      	ldr	r2, [pc, #44]	; (8009328 <HAL_PCD_MspInit+0xbc>)
 80092fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009300:	6453      	str	r3, [r2, #68]	; 0x44
 8009302:	4b09      	ldr	r3, [pc, #36]	; (8009328 <HAL_PCD_MspInit+0xbc>)
 8009304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800930a:	60fb      	str	r3, [r7, #12]
 800930c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800930e:	2200      	movs	r2, #0
 8009310:	2100      	movs	r1, #0
 8009312:	2043      	movs	r0, #67	; 0x43
 8009314:	f7f8 fe69 	bl	8001fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009318:	2043      	movs	r0, #67	; 0x43
 800931a:	f7f8 fe82 	bl	8002022 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800931e:	bf00      	nop
 8009320:	3728      	adds	r7, #40	; 0x28
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}
 8009326:	bf00      	nop
 8009328:	40023800 	.word	0x40023800
 800932c:	40020000 	.word	0x40020000

08009330 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b082      	sub	sp, #8
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009344:	4619      	mov	r1, r3
 8009346:	4610      	mov	r0, r2
 8009348:	f7fe fcc2 	bl	8007cd0 <USBD_LL_SetupStage>
}
 800934c:	bf00      	nop
 800934e:	3708      	adds	r7, #8
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b082      	sub	sp, #8
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
 800935c:	460b      	mov	r3, r1
 800935e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009366:	78fa      	ldrb	r2, [r7, #3]
 8009368:	6879      	ldr	r1, [r7, #4]
 800936a:	4613      	mov	r3, r2
 800936c:	00db      	lsls	r3, r3, #3
 800936e:	1a9b      	subs	r3, r3, r2
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	440b      	add	r3, r1
 8009374:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009378:	681a      	ldr	r2, [r3, #0]
 800937a:	78fb      	ldrb	r3, [r7, #3]
 800937c:	4619      	mov	r1, r3
 800937e:	f7fe fcfc 	bl	8007d7a <USBD_LL_DataOutStage>
}
 8009382:	bf00      	nop
 8009384:	3708      	adds	r7, #8
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}

0800938a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800938a:	b580      	push	{r7, lr}
 800938c:	b082      	sub	sp, #8
 800938e:	af00      	add	r7, sp, #0
 8009390:	6078      	str	r0, [r7, #4]
 8009392:	460b      	mov	r3, r1
 8009394:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800939c:	78fa      	ldrb	r2, [r7, #3]
 800939e:	6879      	ldr	r1, [r7, #4]
 80093a0:	4613      	mov	r3, r2
 80093a2:	00db      	lsls	r3, r3, #3
 80093a4:	1a9b      	subs	r3, r3, r2
 80093a6:	009b      	lsls	r3, r3, #2
 80093a8:	440b      	add	r3, r1
 80093aa:	3348      	adds	r3, #72	; 0x48
 80093ac:	681a      	ldr	r2, [r3, #0]
 80093ae:	78fb      	ldrb	r3, [r7, #3]
 80093b0:	4619      	mov	r1, r3
 80093b2:	f7fe fd45 	bl	8007e40 <USBD_LL_DataInStage>
}
 80093b6:	bf00      	nop
 80093b8:	3708      	adds	r7, #8
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}

080093be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093be:	b580      	push	{r7, lr}
 80093c0:	b082      	sub	sp, #8
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80093cc:	4618      	mov	r0, r3
 80093ce:	f7fe fe59 	bl	8008084 <USBD_LL_SOF>
}
 80093d2:	bf00      	nop
 80093d4:	3708      	adds	r7, #8
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}

080093da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093da:	b580      	push	{r7, lr}
 80093dc:	b084      	sub	sp, #16
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80093e2:	2301      	movs	r3, #1
 80093e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	68db      	ldr	r3, [r3, #12]
 80093ea:	2b02      	cmp	r3, #2
 80093ec:	d001      	beq.n	80093f2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80093ee:	f7f8 fa1d 	bl	800182c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80093f8:	7bfa      	ldrb	r2, [r7, #15]
 80093fa:	4611      	mov	r1, r2
 80093fc:	4618      	mov	r0, r3
 80093fe:	f7fe fe03 	bl	8008008 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009408:	4618      	mov	r0, r3
 800940a:	f7fe fdaf 	bl	8007f6c <USBD_LL_Reset>
}
 800940e:	bf00      	nop
 8009410:	3710      	adds	r7, #16
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
	...

08009418 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b082      	sub	sp, #8
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009426:	4618      	mov	r0, r3
 8009428:	f7fe fdfe 	bl	8008028 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	6812      	ldr	r2, [r2, #0]
 800943a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800943e:	f043 0301 	orr.w	r3, r3, #1
 8009442:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6a1b      	ldr	r3, [r3, #32]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d005      	beq.n	8009458 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800944c:	4b04      	ldr	r3, [pc, #16]	; (8009460 <HAL_PCD_SuspendCallback+0x48>)
 800944e:	691b      	ldr	r3, [r3, #16]
 8009450:	4a03      	ldr	r2, [pc, #12]	; (8009460 <HAL_PCD_SuspendCallback+0x48>)
 8009452:	f043 0306 	orr.w	r3, r3, #6
 8009456:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009458:	bf00      	nop
 800945a:	3708      	adds	r7, #8
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}
 8009460:	e000ed00 	.word	0xe000ed00

08009464 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b082      	sub	sp, #8
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009472:	4618      	mov	r0, r3
 8009474:	f7fe fdee 	bl	8008054 <USBD_LL_Resume>
}
 8009478:	bf00      	nop
 800947a:	3708      	adds	r7, #8
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}

08009480 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
 8009488:	460b      	mov	r3, r1
 800948a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009492:	78fa      	ldrb	r2, [r7, #3]
 8009494:	4611      	mov	r1, r2
 8009496:	4618      	mov	r0, r3
 8009498:	f7fe fe3c 	bl	8008114 <USBD_LL_IsoOUTIncomplete>
}
 800949c:	bf00      	nop
 800949e:	3708      	adds	r7, #8
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
 80094ac:	460b      	mov	r3, r1
 80094ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80094b6:	78fa      	ldrb	r2, [r7, #3]
 80094b8:	4611      	mov	r1, r2
 80094ba:	4618      	mov	r0, r3
 80094bc:	f7fe fe04 	bl	80080c8 <USBD_LL_IsoINIncomplete>
}
 80094c0:	bf00      	nop
 80094c2:	3708      	adds	r7, #8
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}

080094c8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b082      	sub	sp, #8
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80094d6:	4618      	mov	r0, r3
 80094d8:	f7fe fe42 	bl	8008160 <USBD_LL_DevConnected>
}
 80094dc:	bf00      	nop
 80094de:	3708      	adds	r7, #8
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}

080094e4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b082      	sub	sp, #8
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80094f2:	4618      	mov	r0, r3
 80094f4:	f7fe fe3f 	bl	8008176 <USBD_LL_DevDisconnected>
}
 80094f8:	bf00      	nop
 80094fa:	3708      	adds	r7, #8
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b082      	sub	sp, #8
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	781b      	ldrb	r3, [r3, #0]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d13c      	bne.n	800958a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009510:	4a20      	ldr	r2, [pc, #128]	; (8009594 <USBD_LL_Init+0x94>)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	4a1e      	ldr	r2, [pc, #120]	; (8009594 <USBD_LL_Init+0x94>)
 800951c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009520:	4b1c      	ldr	r3, [pc, #112]	; (8009594 <USBD_LL_Init+0x94>)
 8009522:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009526:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009528:	4b1a      	ldr	r3, [pc, #104]	; (8009594 <USBD_LL_Init+0x94>)
 800952a:	2204      	movs	r2, #4
 800952c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800952e:	4b19      	ldr	r3, [pc, #100]	; (8009594 <USBD_LL_Init+0x94>)
 8009530:	2202      	movs	r2, #2
 8009532:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009534:	4b17      	ldr	r3, [pc, #92]	; (8009594 <USBD_LL_Init+0x94>)
 8009536:	2200      	movs	r2, #0
 8009538:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800953a:	4b16      	ldr	r3, [pc, #88]	; (8009594 <USBD_LL_Init+0x94>)
 800953c:	2202      	movs	r2, #2
 800953e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009540:	4b14      	ldr	r3, [pc, #80]	; (8009594 <USBD_LL_Init+0x94>)
 8009542:	2200      	movs	r2, #0
 8009544:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009546:	4b13      	ldr	r3, [pc, #76]	; (8009594 <USBD_LL_Init+0x94>)
 8009548:	2200      	movs	r2, #0
 800954a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800954c:	4b11      	ldr	r3, [pc, #68]	; (8009594 <USBD_LL_Init+0x94>)
 800954e:	2200      	movs	r2, #0
 8009550:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8009552:	4b10      	ldr	r3, [pc, #64]	; (8009594 <USBD_LL_Init+0x94>)
 8009554:	2201      	movs	r2, #1
 8009556:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009558:	4b0e      	ldr	r3, [pc, #56]	; (8009594 <USBD_LL_Init+0x94>)
 800955a:	2200      	movs	r2, #0
 800955c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800955e:	480d      	ldr	r0, [pc, #52]	; (8009594 <USBD_LL_Init+0x94>)
 8009560:	f7f9 ff8d 	bl	800347e <HAL_PCD_Init>
 8009564:	4603      	mov	r3, r0
 8009566:	2b00      	cmp	r3, #0
 8009568:	d001      	beq.n	800956e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800956a:	f7f8 f95f 	bl	800182c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800956e:	2180      	movs	r1, #128	; 0x80
 8009570:	4808      	ldr	r0, [pc, #32]	; (8009594 <USBD_LL_Init+0x94>)
 8009572:	f7fb f8ea 	bl	800474a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009576:	2240      	movs	r2, #64	; 0x40
 8009578:	2100      	movs	r1, #0
 800957a:	4806      	ldr	r0, [pc, #24]	; (8009594 <USBD_LL_Init+0x94>)
 800957c:	f7fb f89e 	bl	80046bc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009580:	2280      	movs	r2, #128	; 0x80
 8009582:	2101      	movs	r1, #1
 8009584:	4803      	ldr	r0, [pc, #12]	; (8009594 <USBD_LL_Init+0x94>)
 8009586:	f7fb f899 	bl	80046bc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800958a:	2300      	movs	r3, #0
}
 800958c:	4618      	mov	r0, r3
 800958e:	3708      	adds	r7, #8
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}
 8009594:	20001b60 	.word	0x20001b60

08009598 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b084      	sub	sp, #16
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095a0:	2300      	movs	r3, #0
 80095a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095a4:	2300      	movs	r3, #0
 80095a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80095ae:	4618      	mov	r0, r3
 80095b0:	f7fa f882 	bl	80036b8 <HAL_PCD_Start>
 80095b4:	4603      	mov	r3, r0
 80095b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095b8:	7bfb      	ldrb	r3, [r7, #15]
 80095ba:	4618      	mov	r0, r3
 80095bc:	f000 f942 	bl	8009844 <USBD_Get_USB_Status>
 80095c0:	4603      	mov	r3, r0
 80095c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3710      	adds	r7, #16
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}

080095ce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80095ce:	b580      	push	{r7, lr}
 80095d0:	b084      	sub	sp, #16
 80095d2:	af00      	add	r7, sp, #0
 80095d4:	6078      	str	r0, [r7, #4]
 80095d6:	4608      	mov	r0, r1
 80095d8:	4611      	mov	r1, r2
 80095da:	461a      	mov	r2, r3
 80095dc:	4603      	mov	r3, r0
 80095de:	70fb      	strb	r3, [r7, #3]
 80095e0:	460b      	mov	r3, r1
 80095e2:	70bb      	strb	r3, [r7, #2]
 80095e4:	4613      	mov	r3, r2
 80095e6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095e8:	2300      	movs	r3, #0
 80095ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095ec:	2300      	movs	r3, #0
 80095ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80095f6:	78bb      	ldrb	r3, [r7, #2]
 80095f8:	883a      	ldrh	r2, [r7, #0]
 80095fa:	78f9      	ldrb	r1, [r7, #3]
 80095fc:	f7fa fc66 	bl	8003ecc <HAL_PCD_EP_Open>
 8009600:	4603      	mov	r3, r0
 8009602:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009604:	7bfb      	ldrb	r3, [r7, #15]
 8009606:	4618      	mov	r0, r3
 8009608:	f000 f91c 	bl	8009844 <USBD_Get_USB_Status>
 800960c:	4603      	mov	r3, r0
 800960e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009610:	7bbb      	ldrb	r3, [r7, #14]
}
 8009612:	4618      	mov	r0, r3
 8009614:	3710      	adds	r7, #16
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}

0800961a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800961a:	b580      	push	{r7, lr}
 800961c:	b084      	sub	sp, #16
 800961e:	af00      	add	r7, sp, #0
 8009620:	6078      	str	r0, [r7, #4]
 8009622:	460b      	mov	r3, r1
 8009624:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009626:	2300      	movs	r3, #0
 8009628:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800962a:	2300      	movs	r3, #0
 800962c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009634:	78fa      	ldrb	r2, [r7, #3]
 8009636:	4611      	mov	r1, r2
 8009638:	4618      	mov	r0, r3
 800963a:	f7fa fcaf 	bl	8003f9c <HAL_PCD_EP_Close>
 800963e:	4603      	mov	r3, r0
 8009640:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009642:	7bfb      	ldrb	r3, [r7, #15]
 8009644:	4618      	mov	r0, r3
 8009646:	f000 f8fd 	bl	8009844 <USBD_Get_USB_Status>
 800964a:	4603      	mov	r3, r0
 800964c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800964e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009650:	4618      	mov	r0, r3
 8009652:	3710      	adds	r7, #16
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	460b      	mov	r3, r1
 8009662:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009664:	2300      	movs	r3, #0
 8009666:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009668:	2300      	movs	r3, #0
 800966a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009672:	78fa      	ldrb	r2, [r7, #3]
 8009674:	4611      	mov	r1, r2
 8009676:	4618      	mov	r0, r3
 8009678:	f7fa fd87 	bl	800418a <HAL_PCD_EP_SetStall>
 800967c:	4603      	mov	r3, r0
 800967e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009680:	7bfb      	ldrb	r3, [r7, #15]
 8009682:	4618      	mov	r0, r3
 8009684:	f000 f8de 	bl	8009844 <USBD_Get_USB_Status>
 8009688:	4603      	mov	r3, r0
 800968a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800968c:	7bbb      	ldrb	r3, [r7, #14]
}
 800968e:	4618      	mov	r0, r3
 8009690:	3710      	adds	r7, #16
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}

08009696 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009696:	b580      	push	{r7, lr}
 8009698:	b084      	sub	sp, #16
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]
 800969e:	460b      	mov	r3, r1
 80096a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096a2:	2300      	movs	r3, #0
 80096a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096a6:	2300      	movs	r3, #0
 80096a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80096b0:	78fa      	ldrb	r2, [r7, #3]
 80096b2:	4611      	mov	r1, r2
 80096b4:	4618      	mov	r0, r3
 80096b6:	f7fa fdcc 	bl	8004252 <HAL_PCD_EP_ClrStall>
 80096ba:	4603      	mov	r3, r0
 80096bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096be:	7bfb      	ldrb	r3, [r7, #15]
 80096c0:	4618      	mov	r0, r3
 80096c2:	f000 f8bf 	bl	8009844 <USBD_Get_USB_Status>
 80096c6:	4603      	mov	r3, r0
 80096c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3710      	adds	r7, #16
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b085      	sub	sp, #20
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	460b      	mov	r3, r1
 80096de:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80096e6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80096e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	da0b      	bge.n	8009708 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80096f0:	78fb      	ldrb	r3, [r7, #3]
 80096f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80096f6:	68f9      	ldr	r1, [r7, #12]
 80096f8:	4613      	mov	r3, r2
 80096fa:	00db      	lsls	r3, r3, #3
 80096fc:	1a9b      	subs	r3, r3, r2
 80096fe:	009b      	lsls	r3, r3, #2
 8009700:	440b      	add	r3, r1
 8009702:	333e      	adds	r3, #62	; 0x3e
 8009704:	781b      	ldrb	r3, [r3, #0]
 8009706:	e00b      	b.n	8009720 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009708:	78fb      	ldrb	r3, [r7, #3]
 800970a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800970e:	68f9      	ldr	r1, [r7, #12]
 8009710:	4613      	mov	r3, r2
 8009712:	00db      	lsls	r3, r3, #3
 8009714:	1a9b      	subs	r3, r3, r2
 8009716:	009b      	lsls	r3, r3, #2
 8009718:	440b      	add	r3, r1
 800971a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800971e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009720:	4618      	mov	r0, r3
 8009722:	3714      	adds	r7, #20
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr

0800972c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b084      	sub	sp, #16
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	460b      	mov	r3, r1
 8009736:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009738:	2300      	movs	r3, #0
 800973a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800973c:	2300      	movs	r3, #0
 800973e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009746:	78fa      	ldrb	r2, [r7, #3]
 8009748:	4611      	mov	r1, r2
 800974a:	4618      	mov	r0, r3
 800974c:	f7fa fb99 	bl	8003e82 <HAL_PCD_SetAddress>
 8009750:	4603      	mov	r3, r0
 8009752:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009754:	7bfb      	ldrb	r3, [r7, #15]
 8009756:	4618      	mov	r0, r3
 8009758:	f000 f874 	bl	8009844 <USBD_Get_USB_Status>
 800975c:	4603      	mov	r3, r0
 800975e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009760:	7bbb      	ldrb	r3, [r7, #14]
}
 8009762:	4618      	mov	r0, r3
 8009764:	3710      	adds	r7, #16
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}

0800976a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800976a:	b580      	push	{r7, lr}
 800976c:	b086      	sub	sp, #24
 800976e:	af00      	add	r7, sp, #0
 8009770:	60f8      	str	r0, [r7, #12]
 8009772:	607a      	str	r2, [r7, #4]
 8009774:	603b      	str	r3, [r7, #0]
 8009776:	460b      	mov	r3, r1
 8009778:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800977a:	2300      	movs	r3, #0
 800977c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800977e:	2300      	movs	r3, #0
 8009780:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009788:	7af9      	ldrb	r1, [r7, #11]
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	687a      	ldr	r2, [r7, #4]
 800978e:	f7fa fcb2 	bl	80040f6 <HAL_PCD_EP_Transmit>
 8009792:	4603      	mov	r3, r0
 8009794:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009796:	7dfb      	ldrb	r3, [r7, #23]
 8009798:	4618      	mov	r0, r3
 800979a:	f000 f853 	bl	8009844 <USBD_Get_USB_Status>
 800979e:	4603      	mov	r3, r0
 80097a0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80097a2:	7dbb      	ldrb	r3, [r7, #22]
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3718      	adds	r7, #24
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}

080097ac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b086      	sub	sp, #24
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	60f8      	str	r0, [r7, #12]
 80097b4:	607a      	str	r2, [r7, #4]
 80097b6:	603b      	str	r3, [r7, #0]
 80097b8:	460b      	mov	r3, r1
 80097ba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097bc:	2300      	movs	r3, #0
 80097be:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097c0:	2300      	movs	r3, #0
 80097c2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80097ca:	7af9      	ldrb	r1, [r7, #11]
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	687a      	ldr	r2, [r7, #4]
 80097d0:	f7fa fc2e 	bl	8004030 <HAL_PCD_EP_Receive>
 80097d4:	4603      	mov	r3, r0
 80097d6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097d8:	7dfb      	ldrb	r3, [r7, #23]
 80097da:	4618      	mov	r0, r3
 80097dc:	f000 f832 	bl	8009844 <USBD_Get_USB_Status>
 80097e0:	4603      	mov	r3, r0
 80097e2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80097e4:	7dbb      	ldrb	r3, [r7, #22]
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3718      	adds	r7, #24
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}

080097ee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097ee:	b580      	push	{r7, lr}
 80097f0:	b082      	sub	sp, #8
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
 80097f6:	460b      	mov	r3, r1
 80097f8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009800:	78fa      	ldrb	r2, [r7, #3]
 8009802:	4611      	mov	r1, r2
 8009804:	4618      	mov	r0, r3
 8009806:	f7fa fc5e 	bl	80040c6 <HAL_PCD_EP_GetRxCount>
 800980a:	4603      	mov	r3, r0
}
 800980c:	4618      	mov	r0, r3
 800980e:	3708      	adds	r7, #8
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}

08009814 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009814:	b480      	push	{r7}
 8009816:	b083      	sub	sp, #12
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800981c:	4b03      	ldr	r3, [pc, #12]	; (800982c <USBD_static_malloc+0x18>)
}
 800981e:	4618      	mov	r0, r3
 8009820:	370c      	adds	r7, #12
 8009822:	46bd      	mov	sp, r7
 8009824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009828:	4770      	bx	lr
 800982a:	bf00      	nop
 800982c:	20000374 	.word	0x20000374

08009830 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009830:	b480      	push	{r7}
 8009832:	b083      	sub	sp, #12
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]

}
 8009838:	bf00      	nop
 800983a:	370c      	adds	r7, #12
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr

08009844 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009844:	b480      	push	{r7}
 8009846:	b085      	sub	sp, #20
 8009848:	af00      	add	r7, sp, #0
 800984a:	4603      	mov	r3, r0
 800984c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800984e:	2300      	movs	r3, #0
 8009850:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009852:	79fb      	ldrb	r3, [r7, #7]
 8009854:	2b03      	cmp	r3, #3
 8009856:	d817      	bhi.n	8009888 <USBD_Get_USB_Status+0x44>
 8009858:	a201      	add	r2, pc, #4	; (adr r2, 8009860 <USBD_Get_USB_Status+0x1c>)
 800985a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800985e:	bf00      	nop
 8009860:	08009871 	.word	0x08009871
 8009864:	08009877 	.word	0x08009877
 8009868:	0800987d 	.word	0x0800987d
 800986c:	08009883 	.word	0x08009883
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009870:	2300      	movs	r3, #0
 8009872:	73fb      	strb	r3, [r7, #15]
    break;
 8009874:	e00b      	b.n	800988e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009876:	2303      	movs	r3, #3
 8009878:	73fb      	strb	r3, [r7, #15]
    break;
 800987a:	e008      	b.n	800988e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800987c:	2301      	movs	r3, #1
 800987e:	73fb      	strb	r3, [r7, #15]
    break;
 8009880:	e005      	b.n	800988e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009882:	2303      	movs	r3, #3
 8009884:	73fb      	strb	r3, [r7, #15]
    break;
 8009886:	e002      	b.n	800988e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009888:	2303      	movs	r3, #3
 800988a:	73fb      	strb	r3, [r7, #15]
    break;
 800988c:	bf00      	nop
  }
  return usb_status;
 800988e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009890:	4618      	mov	r0, r3
 8009892:	3714      	adds	r7, #20
 8009894:	46bd      	mov	sp, r7
 8009896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989a:	4770      	bx	lr

0800989c <__errno>:
 800989c:	4b01      	ldr	r3, [pc, #4]	; (80098a4 <__errno+0x8>)
 800989e:	6818      	ldr	r0, [r3, #0]
 80098a0:	4770      	bx	lr
 80098a2:	bf00      	nop
 80098a4:	20000180 	.word	0x20000180

080098a8 <__libc_init_array>:
 80098a8:	b570      	push	{r4, r5, r6, lr}
 80098aa:	4d0d      	ldr	r5, [pc, #52]	; (80098e0 <__libc_init_array+0x38>)
 80098ac:	4c0d      	ldr	r4, [pc, #52]	; (80098e4 <__libc_init_array+0x3c>)
 80098ae:	1b64      	subs	r4, r4, r5
 80098b0:	10a4      	asrs	r4, r4, #2
 80098b2:	2600      	movs	r6, #0
 80098b4:	42a6      	cmp	r6, r4
 80098b6:	d109      	bne.n	80098cc <__libc_init_array+0x24>
 80098b8:	4d0b      	ldr	r5, [pc, #44]	; (80098e8 <__libc_init_array+0x40>)
 80098ba:	4c0c      	ldr	r4, [pc, #48]	; (80098ec <__libc_init_array+0x44>)
 80098bc:	f002 feb4 	bl	800c628 <_init>
 80098c0:	1b64      	subs	r4, r4, r5
 80098c2:	10a4      	asrs	r4, r4, #2
 80098c4:	2600      	movs	r6, #0
 80098c6:	42a6      	cmp	r6, r4
 80098c8:	d105      	bne.n	80098d6 <__libc_init_array+0x2e>
 80098ca:	bd70      	pop	{r4, r5, r6, pc}
 80098cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80098d0:	4798      	blx	r3
 80098d2:	3601      	adds	r6, #1
 80098d4:	e7ee      	b.n	80098b4 <__libc_init_array+0xc>
 80098d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80098da:	4798      	blx	r3
 80098dc:	3601      	adds	r6, #1
 80098de:	e7f2      	b.n	80098c6 <__libc_init_array+0x1e>
 80098e0:	0800cab4 	.word	0x0800cab4
 80098e4:	0800cab4 	.word	0x0800cab4
 80098e8:	0800cab4 	.word	0x0800cab4
 80098ec:	0800cab8 	.word	0x0800cab8

080098f0 <memcpy>:
 80098f0:	440a      	add	r2, r1
 80098f2:	4291      	cmp	r1, r2
 80098f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80098f8:	d100      	bne.n	80098fc <memcpy+0xc>
 80098fa:	4770      	bx	lr
 80098fc:	b510      	push	{r4, lr}
 80098fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009902:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009906:	4291      	cmp	r1, r2
 8009908:	d1f9      	bne.n	80098fe <memcpy+0xe>
 800990a:	bd10      	pop	{r4, pc}

0800990c <memset>:
 800990c:	4402      	add	r2, r0
 800990e:	4603      	mov	r3, r0
 8009910:	4293      	cmp	r3, r2
 8009912:	d100      	bne.n	8009916 <memset+0xa>
 8009914:	4770      	bx	lr
 8009916:	f803 1b01 	strb.w	r1, [r3], #1
 800991a:	e7f9      	b.n	8009910 <memset+0x4>

0800991c <__cvt>:
 800991c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009920:	ec55 4b10 	vmov	r4, r5, d0
 8009924:	2d00      	cmp	r5, #0
 8009926:	460e      	mov	r6, r1
 8009928:	4619      	mov	r1, r3
 800992a:	462b      	mov	r3, r5
 800992c:	bfbb      	ittet	lt
 800992e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009932:	461d      	movlt	r5, r3
 8009934:	2300      	movge	r3, #0
 8009936:	232d      	movlt	r3, #45	; 0x2d
 8009938:	700b      	strb	r3, [r1, #0]
 800993a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800993c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009940:	4691      	mov	r9, r2
 8009942:	f023 0820 	bic.w	r8, r3, #32
 8009946:	bfbc      	itt	lt
 8009948:	4622      	movlt	r2, r4
 800994a:	4614      	movlt	r4, r2
 800994c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009950:	d005      	beq.n	800995e <__cvt+0x42>
 8009952:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009956:	d100      	bne.n	800995a <__cvt+0x3e>
 8009958:	3601      	adds	r6, #1
 800995a:	2102      	movs	r1, #2
 800995c:	e000      	b.n	8009960 <__cvt+0x44>
 800995e:	2103      	movs	r1, #3
 8009960:	ab03      	add	r3, sp, #12
 8009962:	9301      	str	r3, [sp, #4]
 8009964:	ab02      	add	r3, sp, #8
 8009966:	9300      	str	r3, [sp, #0]
 8009968:	ec45 4b10 	vmov	d0, r4, r5
 800996c:	4653      	mov	r3, sl
 800996e:	4632      	mov	r2, r6
 8009970:	f000 fcea 	bl	800a348 <_dtoa_r>
 8009974:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009978:	4607      	mov	r7, r0
 800997a:	d102      	bne.n	8009982 <__cvt+0x66>
 800997c:	f019 0f01 	tst.w	r9, #1
 8009980:	d022      	beq.n	80099c8 <__cvt+0xac>
 8009982:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009986:	eb07 0906 	add.w	r9, r7, r6
 800998a:	d110      	bne.n	80099ae <__cvt+0x92>
 800998c:	783b      	ldrb	r3, [r7, #0]
 800998e:	2b30      	cmp	r3, #48	; 0x30
 8009990:	d10a      	bne.n	80099a8 <__cvt+0x8c>
 8009992:	2200      	movs	r2, #0
 8009994:	2300      	movs	r3, #0
 8009996:	4620      	mov	r0, r4
 8009998:	4629      	mov	r1, r5
 800999a:	f7f7 f89d 	bl	8000ad8 <__aeabi_dcmpeq>
 800999e:	b918      	cbnz	r0, 80099a8 <__cvt+0x8c>
 80099a0:	f1c6 0601 	rsb	r6, r6, #1
 80099a4:	f8ca 6000 	str.w	r6, [sl]
 80099a8:	f8da 3000 	ldr.w	r3, [sl]
 80099ac:	4499      	add	r9, r3
 80099ae:	2200      	movs	r2, #0
 80099b0:	2300      	movs	r3, #0
 80099b2:	4620      	mov	r0, r4
 80099b4:	4629      	mov	r1, r5
 80099b6:	f7f7 f88f 	bl	8000ad8 <__aeabi_dcmpeq>
 80099ba:	b108      	cbz	r0, 80099c0 <__cvt+0xa4>
 80099bc:	f8cd 900c 	str.w	r9, [sp, #12]
 80099c0:	2230      	movs	r2, #48	; 0x30
 80099c2:	9b03      	ldr	r3, [sp, #12]
 80099c4:	454b      	cmp	r3, r9
 80099c6:	d307      	bcc.n	80099d8 <__cvt+0xbc>
 80099c8:	9b03      	ldr	r3, [sp, #12]
 80099ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80099cc:	1bdb      	subs	r3, r3, r7
 80099ce:	4638      	mov	r0, r7
 80099d0:	6013      	str	r3, [r2, #0]
 80099d2:	b004      	add	sp, #16
 80099d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099d8:	1c59      	adds	r1, r3, #1
 80099da:	9103      	str	r1, [sp, #12]
 80099dc:	701a      	strb	r2, [r3, #0]
 80099de:	e7f0      	b.n	80099c2 <__cvt+0xa6>

080099e0 <__exponent>:
 80099e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80099e2:	4603      	mov	r3, r0
 80099e4:	2900      	cmp	r1, #0
 80099e6:	bfb8      	it	lt
 80099e8:	4249      	neglt	r1, r1
 80099ea:	f803 2b02 	strb.w	r2, [r3], #2
 80099ee:	bfb4      	ite	lt
 80099f0:	222d      	movlt	r2, #45	; 0x2d
 80099f2:	222b      	movge	r2, #43	; 0x2b
 80099f4:	2909      	cmp	r1, #9
 80099f6:	7042      	strb	r2, [r0, #1]
 80099f8:	dd2a      	ble.n	8009a50 <__exponent+0x70>
 80099fa:	f10d 0407 	add.w	r4, sp, #7
 80099fe:	46a4      	mov	ip, r4
 8009a00:	270a      	movs	r7, #10
 8009a02:	46a6      	mov	lr, r4
 8009a04:	460a      	mov	r2, r1
 8009a06:	fb91 f6f7 	sdiv	r6, r1, r7
 8009a0a:	fb07 1516 	mls	r5, r7, r6, r1
 8009a0e:	3530      	adds	r5, #48	; 0x30
 8009a10:	2a63      	cmp	r2, #99	; 0x63
 8009a12:	f104 34ff 	add.w	r4, r4, #4294967295
 8009a16:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009a1a:	4631      	mov	r1, r6
 8009a1c:	dcf1      	bgt.n	8009a02 <__exponent+0x22>
 8009a1e:	3130      	adds	r1, #48	; 0x30
 8009a20:	f1ae 0502 	sub.w	r5, lr, #2
 8009a24:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009a28:	1c44      	adds	r4, r0, #1
 8009a2a:	4629      	mov	r1, r5
 8009a2c:	4561      	cmp	r1, ip
 8009a2e:	d30a      	bcc.n	8009a46 <__exponent+0x66>
 8009a30:	f10d 0209 	add.w	r2, sp, #9
 8009a34:	eba2 020e 	sub.w	r2, r2, lr
 8009a38:	4565      	cmp	r5, ip
 8009a3a:	bf88      	it	hi
 8009a3c:	2200      	movhi	r2, #0
 8009a3e:	4413      	add	r3, r2
 8009a40:	1a18      	subs	r0, r3, r0
 8009a42:	b003      	add	sp, #12
 8009a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a4a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009a4e:	e7ed      	b.n	8009a2c <__exponent+0x4c>
 8009a50:	2330      	movs	r3, #48	; 0x30
 8009a52:	3130      	adds	r1, #48	; 0x30
 8009a54:	7083      	strb	r3, [r0, #2]
 8009a56:	70c1      	strb	r1, [r0, #3]
 8009a58:	1d03      	adds	r3, r0, #4
 8009a5a:	e7f1      	b.n	8009a40 <__exponent+0x60>

08009a5c <_printf_float>:
 8009a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a60:	ed2d 8b02 	vpush	{d8}
 8009a64:	b08d      	sub	sp, #52	; 0x34
 8009a66:	460c      	mov	r4, r1
 8009a68:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009a6c:	4616      	mov	r6, r2
 8009a6e:	461f      	mov	r7, r3
 8009a70:	4605      	mov	r5, r0
 8009a72:	f001 fb4b 	bl	800b10c <_localeconv_r>
 8009a76:	f8d0 a000 	ldr.w	sl, [r0]
 8009a7a:	4650      	mov	r0, sl
 8009a7c:	f7f6 fbb0 	bl	80001e0 <strlen>
 8009a80:	2300      	movs	r3, #0
 8009a82:	930a      	str	r3, [sp, #40]	; 0x28
 8009a84:	6823      	ldr	r3, [r4, #0]
 8009a86:	9305      	str	r3, [sp, #20]
 8009a88:	f8d8 3000 	ldr.w	r3, [r8]
 8009a8c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009a90:	3307      	adds	r3, #7
 8009a92:	f023 0307 	bic.w	r3, r3, #7
 8009a96:	f103 0208 	add.w	r2, r3, #8
 8009a9a:	f8c8 2000 	str.w	r2, [r8]
 8009a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009aa6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009aaa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009aae:	9307      	str	r3, [sp, #28]
 8009ab0:	f8cd 8018 	str.w	r8, [sp, #24]
 8009ab4:	ee08 0a10 	vmov	s16, r0
 8009ab8:	4b9f      	ldr	r3, [pc, #636]	; (8009d38 <_printf_float+0x2dc>)
 8009aba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009abe:	f04f 32ff 	mov.w	r2, #4294967295
 8009ac2:	f7f7 f83b 	bl	8000b3c <__aeabi_dcmpun>
 8009ac6:	bb88      	cbnz	r0, 8009b2c <_printf_float+0xd0>
 8009ac8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009acc:	4b9a      	ldr	r3, [pc, #616]	; (8009d38 <_printf_float+0x2dc>)
 8009ace:	f04f 32ff 	mov.w	r2, #4294967295
 8009ad2:	f7f7 f815 	bl	8000b00 <__aeabi_dcmple>
 8009ad6:	bb48      	cbnz	r0, 8009b2c <_printf_float+0xd0>
 8009ad8:	2200      	movs	r2, #0
 8009ada:	2300      	movs	r3, #0
 8009adc:	4640      	mov	r0, r8
 8009ade:	4649      	mov	r1, r9
 8009ae0:	f7f7 f804 	bl	8000aec <__aeabi_dcmplt>
 8009ae4:	b110      	cbz	r0, 8009aec <_printf_float+0x90>
 8009ae6:	232d      	movs	r3, #45	; 0x2d
 8009ae8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009aec:	4b93      	ldr	r3, [pc, #588]	; (8009d3c <_printf_float+0x2e0>)
 8009aee:	4894      	ldr	r0, [pc, #592]	; (8009d40 <_printf_float+0x2e4>)
 8009af0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009af4:	bf94      	ite	ls
 8009af6:	4698      	movls	r8, r3
 8009af8:	4680      	movhi	r8, r0
 8009afa:	2303      	movs	r3, #3
 8009afc:	6123      	str	r3, [r4, #16]
 8009afe:	9b05      	ldr	r3, [sp, #20]
 8009b00:	f023 0204 	bic.w	r2, r3, #4
 8009b04:	6022      	str	r2, [r4, #0]
 8009b06:	f04f 0900 	mov.w	r9, #0
 8009b0a:	9700      	str	r7, [sp, #0]
 8009b0c:	4633      	mov	r3, r6
 8009b0e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009b10:	4621      	mov	r1, r4
 8009b12:	4628      	mov	r0, r5
 8009b14:	f000 f9d8 	bl	8009ec8 <_printf_common>
 8009b18:	3001      	adds	r0, #1
 8009b1a:	f040 8090 	bne.w	8009c3e <_printf_float+0x1e2>
 8009b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8009b22:	b00d      	add	sp, #52	; 0x34
 8009b24:	ecbd 8b02 	vpop	{d8}
 8009b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b2c:	4642      	mov	r2, r8
 8009b2e:	464b      	mov	r3, r9
 8009b30:	4640      	mov	r0, r8
 8009b32:	4649      	mov	r1, r9
 8009b34:	f7f7 f802 	bl	8000b3c <__aeabi_dcmpun>
 8009b38:	b140      	cbz	r0, 8009b4c <_printf_float+0xf0>
 8009b3a:	464b      	mov	r3, r9
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	bfbc      	itt	lt
 8009b40:	232d      	movlt	r3, #45	; 0x2d
 8009b42:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009b46:	487f      	ldr	r0, [pc, #508]	; (8009d44 <_printf_float+0x2e8>)
 8009b48:	4b7f      	ldr	r3, [pc, #508]	; (8009d48 <_printf_float+0x2ec>)
 8009b4a:	e7d1      	b.n	8009af0 <_printf_float+0x94>
 8009b4c:	6863      	ldr	r3, [r4, #4]
 8009b4e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009b52:	9206      	str	r2, [sp, #24]
 8009b54:	1c5a      	adds	r2, r3, #1
 8009b56:	d13f      	bne.n	8009bd8 <_printf_float+0x17c>
 8009b58:	2306      	movs	r3, #6
 8009b5a:	6063      	str	r3, [r4, #4]
 8009b5c:	9b05      	ldr	r3, [sp, #20]
 8009b5e:	6861      	ldr	r1, [r4, #4]
 8009b60:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009b64:	2300      	movs	r3, #0
 8009b66:	9303      	str	r3, [sp, #12]
 8009b68:	ab0a      	add	r3, sp, #40	; 0x28
 8009b6a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009b6e:	ab09      	add	r3, sp, #36	; 0x24
 8009b70:	ec49 8b10 	vmov	d0, r8, r9
 8009b74:	9300      	str	r3, [sp, #0]
 8009b76:	6022      	str	r2, [r4, #0]
 8009b78:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009b7c:	4628      	mov	r0, r5
 8009b7e:	f7ff fecd 	bl	800991c <__cvt>
 8009b82:	9b06      	ldr	r3, [sp, #24]
 8009b84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009b86:	2b47      	cmp	r3, #71	; 0x47
 8009b88:	4680      	mov	r8, r0
 8009b8a:	d108      	bne.n	8009b9e <_printf_float+0x142>
 8009b8c:	1cc8      	adds	r0, r1, #3
 8009b8e:	db02      	blt.n	8009b96 <_printf_float+0x13a>
 8009b90:	6863      	ldr	r3, [r4, #4]
 8009b92:	4299      	cmp	r1, r3
 8009b94:	dd41      	ble.n	8009c1a <_printf_float+0x1be>
 8009b96:	f1ab 0b02 	sub.w	fp, fp, #2
 8009b9a:	fa5f fb8b 	uxtb.w	fp, fp
 8009b9e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009ba2:	d820      	bhi.n	8009be6 <_printf_float+0x18a>
 8009ba4:	3901      	subs	r1, #1
 8009ba6:	465a      	mov	r2, fp
 8009ba8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009bac:	9109      	str	r1, [sp, #36]	; 0x24
 8009bae:	f7ff ff17 	bl	80099e0 <__exponent>
 8009bb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009bb4:	1813      	adds	r3, r2, r0
 8009bb6:	2a01      	cmp	r2, #1
 8009bb8:	4681      	mov	r9, r0
 8009bba:	6123      	str	r3, [r4, #16]
 8009bbc:	dc02      	bgt.n	8009bc4 <_printf_float+0x168>
 8009bbe:	6822      	ldr	r2, [r4, #0]
 8009bc0:	07d2      	lsls	r2, r2, #31
 8009bc2:	d501      	bpl.n	8009bc8 <_printf_float+0x16c>
 8009bc4:	3301      	adds	r3, #1
 8009bc6:	6123      	str	r3, [r4, #16]
 8009bc8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d09c      	beq.n	8009b0a <_printf_float+0xae>
 8009bd0:	232d      	movs	r3, #45	; 0x2d
 8009bd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bd6:	e798      	b.n	8009b0a <_printf_float+0xae>
 8009bd8:	9a06      	ldr	r2, [sp, #24]
 8009bda:	2a47      	cmp	r2, #71	; 0x47
 8009bdc:	d1be      	bne.n	8009b5c <_printf_float+0x100>
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d1bc      	bne.n	8009b5c <_printf_float+0x100>
 8009be2:	2301      	movs	r3, #1
 8009be4:	e7b9      	b.n	8009b5a <_printf_float+0xfe>
 8009be6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009bea:	d118      	bne.n	8009c1e <_printf_float+0x1c2>
 8009bec:	2900      	cmp	r1, #0
 8009bee:	6863      	ldr	r3, [r4, #4]
 8009bf0:	dd0b      	ble.n	8009c0a <_printf_float+0x1ae>
 8009bf2:	6121      	str	r1, [r4, #16]
 8009bf4:	b913      	cbnz	r3, 8009bfc <_printf_float+0x1a0>
 8009bf6:	6822      	ldr	r2, [r4, #0]
 8009bf8:	07d0      	lsls	r0, r2, #31
 8009bfa:	d502      	bpl.n	8009c02 <_printf_float+0x1a6>
 8009bfc:	3301      	adds	r3, #1
 8009bfe:	440b      	add	r3, r1
 8009c00:	6123      	str	r3, [r4, #16]
 8009c02:	65a1      	str	r1, [r4, #88]	; 0x58
 8009c04:	f04f 0900 	mov.w	r9, #0
 8009c08:	e7de      	b.n	8009bc8 <_printf_float+0x16c>
 8009c0a:	b913      	cbnz	r3, 8009c12 <_printf_float+0x1b6>
 8009c0c:	6822      	ldr	r2, [r4, #0]
 8009c0e:	07d2      	lsls	r2, r2, #31
 8009c10:	d501      	bpl.n	8009c16 <_printf_float+0x1ba>
 8009c12:	3302      	adds	r3, #2
 8009c14:	e7f4      	b.n	8009c00 <_printf_float+0x1a4>
 8009c16:	2301      	movs	r3, #1
 8009c18:	e7f2      	b.n	8009c00 <_printf_float+0x1a4>
 8009c1a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009c1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c20:	4299      	cmp	r1, r3
 8009c22:	db05      	blt.n	8009c30 <_printf_float+0x1d4>
 8009c24:	6823      	ldr	r3, [r4, #0]
 8009c26:	6121      	str	r1, [r4, #16]
 8009c28:	07d8      	lsls	r0, r3, #31
 8009c2a:	d5ea      	bpl.n	8009c02 <_printf_float+0x1a6>
 8009c2c:	1c4b      	adds	r3, r1, #1
 8009c2e:	e7e7      	b.n	8009c00 <_printf_float+0x1a4>
 8009c30:	2900      	cmp	r1, #0
 8009c32:	bfd4      	ite	le
 8009c34:	f1c1 0202 	rsble	r2, r1, #2
 8009c38:	2201      	movgt	r2, #1
 8009c3a:	4413      	add	r3, r2
 8009c3c:	e7e0      	b.n	8009c00 <_printf_float+0x1a4>
 8009c3e:	6823      	ldr	r3, [r4, #0]
 8009c40:	055a      	lsls	r2, r3, #21
 8009c42:	d407      	bmi.n	8009c54 <_printf_float+0x1f8>
 8009c44:	6923      	ldr	r3, [r4, #16]
 8009c46:	4642      	mov	r2, r8
 8009c48:	4631      	mov	r1, r6
 8009c4a:	4628      	mov	r0, r5
 8009c4c:	47b8      	blx	r7
 8009c4e:	3001      	adds	r0, #1
 8009c50:	d12c      	bne.n	8009cac <_printf_float+0x250>
 8009c52:	e764      	b.n	8009b1e <_printf_float+0xc2>
 8009c54:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009c58:	f240 80e0 	bls.w	8009e1c <_printf_float+0x3c0>
 8009c5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009c60:	2200      	movs	r2, #0
 8009c62:	2300      	movs	r3, #0
 8009c64:	f7f6 ff38 	bl	8000ad8 <__aeabi_dcmpeq>
 8009c68:	2800      	cmp	r0, #0
 8009c6a:	d034      	beq.n	8009cd6 <_printf_float+0x27a>
 8009c6c:	4a37      	ldr	r2, [pc, #220]	; (8009d4c <_printf_float+0x2f0>)
 8009c6e:	2301      	movs	r3, #1
 8009c70:	4631      	mov	r1, r6
 8009c72:	4628      	mov	r0, r5
 8009c74:	47b8      	blx	r7
 8009c76:	3001      	adds	r0, #1
 8009c78:	f43f af51 	beq.w	8009b1e <_printf_float+0xc2>
 8009c7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c80:	429a      	cmp	r2, r3
 8009c82:	db02      	blt.n	8009c8a <_printf_float+0x22e>
 8009c84:	6823      	ldr	r3, [r4, #0]
 8009c86:	07d8      	lsls	r0, r3, #31
 8009c88:	d510      	bpl.n	8009cac <_printf_float+0x250>
 8009c8a:	ee18 3a10 	vmov	r3, s16
 8009c8e:	4652      	mov	r2, sl
 8009c90:	4631      	mov	r1, r6
 8009c92:	4628      	mov	r0, r5
 8009c94:	47b8      	blx	r7
 8009c96:	3001      	adds	r0, #1
 8009c98:	f43f af41 	beq.w	8009b1e <_printf_float+0xc2>
 8009c9c:	f04f 0800 	mov.w	r8, #0
 8009ca0:	f104 091a 	add.w	r9, r4, #26
 8009ca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ca6:	3b01      	subs	r3, #1
 8009ca8:	4543      	cmp	r3, r8
 8009caa:	dc09      	bgt.n	8009cc0 <_printf_float+0x264>
 8009cac:	6823      	ldr	r3, [r4, #0]
 8009cae:	079b      	lsls	r3, r3, #30
 8009cb0:	f100 8105 	bmi.w	8009ebe <_printf_float+0x462>
 8009cb4:	68e0      	ldr	r0, [r4, #12]
 8009cb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cb8:	4298      	cmp	r0, r3
 8009cba:	bfb8      	it	lt
 8009cbc:	4618      	movlt	r0, r3
 8009cbe:	e730      	b.n	8009b22 <_printf_float+0xc6>
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	464a      	mov	r2, r9
 8009cc4:	4631      	mov	r1, r6
 8009cc6:	4628      	mov	r0, r5
 8009cc8:	47b8      	blx	r7
 8009cca:	3001      	adds	r0, #1
 8009ccc:	f43f af27 	beq.w	8009b1e <_printf_float+0xc2>
 8009cd0:	f108 0801 	add.w	r8, r8, #1
 8009cd4:	e7e6      	b.n	8009ca4 <_printf_float+0x248>
 8009cd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	dc39      	bgt.n	8009d50 <_printf_float+0x2f4>
 8009cdc:	4a1b      	ldr	r2, [pc, #108]	; (8009d4c <_printf_float+0x2f0>)
 8009cde:	2301      	movs	r3, #1
 8009ce0:	4631      	mov	r1, r6
 8009ce2:	4628      	mov	r0, r5
 8009ce4:	47b8      	blx	r7
 8009ce6:	3001      	adds	r0, #1
 8009ce8:	f43f af19 	beq.w	8009b1e <_printf_float+0xc2>
 8009cec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009cf0:	4313      	orrs	r3, r2
 8009cf2:	d102      	bne.n	8009cfa <_printf_float+0x29e>
 8009cf4:	6823      	ldr	r3, [r4, #0]
 8009cf6:	07d9      	lsls	r1, r3, #31
 8009cf8:	d5d8      	bpl.n	8009cac <_printf_float+0x250>
 8009cfa:	ee18 3a10 	vmov	r3, s16
 8009cfe:	4652      	mov	r2, sl
 8009d00:	4631      	mov	r1, r6
 8009d02:	4628      	mov	r0, r5
 8009d04:	47b8      	blx	r7
 8009d06:	3001      	adds	r0, #1
 8009d08:	f43f af09 	beq.w	8009b1e <_printf_float+0xc2>
 8009d0c:	f04f 0900 	mov.w	r9, #0
 8009d10:	f104 0a1a 	add.w	sl, r4, #26
 8009d14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d16:	425b      	negs	r3, r3
 8009d18:	454b      	cmp	r3, r9
 8009d1a:	dc01      	bgt.n	8009d20 <_printf_float+0x2c4>
 8009d1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d1e:	e792      	b.n	8009c46 <_printf_float+0x1ea>
 8009d20:	2301      	movs	r3, #1
 8009d22:	4652      	mov	r2, sl
 8009d24:	4631      	mov	r1, r6
 8009d26:	4628      	mov	r0, r5
 8009d28:	47b8      	blx	r7
 8009d2a:	3001      	adds	r0, #1
 8009d2c:	f43f aef7 	beq.w	8009b1e <_printf_float+0xc2>
 8009d30:	f109 0901 	add.w	r9, r9, #1
 8009d34:	e7ee      	b.n	8009d14 <_printf_float+0x2b8>
 8009d36:	bf00      	nop
 8009d38:	7fefffff 	.word	0x7fefffff
 8009d3c:	0800c6cc 	.word	0x0800c6cc
 8009d40:	0800c6d0 	.word	0x0800c6d0
 8009d44:	0800c6d8 	.word	0x0800c6d8
 8009d48:	0800c6d4 	.word	0x0800c6d4
 8009d4c:	0800c6dc 	.word	0x0800c6dc
 8009d50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d52:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009d54:	429a      	cmp	r2, r3
 8009d56:	bfa8      	it	ge
 8009d58:	461a      	movge	r2, r3
 8009d5a:	2a00      	cmp	r2, #0
 8009d5c:	4691      	mov	r9, r2
 8009d5e:	dc37      	bgt.n	8009dd0 <_printf_float+0x374>
 8009d60:	f04f 0b00 	mov.w	fp, #0
 8009d64:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d68:	f104 021a 	add.w	r2, r4, #26
 8009d6c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009d6e:	9305      	str	r3, [sp, #20]
 8009d70:	eba3 0309 	sub.w	r3, r3, r9
 8009d74:	455b      	cmp	r3, fp
 8009d76:	dc33      	bgt.n	8009de0 <_printf_float+0x384>
 8009d78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	db3b      	blt.n	8009df8 <_printf_float+0x39c>
 8009d80:	6823      	ldr	r3, [r4, #0]
 8009d82:	07da      	lsls	r2, r3, #31
 8009d84:	d438      	bmi.n	8009df8 <_printf_float+0x39c>
 8009d86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d88:	9b05      	ldr	r3, [sp, #20]
 8009d8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d8c:	1ad3      	subs	r3, r2, r3
 8009d8e:	eba2 0901 	sub.w	r9, r2, r1
 8009d92:	4599      	cmp	r9, r3
 8009d94:	bfa8      	it	ge
 8009d96:	4699      	movge	r9, r3
 8009d98:	f1b9 0f00 	cmp.w	r9, #0
 8009d9c:	dc35      	bgt.n	8009e0a <_printf_float+0x3ae>
 8009d9e:	f04f 0800 	mov.w	r8, #0
 8009da2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009da6:	f104 0a1a 	add.w	sl, r4, #26
 8009daa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009dae:	1a9b      	subs	r3, r3, r2
 8009db0:	eba3 0309 	sub.w	r3, r3, r9
 8009db4:	4543      	cmp	r3, r8
 8009db6:	f77f af79 	ble.w	8009cac <_printf_float+0x250>
 8009dba:	2301      	movs	r3, #1
 8009dbc:	4652      	mov	r2, sl
 8009dbe:	4631      	mov	r1, r6
 8009dc0:	4628      	mov	r0, r5
 8009dc2:	47b8      	blx	r7
 8009dc4:	3001      	adds	r0, #1
 8009dc6:	f43f aeaa 	beq.w	8009b1e <_printf_float+0xc2>
 8009dca:	f108 0801 	add.w	r8, r8, #1
 8009dce:	e7ec      	b.n	8009daa <_printf_float+0x34e>
 8009dd0:	4613      	mov	r3, r2
 8009dd2:	4631      	mov	r1, r6
 8009dd4:	4642      	mov	r2, r8
 8009dd6:	4628      	mov	r0, r5
 8009dd8:	47b8      	blx	r7
 8009dda:	3001      	adds	r0, #1
 8009ddc:	d1c0      	bne.n	8009d60 <_printf_float+0x304>
 8009dde:	e69e      	b.n	8009b1e <_printf_float+0xc2>
 8009de0:	2301      	movs	r3, #1
 8009de2:	4631      	mov	r1, r6
 8009de4:	4628      	mov	r0, r5
 8009de6:	9205      	str	r2, [sp, #20]
 8009de8:	47b8      	blx	r7
 8009dea:	3001      	adds	r0, #1
 8009dec:	f43f ae97 	beq.w	8009b1e <_printf_float+0xc2>
 8009df0:	9a05      	ldr	r2, [sp, #20]
 8009df2:	f10b 0b01 	add.w	fp, fp, #1
 8009df6:	e7b9      	b.n	8009d6c <_printf_float+0x310>
 8009df8:	ee18 3a10 	vmov	r3, s16
 8009dfc:	4652      	mov	r2, sl
 8009dfe:	4631      	mov	r1, r6
 8009e00:	4628      	mov	r0, r5
 8009e02:	47b8      	blx	r7
 8009e04:	3001      	adds	r0, #1
 8009e06:	d1be      	bne.n	8009d86 <_printf_float+0x32a>
 8009e08:	e689      	b.n	8009b1e <_printf_float+0xc2>
 8009e0a:	9a05      	ldr	r2, [sp, #20]
 8009e0c:	464b      	mov	r3, r9
 8009e0e:	4442      	add	r2, r8
 8009e10:	4631      	mov	r1, r6
 8009e12:	4628      	mov	r0, r5
 8009e14:	47b8      	blx	r7
 8009e16:	3001      	adds	r0, #1
 8009e18:	d1c1      	bne.n	8009d9e <_printf_float+0x342>
 8009e1a:	e680      	b.n	8009b1e <_printf_float+0xc2>
 8009e1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e1e:	2a01      	cmp	r2, #1
 8009e20:	dc01      	bgt.n	8009e26 <_printf_float+0x3ca>
 8009e22:	07db      	lsls	r3, r3, #31
 8009e24:	d538      	bpl.n	8009e98 <_printf_float+0x43c>
 8009e26:	2301      	movs	r3, #1
 8009e28:	4642      	mov	r2, r8
 8009e2a:	4631      	mov	r1, r6
 8009e2c:	4628      	mov	r0, r5
 8009e2e:	47b8      	blx	r7
 8009e30:	3001      	adds	r0, #1
 8009e32:	f43f ae74 	beq.w	8009b1e <_printf_float+0xc2>
 8009e36:	ee18 3a10 	vmov	r3, s16
 8009e3a:	4652      	mov	r2, sl
 8009e3c:	4631      	mov	r1, r6
 8009e3e:	4628      	mov	r0, r5
 8009e40:	47b8      	blx	r7
 8009e42:	3001      	adds	r0, #1
 8009e44:	f43f ae6b 	beq.w	8009b1e <_printf_float+0xc2>
 8009e48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	2300      	movs	r3, #0
 8009e50:	f7f6 fe42 	bl	8000ad8 <__aeabi_dcmpeq>
 8009e54:	b9d8      	cbnz	r0, 8009e8e <_printf_float+0x432>
 8009e56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e58:	f108 0201 	add.w	r2, r8, #1
 8009e5c:	3b01      	subs	r3, #1
 8009e5e:	4631      	mov	r1, r6
 8009e60:	4628      	mov	r0, r5
 8009e62:	47b8      	blx	r7
 8009e64:	3001      	adds	r0, #1
 8009e66:	d10e      	bne.n	8009e86 <_printf_float+0x42a>
 8009e68:	e659      	b.n	8009b1e <_printf_float+0xc2>
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	4652      	mov	r2, sl
 8009e6e:	4631      	mov	r1, r6
 8009e70:	4628      	mov	r0, r5
 8009e72:	47b8      	blx	r7
 8009e74:	3001      	adds	r0, #1
 8009e76:	f43f ae52 	beq.w	8009b1e <_printf_float+0xc2>
 8009e7a:	f108 0801 	add.w	r8, r8, #1
 8009e7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e80:	3b01      	subs	r3, #1
 8009e82:	4543      	cmp	r3, r8
 8009e84:	dcf1      	bgt.n	8009e6a <_printf_float+0x40e>
 8009e86:	464b      	mov	r3, r9
 8009e88:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009e8c:	e6dc      	b.n	8009c48 <_printf_float+0x1ec>
 8009e8e:	f04f 0800 	mov.w	r8, #0
 8009e92:	f104 0a1a 	add.w	sl, r4, #26
 8009e96:	e7f2      	b.n	8009e7e <_printf_float+0x422>
 8009e98:	2301      	movs	r3, #1
 8009e9a:	4642      	mov	r2, r8
 8009e9c:	e7df      	b.n	8009e5e <_printf_float+0x402>
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	464a      	mov	r2, r9
 8009ea2:	4631      	mov	r1, r6
 8009ea4:	4628      	mov	r0, r5
 8009ea6:	47b8      	blx	r7
 8009ea8:	3001      	adds	r0, #1
 8009eaa:	f43f ae38 	beq.w	8009b1e <_printf_float+0xc2>
 8009eae:	f108 0801 	add.w	r8, r8, #1
 8009eb2:	68e3      	ldr	r3, [r4, #12]
 8009eb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009eb6:	1a5b      	subs	r3, r3, r1
 8009eb8:	4543      	cmp	r3, r8
 8009eba:	dcf0      	bgt.n	8009e9e <_printf_float+0x442>
 8009ebc:	e6fa      	b.n	8009cb4 <_printf_float+0x258>
 8009ebe:	f04f 0800 	mov.w	r8, #0
 8009ec2:	f104 0919 	add.w	r9, r4, #25
 8009ec6:	e7f4      	b.n	8009eb2 <_printf_float+0x456>

08009ec8 <_printf_common>:
 8009ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ecc:	4616      	mov	r6, r2
 8009ece:	4699      	mov	r9, r3
 8009ed0:	688a      	ldr	r2, [r1, #8]
 8009ed2:	690b      	ldr	r3, [r1, #16]
 8009ed4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	bfb8      	it	lt
 8009edc:	4613      	movlt	r3, r2
 8009ede:	6033      	str	r3, [r6, #0]
 8009ee0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ee4:	4607      	mov	r7, r0
 8009ee6:	460c      	mov	r4, r1
 8009ee8:	b10a      	cbz	r2, 8009eee <_printf_common+0x26>
 8009eea:	3301      	adds	r3, #1
 8009eec:	6033      	str	r3, [r6, #0]
 8009eee:	6823      	ldr	r3, [r4, #0]
 8009ef0:	0699      	lsls	r1, r3, #26
 8009ef2:	bf42      	ittt	mi
 8009ef4:	6833      	ldrmi	r3, [r6, #0]
 8009ef6:	3302      	addmi	r3, #2
 8009ef8:	6033      	strmi	r3, [r6, #0]
 8009efa:	6825      	ldr	r5, [r4, #0]
 8009efc:	f015 0506 	ands.w	r5, r5, #6
 8009f00:	d106      	bne.n	8009f10 <_printf_common+0x48>
 8009f02:	f104 0a19 	add.w	sl, r4, #25
 8009f06:	68e3      	ldr	r3, [r4, #12]
 8009f08:	6832      	ldr	r2, [r6, #0]
 8009f0a:	1a9b      	subs	r3, r3, r2
 8009f0c:	42ab      	cmp	r3, r5
 8009f0e:	dc26      	bgt.n	8009f5e <_printf_common+0x96>
 8009f10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009f14:	1e13      	subs	r3, r2, #0
 8009f16:	6822      	ldr	r2, [r4, #0]
 8009f18:	bf18      	it	ne
 8009f1a:	2301      	movne	r3, #1
 8009f1c:	0692      	lsls	r2, r2, #26
 8009f1e:	d42b      	bmi.n	8009f78 <_printf_common+0xb0>
 8009f20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f24:	4649      	mov	r1, r9
 8009f26:	4638      	mov	r0, r7
 8009f28:	47c0      	blx	r8
 8009f2a:	3001      	adds	r0, #1
 8009f2c:	d01e      	beq.n	8009f6c <_printf_common+0xa4>
 8009f2e:	6823      	ldr	r3, [r4, #0]
 8009f30:	68e5      	ldr	r5, [r4, #12]
 8009f32:	6832      	ldr	r2, [r6, #0]
 8009f34:	f003 0306 	and.w	r3, r3, #6
 8009f38:	2b04      	cmp	r3, #4
 8009f3a:	bf08      	it	eq
 8009f3c:	1aad      	subeq	r5, r5, r2
 8009f3e:	68a3      	ldr	r3, [r4, #8]
 8009f40:	6922      	ldr	r2, [r4, #16]
 8009f42:	bf0c      	ite	eq
 8009f44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f48:	2500      	movne	r5, #0
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	bfc4      	itt	gt
 8009f4e:	1a9b      	subgt	r3, r3, r2
 8009f50:	18ed      	addgt	r5, r5, r3
 8009f52:	2600      	movs	r6, #0
 8009f54:	341a      	adds	r4, #26
 8009f56:	42b5      	cmp	r5, r6
 8009f58:	d11a      	bne.n	8009f90 <_printf_common+0xc8>
 8009f5a:	2000      	movs	r0, #0
 8009f5c:	e008      	b.n	8009f70 <_printf_common+0xa8>
 8009f5e:	2301      	movs	r3, #1
 8009f60:	4652      	mov	r2, sl
 8009f62:	4649      	mov	r1, r9
 8009f64:	4638      	mov	r0, r7
 8009f66:	47c0      	blx	r8
 8009f68:	3001      	adds	r0, #1
 8009f6a:	d103      	bne.n	8009f74 <_printf_common+0xac>
 8009f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f74:	3501      	adds	r5, #1
 8009f76:	e7c6      	b.n	8009f06 <_printf_common+0x3e>
 8009f78:	18e1      	adds	r1, r4, r3
 8009f7a:	1c5a      	adds	r2, r3, #1
 8009f7c:	2030      	movs	r0, #48	; 0x30
 8009f7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f82:	4422      	add	r2, r4
 8009f84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009f8c:	3302      	adds	r3, #2
 8009f8e:	e7c7      	b.n	8009f20 <_printf_common+0x58>
 8009f90:	2301      	movs	r3, #1
 8009f92:	4622      	mov	r2, r4
 8009f94:	4649      	mov	r1, r9
 8009f96:	4638      	mov	r0, r7
 8009f98:	47c0      	blx	r8
 8009f9a:	3001      	adds	r0, #1
 8009f9c:	d0e6      	beq.n	8009f6c <_printf_common+0xa4>
 8009f9e:	3601      	adds	r6, #1
 8009fa0:	e7d9      	b.n	8009f56 <_printf_common+0x8e>
	...

08009fa4 <_printf_i>:
 8009fa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009fa8:	460c      	mov	r4, r1
 8009faa:	4691      	mov	r9, r2
 8009fac:	7e27      	ldrb	r7, [r4, #24]
 8009fae:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009fb0:	2f78      	cmp	r7, #120	; 0x78
 8009fb2:	4680      	mov	r8, r0
 8009fb4:	469a      	mov	sl, r3
 8009fb6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009fba:	d807      	bhi.n	8009fcc <_printf_i+0x28>
 8009fbc:	2f62      	cmp	r7, #98	; 0x62
 8009fbe:	d80a      	bhi.n	8009fd6 <_printf_i+0x32>
 8009fc0:	2f00      	cmp	r7, #0
 8009fc2:	f000 80d8 	beq.w	800a176 <_printf_i+0x1d2>
 8009fc6:	2f58      	cmp	r7, #88	; 0x58
 8009fc8:	f000 80a3 	beq.w	800a112 <_printf_i+0x16e>
 8009fcc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009fd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009fd4:	e03a      	b.n	800a04c <_printf_i+0xa8>
 8009fd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009fda:	2b15      	cmp	r3, #21
 8009fdc:	d8f6      	bhi.n	8009fcc <_printf_i+0x28>
 8009fde:	a001      	add	r0, pc, #4	; (adr r0, 8009fe4 <_printf_i+0x40>)
 8009fe0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009fe4:	0800a03d 	.word	0x0800a03d
 8009fe8:	0800a051 	.word	0x0800a051
 8009fec:	08009fcd 	.word	0x08009fcd
 8009ff0:	08009fcd 	.word	0x08009fcd
 8009ff4:	08009fcd 	.word	0x08009fcd
 8009ff8:	08009fcd 	.word	0x08009fcd
 8009ffc:	0800a051 	.word	0x0800a051
 800a000:	08009fcd 	.word	0x08009fcd
 800a004:	08009fcd 	.word	0x08009fcd
 800a008:	08009fcd 	.word	0x08009fcd
 800a00c:	08009fcd 	.word	0x08009fcd
 800a010:	0800a15d 	.word	0x0800a15d
 800a014:	0800a081 	.word	0x0800a081
 800a018:	0800a13f 	.word	0x0800a13f
 800a01c:	08009fcd 	.word	0x08009fcd
 800a020:	08009fcd 	.word	0x08009fcd
 800a024:	0800a17f 	.word	0x0800a17f
 800a028:	08009fcd 	.word	0x08009fcd
 800a02c:	0800a081 	.word	0x0800a081
 800a030:	08009fcd 	.word	0x08009fcd
 800a034:	08009fcd 	.word	0x08009fcd
 800a038:	0800a147 	.word	0x0800a147
 800a03c:	680b      	ldr	r3, [r1, #0]
 800a03e:	1d1a      	adds	r2, r3, #4
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	600a      	str	r2, [r1, #0]
 800a044:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a048:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a04c:	2301      	movs	r3, #1
 800a04e:	e0a3      	b.n	800a198 <_printf_i+0x1f4>
 800a050:	6825      	ldr	r5, [r4, #0]
 800a052:	6808      	ldr	r0, [r1, #0]
 800a054:	062e      	lsls	r6, r5, #24
 800a056:	f100 0304 	add.w	r3, r0, #4
 800a05a:	d50a      	bpl.n	800a072 <_printf_i+0xce>
 800a05c:	6805      	ldr	r5, [r0, #0]
 800a05e:	600b      	str	r3, [r1, #0]
 800a060:	2d00      	cmp	r5, #0
 800a062:	da03      	bge.n	800a06c <_printf_i+0xc8>
 800a064:	232d      	movs	r3, #45	; 0x2d
 800a066:	426d      	negs	r5, r5
 800a068:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a06c:	485e      	ldr	r0, [pc, #376]	; (800a1e8 <_printf_i+0x244>)
 800a06e:	230a      	movs	r3, #10
 800a070:	e019      	b.n	800a0a6 <_printf_i+0x102>
 800a072:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a076:	6805      	ldr	r5, [r0, #0]
 800a078:	600b      	str	r3, [r1, #0]
 800a07a:	bf18      	it	ne
 800a07c:	b22d      	sxthne	r5, r5
 800a07e:	e7ef      	b.n	800a060 <_printf_i+0xbc>
 800a080:	680b      	ldr	r3, [r1, #0]
 800a082:	6825      	ldr	r5, [r4, #0]
 800a084:	1d18      	adds	r0, r3, #4
 800a086:	6008      	str	r0, [r1, #0]
 800a088:	0628      	lsls	r0, r5, #24
 800a08a:	d501      	bpl.n	800a090 <_printf_i+0xec>
 800a08c:	681d      	ldr	r5, [r3, #0]
 800a08e:	e002      	b.n	800a096 <_printf_i+0xf2>
 800a090:	0669      	lsls	r1, r5, #25
 800a092:	d5fb      	bpl.n	800a08c <_printf_i+0xe8>
 800a094:	881d      	ldrh	r5, [r3, #0]
 800a096:	4854      	ldr	r0, [pc, #336]	; (800a1e8 <_printf_i+0x244>)
 800a098:	2f6f      	cmp	r7, #111	; 0x6f
 800a09a:	bf0c      	ite	eq
 800a09c:	2308      	moveq	r3, #8
 800a09e:	230a      	movne	r3, #10
 800a0a0:	2100      	movs	r1, #0
 800a0a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a0a6:	6866      	ldr	r6, [r4, #4]
 800a0a8:	60a6      	str	r6, [r4, #8]
 800a0aa:	2e00      	cmp	r6, #0
 800a0ac:	bfa2      	ittt	ge
 800a0ae:	6821      	ldrge	r1, [r4, #0]
 800a0b0:	f021 0104 	bicge.w	r1, r1, #4
 800a0b4:	6021      	strge	r1, [r4, #0]
 800a0b6:	b90d      	cbnz	r5, 800a0bc <_printf_i+0x118>
 800a0b8:	2e00      	cmp	r6, #0
 800a0ba:	d04d      	beq.n	800a158 <_printf_i+0x1b4>
 800a0bc:	4616      	mov	r6, r2
 800a0be:	fbb5 f1f3 	udiv	r1, r5, r3
 800a0c2:	fb03 5711 	mls	r7, r3, r1, r5
 800a0c6:	5dc7      	ldrb	r7, [r0, r7]
 800a0c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a0cc:	462f      	mov	r7, r5
 800a0ce:	42bb      	cmp	r3, r7
 800a0d0:	460d      	mov	r5, r1
 800a0d2:	d9f4      	bls.n	800a0be <_printf_i+0x11a>
 800a0d4:	2b08      	cmp	r3, #8
 800a0d6:	d10b      	bne.n	800a0f0 <_printf_i+0x14c>
 800a0d8:	6823      	ldr	r3, [r4, #0]
 800a0da:	07df      	lsls	r7, r3, #31
 800a0dc:	d508      	bpl.n	800a0f0 <_printf_i+0x14c>
 800a0de:	6923      	ldr	r3, [r4, #16]
 800a0e0:	6861      	ldr	r1, [r4, #4]
 800a0e2:	4299      	cmp	r1, r3
 800a0e4:	bfde      	ittt	le
 800a0e6:	2330      	movle	r3, #48	; 0x30
 800a0e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a0ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a0f0:	1b92      	subs	r2, r2, r6
 800a0f2:	6122      	str	r2, [r4, #16]
 800a0f4:	f8cd a000 	str.w	sl, [sp]
 800a0f8:	464b      	mov	r3, r9
 800a0fa:	aa03      	add	r2, sp, #12
 800a0fc:	4621      	mov	r1, r4
 800a0fe:	4640      	mov	r0, r8
 800a100:	f7ff fee2 	bl	8009ec8 <_printf_common>
 800a104:	3001      	adds	r0, #1
 800a106:	d14c      	bne.n	800a1a2 <_printf_i+0x1fe>
 800a108:	f04f 30ff 	mov.w	r0, #4294967295
 800a10c:	b004      	add	sp, #16
 800a10e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a112:	4835      	ldr	r0, [pc, #212]	; (800a1e8 <_printf_i+0x244>)
 800a114:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a118:	6823      	ldr	r3, [r4, #0]
 800a11a:	680e      	ldr	r6, [r1, #0]
 800a11c:	061f      	lsls	r7, r3, #24
 800a11e:	f856 5b04 	ldr.w	r5, [r6], #4
 800a122:	600e      	str	r6, [r1, #0]
 800a124:	d514      	bpl.n	800a150 <_printf_i+0x1ac>
 800a126:	07d9      	lsls	r1, r3, #31
 800a128:	bf44      	itt	mi
 800a12a:	f043 0320 	orrmi.w	r3, r3, #32
 800a12e:	6023      	strmi	r3, [r4, #0]
 800a130:	b91d      	cbnz	r5, 800a13a <_printf_i+0x196>
 800a132:	6823      	ldr	r3, [r4, #0]
 800a134:	f023 0320 	bic.w	r3, r3, #32
 800a138:	6023      	str	r3, [r4, #0]
 800a13a:	2310      	movs	r3, #16
 800a13c:	e7b0      	b.n	800a0a0 <_printf_i+0xfc>
 800a13e:	6823      	ldr	r3, [r4, #0]
 800a140:	f043 0320 	orr.w	r3, r3, #32
 800a144:	6023      	str	r3, [r4, #0]
 800a146:	2378      	movs	r3, #120	; 0x78
 800a148:	4828      	ldr	r0, [pc, #160]	; (800a1ec <_printf_i+0x248>)
 800a14a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a14e:	e7e3      	b.n	800a118 <_printf_i+0x174>
 800a150:	065e      	lsls	r6, r3, #25
 800a152:	bf48      	it	mi
 800a154:	b2ad      	uxthmi	r5, r5
 800a156:	e7e6      	b.n	800a126 <_printf_i+0x182>
 800a158:	4616      	mov	r6, r2
 800a15a:	e7bb      	b.n	800a0d4 <_printf_i+0x130>
 800a15c:	680b      	ldr	r3, [r1, #0]
 800a15e:	6826      	ldr	r6, [r4, #0]
 800a160:	6960      	ldr	r0, [r4, #20]
 800a162:	1d1d      	adds	r5, r3, #4
 800a164:	600d      	str	r5, [r1, #0]
 800a166:	0635      	lsls	r5, r6, #24
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	d501      	bpl.n	800a170 <_printf_i+0x1cc>
 800a16c:	6018      	str	r0, [r3, #0]
 800a16e:	e002      	b.n	800a176 <_printf_i+0x1d2>
 800a170:	0671      	lsls	r1, r6, #25
 800a172:	d5fb      	bpl.n	800a16c <_printf_i+0x1c8>
 800a174:	8018      	strh	r0, [r3, #0]
 800a176:	2300      	movs	r3, #0
 800a178:	6123      	str	r3, [r4, #16]
 800a17a:	4616      	mov	r6, r2
 800a17c:	e7ba      	b.n	800a0f4 <_printf_i+0x150>
 800a17e:	680b      	ldr	r3, [r1, #0]
 800a180:	1d1a      	adds	r2, r3, #4
 800a182:	600a      	str	r2, [r1, #0]
 800a184:	681e      	ldr	r6, [r3, #0]
 800a186:	6862      	ldr	r2, [r4, #4]
 800a188:	2100      	movs	r1, #0
 800a18a:	4630      	mov	r0, r6
 800a18c:	f7f6 f830 	bl	80001f0 <memchr>
 800a190:	b108      	cbz	r0, 800a196 <_printf_i+0x1f2>
 800a192:	1b80      	subs	r0, r0, r6
 800a194:	6060      	str	r0, [r4, #4]
 800a196:	6863      	ldr	r3, [r4, #4]
 800a198:	6123      	str	r3, [r4, #16]
 800a19a:	2300      	movs	r3, #0
 800a19c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1a0:	e7a8      	b.n	800a0f4 <_printf_i+0x150>
 800a1a2:	6923      	ldr	r3, [r4, #16]
 800a1a4:	4632      	mov	r2, r6
 800a1a6:	4649      	mov	r1, r9
 800a1a8:	4640      	mov	r0, r8
 800a1aa:	47d0      	blx	sl
 800a1ac:	3001      	adds	r0, #1
 800a1ae:	d0ab      	beq.n	800a108 <_printf_i+0x164>
 800a1b0:	6823      	ldr	r3, [r4, #0]
 800a1b2:	079b      	lsls	r3, r3, #30
 800a1b4:	d413      	bmi.n	800a1de <_printf_i+0x23a>
 800a1b6:	68e0      	ldr	r0, [r4, #12]
 800a1b8:	9b03      	ldr	r3, [sp, #12]
 800a1ba:	4298      	cmp	r0, r3
 800a1bc:	bfb8      	it	lt
 800a1be:	4618      	movlt	r0, r3
 800a1c0:	e7a4      	b.n	800a10c <_printf_i+0x168>
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	4632      	mov	r2, r6
 800a1c6:	4649      	mov	r1, r9
 800a1c8:	4640      	mov	r0, r8
 800a1ca:	47d0      	blx	sl
 800a1cc:	3001      	adds	r0, #1
 800a1ce:	d09b      	beq.n	800a108 <_printf_i+0x164>
 800a1d0:	3501      	adds	r5, #1
 800a1d2:	68e3      	ldr	r3, [r4, #12]
 800a1d4:	9903      	ldr	r1, [sp, #12]
 800a1d6:	1a5b      	subs	r3, r3, r1
 800a1d8:	42ab      	cmp	r3, r5
 800a1da:	dcf2      	bgt.n	800a1c2 <_printf_i+0x21e>
 800a1dc:	e7eb      	b.n	800a1b6 <_printf_i+0x212>
 800a1de:	2500      	movs	r5, #0
 800a1e0:	f104 0619 	add.w	r6, r4, #25
 800a1e4:	e7f5      	b.n	800a1d2 <_printf_i+0x22e>
 800a1e6:	bf00      	nop
 800a1e8:	0800c6de 	.word	0x0800c6de
 800a1ec:	0800c6ef 	.word	0x0800c6ef

0800a1f0 <siprintf>:
 800a1f0:	b40e      	push	{r1, r2, r3}
 800a1f2:	b500      	push	{lr}
 800a1f4:	b09c      	sub	sp, #112	; 0x70
 800a1f6:	ab1d      	add	r3, sp, #116	; 0x74
 800a1f8:	9002      	str	r0, [sp, #8]
 800a1fa:	9006      	str	r0, [sp, #24]
 800a1fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a200:	4809      	ldr	r0, [pc, #36]	; (800a228 <siprintf+0x38>)
 800a202:	9107      	str	r1, [sp, #28]
 800a204:	9104      	str	r1, [sp, #16]
 800a206:	4909      	ldr	r1, [pc, #36]	; (800a22c <siprintf+0x3c>)
 800a208:	f853 2b04 	ldr.w	r2, [r3], #4
 800a20c:	9105      	str	r1, [sp, #20]
 800a20e:	6800      	ldr	r0, [r0, #0]
 800a210:	9301      	str	r3, [sp, #4]
 800a212:	a902      	add	r1, sp, #8
 800a214:	f001 fc1e 	bl	800ba54 <_svfiprintf_r>
 800a218:	9b02      	ldr	r3, [sp, #8]
 800a21a:	2200      	movs	r2, #0
 800a21c:	701a      	strb	r2, [r3, #0]
 800a21e:	b01c      	add	sp, #112	; 0x70
 800a220:	f85d eb04 	ldr.w	lr, [sp], #4
 800a224:	b003      	add	sp, #12
 800a226:	4770      	bx	lr
 800a228:	20000180 	.word	0x20000180
 800a22c:	ffff0208 	.word	0xffff0208

0800a230 <quorem>:
 800a230:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a234:	6903      	ldr	r3, [r0, #16]
 800a236:	690c      	ldr	r4, [r1, #16]
 800a238:	42a3      	cmp	r3, r4
 800a23a:	4607      	mov	r7, r0
 800a23c:	f2c0 8081 	blt.w	800a342 <quorem+0x112>
 800a240:	3c01      	subs	r4, #1
 800a242:	f101 0814 	add.w	r8, r1, #20
 800a246:	f100 0514 	add.w	r5, r0, #20
 800a24a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a24e:	9301      	str	r3, [sp, #4]
 800a250:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a254:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a258:	3301      	adds	r3, #1
 800a25a:	429a      	cmp	r2, r3
 800a25c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a260:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a264:	fbb2 f6f3 	udiv	r6, r2, r3
 800a268:	d331      	bcc.n	800a2ce <quorem+0x9e>
 800a26a:	f04f 0e00 	mov.w	lr, #0
 800a26e:	4640      	mov	r0, r8
 800a270:	46ac      	mov	ip, r5
 800a272:	46f2      	mov	sl, lr
 800a274:	f850 2b04 	ldr.w	r2, [r0], #4
 800a278:	b293      	uxth	r3, r2
 800a27a:	fb06 e303 	mla	r3, r6, r3, lr
 800a27e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a282:	b29b      	uxth	r3, r3
 800a284:	ebaa 0303 	sub.w	r3, sl, r3
 800a288:	0c12      	lsrs	r2, r2, #16
 800a28a:	f8dc a000 	ldr.w	sl, [ip]
 800a28e:	fb06 e202 	mla	r2, r6, r2, lr
 800a292:	fa13 f38a 	uxtah	r3, r3, sl
 800a296:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a29a:	fa1f fa82 	uxth.w	sl, r2
 800a29e:	f8dc 2000 	ldr.w	r2, [ip]
 800a2a2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a2a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a2aa:	b29b      	uxth	r3, r3
 800a2ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a2b0:	4581      	cmp	r9, r0
 800a2b2:	f84c 3b04 	str.w	r3, [ip], #4
 800a2b6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a2ba:	d2db      	bcs.n	800a274 <quorem+0x44>
 800a2bc:	f855 300b 	ldr.w	r3, [r5, fp]
 800a2c0:	b92b      	cbnz	r3, 800a2ce <quorem+0x9e>
 800a2c2:	9b01      	ldr	r3, [sp, #4]
 800a2c4:	3b04      	subs	r3, #4
 800a2c6:	429d      	cmp	r5, r3
 800a2c8:	461a      	mov	r2, r3
 800a2ca:	d32e      	bcc.n	800a32a <quorem+0xfa>
 800a2cc:	613c      	str	r4, [r7, #16]
 800a2ce:	4638      	mov	r0, r7
 800a2d0:	f001 f9aa 	bl	800b628 <__mcmp>
 800a2d4:	2800      	cmp	r0, #0
 800a2d6:	db24      	blt.n	800a322 <quorem+0xf2>
 800a2d8:	3601      	adds	r6, #1
 800a2da:	4628      	mov	r0, r5
 800a2dc:	f04f 0c00 	mov.w	ip, #0
 800a2e0:	f858 2b04 	ldr.w	r2, [r8], #4
 800a2e4:	f8d0 e000 	ldr.w	lr, [r0]
 800a2e8:	b293      	uxth	r3, r2
 800a2ea:	ebac 0303 	sub.w	r3, ip, r3
 800a2ee:	0c12      	lsrs	r2, r2, #16
 800a2f0:	fa13 f38e 	uxtah	r3, r3, lr
 800a2f4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a2f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a2fc:	b29b      	uxth	r3, r3
 800a2fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a302:	45c1      	cmp	r9, r8
 800a304:	f840 3b04 	str.w	r3, [r0], #4
 800a308:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a30c:	d2e8      	bcs.n	800a2e0 <quorem+0xb0>
 800a30e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a312:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a316:	b922      	cbnz	r2, 800a322 <quorem+0xf2>
 800a318:	3b04      	subs	r3, #4
 800a31a:	429d      	cmp	r5, r3
 800a31c:	461a      	mov	r2, r3
 800a31e:	d30a      	bcc.n	800a336 <quorem+0x106>
 800a320:	613c      	str	r4, [r7, #16]
 800a322:	4630      	mov	r0, r6
 800a324:	b003      	add	sp, #12
 800a326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a32a:	6812      	ldr	r2, [r2, #0]
 800a32c:	3b04      	subs	r3, #4
 800a32e:	2a00      	cmp	r2, #0
 800a330:	d1cc      	bne.n	800a2cc <quorem+0x9c>
 800a332:	3c01      	subs	r4, #1
 800a334:	e7c7      	b.n	800a2c6 <quorem+0x96>
 800a336:	6812      	ldr	r2, [r2, #0]
 800a338:	3b04      	subs	r3, #4
 800a33a:	2a00      	cmp	r2, #0
 800a33c:	d1f0      	bne.n	800a320 <quorem+0xf0>
 800a33e:	3c01      	subs	r4, #1
 800a340:	e7eb      	b.n	800a31a <quorem+0xea>
 800a342:	2000      	movs	r0, #0
 800a344:	e7ee      	b.n	800a324 <quorem+0xf4>
	...

0800a348 <_dtoa_r>:
 800a348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a34c:	ed2d 8b02 	vpush	{d8}
 800a350:	ec57 6b10 	vmov	r6, r7, d0
 800a354:	b095      	sub	sp, #84	; 0x54
 800a356:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a358:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a35c:	9105      	str	r1, [sp, #20]
 800a35e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a362:	4604      	mov	r4, r0
 800a364:	9209      	str	r2, [sp, #36]	; 0x24
 800a366:	930f      	str	r3, [sp, #60]	; 0x3c
 800a368:	b975      	cbnz	r5, 800a388 <_dtoa_r+0x40>
 800a36a:	2010      	movs	r0, #16
 800a36c:	f000 fed6 	bl	800b11c <malloc>
 800a370:	4602      	mov	r2, r0
 800a372:	6260      	str	r0, [r4, #36]	; 0x24
 800a374:	b920      	cbnz	r0, 800a380 <_dtoa_r+0x38>
 800a376:	4bb2      	ldr	r3, [pc, #712]	; (800a640 <_dtoa_r+0x2f8>)
 800a378:	21ea      	movs	r1, #234	; 0xea
 800a37a:	48b2      	ldr	r0, [pc, #712]	; (800a644 <_dtoa_r+0x2fc>)
 800a37c:	f001 feea 	bl	800c154 <__assert_func>
 800a380:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a384:	6005      	str	r5, [r0, #0]
 800a386:	60c5      	str	r5, [r0, #12]
 800a388:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a38a:	6819      	ldr	r1, [r3, #0]
 800a38c:	b151      	cbz	r1, 800a3a4 <_dtoa_r+0x5c>
 800a38e:	685a      	ldr	r2, [r3, #4]
 800a390:	604a      	str	r2, [r1, #4]
 800a392:	2301      	movs	r3, #1
 800a394:	4093      	lsls	r3, r2
 800a396:	608b      	str	r3, [r1, #8]
 800a398:	4620      	mov	r0, r4
 800a39a:	f000 ff07 	bl	800b1ac <_Bfree>
 800a39e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	601a      	str	r2, [r3, #0]
 800a3a4:	1e3b      	subs	r3, r7, #0
 800a3a6:	bfb9      	ittee	lt
 800a3a8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a3ac:	9303      	strlt	r3, [sp, #12]
 800a3ae:	2300      	movge	r3, #0
 800a3b0:	f8c8 3000 	strge.w	r3, [r8]
 800a3b4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a3b8:	4ba3      	ldr	r3, [pc, #652]	; (800a648 <_dtoa_r+0x300>)
 800a3ba:	bfbc      	itt	lt
 800a3bc:	2201      	movlt	r2, #1
 800a3be:	f8c8 2000 	strlt.w	r2, [r8]
 800a3c2:	ea33 0309 	bics.w	r3, r3, r9
 800a3c6:	d11b      	bne.n	800a400 <_dtoa_r+0xb8>
 800a3c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a3ca:	f242 730f 	movw	r3, #9999	; 0x270f
 800a3ce:	6013      	str	r3, [r2, #0]
 800a3d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a3d4:	4333      	orrs	r3, r6
 800a3d6:	f000 857a 	beq.w	800aece <_dtoa_r+0xb86>
 800a3da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3dc:	b963      	cbnz	r3, 800a3f8 <_dtoa_r+0xb0>
 800a3de:	4b9b      	ldr	r3, [pc, #620]	; (800a64c <_dtoa_r+0x304>)
 800a3e0:	e024      	b.n	800a42c <_dtoa_r+0xe4>
 800a3e2:	4b9b      	ldr	r3, [pc, #620]	; (800a650 <_dtoa_r+0x308>)
 800a3e4:	9300      	str	r3, [sp, #0]
 800a3e6:	3308      	adds	r3, #8
 800a3e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a3ea:	6013      	str	r3, [r2, #0]
 800a3ec:	9800      	ldr	r0, [sp, #0]
 800a3ee:	b015      	add	sp, #84	; 0x54
 800a3f0:	ecbd 8b02 	vpop	{d8}
 800a3f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3f8:	4b94      	ldr	r3, [pc, #592]	; (800a64c <_dtoa_r+0x304>)
 800a3fa:	9300      	str	r3, [sp, #0]
 800a3fc:	3303      	adds	r3, #3
 800a3fe:	e7f3      	b.n	800a3e8 <_dtoa_r+0xa0>
 800a400:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a404:	2200      	movs	r2, #0
 800a406:	ec51 0b17 	vmov	r0, r1, d7
 800a40a:	2300      	movs	r3, #0
 800a40c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a410:	f7f6 fb62 	bl	8000ad8 <__aeabi_dcmpeq>
 800a414:	4680      	mov	r8, r0
 800a416:	b158      	cbz	r0, 800a430 <_dtoa_r+0xe8>
 800a418:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a41a:	2301      	movs	r3, #1
 800a41c:	6013      	str	r3, [r2, #0]
 800a41e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a420:	2b00      	cmp	r3, #0
 800a422:	f000 8551 	beq.w	800aec8 <_dtoa_r+0xb80>
 800a426:	488b      	ldr	r0, [pc, #556]	; (800a654 <_dtoa_r+0x30c>)
 800a428:	6018      	str	r0, [r3, #0]
 800a42a:	1e43      	subs	r3, r0, #1
 800a42c:	9300      	str	r3, [sp, #0]
 800a42e:	e7dd      	b.n	800a3ec <_dtoa_r+0xa4>
 800a430:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a434:	aa12      	add	r2, sp, #72	; 0x48
 800a436:	a913      	add	r1, sp, #76	; 0x4c
 800a438:	4620      	mov	r0, r4
 800a43a:	f001 f999 	bl	800b770 <__d2b>
 800a43e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a442:	4683      	mov	fp, r0
 800a444:	2d00      	cmp	r5, #0
 800a446:	d07c      	beq.n	800a542 <_dtoa_r+0x1fa>
 800a448:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a44a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a44e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a452:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a456:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a45a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a45e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a462:	4b7d      	ldr	r3, [pc, #500]	; (800a658 <_dtoa_r+0x310>)
 800a464:	2200      	movs	r2, #0
 800a466:	4630      	mov	r0, r6
 800a468:	4639      	mov	r1, r7
 800a46a:	f7f5 ff15 	bl	8000298 <__aeabi_dsub>
 800a46e:	a36e      	add	r3, pc, #440	; (adr r3, 800a628 <_dtoa_r+0x2e0>)
 800a470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a474:	f7f6 f8c8 	bl	8000608 <__aeabi_dmul>
 800a478:	a36d      	add	r3, pc, #436	; (adr r3, 800a630 <_dtoa_r+0x2e8>)
 800a47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a47e:	f7f5 ff0d 	bl	800029c <__adddf3>
 800a482:	4606      	mov	r6, r0
 800a484:	4628      	mov	r0, r5
 800a486:	460f      	mov	r7, r1
 800a488:	f7f6 f854 	bl	8000534 <__aeabi_i2d>
 800a48c:	a36a      	add	r3, pc, #424	; (adr r3, 800a638 <_dtoa_r+0x2f0>)
 800a48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a492:	f7f6 f8b9 	bl	8000608 <__aeabi_dmul>
 800a496:	4602      	mov	r2, r0
 800a498:	460b      	mov	r3, r1
 800a49a:	4630      	mov	r0, r6
 800a49c:	4639      	mov	r1, r7
 800a49e:	f7f5 fefd 	bl	800029c <__adddf3>
 800a4a2:	4606      	mov	r6, r0
 800a4a4:	460f      	mov	r7, r1
 800a4a6:	f7f6 fb5f 	bl	8000b68 <__aeabi_d2iz>
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	4682      	mov	sl, r0
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	4630      	mov	r0, r6
 800a4b2:	4639      	mov	r1, r7
 800a4b4:	f7f6 fb1a 	bl	8000aec <__aeabi_dcmplt>
 800a4b8:	b148      	cbz	r0, 800a4ce <_dtoa_r+0x186>
 800a4ba:	4650      	mov	r0, sl
 800a4bc:	f7f6 f83a 	bl	8000534 <__aeabi_i2d>
 800a4c0:	4632      	mov	r2, r6
 800a4c2:	463b      	mov	r3, r7
 800a4c4:	f7f6 fb08 	bl	8000ad8 <__aeabi_dcmpeq>
 800a4c8:	b908      	cbnz	r0, 800a4ce <_dtoa_r+0x186>
 800a4ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a4ce:	f1ba 0f16 	cmp.w	sl, #22
 800a4d2:	d854      	bhi.n	800a57e <_dtoa_r+0x236>
 800a4d4:	4b61      	ldr	r3, [pc, #388]	; (800a65c <_dtoa_r+0x314>)
 800a4d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a4e2:	f7f6 fb03 	bl	8000aec <__aeabi_dcmplt>
 800a4e6:	2800      	cmp	r0, #0
 800a4e8:	d04b      	beq.n	800a582 <_dtoa_r+0x23a>
 800a4ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	930e      	str	r3, [sp, #56]	; 0x38
 800a4f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a4f4:	1b5d      	subs	r5, r3, r5
 800a4f6:	1e6b      	subs	r3, r5, #1
 800a4f8:	9304      	str	r3, [sp, #16]
 800a4fa:	bf43      	ittte	mi
 800a4fc:	2300      	movmi	r3, #0
 800a4fe:	f1c5 0801 	rsbmi	r8, r5, #1
 800a502:	9304      	strmi	r3, [sp, #16]
 800a504:	f04f 0800 	movpl.w	r8, #0
 800a508:	f1ba 0f00 	cmp.w	sl, #0
 800a50c:	db3b      	blt.n	800a586 <_dtoa_r+0x23e>
 800a50e:	9b04      	ldr	r3, [sp, #16]
 800a510:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a514:	4453      	add	r3, sl
 800a516:	9304      	str	r3, [sp, #16]
 800a518:	2300      	movs	r3, #0
 800a51a:	9306      	str	r3, [sp, #24]
 800a51c:	9b05      	ldr	r3, [sp, #20]
 800a51e:	2b09      	cmp	r3, #9
 800a520:	d869      	bhi.n	800a5f6 <_dtoa_r+0x2ae>
 800a522:	2b05      	cmp	r3, #5
 800a524:	bfc4      	itt	gt
 800a526:	3b04      	subgt	r3, #4
 800a528:	9305      	strgt	r3, [sp, #20]
 800a52a:	9b05      	ldr	r3, [sp, #20]
 800a52c:	f1a3 0302 	sub.w	r3, r3, #2
 800a530:	bfcc      	ite	gt
 800a532:	2500      	movgt	r5, #0
 800a534:	2501      	movle	r5, #1
 800a536:	2b03      	cmp	r3, #3
 800a538:	d869      	bhi.n	800a60e <_dtoa_r+0x2c6>
 800a53a:	e8df f003 	tbb	[pc, r3]
 800a53e:	4e2c      	.short	0x4e2c
 800a540:	5a4c      	.short	0x5a4c
 800a542:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a546:	441d      	add	r5, r3
 800a548:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a54c:	2b20      	cmp	r3, #32
 800a54e:	bfc1      	itttt	gt
 800a550:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a554:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a558:	fa09 f303 	lslgt.w	r3, r9, r3
 800a55c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a560:	bfda      	itte	le
 800a562:	f1c3 0320 	rsble	r3, r3, #32
 800a566:	fa06 f003 	lslle.w	r0, r6, r3
 800a56a:	4318      	orrgt	r0, r3
 800a56c:	f7f5 ffd2 	bl	8000514 <__aeabi_ui2d>
 800a570:	2301      	movs	r3, #1
 800a572:	4606      	mov	r6, r0
 800a574:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a578:	3d01      	subs	r5, #1
 800a57a:	9310      	str	r3, [sp, #64]	; 0x40
 800a57c:	e771      	b.n	800a462 <_dtoa_r+0x11a>
 800a57e:	2301      	movs	r3, #1
 800a580:	e7b6      	b.n	800a4f0 <_dtoa_r+0x1a8>
 800a582:	900e      	str	r0, [sp, #56]	; 0x38
 800a584:	e7b5      	b.n	800a4f2 <_dtoa_r+0x1aa>
 800a586:	f1ca 0300 	rsb	r3, sl, #0
 800a58a:	9306      	str	r3, [sp, #24]
 800a58c:	2300      	movs	r3, #0
 800a58e:	eba8 080a 	sub.w	r8, r8, sl
 800a592:	930d      	str	r3, [sp, #52]	; 0x34
 800a594:	e7c2      	b.n	800a51c <_dtoa_r+0x1d4>
 800a596:	2300      	movs	r3, #0
 800a598:	9308      	str	r3, [sp, #32]
 800a59a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	dc39      	bgt.n	800a614 <_dtoa_r+0x2cc>
 800a5a0:	f04f 0901 	mov.w	r9, #1
 800a5a4:	f8cd 9004 	str.w	r9, [sp, #4]
 800a5a8:	464b      	mov	r3, r9
 800a5aa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a5ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	6042      	str	r2, [r0, #4]
 800a5b4:	2204      	movs	r2, #4
 800a5b6:	f102 0614 	add.w	r6, r2, #20
 800a5ba:	429e      	cmp	r6, r3
 800a5bc:	6841      	ldr	r1, [r0, #4]
 800a5be:	d92f      	bls.n	800a620 <_dtoa_r+0x2d8>
 800a5c0:	4620      	mov	r0, r4
 800a5c2:	f000 fdb3 	bl	800b12c <_Balloc>
 800a5c6:	9000      	str	r0, [sp, #0]
 800a5c8:	2800      	cmp	r0, #0
 800a5ca:	d14b      	bne.n	800a664 <_dtoa_r+0x31c>
 800a5cc:	4b24      	ldr	r3, [pc, #144]	; (800a660 <_dtoa_r+0x318>)
 800a5ce:	4602      	mov	r2, r0
 800a5d0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a5d4:	e6d1      	b.n	800a37a <_dtoa_r+0x32>
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	e7de      	b.n	800a598 <_dtoa_r+0x250>
 800a5da:	2300      	movs	r3, #0
 800a5dc:	9308      	str	r3, [sp, #32]
 800a5de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5e0:	eb0a 0903 	add.w	r9, sl, r3
 800a5e4:	f109 0301 	add.w	r3, r9, #1
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	9301      	str	r3, [sp, #4]
 800a5ec:	bfb8      	it	lt
 800a5ee:	2301      	movlt	r3, #1
 800a5f0:	e7dd      	b.n	800a5ae <_dtoa_r+0x266>
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	e7f2      	b.n	800a5dc <_dtoa_r+0x294>
 800a5f6:	2501      	movs	r5, #1
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	9305      	str	r3, [sp, #20]
 800a5fc:	9508      	str	r5, [sp, #32]
 800a5fe:	f04f 39ff 	mov.w	r9, #4294967295
 800a602:	2200      	movs	r2, #0
 800a604:	f8cd 9004 	str.w	r9, [sp, #4]
 800a608:	2312      	movs	r3, #18
 800a60a:	9209      	str	r2, [sp, #36]	; 0x24
 800a60c:	e7cf      	b.n	800a5ae <_dtoa_r+0x266>
 800a60e:	2301      	movs	r3, #1
 800a610:	9308      	str	r3, [sp, #32]
 800a612:	e7f4      	b.n	800a5fe <_dtoa_r+0x2b6>
 800a614:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a618:	f8cd 9004 	str.w	r9, [sp, #4]
 800a61c:	464b      	mov	r3, r9
 800a61e:	e7c6      	b.n	800a5ae <_dtoa_r+0x266>
 800a620:	3101      	adds	r1, #1
 800a622:	6041      	str	r1, [r0, #4]
 800a624:	0052      	lsls	r2, r2, #1
 800a626:	e7c6      	b.n	800a5b6 <_dtoa_r+0x26e>
 800a628:	636f4361 	.word	0x636f4361
 800a62c:	3fd287a7 	.word	0x3fd287a7
 800a630:	8b60c8b3 	.word	0x8b60c8b3
 800a634:	3fc68a28 	.word	0x3fc68a28
 800a638:	509f79fb 	.word	0x509f79fb
 800a63c:	3fd34413 	.word	0x3fd34413
 800a640:	0800c70d 	.word	0x0800c70d
 800a644:	0800c724 	.word	0x0800c724
 800a648:	7ff00000 	.word	0x7ff00000
 800a64c:	0800c709 	.word	0x0800c709
 800a650:	0800c700 	.word	0x0800c700
 800a654:	0800c6dd 	.word	0x0800c6dd
 800a658:	3ff80000 	.word	0x3ff80000
 800a65c:	0800c880 	.word	0x0800c880
 800a660:	0800c783 	.word	0x0800c783
 800a664:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a666:	9a00      	ldr	r2, [sp, #0]
 800a668:	601a      	str	r2, [r3, #0]
 800a66a:	9b01      	ldr	r3, [sp, #4]
 800a66c:	2b0e      	cmp	r3, #14
 800a66e:	f200 80ad 	bhi.w	800a7cc <_dtoa_r+0x484>
 800a672:	2d00      	cmp	r5, #0
 800a674:	f000 80aa 	beq.w	800a7cc <_dtoa_r+0x484>
 800a678:	f1ba 0f00 	cmp.w	sl, #0
 800a67c:	dd36      	ble.n	800a6ec <_dtoa_r+0x3a4>
 800a67e:	4ac3      	ldr	r2, [pc, #780]	; (800a98c <_dtoa_r+0x644>)
 800a680:	f00a 030f 	and.w	r3, sl, #15
 800a684:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a688:	ed93 7b00 	vldr	d7, [r3]
 800a68c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a690:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a694:	eeb0 8a47 	vmov.f32	s16, s14
 800a698:	eef0 8a67 	vmov.f32	s17, s15
 800a69c:	d016      	beq.n	800a6cc <_dtoa_r+0x384>
 800a69e:	4bbc      	ldr	r3, [pc, #752]	; (800a990 <_dtoa_r+0x648>)
 800a6a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a6a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a6a8:	f7f6 f8d8 	bl	800085c <__aeabi_ddiv>
 800a6ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6b0:	f007 070f 	and.w	r7, r7, #15
 800a6b4:	2503      	movs	r5, #3
 800a6b6:	4eb6      	ldr	r6, [pc, #728]	; (800a990 <_dtoa_r+0x648>)
 800a6b8:	b957      	cbnz	r7, 800a6d0 <_dtoa_r+0x388>
 800a6ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6be:	ec53 2b18 	vmov	r2, r3, d8
 800a6c2:	f7f6 f8cb 	bl	800085c <__aeabi_ddiv>
 800a6c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6ca:	e029      	b.n	800a720 <_dtoa_r+0x3d8>
 800a6cc:	2502      	movs	r5, #2
 800a6ce:	e7f2      	b.n	800a6b6 <_dtoa_r+0x36e>
 800a6d0:	07f9      	lsls	r1, r7, #31
 800a6d2:	d508      	bpl.n	800a6e6 <_dtoa_r+0x39e>
 800a6d4:	ec51 0b18 	vmov	r0, r1, d8
 800a6d8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a6dc:	f7f5 ff94 	bl	8000608 <__aeabi_dmul>
 800a6e0:	ec41 0b18 	vmov	d8, r0, r1
 800a6e4:	3501      	adds	r5, #1
 800a6e6:	107f      	asrs	r7, r7, #1
 800a6e8:	3608      	adds	r6, #8
 800a6ea:	e7e5      	b.n	800a6b8 <_dtoa_r+0x370>
 800a6ec:	f000 80a6 	beq.w	800a83c <_dtoa_r+0x4f4>
 800a6f0:	f1ca 0600 	rsb	r6, sl, #0
 800a6f4:	4ba5      	ldr	r3, [pc, #660]	; (800a98c <_dtoa_r+0x644>)
 800a6f6:	4fa6      	ldr	r7, [pc, #664]	; (800a990 <_dtoa_r+0x648>)
 800a6f8:	f006 020f 	and.w	r2, r6, #15
 800a6fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a700:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a704:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a708:	f7f5 ff7e 	bl	8000608 <__aeabi_dmul>
 800a70c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a710:	1136      	asrs	r6, r6, #4
 800a712:	2300      	movs	r3, #0
 800a714:	2502      	movs	r5, #2
 800a716:	2e00      	cmp	r6, #0
 800a718:	f040 8085 	bne.w	800a826 <_dtoa_r+0x4de>
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d1d2      	bne.n	800a6c6 <_dtoa_r+0x37e>
 800a720:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a722:	2b00      	cmp	r3, #0
 800a724:	f000 808c 	beq.w	800a840 <_dtoa_r+0x4f8>
 800a728:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a72c:	4b99      	ldr	r3, [pc, #612]	; (800a994 <_dtoa_r+0x64c>)
 800a72e:	2200      	movs	r2, #0
 800a730:	4630      	mov	r0, r6
 800a732:	4639      	mov	r1, r7
 800a734:	f7f6 f9da 	bl	8000aec <__aeabi_dcmplt>
 800a738:	2800      	cmp	r0, #0
 800a73a:	f000 8081 	beq.w	800a840 <_dtoa_r+0x4f8>
 800a73e:	9b01      	ldr	r3, [sp, #4]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d07d      	beq.n	800a840 <_dtoa_r+0x4f8>
 800a744:	f1b9 0f00 	cmp.w	r9, #0
 800a748:	dd3c      	ble.n	800a7c4 <_dtoa_r+0x47c>
 800a74a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a74e:	9307      	str	r3, [sp, #28]
 800a750:	2200      	movs	r2, #0
 800a752:	4b91      	ldr	r3, [pc, #580]	; (800a998 <_dtoa_r+0x650>)
 800a754:	4630      	mov	r0, r6
 800a756:	4639      	mov	r1, r7
 800a758:	f7f5 ff56 	bl	8000608 <__aeabi_dmul>
 800a75c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a760:	3501      	adds	r5, #1
 800a762:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a766:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a76a:	4628      	mov	r0, r5
 800a76c:	f7f5 fee2 	bl	8000534 <__aeabi_i2d>
 800a770:	4632      	mov	r2, r6
 800a772:	463b      	mov	r3, r7
 800a774:	f7f5 ff48 	bl	8000608 <__aeabi_dmul>
 800a778:	4b88      	ldr	r3, [pc, #544]	; (800a99c <_dtoa_r+0x654>)
 800a77a:	2200      	movs	r2, #0
 800a77c:	f7f5 fd8e 	bl	800029c <__adddf3>
 800a780:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a784:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a788:	9303      	str	r3, [sp, #12]
 800a78a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d15c      	bne.n	800a84a <_dtoa_r+0x502>
 800a790:	4b83      	ldr	r3, [pc, #524]	; (800a9a0 <_dtoa_r+0x658>)
 800a792:	2200      	movs	r2, #0
 800a794:	4630      	mov	r0, r6
 800a796:	4639      	mov	r1, r7
 800a798:	f7f5 fd7e 	bl	8000298 <__aeabi_dsub>
 800a79c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a7a0:	4606      	mov	r6, r0
 800a7a2:	460f      	mov	r7, r1
 800a7a4:	f7f6 f9c0 	bl	8000b28 <__aeabi_dcmpgt>
 800a7a8:	2800      	cmp	r0, #0
 800a7aa:	f040 8296 	bne.w	800acda <_dtoa_r+0x992>
 800a7ae:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a7b2:	4630      	mov	r0, r6
 800a7b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a7b8:	4639      	mov	r1, r7
 800a7ba:	f7f6 f997 	bl	8000aec <__aeabi_dcmplt>
 800a7be:	2800      	cmp	r0, #0
 800a7c0:	f040 8288 	bne.w	800acd4 <_dtoa_r+0x98c>
 800a7c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a7c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a7cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	f2c0 8158 	blt.w	800aa84 <_dtoa_r+0x73c>
 800a7d4:	f1ba 0f0e 	cmp.w	sl, #14
 800a7d8:	f300 8154 	bgt.w	800aa84 <_dtoa_r+0x73c>
 800a7dc:	4b6b      	ldr	r3, [pc, #428]	; (800a98c <_dtoa_r+0x644>)
 800a7de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a7e2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a7e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	f280 80e3 	bge.w	800a9b4 <_dtoa_r+0x66c>
 800a7ee:	9b01      	ldr	r3, [sp, #4]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	f300 80df 	bgt.w	800a9b4 <_dtoa_r+0x66c>
 800a7f6:	f040 826d 	bne.w	800acd4 <_dtoa_r+0x98c>
 800a7fa:	4b69      	ldr	r3, [pc, #420]	; (800a9a0 <_dtoa_r+0x658>)
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	4640      	mov	r0, r8
 800a800:	4649      	mov	r1, r9
 800a802:	f7f5 ff01 	bl	8000608 <__aeabi_dmul>
 800a806:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a80a:	f7f6 f983 	bl	8000b14 <__aeabi_dcmpge>
 800a80e:	9e01      	ldr	r6, [sp, #4]
 800a810:	4637      	mov	r7, r6
 800a812:	2800      	cmp	r0, #0
 800a814:	f040 8243 	bne.w	800ac9e <_dtoa_r+0x956>
 800a818:	9d00      	ldr	r5, [sp, #0]
 800a81a:	2331      	movs	r3, #49	; 0x31
 800a81c:	f805 3b01 	strb.w	r3, [r5], #1
 800a820:	f10a 0a01 	add.w	sl, sl, #1
 800a824:	e23f      	b.n	800aca6 <_dtoa_r+0x95e>
 800a826:	07f2      	lsls	r2, r6, #31
 800a828:	d505      	bpl.n	800a836 <_dtoa_r+0x4ee>
 800a82a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a82e:	f7f5 feeb 	bl	8000608 <__aeabi_dmul>
 800a832:	3501      	adds	r5, #1
 800a834:	2301      	movs	r3, #1
 800a836:	1076      	asrs	r6, r6, #1
 800a838:	3708      	adds	r7, #8
 800a83a:	e76c      	b.n	800a716 <_dtoa_r+0x3ce>
 800a83c:	2502      	movs	r5, #2
 800a83e:	e76f      	b.n	800a720 <_dtoa_r+0x3d8>
 800a840:	9b01      	ldr	r3, [sp, #4]
 800a842:	f8cd a01c 	str.w	sl, [sp, #28]
 800a846:	930c      	str	r3, [sp, #48]	; 0x30
 800a848:	e78d      	b.n	800a766 <_dtoa_r+0x41e>
 800a84a:	9900      	ldr	r1, [sp, #0]
 800a84c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a84e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a850:	4b4e      	ldr	r3, [pc, #312]	; (800a98c <_dtoa_r+0x644>)
 800a852:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a856:	4401      	add	r1, r0
 800a858:	9102      	str	r1, [sp, #8]
 800a85a:	9908      	ldr	r1, [sp, #32]
 800a85c:	eeb0 8a47 	vmov.f32	s16, s14
 800a860:	eef0 8a67 	vmov.f32	s17, s15
 800a864:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a868:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a86c:	2900      	cmp	r1, #0
 800a86e:	d045      	beq.n	800a8fc <_dtoa_r+0x5b4>
 800a870:	494c      	ldr	r1, [pc, #304]	; (800a9a4 <_dtoa_r+0x65c>)
 800a872:	2000      	movs	r0, #0
 800a874:	f7f5 fff2 	bl	800085c <__aeabi_ddiv>
 800a878:	ec53 2b18 	vmov	r2, r3, d8
 800a87c:	f7f5 fd0c 	bl	8000298 <__aeabi_dsub>
 800a880:	9d00      	ldr	r5, [sp, #0]
 800a882:	ec41 0b18 	vmov	d8, r0, r1
 800a886:	4639      	mov	r1, r7
 800a888:	4630      	mov	r0, r6
 800a88a:	f7f6 f96d 	bl	8000b68 <__aeabi_d2iz>
 800a88e:	900c      	str	r0, [sp, #48]	; 0x30
 800a890:	f7f5 fe50 	bl	8000534 <__aeabi_i2d>
 800a894:	4602      	mov	r2, r0
 800a896:	460b      	mov	r3, r1
 800a898:	4630      	mov	r0, r6
 800a89a:	4639      	mov	r1, r7
 800a89c:	f7f5 fcfc 	bl	8000298 <__aeabi_dsub>
 800a8a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a8a2:	3330      	adds	r3, #48	; 0x30
 800a8a4:	f805 3b01 	strb.w	r3, [r5], #1
 800a8a8:	ec53 2b18 	vmov	r2, r3, d8
 800a8ac:	4606      	mov	r6, r0
 800a8ae:	460f      	mov	r7, r1
 800a8b0:	f7f6 f91c 	bl	8000aec <__aeabi_dcmplt>
 800a8b4:	2800      	cmp	r0, #0
 800a8b6:	d165      	bne.n	800a984 <_dtoa_r+0x63c>
 800a8b8:	4632      	mov	r2, r6
 800a8ba:	463b      	mov	r3, r7
 800a8bc:	4935      	ldr	r1, [pc, #212]	; (800a994 <_dtoa_r+0x64c>)
 800a8be:	2000      	movs	r0, #0
 800a8c0:	f7f5 fcea 	bl	8000298 <__aeabi_dsub>
 800a8c4:	ec53 2b18 	vmov	r2, r3, d8
 800a8c8:	f7f6 f910 	bl	8000aec <__aeabi_dcmplt>
 800a8cc:	2800      	cmp	r0, #0
 800a8ce:	f040 80b9 	bne.w	800aa44 <_dtoa_r+0x6fc>
 800a8d2:	9b02      	ldr	r3, [sp, #8]
 800a8d4:	429d      	cmp	r5, r3
 800a8d6:	f43f af75 	beq.w	800a7c4 <_dtoa_r+0x47c>
 800a8da:	4b2f      	ldr	r3, [pc, #188]	; (800a998 <_dtoa_r+0x650>)
 800a8dc:	ec51 0b18 	vmov	r0, r1, d8
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	f7f5 fe91 	bl	8000608 <__aeabi_dmul>
 800a8e6:	4b2c      	ldr	r3, [pc, #176]	; (800a998 <_dtoa_r+0x650>)
 800a8e8:	ec41 0b18 	vmov	d8, r0, r1
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	4630      	mov	r0, r6
 800a8f0:	4639      	mov	r1, r7
 800a8f2:	f7f5 fe89 	bl	8000608 <__aeabi_dmul>
 800a8f6:	4606      	mov	r6, r0
 800a8f8:	460f      	mov	r7, r1
 800a8fa:	e7c4      	b.n	800a886 <_dtoa_r+0x53e>
 800a8fc:	ec51 0b17 	vmov	r0, r1, d7
 800a900:	f7f5 fe82 	bl	8000608 <__aeabi_dmul>
 800a904:	9b02      	ldr	r3, [sp, #8]
 800a906:	9d00      	ldr	r5, [sp, #0]
 800a908:	930c      	str	r3, [sp, #48]	; 0x30
 800a90a:	ec41 0b18 	vmov	d8, r0, r1
 800a90e:	4639      	mov	r1, r7
 800a910:	4630      	mov	r0, r6
 800a912:	f7f6 f929 	bl	8000b68 <__aeabi_d2iz>
 800a916:	9011      	str	r0, [sp, #68]	; 0x44
 800a918:	f7f5 fe0c 	bl	8000534 <__aeabi_i2d>
 800a91c:	4602      	mov	r2, r0
 800a91e:	460b      	mov	r3, r1
 800a920:	4630      	mov	r0, r6
 800a922:	4639      	mov	r1, r7
 800a924:	f7f5 fcb8 	bl	8000298 <__aeabi_dsub>
 800a928:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a92a:	3330      	adds	r3, #48	; 0x30
 800a92c:	f805 3b01 	strb.w	r3, [r5], #1
 800a930:	9b02      	ldr	r3, [sp, #8]
 800a932:	429d      	cmp	r5, r3
 800a934:	4606      	mov	r6, r0
 800a936:	460f      	mov	r7, r1
 800a938:	f04f 0200 	mov.w	r2, #0
 800a93c:	d134      	bne.n	800a9a8 <_dtoa_r+0x660>
 800a93e:	4b19      	ldr	r3, [pc, #100]	; (800a9a4 <_dtoa_r+0x65c>)
 800a940:	ec51 0b18 	vmov	r0, r1, d8
 800a944:	f7f5 fcaa 	bl	800029c <__adddf3>
 800a948:	4602      	mov	r2, r0
 800a94a:	460b      	mov	r3, r1
 800a94c:	4630      	mov	r0, r6
 800a94e:	4639      	mov	r1, r7
 800a950:	f7f6 f8ea 	bl	8000b28 <__aeabi_dcmpgt>
 800a954:	2800      	cmp	r0, #0
 800a956:	d175      	bne.n	800aa44 <_dtoa_r+0x6fc>
 800a958:	ec53 2b18 	vmov	r2, r3, d8
 800a95c:	4911      	ldr	r1, [pc, #68]	; (800a9a4 <_dtoa_r+0x65c>)
 800a95e:	2000      	movs	r0, #0
 800a960:	f7f5 fc9a 	bl	8000298 <__aeabi_dsub>
 800a964:	4602      	mov	r2, r0
 800a966:	460b      	mov	r3, r1
 800a968:	4630      	mov	r0, r6
 800a96a:	4639      	mov	r1, r7
 800a96c:	f7f6 f8be 	bl	8000aec <__aeabi_dcmplt>
 800a970:	2800      	cmp	r0, #0
 800a972:	f43f af27 	beq.w	800a7c4 <_dtoa_r+0x47c>
 800a976:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a978:	1e6b      	subs	r3, r5, #1
 800a97a:	930c      	str	r3, [sp, #48]	; 0x30
 800a97c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a980:	2b30      	cmp	r3, #48	; 0x30
 800a982:	d0f8      	beq.n	800a976 <_dtoa_r+0x62e>
 800a984:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a988:	e04a      	b.n	800aa20 <_dtoa_r+0x6d8>
 800a98a:	bf00      	nop
 800a98c:	0800c880 	.word	0x0800c880
 800a990:	0800c858 	.word	0x0800c858
 800a994:	3ff00000 	.word	0x3ff00000
 800a998:	40240000 	.word	0x40240000
 800a99c:	401c0000 	.word	0x401c0000
 800a9a0:	40140000 	.word	0x40140000
 800a9a4:	3fe00000 	.word	0x3fe00000
 800a9a8:	4baf      	ldr	r3, [pc, #700]	; (800ac68 <_dtoa_r+0x920>)
 800a9aa:	f7f5 fe2d 	bl	8000608 <__aeabi_dmul>
 800a9ae:	4606      	mov	r6, r0
 800a9b0:	460f      	mov	r7, r1
 800a9b2:	e7ac      	b.n	800a90e <_dtoa_r+0x5c6>
 800a9b4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a9b8:	9d00      	ldr	r5, [sp, #0]
 800a9ba:	4642      	mov	r2, r8
 800a9bc:	464b      	mov	r3, r9
 800a9be:	4630      	mov	r0, r6
 800a9c0:	4639      	mov	r1, r7
 800a9c2:	f7f5 ff4b 	bl	800085c <__aeabi_ddiv>
 800a9c6:	f7f6 f8cf 	bl	8000b68 <__aeabi_d2iz>
 800a9ca:	9002      	str	r0, [sp, #8]
 800a9cc:	f7f5 fdb2 	bl	8000534 <__aeabi_i2d>
 800a9d0:	4642      	mov	r2, r8
 800a9d2:	464b      	mov	r3, r9
 800a9d4:	f7f5 fe18 	bl	8000608 <__aeabi_dmul>
 800a9d8:	4602      	mov	r2, r0
 800a9da:	460b      	mov	r3, r1
 800a9dc:	4630      	mov	r0, r6
 800a9de:	4639      	mov	r1, r7
 800a9e0:	f7f5 fc5a 	bl	8000298 <__aeabi_dsub>
 800a9e4:	9e02      	ldr	r6, [sp, #8]
 800a9e6:	9f01      	ldr	r7, [sp, #4]
 800a9e8:	3630      	adds	r6, #48	; 0x30
 800a9ea:	f805 6b01 	strb.w	r6, [r5], #1
 800a9ee:	9e00      	ldr	r6, [sp, #0]
 800a9f0:	1bae      	subs	r6, r5, r6
 800a9f2:	42b7      	cmp	r7, r6
 800a9f4:	4602      	mov	r2, r0
 800a9f6:	460b      	mov	r3, r1
 800a9f8:	d137      	bne.n	800aa6a <_dtoa_r+0x722>
 800a9fa:	f7f5 fc4f 	bl	800029c <__adddf3>
 800a9fe:	4642      	mov	r2, r8
 800aa00:	464b      	mov	r3, r9
 800aa02:	4606      	mov	r6, r0
 800aa04:	460f      	mov	r7, r1
 800aa06:	f7f6 f88f 	bl	8000b28 <__aeabi_dcmpgt>
 800aa0a:	b9c8      	cbnz	r0, 800aa40 <_dtoa_r+0x6f8>
 800aa0c:	4642      	mov	r2, r8
 800aa0e:	464b      	mov	r3, r9
 800aa10:	4630      	mov	r0, r6
 800aa12:	4639      	mov	r1, r7
 800aa14:	f7f6 f860 	bl	8000ad8 <__aeabi_dcmpeq>
 800aa18:	b110      	cbz	r0, 800aa20 <_dtoa_r+0x6d8>
 800aa1a:	9b02      	ldr	r3, [sp, #8]
 800aa1c:	07d9      	lsls	r1, r3, #31
 800aa1e:	d40f      	bmi.n	800aa40 <_dtoa_r+0x6f8>
 800aa20:	4620      	mov	r0, r4
 800aa22:	4659      	mov	r1, fp
 800aa24:	f000 fbc2 	bl	800b1ac <_Bfree>
 800aa28:	2300      	movs	r3, #0
 800aa2a:	702b      	strb	r3, [r5, #0]
 800aa2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aa2e:	f10a 0001 	add.w	r0, sl, #1
 800aa32:	6018      	str	r0, [r3, #0]
 800aa34:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	f43f acd8 	beq.w	800a3ec <_dtoa_r+0xa4>
 800aa3c:	601d      	str	r5, [r3, #0]
 800aa3e:	e4d5      	b.n	800a3ec <_dtoa_r+0xa4>
 800aa40:	f8cd a01c 	str.w	sl, [sp, #28]
 800aa44:	462b      	mov	r3, r5
 800aa46:	461d      	mov	r5, r3
 800aa48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa4c:	2a39      	cmp	r2, #57	; 0x39
 800aa4e:	d108      	bne.n	800aa62 <_dtoa_r+0x71a>
 800aa50:	9a00      	ldr	r2, [sp, #0]
 800aa52:	429a      	cmp	r2, r3
 800aa54:	d1f7      	bne.n	800aa46 <_dtoa_r+0x6fe>
 800aa56:	9a07      	ldr	r2, [sp, #28]
 800aa58:	9900      	ldr	r1, [sp, #0]
 800aa5a:	3201      	adds	r2, #1
 800aa5c:	9207      	str	r2, [sp, #28]
 800aa5e:	2230      	movs	r2, #48	; 0x30
 800aa60:	700a      	strb	r2, [r1, #0]
 800aa62:	781a      	ldrb	r2, [r3, #0]
 800aa64:	3201      	adds	r2, #1
 800aa66:	701a      	strb	r2, [r3, #0]
 800aa68:	e78c      	b.n	800a984 <_dtoa_r+0x63c>
 800aa6a:	4b7f      	ldr	r3, [pc, #508]	; (800ac68 <_dtoa_r+0x920>)
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	f7f5 fdcb 	bl	8000608 <__aeabi_dmul>
 800aa72:	2200      	movs	r2, #0
 800aa74:	2300      	movs	r3, #0
 800aa76:	4606      	mov	r6, r0
 800aa78:	460f      	mov	r7, r1
 800aa7a:	f7f6 f82d 	bl	8000ad8 <__aeabi_dcmpeq>
 800aa7e:	2800      	cmp	r0, #0
 800aa80:	d09b      	beq.n	800a9ba <_dtoa_r+0x672>
 800aa82:	e7cd      	b.n	800aa20 <_dtoa_r+0x6d8>
 800aa84:	9a08      	ldr	r2, [sp, #32]
 800aa86:	2a00      	cmp	r2, #0
 800aa88:	f000 80c4 	beq.w	800ac14 <_dtoa_r+0x8cc>
 800aa8c:	9a05      	ldr	r2, [sp, #20]
 800aa8e:	2a01      	cmp	r2, #1
 800aa90:	f300 80a8 	bgt.w	800abe4 <_dtoa_r+0x89c>
 800aa94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aa96:	2a00      	cmp	r2, #0
 800aa98:	f000 80a0 	beq.w	800abdc <_dtoa_r+0x894>
 800aa9c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800aaa0:	9e06      	ldr	r6, [sp, #24]
 800aaa2:	4645      	mov	r5, r8
 800aaa4:	9a04      	ldr	r2, [sp, #16]
 800aaa6:	2101      	movs	r1, #1
 800aaa8:	441a      	add	r2, r3
 800aaaa:	4620      	mov	r0, r4
 800aaac:	4498      	add	r8, r3
 800aaae:	9204      	str	r2, [sp, #16]
 800aab0:	f000 fc38 	bl	800b324 <__i2b>
 800aab4:	4607      	mov	r7, r0
 800aab6:	2d00      	cmp	r5, #0
 800aab8:	dd0b      	ble.n	800aad2 <_dtoa_r+0x78a>
 800aaba:	9b04      	ldr	r3, [sp, #16]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	dd08      	ble.n	800aad2 <_dtoa_r+0x78a>
 800aac0:	42ab      	cmp	r3, r5
 800aac2:	9a04      	ldr	r2, [sp, #16]
 800aac4:	bfa8      	it	ge
 800aac6:	462b      	movge	r3, r5
 800aac8:	eba8 0803 	sub.w	r8, r8, r3
 800aacc:	1aed      	subs	r5, r5, r3
 800aace:	1ad3      	subs	r3, r2, r3
 800aad0:	9304      	str	r3, [sp, #16]
 800aad2:	9b06      	ldr	r3, [sp, #24]
 800aad4:	b1fb      	cbz	r3, 800ab16 <_dtoa_r+0x7ce>
 800aad6:	9b08      	ldr	r3, [sp, #32]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	f000 809f 	beq.w	800ac1c <_dtoa_r+0x8d4>
 800aade:	2e00      	cmp	r6, #0
 800aae0:	dd11      	ble.n	800ab06 <_dtoa_r+0x7be>
 800aae2:	4639      	mov	r1, r7
 800aae4:	4632      	mov	r2, r6
 800aae6:	4620      	mov	r0, r4
 800aae8:	f000 fcd8 	bl	800b49c <__pow5mult>
 800aaec:	465a      	mov	r2, fp
 800aaee:	4601      	mov	r1, r0
 800aaf0:	4607      	mov	r7, r0
 800aaf2:	4620      	mov	r0, r4
 800aaf4:	f000 fc2c 	bl	800b350 <__multiply>
 800aaf8:	4659      	mov	r1, fp
 800aafa:	9007      	str	r0, [sp, #28]
 800aafc:	4620      	mov	r0, r4
 800aafe:	f000 fb55 	bl	800b1ac <_Bfree>
 800ab02:	9b07      	ldr	r3, [sp, #28]
 800ab04:	469b      	mov	fp, r3
 800ab06:	9b06      	ldr	r3, [sp, #24]
 800ab08:	1b9a      	subs	r2, r3, r6
 800ab0a:	d004      	beq.n	800ab16 <_dtoa_r+0x7ce>
 800ab0c:	4659      	mov	r1, fp
 800ab0e:	4620      	mov	r0, r4
 800ab10:	f000 fcc4 	bl	800b49c <__pow5mult>
 800ab14:	4683      	mov	fp, r0
 800ab16:	2101      	movs	r1, #1
 800ab18:	4620      	mov	r0, r4
 800ab1a:	f000 fc03 	bl	800b324 <__i2b>
 800ab1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	4606      	mov	r6, r0
 800ab24:	dd7c      	ble.n	800ac20 <_dtoa_r+0x8d8>
 800ab26:	461a      	mov	r2, r3
 800ab28:	4601      	mov	r1, r0
 800ab2a:	4620      	mov	r0, r4
 800ab2c:	f000 fcb6 	bl	800b49c <__pow5mult>
 800ab30:	9b05      	ldr	r3, [sp, #20]
 800ab32:	2b01      	cmp	r3, #1
 800ab34:	4606      	mov	r6, r0
 800ab36:	dd76      	ble.n	800ac26 <_dtoa_r+0x8de>
 800ab38:	2300      	movs	r3, #0
 800ab3a:	9306      	str	r3, [sp, #24]
 800ab3c:	6933      	ldr	r3, [r6, #16]
 800ab3e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ab42:	6918      	ldr	r0, [r3, #16]
 800ab44:	f000 fb9e 	bl	800b284 <__hi0bits>
 800ab48:	f1c0 0020 	rsb	r0, r0, #32
 800ab4c:	9b04      	ldr	r3, [sp, #16]
 800ab4e:	4418      	add	r0, r3
 800ab50:	f010 001f 	ands.w	r0, r0, #31
 800ab54:	f000 8086 	beq.w	800ac64 <_dtoa_r+0x91c>
 800ab58:	f1c0 0320 	rsb	r3, r0, #32
 800ab5c:	2b04      	cmp	r3, #4
 800ab5e:	dd7f      	ble.n	800ac60 <_dtoa_r+0x918>
 800ab60:	f1c0 001c 	rsb	r0, r0, #28
 800ab64:	9b04      	ldr	r3, [sp, #16]
 800ab66:	4403      	add	r3, r0
 800ab68:	4480      	add	r8, r0
 800ab6a:	4405      	add	r5, r0
 800ab6c:	9304      	str	r3, [sp, #16]
 800ab6e:	f1b8 0f00 	cmp.w	r8, #0
 800ab72:	dd05      	ble.n	800ab80 <_dtoa_r+0x838>
 800ab74:	4659      	mov	r1, fp
 800ab76:	4642      	mov	r2, r8
 800ab78:	4620      	mov	r0, r4
 800ab7a:	f000 fce9 	bl	800b550 <__lshift>
 800ab7e:	4683      	mov	fp, r0
 800ab80:	9b04      	ldr	r3, [sp, #16]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	dd05      	ble.n	800ab92 <_dtoa_r+0x84a>
 800ab86:	4631      	mov	r1, r6
 800ab88:	461a      	mov	r2, r3
 800ab8a:	4620      	mov	r0, r4
 800ab8c:	f000 fce0 	bl	800b550 <__lshift>
 800ab90:	4606      	mov	r6, r0
 800ab92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d069      	beq.n	800ac6c <_dtoa_r+0x924>
 800ab98:	4631      	mov	r1, r6
 800ab9a:	4658      	mov	r0, fp
 800ab9c:	f000 fd44 	bl	800b628 <__mcmp>
 800aba0:	2800      	cmp	r0, #0
 800aba2:	da63      	bge.n	800ac6c <_dtoa_r+0x924>
 800aba4:	2300      	movs	r3, #0
 800aba6:	4659      	mov	r1, fp
 800aba8:	220a      	movs	r2, #10
 800abaa:	4620      	mov	r0, r4
 800abac:	f000 fb20 	bl	800b1f0 <__multadd>
 800abb0:	9b08      	ldr	r3, [sp, #32]
 800abb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800abb6:	4683      	mov	fp, r0
 800abb8:	2b00      	cmp	r3, #0
 800abba:	f000 818f 	beq.w	800aedc <_dtoa_r+0xb94>
 800abbe:	4639      	mov	r1, r7
 800abc0:	2300      	movs	r3, #0
 800abc2:	220a      	movs	r2, #10
 800abc4:	4620      	mov	r0, r4
 800abc6:	f000 fb13 	bl	800b1f0 <__multadd>
 800abca:	f1b9 0f00 	cmp.w	r9, #0
 800abce:	4607      	mov	r7, r0
 800abd0:	f300 808e 	bgt.w	800acf0 <_dtoa_r+0x9a8>
 800abd4:	9b05      	ldr	r3, [sp, #20]
 800abd6:	2b02      	cmp	r3, #2
 800abd8:	dc50      	bgt.n	800ac7c <_dtoa_r+0x934>
 800abda:	e089      	b.n	800acf0 <_dtoa_r+0x9a8>
 800abdc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800abde:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800abe2:	e75d      	b.n	800aaa0 <_dtoa_r+0x758>
 800abe4:	9b01      	ldr	r3, [sp, #4]
 800abe6:	1e5e      	subs	r6, r3, #1
 800abe8:	9b06      	ldr	r3, [sp, #24]
 800abea:	42b3      	cmp	r3, r6
 800abec:	bfbf      	itttt	lt
 800abee:	9b06      	ldrlt	r3, [sp, #24]
 800abf0:	9606      	strlt	r6, [sp, #24]
 800abf2:	1af2      	sublt	r2, r6, r3
 800abf4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800abf6:	bfb6      	itet	lt
 800abf8:	189b      	addlt	r3, r3, r2
 800abfa:	1b9e      	subge	r6, r3, r6
 800abfc:	930d      	strlt	r3, [sp, #52]	; 0x34
 800abfe:	9b01      	ldr	r3, [sp, #4]
 800ac00:	bfb8      	it	lt
 800ac02:	2600      	movlt	r6, #0
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	bfb5      	itete	lt
 800ac08:	eba8 0503 	sublt.w	r5, r8, r3
 800ac0c:	9b01      	ldrge	r3, [sp, #4]
 800ac0e:	2300      	movlt	r3, #0
 800ac10:	4645      	movge	r5, r8
 800ac12:	e747      	b.n	800aaa4 <_dtoa_r+0x75c>
 800ac14:	9e06      	ldr	r6, [sp, #24]
 800ac16:	9f08      	ldr	r7, [sp, #32]
 800ac18:	4645      	mov	r5, r8
 800ac1a:	e74c      	b.n	800aab6 <_dtoa_r+0x76e>
 800ac1c:	9a06      	ldr	r2, [sp, #24]
 800ac1e:	e775      	b.n	800ab0c <_dtoa_r+0x7c4>
 800ac20:	9b05      	ldr	r3, [sp, #20]
 800ac22:	2b01      	cmp	r3, #1
 800ac24:	dc18      	bgt.n	800ac58 <_dtoa_r+0x910>
 800ac26:	9b02      	ldr	r3, [sp, #8]
 800ac28:	b9b3      	cbnz	r3, 800ac58 <_dtoa_r+0x910>
 800ac2a:	9b03      	ldr	r3, [sp, #12]
 800ac2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac30:	b9a3      	cbnz	r3, 800ac5c <_dtoa_r+0x914>
 800ac32:	9b03      	ldr	r3, [sp, #12]
 800ac34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ac38:	0d1b      	lsrs	r3, r3, #20
 800ac3a:	051b      	lsls	r3, r3, #20
 800ac3c:	b12b      	cbz	r3, 800ac4a <_dtoa_r+0x902>
 800ac3e:	9b04      	ldr	r3, [sp, #16]
 800ac40:	3301      	adds	r3, #1
 800ac42:	9304      	str	r3, [sp, #16]
 800ac44:	f108 0801 	add.w	r8, r8, #1
 800ac48:	2301      	movs	r3, #1
 800ac4a:	9306      	str	r3, [sp, #24]
 800ac4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	f47f af74 	bne.w	800ab3c <_dtoa_r+0x7f4>
 800ac54:	2001      	movs	r0, #1
 800ac56:	e779      	b.n	800ab4c <_dtoa_r+0x804>
 800ac58:	2300      	movs	r3, #0
 800ac5a:	e7f6      	b.n	800ac4a <_dtoa_r+0x902>
 800ac5c:	9b02      	ldr	r3, [sp, #8]
 800ac5e:	e7f4      	b.n	800ac4a <_dtoa_r+0x902>
 800ac60:	d085      	beq.n	800ab6e <_dtoa_r+0x826>
 800ac62:	4618      	mov	r0, r3
 800ac64:	301c      	adds	r0, #28
 800ac66:	e77d      	b.n	800ab64 <_dtoa_r+0x81c>
 800ac68:	40240000 	.word	0x40240000
 800ac6c:	9b01      	ldr	r3, [sp, #4]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	dc38      	bgt.n	800ace4 <_dtoa_r+0x99c>
 800ac72:	9b05      	ldr	r3, [sp, #20]
 800ac74:	2b02      	cmp	r3, #2
 800ac76:	dd35      	ble.n	800ace4 <_dtoa_r+0x99c>
 800ac78:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ac7c:	f1b9 0f00 	cmp.w	r9, #0
 800ac80:	d10d      	bne.n	800ac9e <_dtoa_r+0x956>
 800ac82:	4631      	mov	r1, r6
 800ac84:	464b      	mov	r3, r9
 800ac86:	2205      	movs	r2, #5
 800ac88:	4620      	mov	r0, r4
 800ac8a:	f000 fab1 	bl	800b1f0 <__multadd>
 800ac8e:	4601      	mov	r1, r0
 800ac90:	4606      	mov	r6, r0
 800ac92:	4658      	mov	r0, fp
 800ac94:	f000 fcc8 	bl	800b628 <__mcmp>
 800ac98:	2800      	cmp	r0, #0
 800ac9a:	f73f adbd 	bgt.w	800a818 <_dtoa_r+0x4d0>
 800ac9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aca0:	9d00      	ldr	r5, [sp, #0]
 800aca2:	ea6f 0a03 	mvn.w	sl, r3
 800aca6:	f04f 0800 	mov.w	r8, #0
 800acaa:	4631      	mov	r1, r6
 800acac:	4620      	mov	r0, r4
 800acae:	f000 fa7d 	bl	800b1ac <_Bfree>
 800acb2:	2f00      	cmp	r7, #0
 800acb4:	f43f aeb4 	beq.w	800aa20 <_dtoa_r+0x6d8>
 800acb8:	f1b8 0f00 	cmp.w	r8, #0
 800acbc:	d005      	beq.n	800acca <_dtoa_r+0x982>
 800acbe:	45b8      	cmp	r8, r7
 800acc0:	d003      	beq.n	800acca <_dtoa_r+0x982>
 800acc2:	4641      	mov	r1, r8
 800acc4:	4620      	mov	r0, r4
 800acc6:	f000 fa71 	bl	800b1ac <_Bfree>
 800acca:	4639      	mov	r1, r7
 800accc:	4620      	mov	r0, r4
 800acce:	f000 fa6d 	bl	800b1ac <_Bfree>
 800acd2:	e6a5      	b.n	800aa20 <_dtoa_r+0x6d8>
 800acd4:	2600      	movs	r6, #0
 800acd6:	4637      	mov	r7, r6
 800acd8:	e7e1      	b.n	800ac9e <_dtoa_r+0x956>
 800acda:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800acdc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ace0:	4637      	mov	r7, r6
 800ace2:	e599      	b.n	800a818 <_dtoa_r+0x4d0>
 800ace4:	9b08      	ldr	r3, [sp, #32]
 800ace6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800acea:	2b00      	cmp	r3, #0
 800acec:	f000 80fd 	beq.w	800aeea <_dtoa_r+0xba2>
 800acf0:	2d00      	cmp	r5, #0
 800acf2:	dd05      	ble.n	800ad00 <_dtoa_r+0x9b8>
 800acf4:	4639      	mov	r1, r7
 800acf6:	462a      	mov	r2, r5
 800acf8:	4620      	mov	r0, r4
 800acfa:	f000 fc29 	bl	800b550 <__lshift>
 800acfe:	4607      	mov	r7, r0
 800ad00:	9b06      	ldr	r3, [sp, #24]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d05c      	beq.n	800adc0 <_dtoa_r+0xa78>
 800ad06:	6879      	ldr	r1, [r7, #4]
 800ad08:	4620      	mov	r0, r4
 800ad0a:	f000 fa0f 	bl	800b12c <_Balloc>
 800ad0e:	4605      	mov	r5, r0
 800ad10:	b928      	cbnz	r0, 800ad1e <_dtoa_r+0x9d6>
 800ad12:	4b80      	ldr	r3, [pc, #512]	; (800af14 <_dtoa_r+0xbcc>)
 800ad14:	4602      	mov	r2, r0
 800ad16:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ad1a:	f7ff bb2e 	b.w	800a37a <_dtoa_r+0x32>
 800ad1e:	693a      	ldr	r2, [r7, #16]
 800ad20:	3202      	adds	r2, #2
 800ad22:	0092      	lsls	r2, r2, #2
 800ad24:	f107 010c 	add.w	r1, r7, #12
 800ad28:	300c      	adds	r0, #12
 800ad2a:	f7fe fde1 	bl	80098f0 <memcpy>
 800ad2e:	2201      	movs	r2, #1
 800ad30:	4629      	mov	r1, r5
 800ad32:	4620      	mov	r0, r4
 800ad34:	f000 fc0c 	bl	800b550 <__lshift>
 800ad38:	9b00      	ldr	r3, [sp, #0]
 800ad3a:	3301      	adds	r3, #1
 800ad3c:	9301      	str	r3, [sp, #4]
 800ad3e:	9b00      	ldr	r3, [sp, #0]
 800ad40:	444b      	add	r3, r9
 800ad42:	9307      	str	r3, [sp, #28]
 800ad44:	9b02      	ldr	r3, [sp, #8]
 800ad46:	f003 0301 	and.w	r3, r3, #1
 800ad4a:	46b8      	mov	r8, r7
 800ad4c:	9306      	str	r3, [sp, #24]
 800ad4e:	4607      	mov	r7, r0
 800ad50:	9b01      	ldr	r3, [sp, #4]
 800ad52:	4631      	mov	r1, r6
 800ad54:	3b01      	subs	r3, #1
 800ad56:	4658      	mov	r0, fp
 800ad58:	9302      	str	r3, [sp, #8]
 800ad5a:	f7ff fa69 	bl	800a230 <quorem>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	3330      	adds	r3, #48	; 0x30
 800ad62:	9004      	str	r0, [sp, #16]
 800ad64:	4641      	mov	r1, r8
 800ad66:	4658      	mov	r0, fp
 800ad68:	9308      	str	r3, [sp, #32]
 800ad6a:	f000 fc5d 	bl	800b628 <__mcmp>
 800ad6e:	463a      	mov	r2, r7
 800ad70:	4681      	mov	r9, r0
 800ad72:	4631      	mov	r1, r6
 800ad74:	4620      	mov	r0, r4
 800ad76:	f000 fc73 	bl	800b660 <__mdiff>
 800ad7a:	68c2      	ldr	r2, [r0, #12]
 800ad7c:	9b08      	ldr	r3, [sp, #32]
 800ad7e:	4605      	mov	r5, r0
 800ad80:	bb02      	cbnz	r2, 800adc4 <_dtoa_r+0xa7c>
 800ad82:	4601      	mov	r1, r0
 800ad84:	4658      	mov	r0, fp
 800ad86:	f000 fc4f 	bl	800b628 <__mcmp>
 800ad8a:	9b08      	ldr	r3, [sp, #32]
 800ad8c:	4602      	mov	r2, r0
 800ad8e:	4629      	mov	r1, r5
 800ad90:	4620      	mov	r0, r4
 800ad92:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800ad96:	f000 fa09 	bl	800b1ac <_Bfree>
 800ad9a:	9b05      	ldr	r3, [sp, #20]
 800ad9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad9e:	9d01      	ldr	r5, [sp, #4]
 800ada0:	ea43 0102 	orr.w	r1, r3, r2
 800ada4:	9b06      	ldr	r3, [sp, #24]
 800ada6:	430b      	orrs	r3, r1
 800ada8:	9b08      	ldr	r3, [sp, #32]
 800adaa:	d10d      	bne.n	800adc8 <_dtoa_r+0xa80>
 800adac:	2b39      	cmp	r3, #57	; 0x39
 800adae:	d029      	beq.n	800ae04 <_dtoa_r+0xabc>
 800adb0:	f1b9 0f00 	cmp.w	r9, #0
 800adb4:	dd01      	ble.n	800adba <_dtoa_r+0xa72>
 800adb6:	9b04      	ldr	r3, [sp, #16]
 800adb8:	3331      	adds	r3, #49	; 0x31
 800adba:	9a02      	ldr	r2, [sp, #8]
 800adbc:	7013      	strb	r3, [r2, #0]
 800adbe:	e774      	b.n	800acaa <_dtoa_r+0x962>
 800adc0:	4638      	mov	r0, r7
 800adc2:	e7b9      	b.n	800ad38 <_dtoa_r+0x9f0>
 800adc4:	2201      	movs	r2, #1
 800adc6:	e7e2      	b.n	800ad8e <_dtoa_r+0xa46>
 800adc8:	f1b9 0f00 	cmp.w	r9, #0
 800adcc:	db06      	blt.n	800addc <_dtoa_r+0xa94>
 800adce:	9905      	ldr	r1, [sp, #20]
 800add0:	ea41 0909 	orr.w	r9, r1, r9
 800add4:	9906      	ldr	r1, [sp, #24]
 800add6:	ea59 0101 	orrs.w	r1, r9, r1
 800adda:	d120      	bne.n	800ae1e <_dtoa_r+0xad6>
 800addc:	2a00      	cmp	r2, #0
 800adde:	ddec      	ble.n	800adba <_dtoa_r+0xa72>
 800ade0:	4659      	mov	r1, fp
 800ade2:	2201      	movs	r2, #1
 800ade4:	4620      	mov	r0, r4
 800ade6:	9301      	str	r3, [sp, #4]
 800ade8:	f000 fbb2 	bl	800b550 <__lshift>
 800adec:	4631      	mov	r1, r6
 800adee:	4683      	mov	fp, r0
 800adf0:	f000 fc1a 	bl	800b628 <__mcmp>
 800adf4:	2800      	cmp	r0, #0
 800adf6:	9b01      	ldr	r3, [sp, #4]
 800adf8:	dc02      	bgt.n	800ae00 <_dtoa_r+0xab8>
 800adfa:	d1de      	bne.n	800adba <_dtoa_r+0xa72>
 800adfc:	07da      	lsls	r2, r3, #31
 800adfe:	d5dc      	bpl.n	800adba <_dtoa_r+0xa72>
 800ae00:	2b39      	cmp	r3, #57	; 0x39
 800ae02:	d1d8      	bne.n	800adb6 <_dtoa_r+0xa6e>
 800ae04:	9a02      	ldr	r2, [sp, #8]
 800ae06:	2339      	movs	r3, #57	; 0x39
 800ae08:	7013      	strb	r3, [r2, #0]
 800ae0a:	462b      	mov	r3, r5
 800ae0c:	461d      	mov	r5, r3
 800ae0e:	3b01      	subs	r3, #1
 800ae10:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ae14:	2a39      	cmp	r2, #57	; 0x39
 800ae16:	d050      	beq.n	800aeba <_dtoa_r+0xb72>
 800ae18:	3201      	adds	r2, #1
 800ae1a:	701a      	strb	r2, [r3, #0]
 800ae1c:	e745      	b.n	800acaa <_dtoa_r+0x962>
 800ae1e:	2a00      	cmp	r2, #0
 800ae20:	dd03      	ble.n	800ae2a <_dtoa_r+0xae2>
 800ae22:	2b39      	cmp	r3, #57	; 0x39
 800ae24:	d0ee      	beq.n	800ae04 <_dtoa_r+0xabc>
 800ae26:	3301      	adds	r3, #1
 800ae28:	e7c7      	b.n	800adba <_dtoa_r+0xa72>
 800ae2a:	9a01      	ldr	r2, [sp, #4]
 800ae2c:	9907      	ldr	r1, [sp, #28]
 800ae2e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ae32:	428a      	cmp	r2, r1
 800ae34:	d02a      	beq.n	800ae8c <_dtoa_r+0xb44>
 800ae36:	4659      	mov	r1, fp
 800ae38:	2300      	movs	r3, #0
 800ae3a:	220a      	movs	r2, #10
 800ae3c:	4620      	mov	r0, r4
 800ae3e:	f000 f9d7 	bl	800b1f0 <__multadd>
 800ae42:	45b8      	cmp	r8, r7
 800ae44:	4683      	mov	fp, r0
 800ae46:	f04f 0300 	mov.w	r3, #0
 800ae4a:	f04f 020a 	mov.w	r2, #10
 800ae4e:	4641      	mov	r1, r8
 800ae50:	4620      	mov	r0, r4
 800ae52:	d107      	bne.n	800ae64 <_dtoa_r+0xb1c>
 800ae54:	f000 f9cc 	bl	800b1f0 <__multadd>
 800ae58:	4680      	mov	r8, r0
 800ae5a:	4607      	mov	r7, r0
 800ae5c:	9b01      	ldr	r3, [sp, #4]
 800ae5e:	3301      	adds	r3, #1
 800ae60:	9301      	str	r3, [sp, #4]
 800ae62:	e775      	b.n	800ad50 <_dtoa_r+0xa08>
 800ae64:	f000 f9c4 	bl	800b1f0 <__multadd>
 800ae68:	4639      	mov	r1, r7
 800ae6a:	4680      	mov	r8, r0
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	220a      	movs	r2, #10
 800ae70:	4620      	mov	r0, r4
 800ae72:	f000 f9bd 	bl	800b1f0 <__multadd>
 800ae76:	4607      	mov	r7, r0
 800ae78:	e7f0      	b.n	800ae5c <_dtoa_r+0xb14>
 800ae7a:	f1b9 0f00 	cmp.w	r9, #0
 800ae7e:	9a00      	ldr	r2, [sp, #0]
 800ae80:	bfcc      	ite	gt
 800ae82:	464d      	movgt	r5, r9
 800ae84:	2501      	movle	r5, #1
 800ae86:	4415      	add	r5, r2
 800ae88:	f04f 0800 	mov.w	r8, #0
 800ae8c:	4659      	mov	r1, fp
 800ae8e:	2201      	movs	r2, #1
 800ae90:	4620      	mov	r0, r4
 800ae92:	9301      	str	r3, [sp, #4]
 800ae94:	f000 fb5c 	bl	800b550 <__lshift>
 800ae98:	4631      	mov	r1, r6
 800ae9a:	4683      	mov	fp, r0
 800ae9c:	f000 fbc4 	bl	800b628 <__mcmp>
 800aea0:	2800      	cmp	r0, #0
 800aea2:	dcb2      	bgt.n	800ae0a <_dtoa_r+0xac2>
 800aea4:	d102      	bne.n	800aeac <_dtoa_r+0xb64>
 800aea6:	9b01      	ldr	r3, [sp, #4]
 800aea8:	07db      	lsls	r3, r3, #31
 800aeaa:	d4ae      	bmi.n	800ae0a <_dtoa_r+0xac2>
 800aeac:	462b      	mov	r3, r5
 800aeae:	461d      	mov	r5, r3
 800aeb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aeb4:	2a30      	cmp	r2, #48	; 0x30
 800aeb6:	d0fa      	beq.n	800aeae <_dtoa_r+0xb66>
 800aeb8:	e6f7      	b.n	800acaa <_dtoa_r+0x962>
 800aeba:	9a00      	ldr	r2, [sp, #0]
 800aebc:	429a      	cmp	r2, r3
 800aebe:	d1a5      	bne.n	800ae0c <_dtoa_r+0xac4>
 800aec0:	f10a 0a01 	add.w	sl, sl, #1
 800aec4:	2331      	movs	r3, #49	; 0x31
 800aec6:	e779      	b.n	800adbc <_dtoa_r+0xa74>
 800aec8:	4b13      	ldr	r3, [pc, #76]	; (800af18 <_dtoa_r+0xbd0>)
 800aeca:	f7ff baaf 	b.w	800a42c <_dtoa_r+0xe4>
 800aece:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	f47f aa86 	bne.w	800a3e2 <_dtoa_r+0x9a>
 800aed6:	4b11      	ldr	r3, [pc, #68]	; (800af1c <_dtoa_r+0xbd4>)
 800aed8:	f7ff baa8 	b.w	800a42c <_dtoa_r+0xe4>
 800aedc:	f1b9 0f00 	cmp.w	r9, #0
 800aee0:	dc03      	bgt.n	800aeea <_dtoa_r+0xba2>
 800aee2:	9b05      	ldr	r3, [sp, #20]
 800aee4:	2b02      	cmp	r3, #2
 800aee6:	f73f aec9 	bgt.w	800ac7c <_dtoa_r+0x934>
 800aeea:	9d00      	ldr	r5, [sp, #0]
 800aeec:	4631      	mov	r1, r6
 800aeee:	4658      	mov	r0, fp
 800aef0:	f7ff f99e 	bl	800a230 <quorem>
 800aef4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800aef8:	f805 3b01 	strb.w	r3, [r5], #1
 800aefc:	9a00      	ldr	r2, [sp, #0]
 800aefe:	1aaa      	subs	r2, r5, r2
 800af00:	4591      	cmp	r9, r2
 800af02:	ddba      	ble.n	800ae7a <_dtoa_r+0xb32>
 800af04:	4659      	mov	r1, fp
 800af06:	2300      	movs	r3, #0
 800af08:	220a      	movs	r2, #10
 800af0a:	4620      	mov	r0, r4
 800af0c:	f000 f970 	bl	800b1f0 <__multadd>
 800af10:	4683      	mov	fp, r0
 800af12:	e7eb      	b.n	800aeec <_dtoa_r+0xba4>
 800af14:	0800c783 	.word	0x0800c783
 800af18:	0800c6dc 	.word	0x0800c6dc
 800af1c:	0800c700 	.word	0x0800c700

0800af20 <std>:
 800af20:	2300      	movs	r3, #0
 800af22:	b510      	push	{r4, lr}
 800af24:	4604      	mov	r4, r0
 800af26:	e9c0 3300 	strd	r3, r3, [r0]
 800af2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af2e:	6083      	str	r3, [r0, #8]
 800af30:	8181      	strh	r1, [r0, #12]
 800af32:	6643      	str	r3, [r0, #100]	; 0x64
 800af34:	81c2      	strh	r2, [r0, #14]
 800af36:	6183      	str	r3, [r0, #24]
 800af38:	4619      	mov	r1, r3
 800af3a:	2208      	movs	r2, #8
 800af3c:	305c      	adds	r0, #92	; 0x5c
 800af3e:	f7fe fce5 	bl	800990c <memset>
 800af42:	4b05      	ldr	r3, [pc, #20]	; (800af58 <std+0x38>)
 800af44:	6263      	str	r3, [r4, #36]	; 0x24
 800af46:	4b05      	ldr	r3, [pc, #20]	; (800af5c <std+0x3c>)
 800af48:	62a3      	str	r3, [r4, #40]	; 0x28
 800af4a:	4b05      	ldr	r3, [pc, #20]	; (800af60 <std+0x40>)
 800af4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800af4e:	4b05      	ldr	r3, [pc, #20]	; (800af64 <std+0x44>)
 800af50:	6224      	str	r4, [r4, #32]
 800af52:	6323      	str	r3, [r4, #48]	; 0x30
 800af54:	bd10      	pop	{r4, pc}
 800af56:	bf00      	nop
 800af58:	0800bf29 	.word	0x0800bf29
 800af5c:	0800bf4b 	.word	0x0800bf4b
 800af60:	0800bf83 	.word	0x0800bf83
 800af64:	0800bfa7 	.word	0x0800bfa7

0800af68 <_cleanup_r>:
 800af68:	4901      	ldr	r1, [pc, #4]	; (800af70 <_cleanup_r+0x8>)
 800af6a:	f000 b8af 	b.w	800b0cc <_fwalk_reent>
 800af6e:	bf00      	nop
 800af70:	0800c2bd 	.word	0x0800c2bd

0800af74 <__sfmoreglue>:
 800af74:	b570      	push	{r4, r5, r6, lr}
 800af76:	1e4a      	subs	r2, r1, #1
 800af78:	2568      	movs	r5, #104	; 0x68
 800af7a:	4355      	muls	r5, r2
 800af7c:	460e      	mov	r6, r1
 800af7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800af82:	f000 fcb1 	bl	800b8e8 <_malloc_r>
 800af86:	4604      	mov	r4, r0
 800af88:	b140      	cbz	r0, 800af9c <__sfmoreglue+0x28>
 800af8a:	2100      	movs	r1, #0
 800af8c:	e9c0 1600 	strd	r1, r6, [r0]
 800af90:	300c      	adds	r0, #12
 800af92:	60a0      	str	r0, [r4, #8]
 800af94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800af98:	f7fe fcb8 	bl	800990c <memset>
 800af9c:	4620      	mov	r0, r4
 800af9e:	bd70      	pop	{r4, r5, r6, pc}

0800afa0 <__sfp_lock_acquire>:
 800afa0:	4801      	ldr	r0, [pc, #4]	; (800afa8 <__sfp_lock_acquire+0x8>)
 800afa2:	f000 b8b8 	b.w	800b116 <__retarget_lock_acquire_recursive>
 800afa6:	bf00      	nop
 800afa8:	20001f70 	.word	0x20001f70

0800afac <__sfp_lock_release>:
 800afac:	4801      	ldr	r0, [pc, #4]	; (800afb4 <__sfp_lock_release+0x8>)
 800afae:	f000 b8b3 	b.w	800b118 <__retarget_lock_release_recursive>
 800afb2:	bf00      	nop
 800afb4:	20001f70 	.word	0x20001f70

0800afb8 <__sinit_lock_acquire>:
 800afb8:	4801      	ldr	r0, [pc, #4]	; (800afc0 <__sinit_lock_acquire+0x8>)
 800afba:	f000 b8ac 	b.w	800b116 <__retarget_lock_acquire_recursive>
 800afbe:	bf00      	nop
 800afc0:	20001f6b 	.word	0x20001f6b

0800afc4 <__sinit_lock_release>:
 800afc4:	4801      	ldr	r0, [pc, #4]	; (800afcc <__sinit_lock_release+0x8>)
 800afc6:	f000 b8a7 	b.w	800b118 <__retarget_lock_release_recursive>
 800afca:	bf00      	nop
 800afcc:	20001f6b 	.word	0x20001f6b

0800afd0 <__sinit>:
 800afd0:	b510      	push	{r4, lr}
 800afd2:	4604      	mov	r4, r0
 800afd4:	f7ff fff0 	bl	800afb8 <__sinit_lock_acquire>
 800afd8:	69a3      	ldr	r3, [r4, #24]
 800afda:	b11b      	cbz	r3, 800afe4 <__sinit+0x14>
 800afdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afe0:	f7ff bff0 	b.w	800afc4 <__sinit_lock_release>
 800afe4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800afe8:	6523      	str	r3, [r4, #80]	; 0x50
 800afea:	4b13      	ldr	r3, [pc, #76]	; (800b038 <__sinit+0x68>)
 800afec:	4a13      	ldr	r2, [pc, #76]	; (800b03c <__sinit+0x6c>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	62a2      	str	r2, [r4, #40]	; 0x28
 800aff2:	42a3      	cmp	r3, r4
 800aff4:	bf04      	itt	eq
 800aff6:	2301      	moveq	r3, #1
 800aff8:	61a3      	streq	r3, [r4, #24]
 800affa:	4620      	mov	r0, r4
 800affc:	f000 f820 	bl	800b040 <__sfp>
 800b000:	6060      	str	r0, [r4, #4]
 800b002:	4620      	mov	r0, r4
 800b004:	f000 f81c 	bl	800b040 <__sfp>
 800b008:	60a0      	str	r0, [r4, #8]
 800b00a:	4620      	mov	r0, r4
 800b00c:	f000 f818 	bl	800b040 <__sfp>
 800b010:	2200      	movs	r2, #0
 800b012:	60e0      	str	r0, [r4, #12]
 800b014:	2104      	movs	r1, #4
 800b016:	6860      	ldr	r0, [r4, #4]
 800b018:	f7ff ff82 	bl	800af20 <std>
 800b01c:	68a0      	ldr	r0, [r4, #8]
 800b01e:	2201      	movs	r2, #1
 800b020:	2109      	movs	r1, #9
 800b022:	f7ff ff7d 	bl	800af20 <std>
 800b026:	68e0      	ldr	r0, [r4, #12]
 800b028:	2202      	movs	r2, #2
 800b02a:	2112      	movs	r1, #18
 800b02c:	f7ff ff78 	bl	800af20 <std>
 800b030:	2301      	movs	r3, #1
 800b032:	61a3      	str	r3, [r4, #24]
 800b034:	e7d2      	b.n	800afdc <__sinit+0xc>
 800b036:	bf00      	nop
 800b038:	0800c6c8 	.word	0x0800c6c8
 800b03c:	0800af69 	.word	0x0800af69

0800b040 <__sfp>:
 800b040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b042:	4607      	mov	r7, r0
 800b044:	f7ff ffac 	bl	800afa0 <__sfp_lock_acquire>
 800b048:	4b1e      	ldr	r3, [pc, #120]	; (800b0c4 <__sfp+0x84>)
 800b04a:	681e      	ldr	r6, [r3, #0]
 800b04c:	69b3      	ldr	r3, [r6, #24]
 800b04e:	b913      	cbnz	r3, 800b056 <__sfp+0x16>
 800b050:	4630      	mov	r0, r6
 800b052:	f7ff ffbd 	bl	800afd0 <__sinit>
 800b056:	3648      	adds	r6, #72	; 0x48
 800b058:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b05c:	3b01      	subs	r3, #1
 800b05e:	d503      	bpl.n	800b068 <__sfp+0x28>
 800b060:	6833      	ldr	r3, [r6, #0]
 800b062:	b30b      	cbz	r3, 800b0a8 <__sfp+0x68>
 800b064:	6836      	ldr	r6, [r6, #0]
 800b066:	e7f7      	b.n	800b058 <__sfp+0x18>
 800b068:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b06c:	b9d5      	cbnz	r5, 800b0a4 <__sfp+0x64>
 800b06e:	4b16      	ldr	r3, [pc, #88]	; (800b0c8 <__sfp+0x88>)
 800b070:	60e3      	str	r3, [r4, #12]
 800b072:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b076:	6665      	str	r5, [r4, #100]	; 0x64
 800b078:	f000 f84c 	bl	800b114 <__retarget_lock_init_recursive>
 800b07c:	f7ff ff96 	bl	800afac <__sfp_lock_release>
 800b080:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b084:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b088:	6025      	str	r5, [r4, #0]
 800b08a:	61a5      	str	r5, [r4, #24]
 800b08c:	2208      	movs	r2, #8
 800b08e:	4629      	mov	r1, r5
 800b090:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b094:	f7fe fc3a 	bl	800990c <memset>
 800b098:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b09c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b0a0:	4620      	mov	r0, r4
 800b0a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0a4:	3468      	adds	r4, #104	; 0x68
 800b0a6:	e7d9      	b.n	800b05c <__sfp+0x1c>
 800b0a8:	2104      	movs	r1, #4
 800b0aa:	4638      	mov	r0, r7
 800b0ac:	f7ff ff62 	bl	800af74 <__sfmoreglue>
 800b0b0:	4604      	mov	r4, r0
 800b0b2:	6030      	str	r0, [r6, #0]
 800b0b4:	2800      	cmp	r0, #0
 800b0b6:	d1d5      	bne.n	800b064 <__sfp+0x24>
 800b0b8:	f7ff ff78 	bl	800afac <__sfp_lock_release>
 800b0bc:	230c      	movs	r3, #12
 800b0be:	603b      	str	r3, [r7, #0]
 800b0c0:	e7ee      	b.n	800b0a0 <__sfp+0x60>
 800b0c2:	bf00      	nop
 800b0c4:	0800c6c8 	.word	0x0800c6c8
 800b0c8:	ffff0001 	.word	0xffff0001

0800b0cc <_fwalk_reent>:
 800b0cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0d0:	4606      	mov	r6, r0
 800b0d2:	4688      	mov	r8, r1
 800b0d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b0d8:	2700      	movs	r7, #0
 800b0da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b0de:	f1b9 0901 	subs.w	r9, r9, #1
 800b0e2:	d505      	bpl.n	800b0f0 <_fwalk_reent+0x24>
 800b0e4:	6824      	ldr	r4, [r4, #0]
 800b0e6:	2c00      	cmp	r4, #0
 800b0e8:	d1f7      	bne.n	800b0da <_fwalk_reent+0xe>
 800b0ea:	4638      	mov	r0, r7
 800b0ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0f0:	89ab      	ldrh	r3, [r5, #12]
 800b0f2:	2b01      	cmp	r3, #1
 800b0f4:	d907      	bls.n	800b106 <_fwalk_reent+0x3a>
 800b0f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b0fa:	3301      	adds	r3, #1
 800b0fc:	d003      	beq.n	800b106 <_fwalk_reent+0x3a>
 800b0fe:	4629      	mov	r1, r5
 800b100:	4630      	mov	r0, r6
 800b102:	47c0      	blx	r8
 800b104:	4307      	orrs	r7, r0
 800b106:	3568      	adds	r5, #104	; 0x68
 800b108:	e7e9      	b.n	800b0de <_fwalk_reent+0x12>
	...

0800b10c <_localeconv_r>:
 800b10c:	4800      	ldr	r0, [pc, #0]	; (800b110 <_localeconv_r+0x4>)
 800b10e:	4770      	bx	lr
 800b110:	200002d4 	.word	0x200002d4

0800b114 <__retarget_lock_init_recursive>:
 800b114:	4770      	bx	lr

0800b116 <__retarget_lock_acquire_recursive>:
 800b116:	4770      	bx	lr

0800b118 <__retarget_lock_release_recursive>:
 800b118:	4770      	bx	lr
	...

0800b11c <malloc>:
 800b11c:	4b02      	ldr	r3, [pc, #8]	; (800b128 <malloc+0xc>)
 800b11e:	4601      	mov	r1, r0
 800b120:	6818      	ldr	r0, [r3, #0]
 800b122:	f000 bbe1 	b.w	800b8e8 <_malloc_r>
 800b126:	bf00      	nop
 800b128:	20000180 	.word	0x20000180

0800b12c <_Balloc>:
 800b12c:	b570      	push	{r4, r5, r6, lr}
 800b12e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b130:	4604      	mov	r4, r0
 800b132:	460d      	mov	r5, r1
 800b134:	b976      	cbnz	r6, 800b154 <_Balloc+0x28>
 800b136:	2010      	movs	r0, #16
 800b138:	f7ff fff0 	bl	800b11c <malloc>
 800b13c:	4602      	mov	r2, r0
 800b13e:	6260      	str	r0, [r4, #36]	; 0x24
 800b140:	b920      	cbnz	r0, 800b14c <_Balloc+0x20>
 800b142:	4b18      	ldr	r3, [pc, #96]	; (800b1a4 <_Balloc+0x78>)
 800b144:	4818      	ldr	r0, [pc, #96]	; (800b1a8 <_Balloc+0x7c>)
 800b146:	2166      	movs	r1, #102	; 0x66
 800b148:	f001 f804 	bl	800c154 <__assert_func>
 800b14c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b150:	6006      	str	r6, [r0, #0]
 800b152:	60c6      	str	r6, [r0, #12]
 800b154:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b156:	68f3      	ldr	r3, [r6, #12]
 800b158:	b183      	cbz	r3, 800b17c <_Balloc+0x50>
 800b15a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b15c:	68db      	ldr	r3, [r3, #12]
 800b15e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b162:	b9b8      	cbnz	r0, 800b194 <_Balloc+0x68>
 800b164:	2101      	movs	r1, #1
 800b166:	fa01 f605 	lsl.w	r6, r1, r5
 800b16a:	1d72      	adds	r2, r6, #5
 800b16c:	0092      	lsls	r2, r2, #2
 800b16e:	4620      	mov	r0, r4
 800b170:	f000 fb5a 	bl	800b828 <_calloc_r>
 800b174:	b160      	cbz	r0, 800b190 <_Balloc+0x64>
 800b176:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b17a:	e00e      	b.n	800b19a <_Balloc+0x6e>
 800b17c:	2221      	movs	r2, #33	; 0x21
 800b17e:	2104      	movs	r1, #4
 800b180:	4620      	mov	r0, r4
 800b182:	f000 fb51 	bl	800b828 <_calloc_r>
 800b186:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b188:	60f0      	str	r0, [r6, #12]
 800b18a:	68db      	ldr	r3, [r3, #12]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d1e4      	bne.n	800b15a <_Balloc+0x2e>
 800b190:	2000      	movs	r0, #0
 800b192:	bd70      	pop	{r4, r5, r6, pc}
 800b194:	6802      	ldr	r2, [r0, #0]
 800b196:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b19a:	2300      	movs	r3, #0
 800b19c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b1a0:	e7f7      	b.n	800b192 <_Balloc+0x66>
 800b1a2:	bf00      	nop
 800b1a4:	0800c70d 	.word	0x0800c70d
 800b1a8:	0800c7f4 	.word	0x0800c7f4

0800b1ac <_Bfree>:
 800b1ac:	b570      	push	{r4, r5, r6, lr}
 800b1ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b1b0:	4605      	mov	r5, r0
 800b1b2:	460c      	mov	r4, r1
 800b1b4:	b976      	cbnz	r6, 800b1d4 <_Bfree+0x28>
 800b1b6:	2010      	movs	r0, #16
 800b1b8:	f7ff ffb0 	bl	800b11c <malloc>
 800b1bc:	4602      	mov	r2, r0
 800b1be:	6268      	str	r0, [r5, #36]	; 0x24
 800b1c0:	b920      	cbnz	r0, 800b1cc <_Bfree+0x20>
 800b1c2:	4b09      	ldr	r3, [pc, #36]	; (800b1e8 <_Bfree+0x3c>)
 800b1c4:	4809      	ldr	r0, [pc, #36]	; (800b1ec <_Bfree+0x40>)
 800b1c6:	218a      	movs	r1, #138	; 0x8a
 800b1c8:	f000 ffc4 	bl	800c154 <__assert_func>
 800b1cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b1d0:	6006      	str	r6, [r0, #0]
 800b1d2:	60c6      	str	r6, [r0, #12]
 800b1d4:	b13c      	cbz	r4, 800b1e6 <_Bfree+0x3a>
 800b1d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b1d8:	6862      	ldr	r2, [r4, #4]
 800b1da:	68db      	ldr	r3, [r3, #12]
 800b1dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b1e0:	6021      	str	r1, [r4, #0]
 800b1e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b1e6:	bd70      	pop	{r4, r5, r6, pc}
 800b1e8:	0800c70d 	.word	0x0800c70d
 800b1ec:	0800c7f4 	.word	0x0800c7f4

0800b1f0 <__multadd>:
 800b1f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1f4:	690e      	ldr	r6, [r1, #16]
 800b1f6:	4607      	mov	r7, r0
 800b1f8:	4698      	mov	r8, r3
 800b1fa:	460c      	mov	r4, r1
 800b1fc:	f101 0014 	add.w	r0, r1, #20
 800b200:	2300      	movs	r3, #0
 800b202:	6805      	ldr	r5, [r0, #0]
 800b204:	b2a9      	uxth	r1, r5
 800b206:	fb02 8101 	mla	r1, r2, r1, r8
 800b20a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b20e:	0c2d      	lsrs	r5, r5, #16
 800b210:	fb02 c505 	mla	r5, r2, r5, ip
 800b214:	b289      	uxth	r1, r1
 800b216:	3301      	adds	r3, #1
 800b218:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b21c:	429e      	cmp	r6, r3
 800b21e:	f840 1b04 	str.w	r1, [r0], #4
 800b222:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b226:	dcec      	bgt.n	800b202 <__multadd+0x12>
 800b228:	f1b8 0f00 	cmp.w	r8, #0
 800b22c:	d022      	beq.n	800b274 <__multadd+0x84>
 800b22e:	68a3      	ldr	r3, [r4, #8]
 800b230:	42b3      	cmp	r3, r6
 800b232:	dc19      	bgt.n	800b268 <__multadd+0x78>
 800b234:	6861      	ldr	r1, [r4, #4]
 800b236:	4638      	mov	r0, r7
 800b238:	3101      	adds	r1, #1
 800b23a:	f7ff ff77 	bl	800b12c <_Balloc>
 800b23e:	4605      	mov	r5, r0
 800b240:	b928      	cbnz	r0, 800b24e <__multadd+0x5e>
 800b242:	4602      	mov	r2, r0
 800b244:	4b0d      	ldr	r3, [pc, #52]	; (800b27c <__multadd+0x8c>)
 800b246:	480e      	ldr	r0, [pc, #56]	; (800b280 <__multadd+0x90>)
 800b248:	21b5      	movs	r1, #181	; 0xb5
 800b24a:	f000 ff83 	bl	800c154 <__assert_func>
 800b24e:	6922      	ldr	r2, [r4, #16]
 800b250:	3202      	adds	r2, #2
 800b252:	f104 010c 	add.w	r1, r4, #12
 800b256:	0092      	lsls	r2, r2, #2
 800b258:	300c      	adds	r0, #12
 800b25a:	f7fe fb49 	bl	80098f0 <memcpy>
 800b25e:	4621      	mov	r1, r4
 800b260:	4638      	mov	r0, r7
 800b262:	f7ff ffa3 	bl	800b1ac <_Bfree>
 800b266:	462c      	mov	r4, r5
 800b268:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b26c:	3601      	adds	r6, #1
 800b26e:	f8c3 8014 	str.w	r8, [r3, #20]
 800b272:	6126      	str	r6, [r4, #16]
 800b274:	4620      	mov	r0, r4
 800b276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b27a:	bf00      	nop
 800b27c:	0800c783 	.word	0x0800c783
 800b280:	0800c7f4 	.word	0x0800c7f4

0800b284 <__hi0bits>:
 800b284:	0c03      	lsrs	r3, r0, #16
 800b286:	041b      	lsls	r3, r3, #16
 800b288:	b9d3      	cbnz	r3, 800b2c0 <__hi0bits+0x3c>
 800b28a:	0400      	lsls	r0, r0, #16
 800b28c:	2310      	movs	r3, #16
 800b28e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b292:	bf04      	itt	eq
 800b294:	0200      	lsleq	r0, r0, #8
 800b296:	3308      	addeq	r3, #8
 800b298:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b29c:	bf04      	itt	eq
 800b29e:	0100      	lsleq	r0, r0, #4
 800b2a0:	3304      	addeq	r3, #4
 800b2a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b2a6:	bf04      	itt	eq
 800b2a8:	0080      	lsleq	r0, r0, #2
 800b2aa:	3302      	addeq	r3, #2
 800b2ac:	2800      	cmp	r0, #0
 800b2ae:	db05      	blt.n	800b2bc <__hi0bits+0x38>
 800b2b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b2b4:	f103 0301 	add.w	r3, r3, #1
 800b2b8:	bf08      	it	eq
 800b2ba:	2320      	moveq	r3, #32
 800b2bc:	4618      	mov	r0, r3
 800b2be:	4770      	bx	lr
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	e7e4      	b.n	800b28e <__hi0bits+0xa>

0800b2c4 <__lo0bits>:
 800b2c4:	6803      	ldr	r3, [r0, #0]
 800b2c6:	f013 0207 	ands.w	r2, r3, #7
 800b2ca:	4601      	mov	r1, r0
 800b2cc:	d00b      	beq.n	800b2e6 <__lo0bits+0x22>
 800b2ce:	07da      	lsls	r2, r3, #31
 800b2d0:	d424      	bmi.n	800b31c <__lo0bits+0x58>
 800b2d2:	0798      	lsls	r0, r3, #30
 800b2d4:	bf49      	itett	mi
 800b2d6:	085b      	lsrmi	r3, r3, #1
 800b2d8:	089b      	lsrpl	r3, r3, #2
 800b2da:	2001      	movmi	r0, #1
 800b2dc:	600b      	strmi	r3, [r1, #0]
 800b2de:	bf5c      	itt	pl
 800b2e0:	600b      	strpl	r3, [r1, #0]
 800b2e2:	2002      	movpl	r0, #2
 800b2e4:	4770      	bx	lr
 800b2e6:	b298      	uxth	r0, r3
 800b2e8:	b9b0      	cbnz	r0, 800b318 <__lo0bits+0x54>
 800b2ea:	0c1b      	lsrs	r3, r3, #16
 800b2ec:	2010      	movs	r0, #16
 800b2ee:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b2f2:	bf04      	itt	eq
 800b2f4:	0a1b      	lsreq	r3, r3, #8
 800b2f6:	3008      	addeq	r0, #8
 800b2f8:	071a      	lsls	r2, r3, #28
 800b2fa:	bf04      	itt	eq
 800b2fc:	091b      	lsreq	r3, r3, #4
 800b2fe:	3004      	addeq	r0, #4
 800b300:	079a      	lsls	r2, r3, #30
 800b302:	bf04      	itt	eq
 800b304:	089b      	lsreq	r3, r3, #2
 800b306:	3002      	addeq	r0, #2
 800b308:	07da      	lsls	r2, r3, #31
 800b30a:	d403      	bmi.n	800b314 <__lo0bits+0x50>
 800b30c:	085b      	lsrs	r3, r3, #1
 800b30e:	f100 0001 	add.w	r0, r0, #1
 800b312:	d005      	beq.n	800b320 <__lo0bits+0x5c>
 800b314:	600b      	str	r3, [r1, #0]
 800b316:	4770      	bx	lr
 800b318:	4610      	mov	r0, r2
 800b31a:	e7e8      	b.n	800b2ee <__lo0bits+0x2a>
 800b31c:	2000      	movs	r0, #0
 800b31e:	4770      	bx	lr
 800b320:	2020      	movs	r0, #32
 800b322:	4770      	bx	lr

0800b324 <__i2b>:
 800b324:	b510      	push	{r4, lr}
 800b326:	460c      	mov	r4, r1
 800b328:	2101      	movs	r1, #1
 800b32a:	f7ff feff 	bl	800b12c <_Balloc>
 800b32e:	4602      	mov	r2, r0
 800b330:	b928      	cbnz	r0, 800b33e <__i2b+0x1a>
 800b332:	4b05      	ldr	r3, [pc, #20]	; (800b348 <__i2b+0x24>)
 800b334:	4805      	ldr	r0, [pc, #20]	; (800b34c <__i2b+0x28>)
 800b336:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b33a:	f000 ff0b 	bl	800c154 <__assert_func>
 800b33e:	2301      	movs	r3, #1
 800b340:	6144      	str	r4, [r0, #20]
 800b342:	6103      	str	r3, [r0, #16]
 800b344:	bd10      	pop	{r4, pc}
 800b346:	bf00      	nop
 800b348:	0800c783 	.word	0x0800c783
 800b34c:	0800c7f4 	.word	0x0800c7f4

0800b350 <__multiply>:
 800b350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b354:	4614      	mov	r4, r2
 800b356:	690a      	ldr	r2, [r1, #16]
 800b358:	6923      	ldr	r3, [r4, #16]
 800b35a:	429a      	cmp	r2, r3
 800b35c:	bfb8      	it	lt
 800b35e:	460b      	movlt	r3, r1
 800b360:	460d      	mov	r5, r1
 800b362:	bfbc      	itt	lt
 800b364:	4625      	movlt	r5, r4
 800b366:	461c      	movlt	r4, r3
 800b368:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b36c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b370:	68ab      	ldr	r3, [r5, #8]
 800b372:	6869      	ldr	r1, [r5, #4]
 800b374:	eb0a 0709 	add.w	r7, sl, r9
 800b378:	42bb      	cmp	r3, r7
 800b37a:	b085      	sub	sp, #20
 800b37c:	bfb8      	it	lt
 800b37e:	3101      	addlt	r1, #1
 800b380:	f7ff fed4 	bl	800b12c <_Balloc>
 800b384:	b930      	cbnz	r0, 800b394 <__multiply+0x44>
 800b386:	4602      	mov	r2, r0
 800b388:	4b42      	ldr	r3, [pc, #264]	; (800b494 <__multiply+0x144>)
 800b38a:	4843      	ldr	r0, [pc, #268]	; (800b498 <__multiply+0x148>)
 800b38c:	f240 115d 	movw	r1, #349	; 0x15d
 800b390:	f000 fee0 	bl	800c154 <__assert_func>
 800b394:	f100 0614 	add.w	r6, r0, #20
 800b398:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b39c:	4633      	mov	r3, r6
 800b39e:	2200      	movs	r2, #0
 800b3a0:	4543      	cmp	r3, r8
 800b3a2:	d31e      	bcc.n	800b3e2 <__multiply+0x92>
 800b3a4:	f105 0c14 	add.w	ip, r5, #20
 800b3a8:	f104 0314 	add.w	r3, r4, #20
 800b3ac:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b3b0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b3b4:	9202      	str	r2, [sp, #8]
 800b3b6:	ebac 0205 	sub.w	r2, ip, r5
 800b3ba:	3a15      	subs	r2, #21
 800b3bc:	f022 0203 	bic.w	r2, r2, #3
 800b3c0:	3204      	adds	r2, #4
 800b3c2:	f105 0115 	add.w	r1, r5, #21
 800b3c6:	458c      	cmp	ip, r1
 800b3c8:	bf38      	it	cc
 800b3ca:	2204      	movcc	r2, #4
 800b3cc:	9201      	str	r2, [sp, #4]
 800b3ce:	9a02      	ldr	r2, [sp, #8]
 800b3d0:	9303      	str	r3, [sp, #12]
 800b3d2:	429a      	cmp	r2, r3
 800b3d4:	d808      	bhi.n	800b3e8 <__multiply+0x98>
 800b3d6:	2f00      	cmp	r7, #0
 800b3d8:	dc55      	bgt.n	800b486 <__multiply+0x136>
 800b3da:	6107      	str	r7, [r0, #16]
 800b3dc:	b005      	add	sp, #20
 800b3de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3e2:	f843 2b04 	str.w	r2, [r3], #4
 800b3e6:	e7db      	b.n	800b3a0 <__multiply+0x50>
 800b3e8:	f8b3 a000 	ldrh.w	sl, [r3]
 800b3ec:	f1ba 0f00 	cmp.w	sl, #0
 800b3f0:	d020      	beq.n	800b434 <__multiply+0xe4>
 800b3f2:	f105 0e14 	add.w	lr, r5, #20
 800b3f6:	46b1      	mov	r9, r6
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b3fe:	f8d9 b000 	ldr.w	fp, [r9]
 800b402:	b2a1      	uxth	r1, r4
 800b404:	fa1f fb8b 	uxth.w	fp, fp
 800b408:	fb0a b101 	mla	r1, sl, r1, fp
 800b40c:	4411      	add	r1, r2
 800b40e:	f8d9 2000 	ldr.w	r2, [r9]
 800b412:	0c24      	lsrs	r4, r4, #16
 800b414:	0c12      	lsrs	r2, r2, #16
 800b416:	fb0a 2404 	mla	r4, sl, r4, r2
 800b41a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b41e:	b289      	uxth	r1, r1
 800b420:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b424:	45f4      	cmp	ip, lr
 800b426:	f849 1b04 	str.w	r1, [r9], #4
 800b42a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b42e:	d8e4      	bhi.n	800b3fa <__multiply+0xaa>
 800b430:	9901      	ldr	r1, [sp, #4]
 800b432:	5072      	str	r2, [r6, r1]
 800b434:	9a03      	ldr	r2, [sp, #12]
 800b436:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b43a:	3304      	adds	r3, #4
 800b43c:	f1b9 0f00 	cmp.w	r9, #0
 800b440:	d01f      	beq.n	800b482 <__multiply+0x132>
 800b442:	6834      	ldr	r4, [r6, #0]
 800b444:	f105 0114 	add.w	r1, r5, #20
 800b448:	46b6      	mov	lr, r6
 800b44a:	f04f 0a00 	mov.w	sl, #0
 800b44e:	880a      	ldrh	r2, [r1, #0]
 800b450:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b454:	fb09 b202 	mla	r2, r9, r2, fp
 800b458:	4492      	add	sl, r2
 800b45a:	b2a4      	uxth	r4, r4
 800b45c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b460:	f84e 4b04 	str.w	r4, [lr], #4
 800b464:	f851 4b04 	ldr.w	r4, [r1], #4
 800b468:	f8be 2000 	ldrh.w	r2, [lr]
 800b46c:	0c24      	lsrs	r4, r4, #16
 800b46e:	fb09 2404 	mla	r4, r9, r4, r2
 800b472:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b476:	458c      	cmp	ip, r1
 800b478:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b47c:	d8e7      	bhi.n	800b44e <__multiply+0xfe>
 800b47e:	9a01      	ldr	r2, [sp, #4]
 800b480:	50b4      	str	r4, [r6, r2]
 800b482:	3604      	adds	r6, #4
 800b484:	e7a3      	b.n	800b3ce <__multiply+0x7e>
 800b486:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d1a5      	bne.n	800b3da <__multiply+0x8a>
 800b48e:	3f01      	subs	r7, #1
 800b490:	e7a1      	b.n	800b3d6 <__multiply+0x86>
 800b492:	bf00      	nop
 800b494:	0800c783 	.word	0x0800c783
 800b498:	0800c7f4 	.word	0x0800c7f4

0800b49c <__pow5mult>:
 800b49c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4a0:	4615      	mov	r5, r2
 800b4a2:	f012 0203 	ands.w	r2, r2, #3
 800b4a6:	4606      	mov	r6, r0
 800b4a8:	460f      	mov	r7, r1
 800b4aa:	d007      	beq.n	800b4bc <__pow5mult+0x20>
 800b4ac:	4c25      	ldr	r4, [pc, #148]	; (800b544 <__pow5mult+0xa8>)
 800b4ae:	3a01      	subs	r2, #1
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b4b6:	f7ff fe9b 	bl	800b1f0 <__multadd>
 800b4ba:	4607      	mov	r7, r0
 800b4bc:	10ad      	asrs	r5, r5, #2
 800b4be:	d03d      	beq.n	800b53c <__pow5mult+0xa0>
 800b4c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b4c2:	b97c      	cbnz	r4, 800b4e4 <__pow5mult+0x48>
 800b4c4:	2010      	movs	r0, #16
 800b4c6:	f7ff fe29 	bl	800b11c <malloc>
 800b4ca:	4602      	mov	r2, r0
 800b4cc:	6270      	str	r0, [r6, #36]	; 0x24
 800b4ce:	b928      	cbnz	r0, 800b4dc <__pow5mult+0x40>
 800b4d0:	4b1d      	ldr	r3, [pc, #116]	; (800b548 <__pow5mult+0xac>)
 800b4d2:	481e      	ldr	r0, [pc, #120]	; (800b54c <__pow5mult+0xb0>)
 800b4d4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b4d8:	f000 fe3c 	bl	800c154 <__assert_func>
 800b4dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b4e0:	6004      	str	r4, [r0, #0]
 800b4e2:	60c4      	str	r4, [r0, #12]
 800b4e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b4e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b4ec:	b94c      	cbnz	r4, 800b502 <__pow5mult+0x66>
 800b4ee:	f240 2171 	movw	r1, #625	; 0x271
 800b4f2:	4630      	mov	r0, r6
 800b4f4:	f7ff ff16 	bl	800b324 <__i2b>
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	f8c8 0008 	str.w	r0, [r8, #8]
 800b4fe:	4604      	mov	r4, r0
 800b500:	6003      	str	r3, [r0, #0]
 800b502:	f04f 0900 	mov.w	r9, #0
 800b506:	07eb      	lsls	r3, r5, #31
 800b508:	d50a      	bpl.n	800b520 <__pow5mult+0x84>
 800b50a:	4639      	mov	r1, r7
 800b50c:	4622      	mov	r2, r4
 800b50e:	4630      	mov	r0, r6
 800b510:	f7ff ff1e 	bl	800b350 <__multiply>
 800b514:	4639      	mov	r1, r7
 800b516:	4680      	mov	r8, r0
 800b518:	4630      	mov	r0, r6
 800b51a:	f7ff fe47 	bl	800b1ac <_Bfree>
 800b51e:	4647      	mov	r7, r8
 800b520:	106d      	asrs	r5, r5, #1
 800b522:	d00b      	beq.n	800b53c <__pow5mult+0xa0>
 800b524:	6820      	ldr	r0, [r4, #0]
 800b526:	b938      	cbnz	r0, 800b538 <__pow5mult+0x9c>
 800b528:	4622      	mov	r2, r4
 800b52a:	4621      	mov	r1, r4
 800b52c:	4630      	mov	r0, r6
 800b52e:	f7ff ff0f 	bl	800b350 <__multiply>
 800b532:	6020      	str	r0, [r4, #0]
 800b534:	f8c0 9000 	str.w	r9, [r0]
 800b538:	4604      	mov	r4, r0
 800b53a:	e7e4      	b.n	800b506 <__pow5mult+0x6a>
 800b53c:	4638      	mov	r0, r7
 800b53e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b542:	bf00      	nop
 800b544:	0800c948 	.word	0x0800c948
 800b548:	0800c70d 	.word	0x0800c70d
 800b54c:	0800c7f4 	.word	0x0800c7f4

0800b550 <__lshift>:
 800b550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b554:	460c      	mov	r4, r1
 800b556:	6849      	ldr	r1, [r1, #4]
 800b558:	6923      	ldr	r3, [r4, #16]
 800b55a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b55e:	68a3      	ldr	r3, [r4, #8]
 800b560:	4607      	mov	r7, r0
 800b562:	4691      	mov	r9, r2
 800b564:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b568:	f108 0601 	add.w	r6, r8, #1
 800b56c:	42b3      	cmp	r3, r6
 800b56e:	db0b      	blt.n	800b588 <__lshift+0x38>
 800b570:	4638      	mov	r0, r7
 800b572:	f7ff fddb 	bl	800b12c <_Balloc>
 800b576:	4605      	mov	r5, r0
 800b578:	b948      	cbnz	r0, 800b58e <__lshift+0x3e>
 800b57a:	4602      	mov	r2, r0
 800b57c:	4b28      	ldr	r3, [pc, #160]	; (800b620 <__lshift+0xd0>)
 800b57e:	4829      	ldr	r0, [pc, #164]	; (800b624 <__lshift+0xd4>)
 800b580:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b584:	f000 fde6 	bl	800c154 <__assert_func>
 800b588:	3101      	adds	r1, #1
 800b58a:	005b      	lsls	r3, r3, #1
 800b58c:	e7ee      	b.n	800b56c <__lshift+0x1c>
 800b58e:	2300      	movs	r3, #0
 800b590:	f100 0114 	add.w	r1, r0, #20
 800b594:	f100 0210 	add.w	r2, r0, #16
 800b598:	4618      	mov	r0, r3
 800b59a:	4553      	cmp	r3, sl
 800b59c:	db33      	blt.n	800b606 <__lshift+0xb6>
 800b59e:	6920      	ldr	r0, [r4, #16]
 800b5a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b5a4:	f104 0314 	add.w	r3, r4, #20
 800b5a8:	f019 091f 	ands.w	r9, r9, #31
 800b5ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b5b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b5b4:	d02b      	beq.n	800b60e <__lshift+0xbe>
 800b5b6:	f1c9 0e20 	rsb	lr, r9, #32
 800b5ba:	468a      	mov	sl, r1
 800b5bc:	2200      	movs	r2, #0
 800b5be:	6818      	ldr	r0, [r3, #0]
 800b5c0:	fa00 f009 	lsl.w	r0, r0, r9
 800b5c4:	4302      	orrs	r2, r0
 800b5c6:	f84a 2b04 	str.w	r2, [sl], #4
 800b5ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5ce:	459c      	cmp	ip, r3
 800b5d0:	fa22 f20e 	lsr.w	r2, r2, lr
 800b5d4:	d8f3      	bhi.n	800b5be <__lshift+0x6e>
 800b5d6:	ebac 0304 	sub.w	r3, ip, r4
 800b5da:	3b15      	subs	r3, #21
 800b5dc:	f023 0303 	bic.w	r3, r3, #3
 800b5e0:	3304      	adds	r3, #4
 800b5e2:	f104 0015 	add.w	r0, r4, #21
 800b5e6:	4584      	cmp	ip, r0
 800b5e8:	bf38      	it	cc
 800b5ea:	2304      	movcc	r3, #4
 800b5ec:	50ca      	str	r2, [r1, r3]
 800b5ee:	b10a      	cbz	r2, 800b5f4 <__lshift+0xa4>
 800b5f0:	f108 0602 	add.w	r6, r8, #2
 800b5f4:	3e01      	subs	r6, #1
 800b5f6:	4638      	mov	r0, r7
 800b5f8:	612e      	str	r6, [r5, #16]
 800b5fa:	4621      	mov	r1, r4
 800b5fc:	f7ff fdd6 	bl	800b1ac <_Bfree>
 800b600:	4628      	mov	r0, r5
 800b602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b606:	f842 0f04 	str.w	r0, [r2, #4]!
 800b60a:	3301      	adds	r3, #1
 800b60c:	e7c5      	b.n	800b59a <__lshift+0x4a>
 800b60e:	3904      	subs	r1, #4
 800b610:	f853 2b04 	ldr.w	r2, [r3], #4
 800b614:	f841 2f04 	str.w	r2, [r1, #4]!
 800b618:	459c      	cmp	ip, r3
 800b61a:	d8f9      	bhi.n	800b610 <__lshift+0xc0>
 800b61c:	e7ea      	b.n	800b5f4 <__lshift+0xa4>
 800b61e:	bf00      	nop
 800b620:	0800c783 	.word	0x0800c783
 800b624:	0800c7f4 	.word	0x0800c7f4

0800b628 <__mcmp>:
 800b628:	b530      	push	{r4, r5, lr}
 800b62a:	6902      	ldr	r2, [r0, #16]
 800b62c:	690c      	ldr	r4, [r1, #16]
 800b62e:	1b12      	subs	r2, r2, r4
 800b630:	d10e      	bne.n	800b650 <__mcmp+0x28>
 800b632:	f100 0314 	add.w	r3, r0, #20
 800b636:	3114      	adds	r1, #20
 800b638:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b63c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b640:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b644:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b648:	42a5      	cmp	r5, r4
 800b64a:	d003      	beq.n	800b654 <__mcmp+0x2c>
 800b64c:	d305      	bcc.n	800b65a <__mcmp+0x32>
 800b64e:	2201      	movs	r2, #1
 800b650:	4610      	mov	r0, r2
 800b652:	bd30      	pop	{r4, r5, pc}
 800b654:	4283      	cmp	r3, r0
 800b656:	d3f3      	bcc.n	800b640 <__mcmp+0x18>
 800b658:	e7fa      	b.n	800b650 <__mcmp+0x28>
 800b65a:	f04f 32ff 	mov.w	r2, #4294967295
 800b65e:	e7f7      	b.n	800b650 <__mcmp+0x28>

0800b660 <__mdiff>:
 800b660:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b664:	460c      	mov	r4, r1
 800b666:	4606      	mov	r6, r0
 800b668:	4611      	mov	r1, r2
 800b66a:	4620      	mov	r0, r4
 800b66c:	4617      	mov	r7, r2
 800b66e:	f7ff ffdb 	bl	800b628 <__mcmp>
 800b672:	1e05      	subs	r5, r0, #0
 800b674:	d110      	bne.n	800b698 <__mdiff+0x38>
 800b676:	4629      	mov	r1, r5
 800b678:	4630      	mov	r0, r6
 800b67a:	f7ff fd57 	bl	800b12c <_Balloc>
 800b67e:	b930      	cbnz	r0, 800b68e <__mdiff+0x2e>
 800b680:	4b39      	ldr	r3, [pc, #228]	; (800b768 <__mdiff+0x108>)
 800b682:	4602      	mov	r2, r0
 800b684:	f240 2132 	movw	r1, #562	; 0x232
 800b688:	4838      	ldr	r0, [pc, #224]	; (800b76c <__mdiff+0x10c>)
 800b68a:	f000 fd63 	bl	800c154 <__assert_func>
 800b68e:	2301      	movs	r3, #1
 800b690:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b694:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b698:	bfa4      	itt	ge
 800b69a:	463b      	movge	r3, r7
 800b69c:	4627      	movge	r7, r4
 800b69e:	4630      	mov	r0, r6
 800b6a0:	6879      	ldr	r1, [r7, #4]
 800b6a2:	bfa6      	itte	ge
 800b6a4:	461c      	movge	r4, r3
 800b6a6:	2500      	movge	r5, #0
 800b6a8:	2501      	movlt	r5, #1
 800b6aa:	f7ff fd3f 	bl	800b12c <_Balloc>
 800b6ae:	b920      	cbnz	r0, 800b6ba <__mdiff+0x5a>
 800b6b0:	4b2d      	ldr	r3, [pc, #180]	; (800b768 <__mdiff+0x108>)
 800b6b2:	4602      	mov	r2, r0
 800b6b4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b6b8:	e7e6      	b.n	800b688 <__mdiff+0x28>
 800b6ba:	693e      	ldr	r6, [r7, #16]
 800b6bc:	60c5      	str	r5, [r0, #12]
 800b6be:	6925      	ldr	r5, [r4, #16]
 800b6c0:	f107 0114 	add.w	r1, r7, #20
 800b6c4:	f104 0914 	add.w	r9, r4, #20
 800b6c8:	f100 0e14 	add.w	lr, r0, #20
 800b6cc:	f107 0210 	add.w	r2, r7, #16
 800b6d0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b6d4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b6d8:	46f2      	mov	sl, lr
 800b6da:	2700      	movs	r7, #0
 800b6dc:	f859 3b04 	ldr.w	r3, [r9], #4
 800b6e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b6e4:	fa1f f883 	uxth.w	r8, r3
 800b6e8:	fa17 f78b 	uxtah	r7, r7, fp
 800b6ec:	0c1b      	lsrs	r3, r3, #16
 800b6ee:	eba7 0808 	sub.w	r8, r7, r8
 800b6f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b6f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b6fa:	fa1f f888 	uxth.w	r8, r8
 800b6fe:	141f      	asrs	r7, r3, #16
 800b700:	454d      	cmp	r5, r9
 800b702:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b706:	f84a 3b04 	str.w	r3, [sl], #4
 800b70a:	d8e7      	bhi.n	800b6dc <__mdiff+0x7c>
 800b70c:	1b2b      	subs	r3, r5, r4
 800b70e:	3b15      	subs	r3, #21
 800b710:	f023 0303 	bic.w	r3, r3, #3
 800b714:	3304      	adds	r3, #4
 800b716:	3415      	adds	r4, #21
 800b718:	42a5      	cmp	r5, r4
 800b71a:	bf38      	it	cc
 800b71c:	2304      	movcc	r3, #4
 800b71e:	4419      	add	r1, r3
 800b720:	4473      	add	r3, lr
 800b722:	469e      	mov	lr, r3
 800b724:	460d      	mov	r5, r1
 800b726:	4565      	cmp	r5, ip
 800b728:	d30e      	bcc.n	800b748 <__mdiff+0xe8>
 800b72a:	f10c 0203 	add.w	r2, ip, #3
 800b72e:	1a52      	subs	r2, r2, r1
 800b730:	f022 0203 	bic.w	r2, r2, #3
 800b734:	3903      	subs	r1, #3
 800b736:	458c      	cmp	ip, r1
 800b738:	bf38      	it	cc
 800b73a:	2200      	movcc	r2, #0
 800b73c:	441a      	add	r2, r3
 800b73e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b742:	b17b      	cbz	r3, 800b764 <__mdiff+0x104>
 800b744:	6106      	str	r6, [r0, #16]
 800b746:	e7a5      	b.n	800b694 <__mdiff+0x34>
 800b748:	f855 8b04 	ldr.w	r8, [r5], #4
 800b74c:	fa17 f488 	uxtah	r4, r7, r8
 800b750:	1422      	asrs	r2, r4, #16
 800b752:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b756:	b2a4      	uxth	r4, r4
 800b758:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b75c:	f84e 4b04 	str.w	r4, [lr], #4
 800b760:	1417      	asrs	r7, r2, #16
 800b762:	e7e0      	b.n	800b726 <__mdiff+0xc6>
 800b764:	3e01      	subs	r6, #1
 800b766:	e7ea      	b.n	800b73e <__mdiff+0xde>
 800b768:	0800c783 	.word	0x0800c783
 800b76c:	0800c7f4 	.word	0x0800c7f4

0800b770 <__d2b>:
 800b770:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b774:	4689      	mov	r9, r1
 800b776:	2101      	movs	r1, #1
 800b778:	ec57 6b10 	vmov	r6, r7, d0
 800b77c:	4690      	mov	r8, r2
 800b77e:	f7ff fcd5 	bl	800b12c <_Balloc>
 800b782:	4604      	mov	r4, r0
 800b784:	b930      	cbnz	r0, 800b794 <__d2b+0x24>
 800b786:	4602      	mov	r2, r0
 800b788:	4b25      	ldr	r3, [pc, #148]	; (800b820 <__d2b+0xb0>)
 800b78a:	4826      	ldr	r0, [pc, #152]	; (800b824 <__d2b+0xb4>)
 800b78c:	f240 310a 	movw	r1, #778	; 0x30a
 800b790:	f000 fce0 	bl	800c154 <__assert_func>
 800b794:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b798:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b79c:	bb35      	cbnz	r5, 800b7ec <__d2b+0x7c>
 800b79e:	2e00      	cmp	r6, #0
 800b7a0:	9301      	str	r3, [sp, #4]
 800b7a2:	d028      	beq.n	800b7f6 <__d2b+0x86>
 800b7a4:	4668      	mov	r0, sp
 800b7a6:	9600      	str	r6, [sp, #0]
 800b7a8:	f7ff fd8c 	bl	800b2c4 <__lo0bits>
 800b7ac:	9900      	ldr	r1, [sp, #0]
 800b7ae:	b300      	cbz	r0, 800b7f2 <__d2b+0x82>
 800b7b0:	9a01      	ldr	r2, [sp, #4]
 800b7b2:	f1c0 0320 	rsb	r3, r0, #32
 800b7b6:	fa02 f303 	lsl.w	r3, r2, r3
 800b7ba:	430b      	orrs	r3, r1
 800b7bc:	40c2      	lsrs	r2, r0
 800b7be:	6163      	str	r3, [r4, #20]
 800b7c0:	9201      	str	r2, [sp, #4]
 800b7c2:	9b01      	ldr	r3, [sp, #4]
 800b7c4:	61a3      	str	r3, [r4, #24]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	bf14      	ite	ne
 800b7ca:	2202      	movne	r2, #2
 800b7cc:	2201      	moveq	r2, #1
 800b7ce:	6122      	str	r2, [r4, #16]
 800b7d0:	b1d5      	cbz	r5, 800b808 <__d2b+0x98>
 800b7d2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b7d6:	4405      	add	r5, r0
 800b7d8:	f8c9 5000 	str.w	r5, [r9]
 800b7dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b7e0:	f8c8 0000 	str.w	r0, [r8]
 800b7e4:	4620      	mov	r0, r4
 800b7e6:	b003      	add	sp, #12
 800b7e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b7ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b7f0:	e7d5      	b.n	800b79e <__d2b+0x2e>
 800b7f2:	6161      	str	r1, [r4, #20]
 800b7f4:	e7e5      	b.n	800b7c2 <__d2b+0x52>
 800b7f6:	a801      	add	r0, sp, #4
 800b7f8:	f7ff fd64 	bl	800b2c4 <__lo0bits>
 800b7fc:	9b01      	ldr	r3, [sp, #4]
 800b7fe:	6163      	str	r3, [r4, #20]
 800b800:	2201      	movs	r2, #1
 800b802:	6122      	str	r2, [r4, #16]
 800b804:	3020      	adds	r0, #32
 800b806:	e7e3      	b.n	800b7d0 <__d2b+0x60>
 800b808:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b80c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b810:	f8c9 0000 	str.w	r0, [r9]
 800b814:	6918      	ldr	r0, [r3, #16]
 800b816:	f7ff fd35 	bl	800b284 <__hi0bits>
 800b81a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b81e:	e7df      	b.n	800b7e0 <__d2b+0x70>
 800b820:	0800c783 	.word	0x0800c783
 800b824:	0800c7f4 	.word	0x0800c7f4

0800b828 <_calloc_r>:
 800b828:	b513      	push	{r0, r1, r4, lr}
 800b82a:	434a      	muls	r2, r1
 800b82c:	4611      	mov	r1, r2
 800b82e:	9201      	str	r2, [sp, #4]
 800b830:	f000 f85a 	bl	800b8e8 <_malloc_r>
 800b834:	4604      	mov	r4, r0
 800b836:	b118      	cbz	r0, 800b840 <_calloc_r+0x18>
 800b838:	9a01      	ldr	r2, [sp, #4]
 800b83a:	2100      	movs	r1, #0
 800b83c:	f7fe f866 	bl	800990c <memset>
 800b840:	4620      	mov	r0, r4
 800b842:	b002      	add	sp, #8
 800b844:	bd10      	pop	{r4, pc}
	...

0800b848 <_free_r>:
 800b848:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b84a:	2900      	cmp	r1, #0
 800b84c:	d048      	beq.n	800b8e0 <_free_r+0x98>
 800b84e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b852:	9001      	str	r0, [sp, #4]
 800b854:	2b00      	cmp	r3, #0
 800b856:	f1a1 0404 	sub.w	r4, r1, #4
 800b85a:	bfb8      	it	lt
 800b85c:	18e4      	addlt	r4, r4, r3
 800b85e:	f000 fe1d 	bl	800c49c <__malloc_lock>
 800b862:	4a20      	ldr	r2, [pc, #128]	; (800b8e4 <_free_r+0x9c>)
 800b864:	9801      	ldr	r0, [sp, #4]
 800b866:	6813      	ldr	r3, [r2, #0]
 800b868:	4615      	mov	r5, r2
 800b86a:	b933      	cbnz	r3, 800b87a <_free_r+0x32>
 800b86c:	6063      	str	r3, [r4, #4]
 800b86e:	6014      	str	r4, [r2, #0]
 800b870:	b003      	add	sp, #12
 800b872:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b876:	f000 be17 	b.w	800c4a8 <__malloc_unlock>
 800b87a:	42a3      	cmp	r3, r4
 800b87c:	d90b      	bls.n	800b896 <_free_r+0x4e>
 800b87e:	6821      	ldr	r1, [r4, #0]
 800b880:	1862      	adds	r2, r4, r1
 800b882:	4293      	cmp	r3, r2
 800b884:	bf04      	itt	eq
 800b886:	681a      	ldreq	r2, [r3, #0]
 800b888:	685b      	ldreq	r3, [r3, #4]
 800b88a:	6063      	str	r3, [r4, #4]
 800b88c:	bf04      	itt	eq
 800b88e:	1852      	addeq	r2, r2, r1
 800b890:	6022      	streq	r2, [r4, #0]
 800b892:	602c      	str	r4, [r5, #0]
 800b894:	e7ec      	b.n	800b870 <_free_r+0x28>
 800b896:	461a      	mov	r2, r3
 800b898:	685b      	ldr	r3, [r3, #4]
 800b89a:	b10b      	cbz	r3, 800b8a0 <_free_r+0x58>
 800b89c:	42a3      	cmp	r3, r4
 800b89e:	d9fa      	bls.n	800b896 <_free_r+0x4e>
 800b8a0:	6811      	ldr	r1, [r2, #0]
 800b8a2:	1855      	adds	r5, r2, r1
 800b8a4:	42a5      	cmp	r5, r4
 800b8a6:	d10b      	bne.n	800b8c0 <_free_r+0x78>
 800b8a8:	6824      	ldr	r4, [r4, #0]
 800b8aa:	4421      	add	r1, r4
 800b8ac:	1854      	adds	r4, r2, r1
 800b8ae:	42a3      	cmp	r3, r4
 800b8b0:	6011      	str	r1, [r2, #0]
 800b8b2:	d1dd      	bne.n	800b870 <_free_r+0x28>
 800b8b4:	681c      	ldr	r4, [r3, #0]
 800b8b6:	685b      	ldr	r3, [r3, #4]
 800b8b8:	6053      	str	r3, [r2, #4]
 800b8ba:	4421      	add	r1, r4
 800b8bc:	6011      	str	r1, [r2, #0]
 800b8be:	e7d7      	b.n	800b870 <_free_r+0x28>
 800b8c0:	d902      	bls.n	800b8c8 <_free_r+0x80>
 800b8c2:	230c      	movs	r3, #12
 800b8c4:	6003      	str	r3, [r0, #0]
 800b8c6:	e7d3      	b.n	800b870 <_free_r+0x28>
 800b8c8:	6825      	ldr	r5, [r4, #0]
 800b8ca:	1961      	adds	r1, r4, r5
 800b8cc:	428b      	cmp	r3, r1
 800b8ce:	bf04      	itt	eq
 800b8d0:	6819      	ldreq	r1, [r3, #0]
 800b8d2:	685b      	ldreq	r3, [r3, #4]
 800b8d4:	6063      	str	r3, [r4, #4]
 800b8d6:	bf04      	itt	eq
 800b8d8:	1949      	addeq	r1, r1, r5
 800b8da:	6021      	streq	r1, [r4, #0]
 800b8dc:	6054      	str	r4, [r2, #4]
 800b8de:	e7c7      	b.n	800b870 <_free_r+0x28>
 800b8e0:	b003      	add	sp, #12
 800b8e2:	bd30      	pop	{r4, r5, pc}
 800b8e4:	20000594 	.word	0x20000594

0800b8e8 <_malloc_r>:
 800b8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ea:	1ccd      	adds	r5, r1, #3
 800b8ec:	f025 0503 	bic.w	r5, r5, #3
 800b8f0:	3508      	adds	r5, #8
 800b8f2:	2d0c      	cmp	r5, #12
 800b8f4:	bf38      	it	cc
 800b8f6:	250c      	movcc	r5, #12
 800b8f8:	2d00      	cmp	r5, #0
 800b8fa:	4606      	mov	r6, r0
 800b8fc:	db01      	blt.n	800b902 <_malloc_r+0x1a>
 800b8fe:	42a9      	cmp	r1, r5
 800b900:	d903      	bls.n	800b90a <_malloc_r+0x22>
 800b902:	230c      	movs	r3, #12
 800b904:	6033      	str	r3, [r6, #0]
 800b906:	2000      	movs	r0, #0
 800b908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b90a:	f000 fdc7 	bl	800c49c <__malloc_lock>
 800b90e:	4921      	ldr	r1, [pc, #132]	; (800b994 <_malloc_r+0xac>)
 800b910:	680a      	ldr	r2, [r1, #0]
 800b912:	4614      	mov	r4, r2
 800b914:	b99c      	cbnz	r4, 800b93e <_malloc_r+0x56>
 800b916:	4f20      	ldr	r7, [pc, #128]	; (800b998 <_malloc_r+0xb0>)
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	b923      	cbnz	r3, 800b926 <_malloc_r+0x3e>
 800b91c:	4621      	mov	r1, r4
 800b91e:	4630      	mov	r0, r6
 800b920:	f000 faf2 	bl	800bf08 <_sbrk_r>
 800b924:	6038      	str	r0, [r7, #0]
 800b926:	4629      	mov	r1, r5
 800b928:	4630      	mov	r0, r6
 800b92a:	f000 faed 	bl	800bf08 <_sbrk_r>
 800b92e:	1c43      	adds	r3, r0, #1
 800b930:	d123      	bne.n	800b97a <_malloc_r+0x92>
 800b932:	230c      	movs	r3, #12
 800b934:	6033      	str	r3, [r6, #0]
 800b936:	4630      	mov	r0, r6
 800b938:	f000 fdb6 	bl	800c4a8 <__malloc_unlock>
 800b93c:	e7e3      	b.n	800b906 <_malloc_r+0x1e>
 800b93e:	6823      	ldr	r3, [r4, #0]
 800b940:	1b5b      	subs	r3, r3, r5
 800b942:	d417      	bmi.n	800b974 <_malloc_r+0x8c>
 800b944:	2b0b      	cmp	r3, #11
 800b946:	d903      	bls.n	800b950 <_malloc_r+0x68>
 800b948:	6023      	str	r3, [r4, #0]
 800b94a:	441c      	add	r4, r3
 800b94c:	6025      	str	r5, [r4, #0]
 800b94e:	e004      	b.n	800b95a <_malloc_r+0x72>
 800b950:	6863      	ldr	r3, [r4, #4]
 800b952:	42a2      	cmp	r2, r4
 800b954:	bf0c      	ite	eq
 800b956:	600b      	streq	r3, [r1, #0]
 800b958:	6053      	strne	r3, [r2, #4]
 800b95a:	4630      	mov	r0, r6
 800b95c:	f000 fda4 	bl	800c4a8 <__malloc_unlock>
 800b960:	f104 000b 	add.w	r0, r4, #11
 800b964:	1d23      	adds	r3, r4, #4
 800b966:	f020 0007 	bic.w	r0, r0, #7
 800b96a:	1ac2      	subs	r2, r0, r3
 800b96c:	d0cc      	beq.n	800b908 <_malloc_r+0x20>
 800b96e:	1a1b      	subs	r3, r3, r0
 800b970:	50a3      	str	r3, [r4, r2]
 800b972:	e7c9      	b.n	800b908 <_malloc_r+0x20>
 800b974:	4622      	mov	r2, r4
 800b976:	6864      	ldr	r4, [r4, #4]
 800b978:	e7cc      	b.n	800b914 <_malloc_r+0x2c>
 800b97a:	1cc4      	adds	r4, r0, #3
 800b97c:	f024 0403 	bic.w	r4, r4, #3
 800b980:	42a0      	cmp	r0, r4
 800b982:	d0e3      	beq.n	800b94c <_malloc_r+0x64>
 800b984:	1a21      	subs	r1, r4, r0
 800b986:	4630      	mov	r0, r6
 800b988:	f000 fabe 	bl	800bf08 <_sbrk_r>
 800b98c:	3001      	adds	r0, #1
 800b98e:	d1dd      	bne.n	800b94c <_malloc_r+0x64>
 800b990:	e7cf      	b.n	800b932 <_malloc_r+0x4a>
 800b992:	bf00      	nop
 800b994:	20000594 	.word	0x20000594
 800b998:	20000598 	.word	0x20000598

0800b99c <__ssputs_r>:
 800b99c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9a0:	688e      	ldr	r6, [r1, #8]
 800b9a2:	429e      	cmp	r6, r3
 800b9a4:	4682      	mov	sl, r0
 800b9a6:	460c      	mov	r4, r1
 800b9a8:	4690      	mov	r8, r2
 800b9aa:	461f      	mov	r7, r3
 800b9ac:	d838      	bhi.n	800ba20 <__ssputs_r+0x84>
 800b9ae:	898a      	ldrh	r2, [r1, #12]
 800b9b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b9b4:	d032      	beq.n	800ba1c <__ssputs_r+0x80>
 800b9b6:	6825      	ldr	r5, [r4, #0]
 800b9b8:	6909      	ldr	r1, [r1, #16]
 800b9ba:	eba5 0901 	sub.w	r9, r5, r1
 800b9be:	6965      	ldr	r5, [r4, #20]
 800b9c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b9c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b9c8:	3301      	adds	r3, #1
 800b9ca:	444b      	add	r3, r9
 800b9cc:	106d      	asrs	r5, r5, #1
 800b9ce:	429d      	cmp	r5, r3
 800b9d0:	bf38      	it	cc
 800b9d2:	461d      	movcc	r5, r3
 800b9d4:	0553      	lsls	r3, r2, #21
 800b9d6:	d531      	bpl.n	800ba3c <__ssputs_r+0xa0>
 800b9d8:	4629      	mov	r1, r5
 800b9da:	f7ff ff85 	bl	800b8e8 <_malloc_r>
 800b9de:	4606      	mov	r6, r0
 800b9e0:	b950      	cbnz	r0, 800b9f8 <__ssputs_r+0x5c>
 800b9e2:	230c      	movs	r3, #12
 800b9e4:	f8ca 3000 	str.w	r3, [sl]
 800b9e8:	89a3      	ldrh	r3, [r4, #12]
 800b9ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9ee:	81a3      	strh	r3, [r4, #12]
 800b9f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b9f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9f8:	6921      	ldr	r1, [r4, #16]
 800b9fa:	464a      	mov	r2, r9
 800b9fc:	f7fd ff78 	bl	80098f0 <memcpy>
 800ba00:	89a3      	ldrh	r3, [r4, #12]
 800ba02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ba06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba0a:	81a3      	strh	r3, [r4, #12]
 800ba0c:	6126      	str	r6, [r4, #16]
 800ba0e:	6165      	str	r5, [r4, #20]
 800ba10:	444e      	add	r6, r9
 800ba12:	eba5 0509 	sub.w	r5, r5, r9
 800ba16:	6026      	str	r6, [r4, #0]
 800ba18:	60a5      	str	r5, [r4, #8]
 800ba1a:	463e      	mov	r6, r7
 800ba1c:	42be      	cmp	r6, r7
 800ba1e:	d900      	bls.n	800ba22 <__ssputs_r+0x86>
 800ba20:	463e      	mov	r6, r7
 800ba22:	4632      	mov	r2, r6
 800ba24:	6820      	ldr	r0, [r4, #0]
 800ba26:	4641      	mov	r1, r8
 800ba28:	f000 fd1e 	bl	800c468 <memmove>
 800ba2c:	68a3      	ldr	r3, [r4, #8]
 800ba2e:	6822      	ldr	r2, [r4, #0]
 800ba30:	1b9b      	subs	r3, r3, r6
 800ba32:	4432      	add	r2, r6
 800ba34:	60a3      	str	r3, [r4, #8]
 800ba36:	6022      	str	r2, [r4, #0]
 800ba38:	2000      	movs	r0, #0
 800ba3a:	e7db      	b.n	800b9f4 <__ssputs_r+0x58>
 800ba3c:	462a      	mov	r2, r5
 800ba3e:	f000 fd39 	bl	800c4b4 <_realloc_r>
 800ba42:	4606      	mov	r6, r0
 800ba44:	2800      	cmp	r0, #0
 800ba46:	d1e1      	bne.n	800ba0c <__ssputs_r+0x70>
 800ba48:	6921      	ldr	r1, [r4, #16]
 800ba4a:	4650      	mov	r0, sl
 800ba4c:	f7ff fefc 	bl	800b848 <_free_r>
 800ba50:	e7c7      	b.n	800b9e2 <__ssputs_r+0x46>
	...

0800ba54 <_svfiprintf_r>:
 800ba54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba58:	4698      	mov	r8, r3
 800ba5a:	898b      	ldrh	r3, [r1, #12]
 800ba5c:	061b      	lsls	r3, r3, #24
 800ba5e:	b09d      	sub	sp, #116	; 0x74
 800ba60:	4607      	mov	r7, r0
 800ba62:	460d      	mov	r5, r1
 800ba64:	4614      	mov	r4, r2
 800ba66:	d50e      	bpl.n	800ba86 <_svfiprintf_r+0x32>
 800ba68:	690b      	ldr	r3, [r1, #16]
 800ba6a:	b963      	cbnz	r3, 800ba86 <_svfiprintf_r+0x32>
 800ba6c:	2140      	movs	r1, #64	; 0x40
 800ba6e:	f7ff ff3b 	bl	800b8e8 <_malloc_r>
 800ba72:	6028      	str	r0, [r5, #0]
 800ba74:	6128      	str	r0, [r5, #16]
 800ba76:	b920      	cbnz	r0, 800ba82 <_svfiprintf_r+0x2e>
 800ba78:	230c      	movs	r3, #12
 800ba7a:	603b      	str	r3, [r7, #0]
 800ba7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba80:	e0d1      	b.n	800bc26 <_svfiprintf_r+0x1d2>
 800ba82:	2340      	movs	r3, #64	; 0x40
 800ba84:	616b      	str	r3, [r5, #20]
 800ba86:	2300      	movs	r3, #0
 800ba88:	9309      	str	r3, [sp, #36]	; 0x24
 800ba8a:	2320      	movs	r3, #32
 800ba8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba90:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba94:	2330      	movs	r3, #48	; 0x30
 800ba96:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bc40 <_svfiprintf_r+0x1ec>
 800ba9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba9e:	f04f 0901 	mov.w	r9, #1
 800baa2:	4623      	mov	r3, r4
 800baa4:	469a      	mov	sl, r3
 800baa6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800baaa:	b10a      	cbz	r2, 800bab0 <_svfiprintf_r+0x5c>
 800baac:	2a25      	cmp	r2, #37	; 0x25
 800baae:	d1f9      	bne.n	800baa4 <_svfiprintf_r+0x50>
 800bab0:	ebba 0b04 	subs.w	fp, sl, r4
 800bab4:	d00b      	beq.n	800bace <_svfiprintf_r+0x7a>
 800bab6:	465b      	mov	r3, fp
 800bab8:	4622      	mov	r2, r4
 800baba:	4629      	mov	r1, r5
 800babc:	4638      	mov	r0, r7
 800babe:	f7ff ff6d 	bl	800b99c <__ssputs_r>
 800bac2:	3001      	adds	r0, #1
 800bac4:	f000 80aa 	beq.w	800bc1c <_svfiprintf_r+0x1c8>
 800bac8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800baca:	445a      	add	r2, fp
 800bacc:	9209      	str	r2, [sp, #36]	; 0x24
 800bace:	f89a 3000 	ldrb.w	r3, [sl]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	f000 80a2 	beq.w	800bc1c <_svfiprintf_r+0x1c8>
 800bad8:	2300      	movs	r3, #0
 800bada:	f04f 32ff 	mov.w	r2, #4294967295
 800bade:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bae2:	f10a 0a01 	add.w	sl, sl, #1
 800bae6:	9304      	str	r3, [sp, #16]
 800bae8:	9307      	str	r3, [sp, #28]
 800baea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800baee:	931a      	str	r3, [sp, #104]	; 0x68
 800baf0:	4654      	mov	r4, sl
 800baf2:	2205      	movs	r2, #5
 800baf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800baf8:	4851      	ldr	r0, [pc, #324]	; (800bc40 <_svfiprintf_r+0x1ec>)
 800bafa:	f7f4 fb79 	bl	80001f0 <memchr>
 800bafe:	9a04      	ldr	r2, [sp, #16]
 800bb00:	b9d8      	cbnz	r0, 800bb3a <_svfiprintf_r+0xe6>
 800bb02:	06d0      	lsls	r0, r2, #27
 800bb04:	bf44      	itt	mi
 800bb06:	2320      	movmi	r3, #32
 800bb08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb0c:	0711      	lsls	r1, r2, #28
 800bb0e:	bf44      	itt	mi
 800bb10:	232b      	movmi	r3, #43	; 0x2b
 800bb12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb16:	f89a 3000 	ldrb.w	r3, [sl]
 800bb1a:	2b2a      	cmp	r3, #42	; 0x2a
 800bb1c:	d015      	beq.n	800bb4a <_svfiprintf_r+0xf6>
 800bb1e:	9a07      	ldr	r2, [sp, #28]
 800bb20:	4654      	mov	r4, sl
 800bb22:	2000      	movs	r0, #0
 800bb24:	f04f 0c0a 	mov.w	ip, #10
 800bb28:	4621      	mov	r1, r4
 800bb2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb2e:	3b30      	subs	r3, #48	; 0x30
 800bb30:	2b09      	cmp	r3, #9
 800bb32:	d94e      	bls.n	800bbd2 <_svfiprintf_r+0x17e>
 800bb34:	b1b0      	cbz	r0, 800bb64 <_svfiprintf_r+0x110>
 800bb36:	9207      	str	r2, [sp, #28]
 800bb38:	e014      	b.n	800bb64 <_svfiprintf_r+0x110>
 800bb3a:	eba0 0308 	sub.w	r3, r0, r8
 800bb3e:	fa09 f303 	lsl.w	r3, r9, r3
 800bb42:	4313      	orrs	r3, r2
 800bb44:	9304      	str	r3, [sp, #16]
 800bb46:	46a2      	mov	sl, r4
 800bb48:	e7d2      	b.n	800baf0 <_svfiprintf_r+0x9c>
 800bb4a:	9b03      	ldr	r3, [sp, #12]
 800bb4c:	1d19      	adds	r1, r3, #4
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	9103      	str	r1, [sp, #12]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	bfbb      	ittet	lt
 800bb56:	425b      	neglt	r3, r3
 800bb58:	f042 0202 	orrlt.w	r2, r2, #2
 800bb5c:	9307      	strge	r3, [sp, #28]
 800bb5e:	9307      	strlt	r3, [sp, #28]
 800bb60:	bfb8      	it	lt
 800bb62:	9204      	strlt	r2, [sp, #16]
 800bb64:	7823      	ldrb	r3, [r4, #0]
 800bb66:	2b2e      	cmp	r3, #46	; 0x2e
 800bb68:	d10c      	bne.n	800bb84 <_svfiprintf_r+0x130>
 800bb6a:	7863      	ldrb	r3, [r4, #1]
 800bb6c:	2b2a      	cmp	r3, #42	; 0x2a
 800bb6e:	d135      	bne.n	800bbdc <_svfiprintf_r+0x188>
 800bb70:	9b03      	ldr	r3, [sp, #12]
 800bb72:	1d1a      	adds	r2, r3, #4
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	9203      	str	r2, [sp, #12]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	bfb8      	it	lt
 800bb7c:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb80:	3402      	adds	r4, #2
 800bb82:	9305      	str	r3, [sp, #20]
 800bb84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bc50 <_svfiprintf_r+0x1fc>
 800bb88:	7821      	ldrb	r1, [r4, #0]
 800bb8a:	2203      	movs	r2, #3
 800bb8c:	4650      	mov	r0, sl
 800bb8e:	f7f4 fb2f 	bl	80001f0 <memchr>
 800bb92:	b140      	cbz	r0, 800bba6 <_svfiprintf_r+0x152>
 800bb94:	2340      	movs	r3, #64	; 0x40
 800bb96:	eba0 000a 	sub.w	r0, r0, sl
 800bb9a:	fa03 f000 	lsl.w	r0, r3, r0
 800bb9e:	9b04      	ldr	r3, [sp, #16]
 800bba0:	4303      	orrs	r3, r0
 800bba2:	3401      	adds	r4, #1
 800bba4:	9304      	str	r3, [sp, #16]
 800bba6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbaa:	4826      	ldr	r0, [pc, #152]	; (800bc44 <_svfiprintf_r+0x1f0>)
 800bbac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bbb0:	2206      	movs	r2, #6
 800bbb2:	f7f4 fb1d 	bl	80001f0 <memchr>
 800bbb6:	2800      	cmp	r0, #0
 800bbb8:	d038      	beq.n	800bc2c <_svfiprintf_r+0x1d8>
 800bbba:	4b23      	ldr	r3, [pc, #140]	; (800bc48 <_svfiprintf_r+0x1f4>)
 800bbbc:	bb1b      	cbnz	r3, 800bc06 <_svfiprintf_r+0x1b2>
 800bbbe:	9b03      	ldr	r3, [sp, #12]
 800bbc0:	3307      	adds	r3, #7
 800bbc2:	f023 0307 	bic.w	r3, r3, #7
 800bbc6:	3308      	adds	r3, #8
 800bbc8:	9303      	str	r3, [sp, #12]
 800bbca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbcc:	4433      	add	r3, r6
 800bbce:	9309      	str	r3, [sp, #36]	; 0x24
 800bbd0:	e767      	b.n	800baa2 <_svfiprintf_r+0x4e>
 800bbd2:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbd6:	460c      	mov	r4, r1
 800bbd8:	2001      	movs	r0, #1
 800bbda:	e7a5      	b.n	800bb28 <_svfiprintf_r+0xd4>
 800bbdc:	2300      	movs	r3, #0
 800bbde:	3401      	adds	r4, #1
 800bbe0:	9305      	str	r3, [sp, #20]
 800bbe2:	4619      	mov	r1, r3
 800bbe4:	f04f 0c0a 	mov.w	ip, #10
 800bbe8:	4620      	mov	r0, r4
 800bbea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbee:	3a30      	subs	r2, #48	; 0x30
 800bbf0:	2a09      	cmp	r2, #9
 800bbf2:	d903      	bls.n	800bbfc <_svfiprintf_r+0x1a8>
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d0c5      	beq.n	800bb84 <_svfiprintf_r+0x130>
 800bbf8:	9105      	str	r1, [sp, #20]
 800bbfa:	e7c3      	b.n	800bb84 <_svfiprintf_r+0x130>
 800bbfc:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc00:	4604      	mov	r4, r0
 800bc02:	2301      	movs	r3, #1
 800bc04:	e7f0      	b.n	800bbe8 <_svfiprintf_r+0x194>
 800bc06:	ab03      	add	r3, sp, #12
 800bc08:	9300      	str	r3, [sp, #0]
 800bc0a:	462a      	mov	r2, r5
 800bc0c:	4b0f      	ldr	r3, [pc, #60]	; (800bc4c <_svfiprintf_r+0x1f8>)
 800bc0e:	a904      	add	r1, sp, #16
 800bc10:	4638      	mov	r0, r7
 800bc12:	f7fd ff23 	bl	8009a5c <_printf_float>
 800bc16:	1c42      	adds	r2, r0, #1
 800bc18:	4606      	mov	r6, r0
 800bc1a:	d1d6      	bne.n	800bbca <_svfiprintf_r+0x176>
 800bc1c:	89ab      	ldrh	r3, [r5, #12]
 800bc1e:	065b      	lsls	r3, r3, #25
 800bc20:	f53f af2c 	bmi.w	800ba7c <_svfiprintf_r+0x28>
 800bc24:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc26:	b01d      	add	sp, #116	; 0x74
 800bc28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc2c:	ab03      	add	r3, sp, #12
 800bc2e:	9300      	str	r3, [sp, #0]
 800bc30:	462a      	mov	r2, r5
 800bc32:	4b06      	ldr	r3, [pc, #24]	; (800bc4c <_svfiprintf_r+0x1f8>)
 800bc34:	a904      	add	r1, sp, #16
 800bc36:	4638      	mov	r0, r7
 800bc38:	f7fe f9b4 	bl	8009fa4 <_printf_i>
 800bc3c:	e7eb      	b.n	800bc16 <_svfiprintf_r+0x1c2>
 800bc3e:	bf00      	nop
 800bc40:	0800c954 	.word	0x0800c954
 800bc44:	0800c95e 	.word	0x0800c95e
 800bc48:	08009a5d 	.word	0x08009a5d
 800bc4c:	0800b99d 	.word	0x0800b99d
 800bc50:	0800c95a 	.word	0x0800c95a

0800bc54 <__sfputc_r>:
 800bc54:	6893      	ldr	r3, [r2, #8]
 800bc56:	3b01      	subs	r3, #1
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	b410      	push	{r4}
 800bc5c:	6093      	str	r3, [r2, #8]
 800bc5e:	da08      	bge.n	800bc72 <__sfputc_r+0x1e>
 800bc60:	6994      	ldr	r4, [r2, #24]
 800bc62:	42a3      	cmp	r3, r4
 800bc64:	db01      	blt.n	800bc6a <__sfputc_r+0x16>
 800bc66:	290a      	cmp	r1, #10
 800bc68:	d103      	bne.n	800bc72 <__sfputc_r+0x1e>
 800bc6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc6e:	f000 b99f 	b.w	800bfb0 <__swbuf_r>
 800bc72:	6813      	ldr	r3, [r2, #0]
 800bc74:	1c58      	adds	r0, r3, #1
 800bc76:	6010      	str	r0, [r2, #0]
 800bc78:	7019      	strb	r1, [r3, #0]
 800bc7a:	4608      	mov	r0, r1
 800bc7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc80:	4770      	bx	lr

0800bc82 <__sfputs_r>:
 800bc82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc84:	4606      	mov	r6, r0
 800bc86:	460f      	mov	r7, r1
 800bc88:	4614      	mov	r4, r2
 800bc8a:	18d5      	adds	r5, r2, r3
 800bc8c:	42ac      	cmp	r4, r5
 800bc8e:	d101      	bne.n	800bc94 <__sfputs_r+0x12>
 800bc90:	2000      	movs	r0, #0
 800bc92:	e007      	b.n	800bca4 <__sfputs_r+0x22>
 800bc94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc98:	463a      	mov	r2, r7
 800bc9a:	4630      	mov	r0, r6
 800bc9c:	f7ff ffda 	bl	800bc54 <__sfputc_r>
 800bca0:	1c43      	adds	r3, r0, #1
 800bca2:	d1f3      	bne.n	800bc8c <__sfputs_r+0xa>
 800bca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bca8 <_vfiprintf_r>:
 800bca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcac:	460d      	mov	r5, r1
 800bcae:	b09d      	sub	sp, #116	; 0x74
 800bcb0:	4614      	mov	r4, r2
 800bcb2:	4698      	mov	r8, r3
 800bcb4:	4606      	mov	r6, r0
 800bcb6:	b118      	cbz	r0, 800bcc0 <_vfiprintf_r+0x18>
 800bcb8:	6983      	ldr	r3, [r0, #24]
 800bcba:	b90b      	cbnz	r3, 800bcc0 <_vfiprintf_r+0x18>
 800bcbc:	f7ff f988 	bl	800afd0 <__sinit>
 800bcc0:	4b89      	ldr	r3, [pc, #548]	; (800bee8 <_vfiprintf_r+0x240>)
 800bcc2:	429d      	cmp	r5, r3
 800bcc4:	d11b      	bne.n	800bcfe <_vfiprintf_r+0x56>
 800bcc6:	6875      	ldr	r5, [r6, #4]
 800bcc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bcca:	07d9      	lsls	r1, r3, #31
 800bccc:	d405      	bmi.n	800bcda <_vfiprintf_r+0x32>
 800bcce:	89ab      	ldrh	r3, [r5, #12]
 800bcd0:	059a      	lsls	r2, r3, #22
 800bcd2:	d402      	bmi.n	800bcda <_vfiprintf_r+0x32>
 800bcd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bcd6:	f7ff fa1e 	bl	800b116 <__retarget_lock_acquire_recursive>
 800bcda:	89ab      	ldrh	r3, [r5, #12]
 800bcdc:	071b      	lsls	r3, r3, #28
 800bcde:	d501      	bpl.n	800bce4 <_vfiprintf_r+0x3c>
 800bce0:	692b      	ldr	r3, [r5, #16]
 800bce2:	b9eb      	cbnz	r3, 800bd20 <_vfiprintf_r+0x78>
 800bce4:	4629      	mov	r1, r5
 800bce6:	4630      	mov	r0, r6
 800bce8:	f000 f9c6 	bl	800c078 <__swsetup_r>
 800bcec:	b1c0      	cbz	r0, 800bd20 <_vfiprintf_r+0x78>
 800bcee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bcf0:	07dc      	lsls	r4, r3, #31
 800bcf2:	d50e      	bpl.n	800bd12 <_vfiprintf_r+0x6a>
 800bcf4:	f04f 30ff 	mov.w	r0, #4294967295
 800bcf8:	b01d      	add	sp, #116	; 0x74
 800bcfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcfe:	4b7b      	ldr	r3, [pc, #492]	; (800beec <_vfiprintf_r+0x244>)
 800bd00:	429d      	cmp	r5, r3
 800bd02:	d101      	bne.n	800bd08 <_vfiprintf_r+0x60>
 800bd04:	68b5      	ldr	r5, [r6, #8]
 800bd06:	e7df      	b.n	800bcc8 <_vfiprintf_r+0x20>
 800bd08:	4b79      	ldr	r3, [pc, #484]	; (800bef0 <_vfiprintf_r+0x248>)
 800bd0a:	429d      	cmp	r5, r3
 800bd0c:	bf08      	it	eq
 800bd0e:	68f5      	ldreq	r5, [r6, #12]
 800bd10:	e7da      	b.n	800bcc8 <_vfiprintf_r+0x20>
 800bd12:	89ab      	ldrh	r3, [r5, #12]
 800bd14:	0598      	lsls	r0, r3, #22
 800bd16:	d4ed      	bmi.n	800bcf4 <_vfiprintf_r+0x4c>
 800bd18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd1a:	f7ff f9fd 	bl	800b118 <__retarget_lock_release_recursive>
 800bd1e:	e7e9      	b.n	800bcf4 <_vfiprintf_r+0x4c>
 800bd20:	2300      	movs	r3, #0
 800bd22:	9309      	str	r3, [sp, #36]	; 0x24
 800bd24:	2320      	movs	r3, #32
 800bd26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd2a:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd2e:	2330      	movs	r3, #48	; 0x30
 800bd30:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bef4 <_vfiprintf_r+0x24c>
 800bd34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd38:	f04f 0901 	mov.w	r9, #1
 800bd3c:	4623      	mov	r3, r4
 800bd3e:	469a      	mov	sl, r3
 800bd40:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd44:	b10a      	cbz	r2, 800bd4a <_vfiprintf_r+0xa2>
 800bd46:	2a25      	cmp	r2, #37	; 0x25
 800bd48:	d1f9      	bne.n	800bd3e <_vfiprintf_r+0x96>
 800bd4a:	ebba 0b04 	subs.w	fp, sl, r4
 800bd4e:	d00b      	beq.n	800bd68 <_vfiprintf_r+0xc0>
 800bd50:	465b      	mov	r3, fp
 800bd52:	4622      	mov	r2, r4
 800bd54:	4629      	mov	r1, r5
 800bd56:	4630      	mov	r0, r6
 800bd58:	f7ff ff93 	bl	800bc82 <__sfputs_r>
 800bd5c:	3001      	adds	r0, #1
 800bd5e:	f000 80aa 	beq.w	800beb6 <_vfiprintf_r+0x20e>
 800bd62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd64:	445a      	add	r2, fp
 800bd66:	9209      	str	r2, [sp, #36]	; 0x24
 800bd68:	f89a 3000 	ldrb.w	r3, [sl]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	f000 80a2 	beq.w	800beb6 <_vfiprintf_r+0x20e>
 800bd72:	2300      	movs	r3, #0
 800bd74:	f04f 32ff 	mov.w	r2, #4294967295
 800bd78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd7c:	f10a 0a01 	add.w	sl, sl, #1
 800bd80:	9304      	str	r3, [sp, #16]
 800bd82:	9307      	str	r3, [sp, #28]
 800bd84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd88:	931a      	str	r3, [sp, #104]	; 0x68
 800bd8a:	4654      	mov	r4, sl
 800bd8c:	2205      	movs	r2, #5
 800bd8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd92:	4858      	ldr	r0, [pc, #352]	; (800bef4 <_vfiprintf_r+0x24c>)
 800bd94:	f7f4 fa2c 	bl	80001f0 <memchr>
 800bd98:	9a04      	ldr	r2, [sp, #16]
 800bd9a:	b9d8      	cbnz	r0, 800bdd4 <_vfiprintf_r+0x12c>
 800bd9c:	06d1      	lsls	r1, r2, #27
 800bd9e:	bf44      	itt	mi
 800bda0:	2320      	movmi	r3, #32
 800bda2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bda6:	0713      	lsls	r3, r2, #28
 800bda8:	bf44      	itt	mi
 800bdaa:	232b      	movmi	r3, #43	; 0x2b
 800bdac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bdb0:	f89a 3000 	ldrb.w	r3, [sl]
 800bdb4:	2b2a      	cmp	r3, #42	; 0x2a
 800bdb6:	d015      	beq.n	800bde4 <_vfiprintf_r+0x13c>
 800bdb8:	9a07      	ldr	r2, [sp, #28]
 800bdba:	4654      	mov	r4, sl
 800bdbc:	2000      	movs	r0, #0
 800bdbe:	f04f 0c0a 	mov.w	ip, #10
 800bdc2:	4621      	mov	r1, r4
 800bdc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bdc8:	3b30      	subs	r3, #48	; 0x30
 800bdca:	2b09      	cmp	r3, #9
 800bdcc:	d94e      	bls.n	800be6c <_vfiprintf_r+0x1c4>
 800bdce:	b1b0      	cbz	r0, 800bdfe <_vfiprintf_r+0x156>
 800bdd0:	9207      	str	r2, [sp, #28]
 800bdd2:	e014      	b.n	800bdfe <_vfiprintf_r+0x156>
 800bdd4:	eba0 0308 	sub.w	r3, r0, r8
 800bdd8:	fa09 f303 	lsl.w	r3, r9, r3
 800bddc:	4313      	orrs	r3, r2
 800bdde:	9304      	str	r3, [sp, #16]
 800bde0:	46a2      	mov	sl, r4
 800bde2:	e7d2      	b.n	800bd8a <_vfiprintf_r+0xe2>
 800bde4:	9b03      	ldr	r3, [sp, #12]
 800bde6:	1d19      	adds	r1, r3, #4
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	9103      	str	r1, [sp, #12]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	bfbb      	ittet	lt
 800bdf0:	425b      	neglt	r3, r3
 800bdf2:	f042 0202 	orrlt.w	r2, r2, #2
 800bdf6:	9307      	strge	r3, [sp, #28]
 800bdf8:	9307      	strlt	r3, [sp, #28]
 800bdfa:	bfb8      	it	lt
 800bdfc:	9204      	strlt	r2, [sp, #16]
 800bdfe:	7823      	ldrb	r3, [r4, #0]
 800be00:	2b2e      	cmp	r3, #46	; 0x2e
 800be02:	d10c      	bne.n	800be1e <_vfiprintf_r+0x176>
 800be04:	7863      	ldrb	r3, [r4, #1]
 800be06:	2b2a      	cmp	r3, #42	; 0x2a
 800be08:	d135      	bne.n	800be76 <_vfiprintf_r+0x1ce>
 800be0a:	9b03      	ldr	r3, [sp, #12]
 800be0c:	1d1a      	adds	r2, r3, #4
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	9203      	str	r2, [sp, #12]
 800be12:	2b00      	cmp	r3, #0
 800be14:	bfb8      	it	lt
 800be16:	f04f 33ff 	movlt.w	r3, #4294967295
 800be1a:	3402      	adds	r4, #2
 800be1c:	9305      	str	r3, [sp, #20]
 800be1e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bf04 <_vfiprintf_r+0x25c>
 800be22:	7821      	ldrb	r1, [r4, #0]
 800be24:	2203      	movs	r2, #3
 800be26:	4650      	mov	r0, sl
 800be28:	f7f4 f9e2 	bl	80001f0 <memchr>
 800be2c:	b140      	cbz	r0, 800be40 <_vfiprintf_r+0x198>
 800be2e:	2340      	movs	r3, #64	; 0x40
 800be30:	eba0 000a 	sub.w	r0, r0, sl
 800be34:	fa03 f000 	lsl.w	r0, r3, r0
 800be38:	9b04      	ldr	r3, [sp, #16]
 800be3a:	4303      	orrs	r3, r0
 800be3c:	3401      	adds	r4, #1
 800be3e:	9304      	str	r3, [sp, #16]
 800be40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be44:	482c      	ldr	r0, [pc, #176]	; (800bef8 <_vfiprintf_r+0x250>)
 800be46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be4a:	2206      	movs	r2, #6
 800be4c:	f7f4 f9d0 	bl	80001f0 <memchr>
 800be50:	2800      	cmp	r0, #0
 800be52:	d03f      	beq.n	800bed4 <_vfiprintf_r+0x22c>
 800be54:	4b29      	ldr	r3, [pc, #164]	; (800befc <_vfiprintf_r+0x254>)
 800be56:	bb1b      	cbnz	r3, 800bea0 <_vfiprintf_r+0x1f8>
 800be58:	9b03      	ldr	r3, [sp, #12]
 800be5a:	3307      	adds	r3, #7
 800be5c:	f023 0307 	bic.w	r3, r3, #7
 800be60:	3308      	adds	r3, #8
 800be62:	9303      	str	r3, [sp, #12]
 800be64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be66:	443b      	add	r3, r7
 800be68:	9309      	str	r3, [sp, #36]	; 0x24
 800be6a:	e767      	b.n	800bd3c <_vfiprintf_r+0x94>
 800be6c:	fb0c 3202 	mla	r2, ip, r2, r3
 800be70:	460c      	mov	r4, r1
 800be72:	2001      	movs	r0, #1
 800be74:	e7a5      	b.n	800bdc2 <_vfiprintf_r+0x11a>
 800be76:	2300      	movs	r3, #0
 800be78:	3401      	adds	r4, #1
 800be7a:	9305      	str	r3, [sp, #20]
 800be7c:	4619      	mov	r1, r3
 800be7e:	f04f 0c0a 	mov.w	ip, #10
 800be82:	4620      	mov	r0, r4
 800be84:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be88:	3a30      	subs	r2, #48	; 0x30
 800be8a:	2a09      	cmp	r2, #9
 800be8c:	d903      	bls.n	800be96 <_vfiprintf_r+0x1ee>
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d0c5      	beq.n	800be1e <_vfiprintf_r+0x176>
 800be92:	9105      	str	r1, [sp, #20]
 800be94:	e7c3      	b.n	800be1e <_vfiprintf_r+0x176>
 800be96:	fb0c 2101 	mla	r1, ip, r1, r2
 800be9a:	4604      	mov	r4, r0
 800be9c:	2301      	movs	r3, #1
 800be9e:	e7f0      	b.n	800be82 <_vfiprintf_r+0x1da>
 800bea0:	ab03      	add	r3, sp, #12
 800bea2:	9300      	str	r3, [sp, #0]
 800bea4:	462a      	mov	r2, r5
 800bea6:	4b16      	ldr	r3, [pc, #88]	; (800bf00 <_vfiprintf_r+0x258>)
 800bea8:	a904      	add	r1, sp, #16
 800beaa:	4630      	mov	r0, r6
 800beac:	f7fd fdd6 	bl	8009a5c <_printf_float>
 800beb0:	4607      	mov	r7, r0
 800beb2:	1c78      	adds	r0, r7, #1
 800beb4:	d1d6      	bne.n	800be64 <_vfiprintf_r+0x1bc>
 800beb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800beb8:	07d9      	lsls	r1, r3, #31
 800beba:	d405      	bmi.n	800bec8 <_vfiprintf_r+0x220>
 800bebc:	89ab      	ldrh	r3, [r5, #12]
 800bebe:	059a      	lsls	r2, r3, #22
 800bec0:	d402      	bmi.n	800bec8 <_vfiprintf_r+0x220>
 800bec2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bec4:	f7ff f928 	bl	800b118 <__retarget_lock_release_recursive>
 800bec8:	89ab      	ldrh	r3, [r5, #12]
 800beca:	065b      	lsls	r3, r3, #25
 800becc:	f53f af12 	bmi.w	800bcf4 <_vfiprintf_r+0x4c>
 800bed0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bed2:	e711      	b.n	800bcf8 <_vfiprintf_r+0x50>
 800bed4:	ab03      	add	r3, sp, #12
 800bed6:	9300      	str	r3, [sp, #0]
 800bed8:	462a      	mov	r2, r5
 800beda:	4b09      	ldr	r3, [pc, #36]	; (800bf00 <_vfiprintf_r+0x258>)
 800bedc:	a904      	add	r1, sp, #16
 800bede:	4630      	mov	r0, r6
 800bee0:	f7fe f860 	bl	8009fa4 <_printf_i>
 800bee4:	e7e4      	b.n	800beb0 <_vfiprintf_r+0x208>
 800bee6:	bf00      	nop
 800bee8:	0800c7b4 	.word	0x0800c7b4
 800beec:	0800c7d4 	.word	0x0800c7d4
 800bef0:	0800c794 	.word	0x0800c794
 800bef4:	0800c954 	.word	0x0800c954
 800bef8:	0800c95e 	.word	0x0800c95e
 800befc:	08009a5d 	.word	0x08009a5d
 800bf00:	0800bc83 	.word	0x0800bc83
 800bf04:	0800c95a 	.word	0x0800c95a

0800bf08 <_sbrk_r>:
 800bf08:	b538      	push	{r3, r4, r5, lr}
 800bf0a:	4d06      	ldr	r5, [pc, #24]	; (800bf24 <_sbrk_r+0x1c>)
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	4604      	mov	r4, r0
 800bf10:	4608      	mov	r0, r1
 800bf12:	602b      	str	r3, [r5, #0]
 800bf14:	f7f5 fe0c 	bl	8001b30 <_sbrk>
 800bf18:	1c43      	adds	r3, r0, #1
 800bf1a:	d102      	bne.n	800bf22 <_sbrk_r+0x1a>
 800bf1c:	682b      	ldr	r3, [r5, #0]
 800bf1e:	b103      	cbz	r3, 800bf22 <_sbrk_r+0x1a>
 800bf20:	6023      	str	r3, [r4, #0]
 800bf22:	bd38      	pop	{r3, r4, r5, pc}
 800bf24:	20001f74 	.word	0x20001f74

0800bf28 <__sread>:
 800bf28:	b510      	push	{r4, lr}
 800bf2a:	460c      	mov	r4, r1
 800bf2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf30:	f000 fae6 	bl	800c500 <_read_r>
 800bf34:	2800      	cmp	r0, #0
 800bf36:	bfab      	itete	ge
 800bf38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bf3a:	89a3      	ldrhlt	r3, [r4, #12]
 800bf3c:	181b      	addge	r3, r3, r0
 800bf3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bf42:	bfac      	ite	ge
 800bf44:	6563      	strge	r3, [r4, #84]	; 0x54
 800bf46:	81a3      	strhlt	r3, [r4, #12]
 800bf48:	bd10      	pop	{r4, pc}

0800bf4a <__swrite>:
 800bf4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf4e:	461f      	mov	r7, r3
 800bf50:	898b      	ldrh	r3, [r1, #12]
 800bf52:	05db      	lsls	r3, r3, #23
 800bf54:	4605      	mov	r5, r0
 800bf56:	460c      	mov	r4, r1
 800bf58:	4616      	mov	r6, r2
 800bf5a:	d505      	bpl.n	800bf68 <__swrite+0x1e>
 800bf5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf60:	2302      	movs	r3, #2
 800bf62:	2200      	movs	r2, #0
 800bf64:	f000 f9f8 	bl	800c358 <_lseek_r>
 800bf68:	89a3      	ldrh	r3, [r4, #12]
 800bf6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bf72:	81a3      	strh	r3, [r4, #12]
 800bf74:	4632      	mov	r2, r6
 800bf76:	463b      	mov	r3, r7
 800bf78:	4628      	mov	r0, r5
 800bf7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf7e:	f000 b869 	b.w	800c054 <_write_r>

0800bf82 <__sseek>:
 800bf82:	b510      	push	{r4, lr}
 800bf84:	460c      	mov	r4, r1
 800bf86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf8a:	f000 f9e5 	bl	800c358 <_lseek_r>
 800bf8e:	1c43      	adds	r3, r0, #1
 800bf90:	89a3      	ldrh	r3, [r4, #12]
 800bf92:	bf15      	itete	ne
 800bf94:	6560      	strne	r0, [r4, #84]	; 0x54
 800bf96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bf9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bf9e:	81a3      	strheq	r3, [r4, #12]
 800bfa0:	bf18      	it	ne
 800bfa2:	81a3      	strhne	r3, [r4, #12]
 800bfa4:	bd10      	pop	{r4, pc}

0800bfa6 <__sclose>:
 800bfa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfaa:	f000 b8f1 	b.w	800c190 <_close_r>
	...

0800bfb0 <__swbuf_r>:
 800bfb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfb2:	460e      	mov	r6, r1
 800bfb4:	4614      	mov	r4, r2
 800bfb6:	4605      	mov	r5, r0
 800bfb8:	b118      	cbz	r0, 800bfc2 <__swbuf_r+0x12>
 800bfba:	6983      	ldr	r3, [r0, #24]
 800bfbc:	b90b      	cbnz	r3, 800bfc2 <__swbuf_r+0x12>
 800bfbe:	f7ff f807 	bl	800afd0 <__sinit>
 800bfc2:	4b21      	ldr	r3, [pc, #132]	; (800c048 <__swbuf_r+0x98>)
 800bfc4:	429c      	cmp	r4, r3
 800bfc6:	d12b      	bne.n	800c020 <__swbuf_r+0x70>
 800bfc8:	686c      	ldr	r4, [r5, #4]
 800bfca:	69a3      	ldr	r3, [r4, #24]
 800bfcc:	60a3      	str	r3, [r4, #8]
 800bfce:	89a3      	ldrh	r3, [r4, #12]
 800bfd0:	071a      	lsls	r2, r3, #28
 800bfd2:	d52f      	bpl.n	800c034 <__swbuf_r+0x84>
 800bfd4:	6923      	ldr	r3, [r4, #16]
 800bfd6:	b36b      	cbz	r3, 800c034 <__swbuf_r+0x84>
 800bfd8:	6923      	ldr	r3, [r4, #16]
 800bfda:	6820      	ldr	r0, [r4, #0]
 800bfdc:	1ac0      	subs	r0, r0, r3
 800bfde:	6963      	ldr	r3, [r4, #20]
 800bfe0:	b2f6      	uxtb	r6, r6
 800bfe2:	4283      	cmp	r3, r0
 800bfe4:	4637      	mov	r7, r6
 800bfe6:	dc04      	bgt.n	800bff2 <__swbuf_r+0x42>
 800bfe8:	4621      	mov	r1, r4
 800bfea:	4628      	mov	r0, r5
 800bfec:	f000 f966 	bl	800c2bc <_fflush_r>
 800bff0:	bb30      	cbnz	r0, 800c040 <__swbuf_r+0x90>
 800bff2:	68a3      	ldr	r3, [r4, #8]
 800bff4:	3b01      	subs	r3, #1
 800bff6:	60a3      	str	r3, [r4, #8]
 800bff8:	6823      	ldr	r3, [r4, #0]
 800bffa:	1c5a      	adds	r2, r3, #1
 800bffc:	6022      	str	r2, [r4, #0]
 800bffe:	701e      	strb	r6, [r3, #0]
 800c000:	6963      	ldr	r3, [r4, #20]
 800c002:	3001      	adds	r0, #1
 800c004:	4283      	cmp	r3, r0
 800c006:	d004      	beq.n	800c012 <__swbuf_r+0x62>
 800c008:	89a3      	ldrh	r3, [r4, #12]
 800c00a:	07db      	lsls	r3, r3, #31
 800c00c:	d506      	bpl.n	800c01c <__swbuf_r+0x6c>
 800c00e:	2e0a      	cmp	r6, #10
 800c010:	d104      	bne.n	800c01c <__swbuf_r+0x6c>
 800c012:	4621      	mov	r1, r4
 800c014:	4628      	mov	r0, r5
 800c016:	f000 f951 	bl	800c2bc <_fflush_r>
 800c01a:	b988      	cbnz	r0, 800c040 <__swbuf_r+0x90>
 800c01c:	4638      	mov	r0, r7
 800c01e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c020:	4b0a      	ldr	r3, [pc, #40]	; (800c04c <__swbuf_r+0x9c>)
 800c022:	429c      	cmp	r4, r3
 800c024:	d101      	bne.n	800c02a <__swbuf_r+0x7a>
 800c026:	68ac      	ldr	r4, [r5, #8]
 800c028:	e7cf      	b.n	800bfca <__swbuf_r+0x1a>
 800c02a:	4b09      	ldr	r3, [pc, #36]	; (800c050 <__swbuf_r+0xa0>)
 800c02c:	429c      	cmp	r4, r3
 800c02e:	bf08      	it	eq
 800c030:	68ec      	ldreq	r4, [r5, #12]
 800c032:	e7ca      	b.n	800bfca <__swbuf_r+0x1a>
 800c034:	4621      	mov	r1, r4
 800c036:	4628      	mov	r0, r5
 800c038:	f000 f81e 	bl	800c078 <__swsetup_r>
 800c03c:	2800      	cmp	r0, #0
 800c03e:	d0cb      	beq.n	800bfd8 <__swbuf_r+0x28>
 800c040:	f04f 37ff 	mov.w	r7, #4294967295
 800c044:	e7ea      	b.n	800c01c <__swbuf_r+0x6c>
 800c046:	bf00      	nop
 800c048:	0800c7b4 	.word	0x0800c7b4
 800c04c:	0800c7d4 	.word	0x0800c7d4
 800c050:	0800c794 	.word	0x0800c794

0800c054 <_write_r>:
 800c054:	b538      	push	{r3, r4, r5, lr}
 800c056:	4d07      	ldr	r5, [pc, #28]	; (800c074 <_write_r+0x20>)
 800c058:	4604      	mov	r4, r0
 800c05a:	4608      	mov	r0, r1
 800c05c:	4611      	mov	r1, r2
 800c05e:	2200      	movs	r2, #0
 800c060:	602a      	str	r2, [r5, #0]
 800c062:	461a      	mov	r2, r3
 800c064:	f7f5 fd13 	bl	8001a8e <_write>
 800c068:	1c43      	adds	r3, r0, #1
 800c06a:	d102      	bne.n	800c072 <_write_r+0x1e>
 800c06c:	682b      	ldr	r3, [r5, #0]
 800c06e:	b103      	cbz	r3, 800c072 <_write_r+0x1e>
 800c070:	6023      	str	r3, [r4, #0]
 800c072:	bd38      	pop	{r3, r4, r5, pc}
 800c074:	20001f74 	.word	0x20001f74

0800c078 <__swsetup_r>:
 800c078:	4b32      	ldr	r3, [pc, #200]	; (800c144 <__swsetup_r+0xcc>)
 800c07a:	b570      	push	{r4, r5, r6, lr}
 800c07c:	681d      	ldr	r5, [r3, #0]
 800c07e:	4606      	mov	r6, r0
 800c080:	460c      	mov	r4, r1
 800c082:	b125      	cbz	r5, 800c08e <__swsetup_r+0x16>
 800c084:	69ab      	ldr	r3, [r5, #24]
 800c086:	b913      	cbnz	r3, 800c08e <__swsetup_r+0x16>
 800c088:	4628      	mov	r0, r5
 800c08a:	f7fe ffa1 	bl	800afd0 <__sinit>
 800c08e:	4b2e      	ldr	r3, [pc, #184]	; (800c148 <__swsetup_r+0xd0>)
 800c090:	429c      	cmp	r4, r3
 800c092:	d10f      	bne.n	800c0b4 <__swsetup_r+0x3c>
 800c094:	686c      	ldr	r4, [r5, #4]
 800c096:	89a3      	ldrh	r3, [r4, #12]
 800c098:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c09c:	0719      	lsls	r1, r3, #28
 800c09e:	d42c      	bmi.n	800c0fa <__swsetup_r+0x82>
 800c0a0:	06dd      	lsls	r5, r3, #27
 800c0a2:	d411      	bmi.n	800c0c8 <__swsetup_r+0x50>
 800c0a4:	2309      	movs	r3, #9
 800c0a6:	6033      	str	r3, [r6, #0]
 800c0a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c0ac:	81a3      	strh	r3, [r4, #12]
 800c0ae:	f04f 30ff 	mov.w	r0, #4294967295
 800c0b2:	e03e      	b.n	800c132 <__swsetup_r+0xba>
 800c0b4:	4b25      	ldr	r3, [pc, #148]	; (800c14c <__swsetup_r+0xd4>)
 800c0b6:	429c      	cmp	r4, r3
 800c0b8:	d101      	bne.n	800c0be <__swsetup_r+0x46>
 800c0ba:	68ac      	ldr	r4, [r5, #8]
 800c0bc:	e7eb      	b.n	800c096 <__swsetup_r+0x1e>
 800c0be:	4b24      	ldr	r3, [pc, #144]	; (800c150 <__swsetup_r+0xd8>)
 800c0c0:	429c      	cmp	r4, r3
 800c0c2:	bf08      	it	eq
 800c0c4:	68ec      	ldreq	r4, [r5, #12]
 800c0c6:	e7e6      	b.n	800c096 <__swsetup_r+0x1e>
 800c0c8:	0758      	lsls	r0, r3, #29
 800c0ca:	d512      	bpl.n	800c0f2 <__swsetup_r+0x7a>
 800c0cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c0ce:	b141      	cbz	r1, 800c0e2 <__swsetup_r+0x6a>
 800c0d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c0d4:	4299      	cmp	r1, r3
 800c0d6:	d002      	beq.n	800c0de <__swsetup_r+0x66>
 800c0d8:	4630      	mov	r0, r6
 800c0da:	f7ff fbb5 	bl	800b848 <_free_r>
 800c0de:	2300      	movs	r3, #0
 800c0e0:	6363      	str	r3, [r4, #52]	; 0x34
 800c0e2:	89a3      	ldrh	r3, [r4, #12]
 800c0e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c0e8:	81a3      	strh	r3, [r4, #12]
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	6063      	str	r3, [r4, #4]
 800c0ee:	6923      	ldr	r3, [r4, #16]
 800c0f0:	6023      	str	r3, [r4, #0]
 800c0f2:	89a3      	ldrh	r3, [r4, #12]
 800c0f4:	f043 0308 	orr.w	r3, r3, #8
 800c0f8:	81a3      	strh	r3, [r4, #12]
 800c0fa:	6923      	ldr	r3, [r4, #16]
 800c0fc:	b94b      	cbnz	r3, 800c112 <__swsetup_r+0x9a>
 800c0fe:	89a3      	ldrh	r3, [r4, #12]
 800c100:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c104:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c108:	d003      	beq.n	800c112 <__swsetup_r+0x9a>
 800c10a:	4621      	mov	r1, r4
 800c10c:	4630      	mov	r0, r6
 800c10e:	f000 f959 	bl	800c3c4 <__smakebuf_r>
 800c112:	89a0      	ldrh	r0, [r4, #12]
 800c114:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c118:	f010 0301 	ands.w	r3, r0, #1
 800c11c:	d00a      	beq.n	800c134 <__swsetup_r+0xbc>
 800c11e:	2300      	movs	r3, #0
 800c120:	60a3      	str	r3, [r4, #8]
 800c122:	6963      	ldr	r3, [r4, #20]
 800c124:	425b      	negs	r3, r3
 800c126:	61a3      	str	r3, [r4, #24]
 800c128:	6923      	ldr	r3, [r4, #16]
 800c12a:	b943      	cbnz	r3, 800c13e <__swsetup_r+0xc6>
 800c12c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c130:	d1ba      	bne.n	800c0a8 <__swsetup_r+0x30>
 800c132:	bd70      	pop	{r4, r5, r6, pc}
 800c134:	0781      	lsls	r1, r0, #30
 800c136:	bf58      	it	pl
 800c138:	6963      	ldrpl	r3, [r4, #20]
 800c13a:	60a3      	str	r3, [r4, #8]
 800c13c:	e7f4      	b.n	800c128 <__swsetup_r+0xb0>
 800c13e:	2000      	movs	r0, #0
 800c140:	e7f7      	b.n	800c132 <__swsetup_r+0xba>
 800c142:	bf00      	nop
 800c144:	20000180 	.word	0x20000180
 800c148:	0800c7b4 	.word	0x0800c7b4
 800c14c:	0800c7d4 	.word	0x0800c7d4
 800c150:	0800c794 	.word	0x0800c794

0800c154 <__assert_func>:
 800c154:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c156:	4614      	mov	r4, r2
 800c158:	461a      	mov	r2, r3
 800c15a:	4b09      	ldr	r3, [pc, #36]	; (800c180 <__assert_func+0x2c>)
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	4605      	mov	r5, r0
 800c160:	68d8      	ldr	r0, [r3, #12]
 800c162:	b14c      	cbz	r4, 800c178 <__assert_func+0x24>
 800c164:	4b07      	ldr	r3, [pc, #28]	; (800c184 <__assert_func+0x30>)
 800c166:	9100      	str	r1, [sp, #0]
 800c168:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c16c:	4906      	ldr	r1, [pc, #24]	; (800c188 <__assert_func+0x34>)
 800c16e:	462b      	mov	r3, r5
 800c170:	f000 f8e0 	bl	800c334 <fiprintf>
 800c174:	f000 f9e3 	bl	800c53e <abort>
 800c178:	4b04      	ldr	r3, [pc, #16]	; (800c18c <__assert_func+0x38>)
 800c17a:	461c      	mov	r4, r3
 800c17c:	e7f3      	b.n	800c166 <__assert_func+0x12>
 800c17e:	bf00      	nop
 800c180:	20000180 	.word	0x20000180
 800c184:	0800c965 	.word	0x0800c965
 800c188:	0800c972 	.word	0x0800c972
 800c18c:	0800c9a0 	.word	0x0800c9a0

0800c190 <_close_r>:
 800c190:	b538      	push	{r3, r4, r5, lr}
 800c192:	4d06      	ldr	r5, [pc, #24]	; (800c1ac <_close_r+0x1c>)
 800c194:	2300      	movs	r3, #0
 800c196:	4604      	mov	r4, r0
 800c198:	4608      	mov	r0, r1
 800c19a:	602b      	str	r3, [r5, #0]
 800c19c:	f7f5 fc93 	bl	8001ac6 <_close>
 800c1a0:	1c43      	adds	r3, r0, #1
 800c1a2:	d102      	bne.n	800c1aa <_close_r+0x1a>
 800c1a4:	682b      	ldr	r3, [r5, #0]
 800c1a6:	b103      	cbz	r3, 800c1aa <_close_r+0x1a>
 800c1a8:	6023      	str	r3, [r4, #0]
 800c1aa:	bd38      	pop	{r3, r4, r5, pc}
 800c1ac:	20001f74 	.word	0x20001f74

0800c1b0 <__sflush_r>:
 800c1b0:	898a      	ldrh	r2, [r1, #12]
 800c1b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1b6:	4605      	mov	r5, r0
 800c1b8:	0710      	lsls	r0, r2, #28
 800c1ba:	460c      	mov	r4, r1
 800c1bc:	d458      	bmi.n	800c270 <__sflush_r+0xc0>
 800c1be:	684b      	ldr	r3, [r1, #4]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	dc05      	bgt.n	800c1d0 <__sflush_r+0x20>
 800c1c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	dc02      	bgt.n	800c1d0 <__sflush_r+0x20>
 800c1ca:	2000      	movs	r0, #0
 800c1cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c1d2:	2e00      	cmp	r6, #0
 800c1d4:	d0f9      	beq.n	800c1ca <__sflush_r+0x1a>
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c1dc:	682f      	ldr	r7, [r5, #0]
 800c1de:	602b      	str	r3, [r5, #0]
 800c1e0:	d032      	beq.n	800c248 <__sflush_r+0x98>
 800c1e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c1e4:	89a3      	ldrh	r3, [r4, #12]
 800c1e6:	075a      	lsls	r2, r3, #29
 800c1e8:	d505      	bpl.n	800c1f6 <__sflush_r+0x46>
 800c1ea:	6863      	ldr	r3, [r4, #4]
 800c1ec:	1ac0      	subs	r0, r0, r3
 800c1ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c1f0:	b10b      	cbz	r3, 800c1f6 <__sflush_r+0x46>
 800c1f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c1f4:	1ac0      	subs	r0, r0, r3
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	4602      	mov	r2, r0
 800c1fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c1fc:	6a21      	ldr	r1, [r4, #32]
 800c1fe:	4628      	mov	r0, r5
 800c200:	47b0      	blx	r6
 800c202:	1c43      	adds	r3, r0, #1
 800c204:	89a3      	ldrh	r3, [r4, #12]
 800c206:	d106      	bne.n	800c216 <__sflush_r+0x66>
 800c208:	6829      	ldr	r1, [r5, #0]
 800c20a:	291d      	cmp	r1, #29
 800c20c:	d82c      	bhi.n	800c268 <__sflush_r+0xb8>
 800c20e:	4a2a      	ldr	r2, [pc, #168]	; (800c2b8 <__sflush_r+0x108>)
 800c210:	40ca      	lsrs	r2, r1
 800c212:	07d6      	lsls	r6, r2, #31
 800c214:	d528      	bpl.n	800c268 <__sflush_r+0xb8>
 800c216:	2200      	movs	r2, #0
 800c218:	6062      	str	r2, [r4, #4]
 800c21a:	04d9      	lsls	r1, r3, #19
 800c21c:	6922      	ldr	r2, [r4, #16]
 800c21e:	6022      	str	r2, [r4, #0]
 800c220:	d504      	bpl.n	800c22c <__sflush_r+0x7c>
 800c222:	1c42      	adds	r2, r0, #1
 800c224:	d101      	bne.n	800c22a <__sflush_r+0x7a>
 800c226:	682b      	ldr	r3, [r5, #0]
 800c228:	b903      	cbnz	r3, 800c22c <__sflush_r+0x7c>
 800c22a:	6560      	str	r0, [r4, #84]	; 0x54
 800c22c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c22e:	602f      	str	r7, [r5, #0]
 800c230:	2900      	cmp	r1, #0
 800c232:	d0ca      	beq.n	800c1ca <__sflush_r+0x1a>
 800c234:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c238:	4299      	cmp	r1, r3
 800c23a:	d002      	beq.n	800c242 <__sflush_r+0x92>
 800c23c:	4628      	mov	r0, r5
 800c23e:	f7ff fb03 	bl	800b848 <_free_r>
 800c242:	2000      	movs	r0, #0
 800c244:	6360      	str	r0, [r4, #52]	; 0x34
 800c246:	e7c1      	b.n	800c1cc <__sflush_r+0x1c>
 800c248:	6a21      	ldr	r1, [r4, #32]
 800c24a:	2301      	movs	r3, #1
 800c24c:	4628      	mov	r0, r5
 800c24e:	47b0      	blx	r6
 800c250:	1c41      	adds	r1, r0, #1
 800c252:	d1c7      	bne.n	800c1e4 <__sflush_r+0x34>
 800c254:	682b      	ldr	r3, [r5, #0]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d0c4      	beq.n	800c1e4 <__sflush_r+0x34>
 800c25a:	2b1d      	cmp	r3, #29
 800c25c:	d001      	beq.n	800c262 <__sflush_r+0xb2>
 800c25e:	2b16      	cmp	r3, #22
 800c260:	d101      	bne.n	800c266 <__sflush_r+0xb6>
 800c262:	602f      	str	r7, [r5, #0]
 800c264:	e7b1      	b.n	800c1ca <__sflush_r+0x1a>
 800c266:	89a3      	ldrh	r3, [r4, #12]
 800c268:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c26c:	81a3      	strh	r3, [r4, #12]
 800c26e:	e7ad      	b.n	800c1cc <__sflush_r+0x1c>
 800c270:	690f      	ldr	r7, [r1, #16]
 800c272:	2f00      	cmp	r7, #0
 800c274:	d0a9      	beq.n	800c1ca <__sflush_r+0x1a>
 800c276:	0793      	lsls	r3, r2, #30
 800c278:	680e      	ldr	r6, [r1, #0]
 800c27a:	bf08      	it	eq
 800c27c:	694b      	ldreq	r3, [r1, #20]
 800c27e:	600f      	str	r7, [r1, #0]
 800c280:	bf18      	it	ne
 800c282:	2300      	movne	r3, #0
 800c284:	eba6 0807 	sub.w	r8, r6, r7
 800c288:	608b      	str	r3, [r1, #8]
 800c28a:	f1b8 0f00 	cmp.w	r8, #0
 800c28e:	dd9c      	ble.n	800c1ca <__sflush_r+0x1a>
 800c290:	6a21      	ldr	r1, [r4, #32]
 800c292:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c294:	4643      	mov	r3, r8
 800c296:	463a      	mov	r2, r7
 800c298:	4628      	mov	r0, r5
 800c29a:	47b0      	blx	r6
 800c29c:	2800      	cmp	r0, #0
 800c29e:	dc06      	bgt.n	800c2ae <__sflush_r+0xfe>
 800c2a0:	89a3      	ldrh	r3, [r4, #12]
 800c2a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2a6:	81a3      	strh	r3, [r4, #12]
 800c2a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c2ac:	e78e      	b.n	800c1cc <__sflush_r+0x1c>
 800c2ae:	4407      	add	r7, r0
 800c2b0:	eba8 0800 	sub.w	r8, r8, r0
 800c2b4:	e7e9      	b.n	800c28a <__sflush_r+0xda>
 800c2b6:	bf00      	nop
 800c2b8:	20400001 	.word	0x20400001

0800c2bc <_fflush_r>:
 800c2bc:	b538      	push	{r3, r4, r5, lr}
 800c2be:	690b      	ldr	r3, [r1, #16]
 800c2c0:	4605      	mov	r5, r0
 800c2c2:	460c      	mov	r4, r1
 800c2c4:	b913      	cbnz	r3, 800c2cc <_fflush_r+0x10>
 800c2c6:	2500      	movs	r5, #0
 800c2c8:	4628      	mov	r0, r5
 800c2ca:	bd38      	pop	{r3, r4, r5, pc}
 800c2cc:	b118      	cbz	r0, 800c2d6 <_fflush_r+0x1a>
 800c2ce:	6983      	ldr	r3, [r0, #24]
 800c2d0:	b90b      	cbnz	r3, 800c2d6 <_fflush_r+0x1a>
 800c2d2:	f7fe fe7d 	bl	800afd0 <__sinit>
 800c2d6:	4b14      	ldr	r3, [pc, #80]	; (800c328 <_fflush_r+0x6c>)
 800c2d8:	429c      	cmp	r4, r3
 800c2da:	d11b      	bne.n	800c314 <_fflush_r+0x58>
 800c2dc:	686c      	ldr	r4, [r5, #4]
 800c2de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d0ef      	beq.n	800c2c6 <_fflush_r+0xa>
 800c2e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c2e8:	07d0      	lsls	r0, r2, #31
 800c2ea:	d404      	bmi.n	800c2f6 <_fflush_r+0x3a>
 800c2ec:	0599      	lsls	r1, r3, #22
 800c2ee:	d402      	bmi.n	800c2f6 <_fflush_r+0x3a>
 800c2f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2f2:	f7fe ff10 	bl	800b116 <__retarget_lock_acquire_recursive>
 800c2f6:	4628      	mov	r0, r5
 800c2f8:	4621      	mov	r1, r4
 800c2fa:	f7ff ff59 	bl	800c1b0 <__sflush_r>
 800c2fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c300:	07da      	lsls	r2, r3, #31
 800c302:	4605      	mov	r5, r0
 800c304:	d4e0      	bmi.n	800c2c8 <_fflush_r+0xc>
 800c306:	89a3      	ldrh	r3, [r4, #12]
 800c308:	059b      	lsls	r3, r3, #22
 800c30a:	d4dd      	bmi.n	800c2c8 <_fflush_r+0xc>
 800c30c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c30e:	f7fe ff03 	bl	800b118 <__retarget_lock_release_recursive>
 800c312:	e7d9      	b.n	800c2c8 <_fflush_r+0xc>
 800c314:	4b05      	ldr	r3, [pc, #20]	; (800c32c <_fflush_r+0x70>)
 800c316:	429c      	cmp	r4, r3
 800c318:	d101      	bne.n	800c31e <_fflush_r+0x62>
 800c31a:	68ac      	ldr	r4, [r5, #8]
 800c31c:	e7df      	b.n	800c2de <_fflush_r+0x22>
 800c31e:	4b04      	ldr	r3, [pc, #16]	; (800c330 <_fflush_r+0x74>)
 800c320:	429c      	cmp	r4, r3
 800c322:	bf08      	it	eq
 800c324:	68ec      	ldreq	r4, [r5, #12]
 800c326:	e7da      	b.n	800c2de <_fflush_r+0x22>
 800c328:	0800c7b4 	.word	0x0800c7b4
 800c32c:	0800c7d4 	.word	0x0800c7d4
 800c330:	0800c794 	.word	0x0800c794

0800c334 <fiprintf>:
 800c334:	b40e      	push	{r1, r2, r3}
 800c336:	b503      	push	{r0, r1, lr}
 800c338:	4601      	mov	r1, r0
 800c33a:	ab03      	add	r3, sp, #12
 800c33c:	4805      	ldr	r0, [pc, #20]	; (800c354 <fiprintf+0x20>)
 800c33e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c342:	6800      	ldr	r0, [r0, #0]
 800c344:	9301      	str	r3, [sp, #4]
 800c346:	f7ff fcaf 	bl	800bca8 <_vfiprintf_r>
 800c34a:	b002      	add	sp, #8
 800c34c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c350:	b003      	add	sp, #12
 800c352:	4770      	bx	lr
 800c354:	20000180 	.word	0x20000180

0800c358 <_lseek_r>:
 800c358:	b538      	push	{r3, r4, r5, lr}
 800c35a:	4d07      	ldr	r5, [pc, #28]	; (800c378 <_lseek_r+0x20>)
 800c35c:	4604      	mov	r4, r0
 800c35e:	4608      	mov	r0, r1
 800c360:	4611      	mov	r1, r2
 800c362:	2200      	movs	r2, #0
 800c364:	602a      	str	r2, [r5, #0]
 800c366:	461a      	mov	r2, r3
 800c368:	f7f5 fbd4 	bl	8001b14 <_lseek>
 800c36c:	1c43      	adds	r3, r0, #1
 800c36e:	d102      	bne.n	800c376 <_lseek_r+0x1e>
 800c370:	682b      	ldr	r3, [r5, #0]
 800c372:	b103      	cbz	r3, 800c376 <_lseek_r+0x1e>
 800c374:	6023      	str	r3, [r4, #0]
 800c376:	bd38      	pop	{r3, r4, r5, pc}
 800c378:	20001f74 	.word	0x20001f74

0800c37c <__swhatbuf_r>:
 800c37c:	b570      	push	{r4, r5, r6, lr}
 800c37e:	460e      	mov	r6, r1
 800c380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c384:	2900      	cmp	r1, #0
 800c386:	b096      	sub	sp, #88	; 0x58
 800c388:	4614      	mov	r4, r2
 800c38a:	461d      	mov	r5, r3
 800c38c:	da07      	bge.n	800c39e <__swhatbuf_r+0x22>
 800c38e:	2300      	movs	r3, #0
 800c390:	602b      	str	r3, [r5, #0]
 800c392:	89b3      	ldrh	r3, [r6, #12]
 800c394:	061a      	lsls	r2, r3, #24
 800c396:	d410      	bmi.n	800c3ba <__swhatbuf_r+0x3e>
 800c398:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c39c:	e00e      	b.n	800c3bc <__swhatbuf_r+0x40>
 800c39e:	466a      	mov	r2, sp
 800c3a0:	f000 f8d4 	bl	800c54c <_fstat_r>
 800c3a4:	2800      	cmp	r0, #0
 800c3a6:	dbf2      	blt.n	800c38e <__swhatbuf_r+0x12>
 800c3a8:	9a01      	ldr	r2, [sp, #4]
 800c3aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c3ae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c3b2:	425a      	negs	r2, r3
 800c3b4:	415a      	adcs	r2, r3
 800c3b6:	602a      	str	r2, [r5, #0]
 800c3b8:	e7ee      	b.n	800c398 <__swhatbuf_r+0x1c>
 800c3ba:	2340      	movs	r3, #64	; 0x40
 800c3bc:	2000      	movs	r0, #0
 800c3be:	6023      	str	r3, [r4, #0]
 800c3c0:	b016      	add	sp, #88	; 0x58
 800c3c2:	bd70      	pop	{r4, r5, r6, pc}

0800c3c4 <__smakebuf_r>:
 800c3c4:	898b      	ldrh	r3, [r1, #12]
 800c3c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c3c8:	079d      	lsls	r5, r3, #30
 800c3ca:	4606      	mov	r6, r0
 800c3cc:	460c      	mov	r4, r1
 800c3ce:	d507      	bpl.n	800c3e0 <__smakebuf_r+0x1c>
 800c3d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c3d4:	6023      	str	r3, [r4, #0]
 800c3d6:	6123      	str	r3, [r4, #16]
 800c3d8:	2301      	movs	r3, #1
 800c3da:	6163      	str	r3, [r4, #20]
 800c3dc:	b002      	add	sp, #8
 800c3de:	bd70      	pop	{r4, r5, r6, pc}
 800c3e0:	ab01      	add	r3, sp, #4
 800c3e2:	466a      	mov	r2, sp
 800c3e4:	f7ff ffca 	bl	800c37c <__swhatbuf_r>
 800c3e8:	9900      	ldr	r1, [sp, #0]
 800c3ea:	4605      	mov	r5, r0
 800c3ec:	4630      	mov	r0, r6
 800c3ee:	f7ff fa7b 	bl	800b8e8 <_malloc_r>
 800c3f2:	b948      	cbnz	r0, 800c408 <__smakebuf_r+0x44>
 800c3f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3f8:	059a      	lsls	r2, r3, #22
 800c3fa:	d4ef      	bmi.n	800c3dc <__smakebuf_r+0x18>
 800c3fc:	f023 0303 	bic.w	r3, r3, #3
 800c400:	f043 0302 	orr.w	r3, r3, #2
 800c404:	81a3      	strh	r3, [r4, #12]
 800c406:	e7e3      	b.n	800c3d0 <__smakebuf_r+0xc>
 800c408:	4b0d      	ldr	r3, [pc, #52]	; (800c440 <__smakebuf_r+0x7c>)
 800c40a:	62b3      	str	r3, [r6, #40]	; 0x28
 800c40c:	89a3      	ldrh	r3, [r4, #12]
 800c40e:	6020      	str	r0, [r4, #0]
 800c410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c414:	81a3      	strh	r3, [r4, #12]
 800c416:	9b00      	ldr	r3, [sp, #0]
 800c418:	6163      	str	r3, [r4, #20]
 800c41a:	9b01      	ldr	r3, [sp, #4]
 800c41c:	6120      	str	r0, [r4, #16]
 800c41e:	b15b      	cbz	r3, 800c438 <__smakebuf_r+0x74>
 800c420:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c424:	4630      	mov	r0, r6
 800c426:	f000 f8a3 	bl	800c570 <_isatty_r>
 800c42a:	b128      	cbz	r0, 800c438 <__smakebuf_r+0x74>
 800c42c:	89a3      	ldrh	r3, [r4, #12]
 800c42e:	f023 0303 	bic.w	r3, r3, #3
 800c432:	f043 0301 	orr.w	r3, r3, #1
 800c436:	81a3      	strh	r3, [r4, #12]
 800c438:	89a0      	ldrh	r0, [r4, #12]
 800c43a:	4305      	orrs	r5, r0
 800c43c:	81a5      	strh	r5, [r4, #12]
 800c43e:	e7cd      	b.n	800c3dc <__smakebuf_r+0x18>
 800c440:	0800af69 	.word	0x0800af69

0800c444 <__ascii_mbtowc>:
 800c444:	b082      	sub	sp, #8
 800c446:	b901      	cbnz	r1, 800c44a <__ascii_mbtowc+0x6>
 800c448:	a901      	add	r1, sp, #4
 800c44a:	b142      	cbz	r2, 800c45e <__ascii_mbtowc+0x1a>
 800c44c:	b14b      	cbz	r3, 800c462 <__ascii_mbtowc+0x1e>
 800c44e:	7813      	ldrb	r3, [r2, #0]
 800c450:	600b      	str	r3, [r1, #0]
 800c452:	7812      	ldrb	r2, [r2, #0]
 800c454:	1e10      	subs	r0, r2, #0
 800c456:	bf18      	it	ne
 800c458:	2001      	movne	r0, #1
 800c45a:	b002      	add	sp, #8
 800c45c:	4770      	bx	lr
 800c45e:	4610      	mov	r0, r2
 800c460:	e7fb      	b.n	800c45a <__ascii_mbtowc+0x16>
 800c462:	f06f 0001 	mvn.w	r0, #1
 800c466:	e7f8      	b.n	800c45a <__ascii_mbtowc+0x16>

0800c468 <memmove>:
 800c468:	4288      	cmp	r0, r1
 800c46a:	b510      	push	{r4, lr}
 800c46c:	eb01 0402 	add.w	r4, r1, r2
 800c470:	d902      	bls.n	800c478 <memmove+0x10>
 800c472:	4284      	cmp	r4, r0
 800c474:	4623      	mov	r3, r4
 800c476:	d807      	bhi.n	800c488 <memmove+0x20>
 800c478:	1e43      	subs	r3, r0, #1
 800c47a:	42a1      	cmp	r1, r4
 800c47c:	d008      	beq.n	800c490 <memmove+0x28>
 800c47e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c482:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c486:	e7f8      	b.n	800c47a <memmove+0x12>
 800c488:	4402      	add	r2, r0
 800c48a:	4601      	mov	r1, r0
 800c48c:	428a      	cmp	r2, r1
 800c48e:	d100      	bne.n	800c492 <memmove+0x2a>
 800c490:	bd10      	pop	{r4, pc}
 800c492:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c496:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c49a:	e7f7      	b.n	800c48c <memmove+0x24>

0800c49c <__malloc_lock>:
 800c49c:	4801      	ldr	r0, [pc, #4]	; (800c4a4 <__malloc_lock+0x8>)
 800c49e:	f7fe be3a 	b.w	800b116 <__retarget_lock_acquire_recursive>
 800c4a2:	bf00      	nop
 800c4a4:	20001f6c 	.word	0x20001f6c

0800c4a8 <__malloc_unlock>:
 800c4a8:	4801      	ldr	r0, [pc, #4]	; (800c4b0 <__malloc_unlock+0x8>)
 800c4aa:	f7fe be35 	b.w	800b118 <__retarget_lock_release_recursive>
 800c4ae:	bf00      	nop
 800c4b0:	20001f6c 	.word	0x20001f6c

0800c4b4 <_realloc_r>:
 800c4b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4b6:	4607      	mov	r7, r0
 800c4b8:	4614      	mov	r4, r2
 800c4ba:	460e      	mov	r6, r1
 800c4bc:	b921      	cbnz	r1, 800c4c8 <_realloc_r+0x14>
 800c4be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c4c2:	4611      	mov	r1, r2
 800c4c4:	f7ff ba10 	b.w	800b8e8 <_malloc_r>
 800c4c8:	b922      	cbnz	r2, 800c4d4 <_realloc_r+0x20>
 800c4ca:	f7ff f9bd 	bl	800b848 <_free_r>
 800c4ce:	4625      	mov	r5, r4
 800c4d0:	4628      	mov	r0, r5
 800c4d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4d4:	f000 f85c 	bl	800c590 <_malloc_usable_size_r>
 800c4d8:	42a0      	cmp	r0, r4
 800c4da:	d20f      	bcs.n	800c4fc <_realloc_r+0x48>
 800c4dc:	4621      	mov	r1, r4
 800c4de:	4638      	mov	r0, r7
 800c4e0:	f7ff fa02 	bl	800b8e8 <_malloc_r>
 800c4e4:	4605      	mov	r5, r0
 800c4e6:	2800      	cmp	r0, #0
 800c4e8:	d0f2      	beq.n	800c4d0 <_realloc_r+0x1c>
 800c4ea:	4631      	mov	r1, r6
 800c4ec:	4622      	mov	r2, r4
 800c4ee:	f7fd f9ff 	bl	80098f0 <memcpy>
 800c4f2:	4631      	mov	r1, r6
 800c4f4:	4638      	mov	r0, r7
 800c4f6:	f7ff f9a7 	bl	800b848 <_free_r>
 800c4fa:	e7e9      	b.n	800c4d0 <_realloc_r+0x1c>
 800c4fc:	4635      	mov	r5, r6
 800c4fe:	e7e7      	b.n	800c4d0 <_realloc_r+0x1c>

0800c500 <_read_r>:
 800c500:	b538      	push	{r3, r4, r5, lr}
 800c502:	4d07      	ldr	r5, [pc, #28]	; (800c520 <_read_r+0x20>)
 800c504:	4604      	mov	r4, r0
 800c506:	4608      	mov	r0, r1
 800c508:	4611      	mov	r1, r2
 800c50a:	2200      	movs	r2, #0
 800c50c:	602a      	str	r2, [r5, #0]
 800c50e:	461a      	mov	r2, r3
 800c510:	f7f5 faa0 	bl	8001a54 <_read>
 800c514:	1c43      	adds	r3, r0, #1
 800c516:	d102      	bne.n	800c51e <_read_r+0x1e>
 800c518:	682b      	ldr	r3, [r5, #0]
 800c51a:	b103      	cbz	r3, 800c51e <_read_r+0x1e>
 800c51c:	6023      	str	r3, [r4, #0]
 800c51e:	bd38      	pop	{r3, r4, r5, pc}
 800c520:	20001f74 	.word	0x20001f74

0800c524 <__ascii_wctomb>:
 800c524:	b149      	cbz	r1, 800c53a <__ascii_wctomb+0x16>
 800c526:	2aff      	cmp	r2, #255	; 0xff
 800c528:	bf85      	ittet	hi
 800c52a:	238a      	movhi	r3, #138	; 0x8a
 800c52c:	6003      	strhi	r3, [r0, #0]
 800c52e:	700a      	strbls	r2, [r1, #0]
 800c530:	f04f 30ff 	movhi.w	r0, #4294967295
 800c534:	bf98      	it	ls
 800c536:	2001      	movls	r0, #1
 800c538:	4770      	bx	lr
 800c53a:	4608      	mov	r0, r1
 800c53c:	4770      	bx	lr

0800c53e <abort>:
 800c53e:	b508      	push	{r3, lr}
 800c540:	2006      	movs	r0, #6
 800c542:	f000 f855 	bl	800c5f0 <raise>
 800c546:	2001      	movs	r0, #1
 800c548:	f7f5 fa7a 	bl	8001a40 <_exit>

0800c54c <_fstat_r>:
 800c54c:	b538      	push	{r3, r4, r5, lr}
 800c54e:	4d07      	ldr	r5, [pc, #28]	; (800c56c <_fstat_r+0x20>)
 800c550:	2300      	movs	r3, #0
 800c552:	4604      	mov	r4, r0
 800c554:	4608      	mov	r0, r1
 800c556:	4611      	mov	r1, r2
 800c558:	602b      	str	r3, [r5, #0]
 800c55a:	f7f5 fac0 	bl	8001ade <_fstat>
 800c55e:	1c43      	adds	r3, r0, #1
 800c560:	d102      	bne.n	800c568 <_fstat_r+0x1c>
 800c562:	682b      	ldr	r3, [r5, #0]
 800c564:	b103      	cbz	r3, 800c568 <_fstat_r+0x1c>
 800c566:	6023      	str	r3, [r4, #0]
 800c568:	bd38      	pop	{r3, r4, r5, pc}
 800c56a:	bf00      	nop
 800c56c:	20001f74 	.word	0x20001f74

0800c570 <_isatty_r>:
 800c570:	b538      	push	{r3, r4, r5, lr}
 800c572:	4d06      	ldr	r5, [pc, #24]	; (800c58c <_isatty_r+0x1c>)
 800c574:	2300      	movs	r3, #0
 800c576:	4604      	mov	r4, r0
 800c578:	4608      	mov	r0, r1
 800c57a:	602b      	str	r3, [r5, #0]
 800c57c:	f7f5 fabf 	bl	8001afe <_isatty>
 800c580:	1c43      	adds	r3, r0, #1
 800c582:	d102      	bne.n	800c58a <_isatty_r+0x1a>
 800c584:	682b      	ldr	r3, [r5, #0]
 800c586:	b103      	cbz	r3, 800c58a <_isatty_r+0x1a>
 800c588:	6023      	str	r3, [r4, #0]
 800c58a:	bd38      	pop	{r3, r4, r5, pc}
 800c58c:	20001f74 	.word	0x20001f74

0800c590 <_malloc_usable_size_r>:
 800c590:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c594:	1f18      	subs	r0, r3, #4
 800c596:	2b00      	cmp	r3, #0
 800c598:	bfbc      	itt	lt
 800c59a:	580b      	ldrlt	r3, [r1, r0]
 800c59c:	18c0      	addlt	r0, r0, r3
 800c59e:	4770      	bx	lr

0800c5a0 <_raise_r>:
 800c5a0:	291f      	cmp	r1, #31
 800c5a2:	b538      	push	{r3, r4, r5, lr}
 800c5a4:	4604      	mov	r4, r0
 800c5a6:	460d      	mov	r5, r1
 800c5a8:	d904      	bls.n	800c5b4 <_raise_r+0x14>
 800c5aa:	2316      	movs	r3, #22
 800c5ac:	6003      	str	r3, [r0, #0]
 800c5ae:	f04f 30ff 	mov.w	r0, #4294967295
 800c5b2:	bd38      	pop	{r3, r4, r5, pc}
 800c5b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c5b6:	b112      	cbz	r2, 800c5be <_raise_r+0x1e>
 800c5b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c5bc:	b94b      	cbnz	r3, 800c5d2 <_raise_r+0x32>
 800c5be:	4620      	mov	r0, r4
 800c5c0:	f000 f830 	bl	800c624 <_getpid_r>
 800c5c4:	462a      	mov	r2, r5
 800c5c6:	4601      	mov	r1, r0
 800c5c8:	4620      	mov	r0, r4
 800c5ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c5ce:	f000 b817 	b.w	800c600 <_kill_r>
 800c5d2:	2b01      	cmp	r3, #1
 800c5d4:	d00a      	beq.n	800c5ec <_raise_r+0x4c>
 800c5d6:	1c59      	adds	r1, r3, #1
 800c5d8:	d103      	bne.n	800c5e2 <_raise_r+0x42>
 800c5da:	2316      	movs	r3, #22
 800c5dc:	6003      	str	r3, [r0, #0]
 800c5de:	2001      	movs	r0, #1
 800c5e0:	e7e7      	b.n	800c5b2 <_raise_r+0x12>
 800c5e2:	2400      	movs	r4, #0
 800c5e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c5e8:	4628      	mov	r0, r5
 800c5ea:	4798      	blx	r3
 800c5ec:	2000      	movs	r0, #0
 800c5ee:	e7e0      	b.n	800c5b2 <_raise_r+0x12>

0800c5f0 <raise>:
 800c5f0:	4b02      	ldr	r3, [pc, #8]	; (800c5fc <raise+0xc>)
 800c5f2:	4601      	mov	r1, r0
 800c5f4:	6818      	ldr	r0, [r3, #0]
 800c5f6:	f7ff bfd3 	b.w	800c5a0 <_raise_r>
 800c5fa:	bf00      	nop
 800c5fc:	20000180 	.word	0x20000180

0800c600 <_kill_r>:
 800c600:	b538      	push	{r3, r4, r5, lr}
 800c602:	4d07      	ldr	r5, [pc, #28]	; (800c620 <_kill_r+0x20>)
 800c604:	2300      	movs	r3, #0
 800c606:	4604      	mov	r4, r0
 800c608:	4608      	mov	r0, r1
 800c60a:	4611      	mov	r1, r2
 800c60c:	602b      	str	r3, [r5, #0]
 800c60e:	f7f5 fa07 	bl	8001a20 <_kill>
 800c612:	1c43      	adds	r3, r0, #1
 800c614:	d102      	bne.n	800c61c <_kill_r+0x1c>
 800c616:	682b      	ldr	r3, [r5, #0]
 800c618:	b103      	cbz	r3, 800c61c <_kill_r+0x1c>
 800c61a:	6023      	str	r3, [r4, #0]
 800c61c:	bd38      	pop	{r3, r4, r5, pc}
 800c61e:	bf00      	nop
 800c620:	20001f74 	.word	0x20001f74

0800c624 <_getpid_r>:
 800c624:	f7f5 b9f4 	b.w	8001a10 <_getpid>

0800c628 <_init>:
 800c628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c62a:	bf00      	nop
 800c62c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c62e:	bc08      	pop	{r3}
 800c630:	469e      	mov	lr, r3
 800c632:	4770      	bx	lr

0800c634 <_fini>:
 800c634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c636:	bf00      	nop
 800c638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c63a:	bc08      	pop	{r3}
 800c63c:	469e      	mov	lr, r3
 800c63e:	4770      	bx	lr
