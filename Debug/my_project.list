
my_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d14  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08009eb4  08009eb4  00019eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fd0  08009fd0  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08009fd0  08009fd0  00019fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009fd8  08009fd8  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fd8  08009fd8  00019fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009fdc  08009fdc  00019fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08009fe0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c28  200001e4  0800a1c4  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e0c  0800a1c4  00021e0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e74e  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041b5  00000000  00000000  0003e962  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001320  00000000  00000000  00042b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011a0  00000000  00000000  00043e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019eb2  00000000  00000000  00044fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001abe1  00000000  00000000  0005ee8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ed41  00000000  00000000  00079a6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001087ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054cc  00000000  00000000  00108800  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009e9c 	.word	0x08009e9c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	08009e9c 	.word	0x08009e9c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b96e 	b.w	8000db0 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	4604      	mov	r4, r0
 8000af4:	468c      	mov	ip, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	f040 8083 	bne.w	8000c02 <__udivmoddi4+0x116>
 8000afc:	428a      	cmp	r2, r1
 8000afe:	4617      	mov	r7, r2
 8000b00:	d947      	bls.n	8000b92 <__udivmoddi4+0xa6>
 8000b02:	fab2 f282 	clz	r2, r2
 8000b06:	b142      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b08:	f1c2 0020 	rsb	r0, r2, #32
 8000b0c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b10:	4091      	lsls	r1, r2
 8000b12:	4097      	lsls	r7, r2
 8000b14:	ea40 0c01 	orr.w	ip, r0, r1
 8000b18:	4094      	lsls	r4, r2
 8000b1a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b1e:	0c23      	lsrs	r3, r4, #16
 8000b20:	fbbc f6f8 	udiv	r6, ip, r8
 8000b24:	fa1f fe87 	uxth.w	lr, r7
 8000b28:	fb08 c116 	mls	r1, r8, r6, ip
 8000b2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b30:	fb06 f10e 	mul.w	r1, r6, lr
 8000b34:	4299      	cmp	r1, r3
 8000b36:	d909      	bls.n	8000b4c <__udivmoddi4+0x60>
 8000b38:	18fb      	adds	r3, r7, r3
 8000b3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b3e:	f080 8119 	bcs.w	8000d74 <__udivmoddi4+0x288>
 8000b42:	4299      	cmp	r1, r3
 8000b44:	f240 8116 	bls.w	8000d74 <__udivmoddi4+0x288>
 8000b48:	3e02      	subs	r6, #2
 8000b4a:	443b      	add	r3, r7
 8000b4c:	1a5b      	subs	r3, r3, r1
 8000b4e:	b2a4      	uxth	r4, r4
 8000b50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b54:	fb08 3310 	mls	r3, r8, r0, r3
 8000b58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b60:	45a6      	cmp	lr, r4
 8000b62:	d909      	bls.n	8000b78 <__udivmoddi4+0x8c>
 8000b64:	193c      	adds	r4, r7, r4
 8000b66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b6a:	f080 8105 	bcs.w	8000d78 <__udivmoddi4+0x28c>
 8000b6e:	45a6      	cmp	lr, r4
 8000b70:	f240 8102 	bls.w	8000d78 <__udivmoddi4+0x28c>
 8000b74:	3802      	subs	r0, #2
 8000b76:	443c      	add	r4, r7
 8000b78:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b7c:	eba4 040e 	sub.w	r4, r4, lr
 8000b80:	2600      	movs	r6, #0
 8000b82:	b11d      	cbz	r5, 8000b8c <__udivmoddi4+0xa0>
 8000b84:	40d4      	lsrs	r4, r2
 8000b86:	2300      	movs	r3, #0
 8000b88:	e9c5 4300 	strd	r4, r3, [r5]
 8000b8c:	4631      	mov	r1, r6
 8000b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b92:	b902      	cbnz	r2, 8000b96 <__udivmoddi4+0xaa>
 8000b94:	deff      	udf	#255	; 0xff
 8000b96:	fab2 f282 	clz	r2, r2
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	d150      	bne.n	8000c40 <__udivmoddi4+0x154>
 8000b9e:	1bcb      	subs	r3, r1, r7
 8000ba0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba4:	fa1f f887 	uxth.w	r8, r7
 8000ba8:	2601      	movs	r6, #1
 8000baa:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bae:	0c21      	lsrs	r1, r4, #16
 8000bb0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bb8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bbc:	428b      	cmp	r3, r1
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0xe4>
 8000bc0:	1879      	adds	r1, r7, r1
 8000bc2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0xe2>
 8000bc8:	428b      	cmp	r3, r1
 8000bca:	f200 80e9 	bhi.w	8000da0 <__udivmoddi4+0x2b4>
 8000bce:	4684      	mov	ip, r0
 8000bd0:	1ac9      	subs	r1, r1, r3
 8000bd2:	b2a3      	uxth	r3, r4
 8000bd4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bd8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bdc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000be0:	fb08 f800 	mul.w	r8, r8, r0
 8000be4:	45a0      	cmp	r8, r4
 8000be6:	d907      	bls.n	8000bf8 <__udivmoddi4+0x10c>
 8000be8:	193c      	adds	r4, r7, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x10a>
 8000bf0:	45a0      	cmp	r8, r4
 8000bf2:	f200 80d9 	bhi.w	8000da8 <__udivmoddi4+0x2bc>
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	eba4 0408 	sub.w	r4, r4, r8
 8000bfc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c00:	e7bf      	b.n	8000b82 <__udivmoddi4+0x96>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d909      	bls.n	8000c1a <__udivmoddi4+0x12e>
 8000c06:	2d00      	cmp	r5, #0
 8000c08:	f000 80b1 	beq.w	8000d6e <__udivmoddi4+0x282>
 8000c0c:	2600      	movs	r6, #0
 8000c0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c12:	4630      	mov	r0, r6
 8000c14:	4631      	mov	r1, r6
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	fab3 f683 	clz	r6, r3
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	d14a      	bne.n	8000cb8 <__udivmoddi4+0x1cc>
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d302      	bcc.n	8000c2c <__udivmoddi4+0x140>
 8000c26:	4282      	cmp	r2, r0
 8000c28:	f200 80b8 	bhi.w	8000d9c <__udivmoddi4+0x2b0>
 8000c2c:	1a84      	subs	r4, r0, r2
 8000c2e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c32:	2001      	movs	r0, #1
 8000c34:	468c      	mov	ip, r1
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	d0a8      	beq.n	8000b8c <__udivmoddi4+0xa0>
 8000c3a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c3e:	e7a5      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000c40:	f1c2 0320 	rsb	r3, r2, #32
 8000c44:	fa20 f603 	lsr.w	r6, r0, r3
 8000c48:	4097      	lsls	r7, r2
 8000c4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c4e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c52:	40d9      	lsrs	r1, r3
 8000c54:	4330      	orrs	r0, r6
 8000c56:	0c03      	lsrs	r3, r0, #16
 8000c58:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c5c:	fa1f f887 	uxth.w	r8, r7
 8000c60:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c68:	fb06 f108 	mul.w	r1, r6, r8
 8000c6c:	4299      	cmp	r1, r3
 8000c6e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x19c>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c7a:	f080 808d 	bcs.w	8000d98 <__udivmoddi4+0x2ac>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 808a 	bls.w	8000d98 <__udivmoddi4+0x2ac>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b281      	uxth	r1, r0
 8000c8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c90:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c98:	fb00 f308 	mul.w	r3, r0, r8
 8000c9c:	428b      	cmp	r3, r1
 8000c9e:	d907      	bls.n	8000cb0 <__udivmoddi4+0x1c4>
 8000ca0:	1879      	adds	r1, r7, r1
 8000ca2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ca6:	d273      	bcs.n	8000d90 <__udivmoddi4+0x2a4>
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d971      	bls.n	8000d90 <__udivmoddi4+0x2a4>
 8000cac:	3802      	subs	r0, #2
 8000cae:	4439      	add	r1, r7
 8000cb0:	1acb      	subs	r3, r1, r3
 8000cb2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cb6:	e778      	b.n	8000baa <__udivmoddi4+0xbe>
 8000cb8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cbc:	fa03 f406 	lsl.w	r4, r3, r6
 8000cc0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cc4:	431c      	orrs	r4, r3
 8000cc6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cca:	fa01 f306 	lsl.w	r3, r1, r6
 8000cce:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cd2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cd6:	431f      	orrs	r7, r3
 8000cd8:	0c3b      	lsrs	r3, r7, #16
 8000cda:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cde:	fa1f f884 	uxth.w	r8, r4
 8000ce2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ce6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cea:	fb09 fa08 	mul.w	sl, r9, r8
 8000cee:	458a      	cmp	sl, r1
 8000cf0:	fa02 f206 	lsl.w	r2, r2, r6
 8000cf4:	fa00 f306 	lsl.w	r3, r0, r6
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x220>
 8000cfa:	1861      	adds	r1, r4, r1
 8000cfc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d00:	d248      	bcs.n	8000d94 <__udivmoddi4+0x2a8>
 8000d02:	458a      	cmp	sl, r1
 8000d04:	d946      	bls.n	8000d94 <__udivmoddi4+0x2a8>
 8000d06:	f1a9 0902 	sub.w	r9, r9, #2
 8000d0a:	4421      	add	r1, r4
 8000d0c:	eba1 010a 	sub.w	r1, r1, sl
 8000d10:	b2bf      	uxth	r7, r7
 8000d12:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d16:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d1a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d1e:	fb00 f808 	mul.w	r8, r0, r8
 8000d22:	45b8      	cmp	r8, r7
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x24a>
 8000d26:	19e7      	adds	r7, r4, r7
 8000d28:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d2c:	d22e      	bcs.n	8000d8c <__udivmoddi4+0x2a0>
 8000d2e:	45b8      	cmp	r8, r7
 8000d30:	d92c      	bls.n	8000d8c <__udivmoddi4+0x2a0>
 8000d32:	3802      	subs	r0, #2
 8000d34:	4427      	add	r7, r4
 8000d36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d3a:	eba7 0708 	sub.w	r7, r7, r8
 8000d3e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d42:	454f      	cmp	r7, r9
 8000d44:	46c6      	mov	lr, r8
 8000d46:	4649      	mov	r1, r9
 8000d48:	d31a      	bcc.n	8000d80 <__udivmoddi4+0x294>
 8000d4a:	d017      	beq.n	8000d7c <__udivmoddi4+0x290>
 8000d4c:	b15d      	cbz	r5, 8000d66 <__udivmoddi4+0x27a>
 8000d4e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d52:	eb67 0701 	sbc.w	r7, r7, r1
 8000d56:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d5a:	40f2      	lsrs	r2, r6
 8000d5c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d60:	40f7      	lsrs	r7, r6
 8000d62:	e9c5 2700 	strd	r2, r7, [r5]
 8000d66:	2600      	movs	r6, #0
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	462e      	mov	r6, r5
 8000d70:	4628      	mov	r0, r5
 8000d72:	e70b      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000d74:	4606      	mov	r6, r0
 8000d76:	e6e9      	b.n	8000b4c <__udivmoddi4+0x60>
 8000d78:	4618      	mov	r0, r3
 8000d7a:	e6fd      	b.n	8000b78 <__udivmoddi4+0x8c>
 8000d7c:	4543      	cmp	r3, r8
 8000d7e:	d2e5      	bcs.n	8000d4c <__udivmoddi4+0x260>
 8000d80:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d84:	eb69 0104 	sbc.w	r1, r9, r4
 8000d88:	3801      	subs	r0, #1
 8000d8a:	e7df      	b.n	8000d4c <__udivmoddi4+0x260>
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	e7d2      	b.n	8000d36 <__udivmoddi4+0x24a>
 8000d90:	4660      	mov	r0, ip
 8000d92:	e78d      	b.n	8000cb0 <__udivmoddi4+0x1c4>
 8000d94:	4681      	mov	r9, r0
 8000d96:	e7b9      	b.n	8000d0c <__udivmoddi4+0x220>
 8000d98:	4666      	mov	r6, ip
 8000d9a:	e775      	b.n	8000c88 <__udivmoddi4+0x19c>
 8000d9c:	4630      	mov	r0, r6
 8000d9e:	e74a      	b.n	8000c36 <__udivmoddi4+0x14a>
 8000da0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000da4:	4439      	add	r1, r7
 8000da6:	e713      	b.n	8000bd0 <__udivmoddi4+0xe4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	443c      	add	r4, r7
 8000dac:	e724      	b.n	8000bf8 <__udivmoddi4+0x10c>
 8000dae:	bf00      	nop

08000db0 <__aeabi_idiv0>:
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop

08000db4 <MPU6050_init>:
#include "MPU6050_mylib.h"

int8_t MPU6050_init(){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af04      	add	r7, sp, #16
	uint8_t Data_conf = 0, acc_2g = 0x00, gyro_2g=0x00;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	71fb      	strb	r3, [r7, #7]
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	71bb      	strb	r3, [r7, #6]
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(&hi2c2, MPU6050_RA_ADRR, MPU6050_RA_WHO_AM_I, 1, &Data_conf, 1, 100);
 8000dc6:	2364      	movs	r3, #100	; 0x64
 8000dc8:	9302      	str	r3, [sp, #8]
 8000dca:	2301      	movs	r3, #1
 8000dcc:	9301      	str	r3, [sp, #4]
 8000dce:	1dfb      	adds	r3, r7, #7
 8000dd0:	9300      	str	r3, [sp, #0]
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	2275      	movs	r2, #117	; 0x75
 8000dd6:	21d0      	movs	r1, #208	; 0xd0
 8000dd8:	4812      	ldr	r0, [pc, #72]	; (8000e24 <MPU6050_init+0x70>)
 8000dda:	f001 fc6f 	bl	80026bc <HAL_I2C_Mem_Read>
	if(Data_conf != MPU6050_WHO_AM_I_DEF_VAL){
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	2b71      	cmp	r3, #113	; 0x71
 8000de2:	d002      	beq.n	8000dea <MPU6050_init+0x36>
		return Data_conf;
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	b25b      	sxtb	r3, r3
 8000de8:	e018      	b.n	8000e1c <MPU6050_init+0x68>
	}
	//ustawienie czujnika na skalach +-2g i +-250 deg/s2
	HAL_I2C_Mem_Write(&hi2c2, MPU6050_RA_ADRR, MPU6050_RA_ACCEL_CONFIG, 1, &acc_2g, 1, 100);
 8000dea:	2364      	movs	r3, #100	; 0x64
 8000dec:	9302      	str	r3, [sp, #8]
 8000dee:	2301      	movs	r3, #1
 8000df0:	9301      	str	r3, [sp, #4]
 8000df2:	1dbb      	adds	r3, r7, #6
 8000df4:	9300      	str	r3, [sp, #0]
 8000df6:	2301      	movs	r3, #1
 8000df8:	221c      	movs	r2, #28
 8000dfa:	21d0      	movs	r1, #208	; 0xd0
 8000dfc:	4809      	ldr	r0, [pc, #36]	; (8000e24 <MPU6050_init+0x70>)
 8000dfe:	f001 fb63 	bl	80024c8 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c2, MPU6050_RA_ADRR, MPU6050_RA_GYRO_CONFIG, 1, &gyro_2g, 1, 100);
 8000e02:	2364      	movs	r3, #100	; 0x64
 8000e04:	9302      	str	r3, [sp, #8]
 8000e06:	2301      	movs	r3, #1
 8000e08:	9301      	str	r3, [sp, #4]
 8000e0a:	1d7b      	adds	r3, r7, #5
 8000e0c:	9300      	str	r3, [sp, #0]
 8000e0e:	2301      	movs	r3, #1
 8000e10:	221b      	movs	r2, #27
 8000e12:	21d0      	movs	r1, #208	; 0xd0
 8000e14:	4803      	ldr	r0, [pc, #12]	; (8000e24 <MPU6050_init+0x70>)
 8000e16:	f001 fb57 	bl	80024c8 <HAL_I2C_Mem_Write>
	return 0;
 8000e1a:	2300      	movs	r3, #0
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000430 	.word	0x20000430

08000e28 <MPU6050_measure>:

	Axis = ((Data[0] << 8) | Data[1]);
	return ((float)Axis*250.0)/(float) INT16_MAX;
}

void MPU6050_measure(MPU6050_data* mes){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08a      	sub	sp, #40	; 0x28
 8000e2c:	af04      	add	r7, sp, #16
 8000e2e:	6078      	str	r0, [r7, #4]
	uint8_t Data [14];//bufor danych
	int16_t Axis;//zmienna pomocnicza do konwersji odczytu na wartości fizyczne

	HAL_I2C_Mem_Read(&hi2c2, MPU6050_RA_ADRR, MPU6050_ACCEL_XOUT_H_16, 1, &Data, 14, 100);//odczyt danych z czujnika
 8000e30:	2364      	movs	r3, #100	; 0x64
 8000e32:	9302      	str	r3, [sp, #8]
 8000e34:	230e      	movs	r3, #14
 8000e36:	9301      	str	r3, [sp, #4]
 8000e38:	f107 0308 	add.w	r3, r7, #8
 8000e3c:	9300      	str	r3, [sp, #0]
 8000e3e:	2301      	movs	r3, #1
 8000e40:	22bb      	movs	r2, #187	; 0xbb
 8000e42:	21d0      	movs	r1, #208	; 0xd0
 8000e44:	4892      	ldr	r0, [pc, #584]	; (8001090 <MPU6050_measure+0x268>)
 8000e46:	f001 fc39 	bl	80026bc <HAL_I2C_Mem_Read>

	//konwersja danych z akcelerometru
	Axis = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	82fb      	strh	r3, [r7, #22]
	Axis = ((Data[0] << 8) | Data[1]);//konwersja odczytu do liczby 16-to bitowej
 8000e4e:	7a3b      	ldrb	r3, [r7, #8]
 8000e50:	021b      	lsls	r3, r3, #8
 8000e52:	b21a      	sxth	r2, r3
 8000e54:	7a7b      	ldrb	r3, [r7, #9]
 8000e56:	b21b      	sxth	r3, r3
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	82fb      	strh	r3, [r7, #22]
	mes->acc_x = ((float)Axis*2.0*GRAVITY)/(float)INT16_MAX;//przeliczenie odczytu na wartości fizyczne
 8000e5c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e60:	ee07 3a90 	vmov	s15, r3
 8000e64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e68:	ee17 0a90 	vmov	r0, s15
 8000e6c:	f7ff fb6c 	bl	8000548 <__aeabi_f2d>
 8000e70:	4602      	mov	r2, r0
 8000e72:	460b      	mov	r3, r1
 8000e74:	f7ff fa0a 	bl	800028c <__adddf3>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	4619      	mov	r1, r3
 8000e80:	a37f      	add	r3, pc, #508	; (adr r3, 8001080 <MPU6050_measure+0x258>)
 8000e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e86:	f7ff fbb7 	bl	80005f8 <__aeabi_dmul>
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	4610      	mov	r0, r2
 8000e90:	4619      	mov	r1, r3
 8000e92:	a37d      	add	r3, pc, #500	; (adr r3, 8001088 <MPU6050_measure+0x260>)
 8000e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e98:	f7ff fcd8 	bl	800084c <__aeabi_ddiv>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	4610      	mov	r0, r2
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	f7ff fdba 	bl	8000a1c <__aeabi_d2f>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	601a      	str	r2, [r3, #0]

	Axis = 0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	82fb      	strh	r3, [r7, #22]
	Axis = ((Data[2] << 8) | Data[3]);
 8000eb2:	7abb      	ldrb	r3, [r7, #10]
 8000eb4:	021b      	lsls	r3, r3, #8
 8000eb6:	b21a      	sxth	r2, r3
 8000eb8:	7afb      	ldrb	r3, [r7, #11]
 8000eba:	b21b      	sxth	r3, r3
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	82fb      	strh	r3, [r7, #22]
	mes->acc_y = ((float)Axis*2.0*GRAVITY)/(float)INT16_MAX;
 8000ec0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000ec4:	ee07 3a90 	vmov	s15, r3
 8000ec8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ecc:	ee17 0a90 	vmov	r0, s15
 8000ed0:	f7ff fb3a 	bl	8000548 <__aeabi_f2d>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	f7ff f9d8 	bl	800028c <__adddf3>
 8000edc:	4602      	mov	r2, r0
 8000ede:	460b      	mov	r3, r1
 8000ee0:	4610      	mov	r0, r2
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	a366      	add	r3, pc, #408	; (adr r3, 8001080 <MPU6050_measure+0x258>)
 8000ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eea:	f7ff fb85 	bl	80005f8 <__aeabi_dmul>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	4610      	mov	r0, r2
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	a364      	add	r3, pc, #400	; (adr r3, 8001088 <MPU6050_measure+0x260>)
 8000ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000efc:	f7ff fca6 	bl	800084c <__aeabi_ddiv>
 8000f00:	4602      	mov	r2, r0
 8000f02:	460b      	mov	r3, r1
 8000f04:	4610      	mov	r0, r2
 8000f06:	4619      	mov	r1, r3
 8000f08:	f7ff fd88 	bl	8000a1c <__aeabi_d2f>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	605a      	str	r2, [r3, #4]

	Axis = 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	82fb      	strh	r3, [r7, #22]
	Axis = ((Data[4] << 8) | Data[5]);
 8000f16:	7b3b      	ldrb	r3, [r7, #12]
 8000f18:	021b      	lsls	r3, r3, #8
 8000f1a:	b21a      	sxth	r2, r3
 8000f1c:	7b7b      	ldrb	r3, [r7, #13]
 8000f1e:	b21b      	sxth	r3, r3
 8000f20:	4313      	orrs	r3, r2
 8000f22:	82fb      	strh	r3, [r7, #22]
	mes->acc_z = ((float)Axis*2.0*GRAVITY)/(float)INT16_MAX;
 8000f24:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f28:	ee07 3a90 	vmov	s15, r3
 8000f2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f30:	ee17 0a90 	vmov	r0, s15
 8000f34:	f7ff fb08 	bl	8000548 <__aeabi_f2d>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	f7ff f9a6 	bl	800028c <__adddf3>
 8000f40:	4602      	mov	r2, r0
 8000f42:	460b      	mov	r3, r1
 8000f44:	4610      	mov	r0, r2
 8000f46:	4619      	mov	r1, r3
 8000f48:	a34d      	add	r3, pc, #308	; (adr r3, 8001080 <MPU6050_measure+0x258>)
 8000f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f4e:	f7ff fb53 	bl	80005f8 <__aeabi_dmul>
 8000f52:	4602      	mov	r2, r0
 8000f54:	460b      	mov	r3, r1
 8000f56:	4610      	mov	r0, r2
 8000f58:	4619      	mov	r1, r3
 8000f5a:	a34b      	add	r3, pc, #300	; (adr r3, 8001088 <MPU6050_measure+0x260>)
 8000f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f60:	f7ff fc74 	bl	800084c <__aeabi_ddiv>
 8000f64:	4602      	mov	r2, r0
 8000f66:	460b      	mov	r3, r1
 8000f68:	4610      	mov	r0, r2
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	f7ff fd56 	bl	8000a1c <__aeabi_d2f>
 8000f70:	4602      	mov	r2, r0
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	609a      	str	r2, [r3, #8]

	//konwersja danych z żyroskopu
	Axis = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	82fb      	strh	r3, [r7, #22]
	Axis = ((Data[8] << 8) | Data[9]);
 8000f7a:	7c3b      	ldrb	r3, [r7, #16]
 8000f7c:	021b      	lsls	r3, r3, #8
 8000f7e:	b21a      	sxth	r2, r3
 8000f80:	7c7b      	ldrb	r3, [r7, #17]
 8000f82:	b21b      	sxth	r3, r3
 8000f84:	4313      	orrs	r3, r2
 8000f86:	82fb      	strh	r3, [r7, #22]
	mes->gyro_x = ((float)Axis*250.0)/(float) INT16_MAX;
 8000f88:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f8c:	ee07 3a90 	vmov	s15, r3
 8000f90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f94:	ee17 0a90 	vmov	r0, s15
 8000f98:	f7ff fad6 	bl	8000548 <__aeabi_f2d>
 8000f9c:	f04f 0200 	mov.w	r2, #0
 8000fa0:	4b3c      	ldr	r3, [pc, #240]	; (8001094 <MPU6050_measure+0x26c>)
 8000fa2:	f7ff fb29 	bl	80005f8 <__aeabi_dmul>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	460b      	mov	r3, r1
 8000faa:	4610      	mov	r0, r2
 8000fac:	4619      	mov	r1, r3
 8000fae:	a336      	add	r3, pc, #216	; (adr r3, 8001088 <MPU6050_measure+0x260>)
 8000fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb4:	f7ff fc4a 	bl	800084c <__aeabi_ddiv>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	460b      	mov	r3, r1
 8000fbc:	4610      	mov	r0, r2
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	f7ff fd2c 	bl	8000a1c <__aeabi_d2f>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	60da      	str	r2, [r3, #12]

	Axis = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	82fb      	strh	r3, [r7, #22]
	Axis = ((Data[10] << 8) | Data[11]);
 8000fce:	7cbb      	ldrb	r3, [r7, #18]
 8000fd0:	021b      	lsls	r3, r3, #8
 8000fd2:	b21a      	sxth	r2, r3
 8000fd4:	7cfb      	ldrb	r3, [r7, #19]
 8000fd6:	b21b      	sxth	r3, r3
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	82fb      	strh	r3, [r7, #22]
	mes->gyro_y = ((float)Axis*250.0)/(float) INT16_MAX;
 8000fdc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000fe0:	ee07 3a90 	vmov	s15, r3
 8000fe4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fe8:	ee17 0a90 	vmov	r0, s15
 8000fec:	f7ff faac 	bl	8000548 <__aeabi_f2d>
 8000ff0:	f04f 0200 	mov.w	r2, #0
 8000ff4:	4b27      	ldr	r3, [pc, #156]	; (8001094 <MPU6050_measure+0x26c>)
 8000ff6:	f7ff faff 	bl	80005f8 <__aeabi_dmul>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	4610      	mov	r0, r2
 8001000:	4619      	mov	r1, r3
 8001002:	a321      	add	r3, pc, #132	; (adr r3, 8001088 <MPU6050_measure+0x260>)
 8001004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001008:	f7ff fc20 	bl	800084c <__aeabi_ddiv>
 800100c:	4602      	mov	r2, r0
 800100e:	460b      	mov	r3, r1
 8001010:	4610      	mov	r0, r2
 8001012:	4619      	mov	r1, r3
 8001014:	f7ff fd02 	bl	8000a1c <__aeabi_d2f>
 8001018:	4602      	mov	r2, r0
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	611a      	str	r2, [r3, #16]

	Axis = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	82fb      	strh	r3, [r7, #22]
	Axis = ((Data[12] << 8) | Data[13]);
 8001022:	7d3b      	ldrb	r3, [r7, #20]
 8001024:	021b      	lsls	r3, r3, #8
 8001026:	b21a      	sxth	r2, r3
 8001028:	7d7b      	ldrb	r3, [r7, #21]
 800102a:	b21b      	sxth	r3, r3
 800102c:	4313      	orrs	r3, r2
 800102e:	82fb      	strh	r3, [r7, #22]
	mes->gyro_z = ((float)Axis*250.0)/(float) INT16_MAX;
 8001030:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001034:	ee07 3a90 	vmov	s15, r3
 8001038:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800103c:	ee17 0a90 	vmov	r0, s15
 8001040:	f7ff fa82 	bl	8000548 <__aeabi_f2d>
 8001044:	f04f 0200 	mov.w	r2, #0
 8001048:	4b12      	ldr	r3, [pc, #72]	; (8001094 <MPU6050_measure+0x26c>)
 800104a:	f7ff fad5 	bl	80005f8 <__aeabi_dmul>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	4610      	mov	r0, r2
 8001054:	4619      	mov	r1, r3
 8001056:	a30c      	add	r3, pc, #48	; (adr r3, 8001088 <MPU6050_measure+0x260>)
 8001058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800105c:	f7ff fbf6 	bl	800084c <__aeabi_ddiv>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	4610      	mov	r0, r2
 8001066:	4619      	mov	r1, r3
 8001068:	f7ff fcd8 	bl	8000a1c <__aeabi_d2f>
 800106c:	4602      	mov	r2, r0
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	615a      	str	r2, [r3, #20]
}
 8001072:	bf00      	nop
 8001074:	3718      	adds	r7, #24
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	f3af 8000 	nop.w
 8001080:	51eb851f 	.word	0x51eb851f
 8001084:	40239eb8 	.word	0x40239eb8
 8001088:	00000000 	.word	0x00000000
 800108c:	40dfffc0 	.word	0x40dfffc0
 8001090:	20000430 	.word	0x20000430
 8001094:	406f4000 	.word	0x406f4000

08001098 <MX_GPIO_Init>:
        * EXTI
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08c      	sub	sp, #48	; 0x30
 800109c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109e:	f107 031c 	add.w	r3, r7, #28
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	60da      	str	r2, [r3, #12]
 80010ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	61bb      	str	r3, [r7, #24]
 80010b2:	4b6a      	ldr	r3, [pc, #424]	; (800125c <MX_GPIO_Init+0x1c4>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a69      	ldr	r2, [pc, #420]	; (800125c <MX_GPIO_Init+0x1c4>)
 80010b8:	f043 0310 	orr.w	r3, r3, #16
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b67      	ldr	r3, [pc, #412]	; (800125c <MX_GPIO_Init+0x1c4>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f003 0310 	and.w	r3, r3, #16
 80010c6:	61bb      	str	r3, [r7, #24]
 80010c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
 80010ce:	4b63      	ldr	r3, [pc, #396]	; (800125c <MX_GPIO_Init+0x1c4>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a62      	ldr	r2, [pc, #392]	; (800125c <MX_GPIO_Init+0x1c4>)
 80010d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b60      	ldr	r3, [pc, #384]	; (800125c <MX_GPIO_Init+0x1c4>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010e2:	617b      	str	r3, [r7, #20]
 80010e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	613b      	str	r3, [r7, #16]
 80010ea:	4b5c      	ldr	r3, [pc, #368]	; (800125c <MX_GPIO_Init+0x1c4>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a5b      	ldr	r2, [pc, #364]	; (800125c <MX_GPIO_Init+0x1c4>)
 80010f0:	f043 0304 	orr.w	r3, r3, #4
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b59      	ldr	r3, [pc, #356]	; (800125c <MX_GPIO_Init+0x1c4>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f003 0304 	and.w	r3, r3, #4
 80010fe:	613b      	str	r3, [r7, #16]
 8001100:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	4b55      	ldr	r3, [pc, #340]	; (800125c <MX_GPIO_Init+0x1c4>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a54      	ldr	r2, [pc, #336]	; (800125c <MX_GPIO_Init+0x1c4>)
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b52      	ldr	r3, [pc, #328]	; (800125c <MX_GPIO_Init+0x1c4>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	4b4e      	ldr	r3, [pc, #312]	; (800125c <MX_GPIO_Init+0x1c4>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	4a4d      	ldr	r2, [pc, #308]	; (800125c <MX_GPIO_Init+0x1c4>)
 8001128:	f043 0302 	orr.w	r3, r3, #2
 800112c:	6313      	str	r3, [r2, #48]	; 0x30
 800112e:	4b4b      	ldr	r3, [pc, #300]	; (800125c <MX_GPIO_Init+0x1c4>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	607b      	str	r3, [r7, #4]
 800113e:	4b47      	ldr	r3, [pc, #284]	; (800125c <MX_GPIO_Init+0x1c4>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	4a46      	ldr	r2, [pc, #280]	; (800125c <MX_GPIO_Init+0x1c4>)
 8001144:	f043 0308 	orr.w	r3, r3, #8
 8001148:	6313      	str	r3, [r2, #48]	; 0x30
 800114a:	4b44      	ldr	r3, [pc, #272]	; (800125c <MX_GPIO_Init+0x1c4>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	f003 0308 	and.w	r3, r3, #8
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001156:	2200      	movs	r2, #0
 8001158:	2108      	movs	r1, #8
 800115a:	4841      	ldr	r0, [pc, #260]	; (8001260 <MX_GPIO_Init+0x1c8>)
 800115c:	f001 f832 	bl	80021c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001160:	2201      	movs	r2, #1
 8001162:	2101      	movs	r1, #1
 8001164:	483f      	ldr	r0, [pc, #252]	; (8001264 <MX_GPIO_Init+0x1cc>)
 8001166:	f001 f82d 	bl	80021c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CSNpin_Pin|CEpin_Pin, GPIO_PIN_RESET);
 800116a:	2200      	movs	r2, #0
 800116c:	2130      	movs	r1, #48	; 0x30
 800116e:	483d      	ldr	r0, [pc, #244]	; (8001264 <MX_GPIO_Init+0x1cc>)
 8001170:	f001 f828 	bl	80021c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001174:	2200      	movs	r2, #0
 8001176:	f24f 0110 	movw	r1, #61456	; 0xf010
 800117a:	483b      	ldr	r0, [pc, #236]	; (8001268 <MX_GPIO_Init+0x1d0>)
 800117c:	f001 f822 	bl	80021c4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8001180:	2304      	movs	r3, #4
 8001182:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001184:	2300      	movs	r3, #0
 8001186:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 800118c:	f107 031c 	add.w	r3, r7, #28
 8001190:	4619      	mov	r1, r3
 8001192:	4833      	ldr	r0, [pc, #204]	; (8001260 <MX_GPIO_Init+0x1c8>)
 8001194:	f000 fe92 	bl	8001ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001198:	2308      	movs	r3, #8
 800119a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119c:	2301      	movs	r3, #1
 800119e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a4:	2300      	movs	r3, #0
 80011a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80011a8:	f107 031c 	add.w	r3, r7, #28
 80011ac:	4619      	mov	r1, r3
 80011ae:	482c      	ldr	r0, [pc, #176]	; (8001260 <MX_GPIO_Init+0x1c8>)
 80011b0:	f000 fe84 	bl	8001ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80011b4:	2332      	movs	r3, #50	; 0x32
 80011b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80011b8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80011bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011c2:	f107 031c 	add.w	r3, r7, #28
 80011c6:	4619      	mov	r1, r3
 80011c8:	4825      	ldr	r0, [pc, #148]	; (8001260 <MX_GPIO_Init+0x1c8>)
 80011ca:	f000 fe77 	bl	8001ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|CSNpin_Pin|CEpin_Pin;
 80011ce:	2331      	movs	r3, #49	; 0x31
 80011d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d2:	2301      	movs	r3, #1
 80011d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011da:	2300      	movs	r3, #0
 80011dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011de:	f107 031c 	add.w	r3, r7, #28
 80011e2:	4619      	mov	r1, r3
 80011e4:	481f      	ldr	r0, [pc, #124]	; (8001264 <MX_GPIO_Init+0x1cc>)
 80011e6:	f000 fe69 	bl	8001ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011ea:	2301      	movs	r3, #1
 80011ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011ee:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80011f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011f8:	f107 031c 	add.w	r3, r7, #28
 80011fc:	4619      	mov	r1, r3
 80011fe:	481b      	ldr	r0, [pc, #108]	; (800126c <MX_GPIO_Init+0x1d4>)
 8001200:	f000 fe5c 	bl	8001ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001204:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001208:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120a:	2301      	movs	r3, #1
 800120c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001212:	2300      	movs	r3, #0
 8001214:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001216:	f107 031c 	add.w	r3, r7, #28
 800121a:	4619      	mov	r1, r3
 800121c:	4812      	ldr	r0, [pc, #72]	; (8001268 <MX_GPIO_Init+0x1d0>)
 800121e:	f000 fe4d 	bl	8001ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001222:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001226:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001228:	2312      	movs	r3, #18
 800122a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800122c:	2301      	movs	r3, #1
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001230:	2300      	movs	r3, #0
 8001232:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001234:	2304      	movs	r3, #4
 8001236:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001238:	f107 031c 	add.w	r3, r7, #28
 800123c:	4619      	mov	r1, r3
 800123e:	480c      	ldr	r0, [pc, #48]	; (8001270 <MX_GPIO_Init+0x1d8>)
 8001240:	f000 fe3c 	bl	8001ebc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001244:	2200      	movs	r2, #0
 8001246:	2100      	movs	r1, #0
 8001248:	2006      	movs	r0, #6
 800124a:	f000 fd6e 	bl	8001d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800124e:	2006      	movs	r0, #6
 8001250:	f000 fd87 	bl	8001d62 <HAL_NVIC_EnableIRQ>

}
 8001254:	bf00      	nop
 8001256:	3730      	adds	r7, #48	; 0x30
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40023800 	.word	0x40023800
 8001260:	40021000 	.word	0x40021000
 8001264:	40020800 	.word	0x40020800
 8001268:	40020c00 	.word	0x40020c00
 800126c:	40020000 	.word	0x40020000
 8001270:	40020400 	.word	0x40020400

08001274 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001278:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <MX_I2C2_Init+0x50>)
 800127a:	4a13      	ldr	r2, [pc, #76]	; (80012c8 <MX_I2C2_Init+0x54>)
 800127c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800127e:	4b11      	ldr	r3, [pc, #68]	; (80012c4 <MX_I2C2_Init+0x50>)
 8001280:	4a12      	ldr	r2, [pc, #72]	; (80012cc <MX_I2C2_Init+0x58>)
 8001282:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001284:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <MX_I2C2_Init+0x50>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800128a:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <MX_I2C2_Init+0x50>)
 800128c:	2200      	movs	r2, #0
 800128e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001290:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <MX_I2C2_Init+0x50>)
 8001292:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001296:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001298:	4b0a      	ldr	r3, [pc, #40]	; (80012c4 <MX_I2C2_Init+0x50>)
 800129a:	2200      	movs	r2, #0
 800129c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800129e:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <MX_I2C2_Init+0x50>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012a4:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <MX_I2C2_Init+0x50>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012aa:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <MX_I2C2_Init+0x50>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80012b0:	4804      	ldr	r0, [pc, #16]	; (80012c4 <MX_I2C2_Init+0x50>)
 80012b2:	f000 ffc5 	bl	8002240 <HAL_I2C_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80012bc:	f000 f9e6 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000430 	.word	0x20000430
 80012c8:	40005800 	.word	0x40005800
 80012cc:	000186a0 	.word	0x000186a0

080012d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08a      	sub	sp, #40	; 0x28
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a21      	ldr	r2, [pc, #132]	; (8001374 <HAL_I2C_MspInit+0xa4>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d13c      	bne.n	800136c <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
 80012f6:	4b20      	ldr	r3, [pc, #128]	; (8001378 <HAL_I2C_MspInit+0xa8>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4a1f      	ldr	r2, [pc, #124]	; (8001378 <HAL_I2C_MspInit+0xa8>)
 80012fc:	f043 0302 	orr.w	r3, r3, #2
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4b1d      	ldr	r3, [pc, #116]	; (8001378 <HAL_I2C_MspInit+0xa8>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800130e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001312:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001314:	2312      	movs	r3, #18
 8001316:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131c:	2303      	movs	r3, #3
 800131e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001320:	2304      	movs	r3, #4
 8001322:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	4619      	mov	r1, r3
 800132a:	4814      	ldr	r0, [pc, #80]	; (800137c <HAL_I2C_MspInit+0xac>)
 800132c:	f000 fdc6 	bl	8001ebc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001330:	2308      	movs	r3, #8
 8001332:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001334:	2312      	movs	r3, #18
 8001336:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133c:	2303      	movs	r3, #3
 800133e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001340:	2309      	movs	r3, #9
 8001342:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	4619      	mov	r1, r3
 800134a:	480c      	ldr	r0, [pc, #48]	; (800137c <HAL_I2C_MspInit+0xac>)
 800134c:	f000 fdb6 	bl	8001ebc <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001350:	2300      	movs	r3, #0
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <HAL_I2C_MspInit+0xa8>)
 8001356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001358:	4a07      	ldr	r2, [pc, #28]	; (8001378 <HAL_I2C_MspInit+0xa8>)
 800135a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800135e:	6413      	str	r3, [r2, #64]	; 0x40
 8001360:	4b05      	ldr	r3, [pc, #20]	; (8001378 <HAL_I2C_MspInit+0xa8>)
 8001362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001364:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800136c:	bf00      	nop
 800136e:	3728      	adds	r7, #40	; 0x28
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40005800 	.word	0x40005800
 8001378:	40023800 	.word	0x40023800
 800137c:	40020400 	.word	0x40020400

08001380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001380:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001384:	b0aa      	sub	sp, #168	; 0xa8
 8001386:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001388:	f000 fb5e 	bl	8001a48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800138c:	f000 f916 	bl	80015bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001390:	f7ff fe82 	bl	8001098 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8001394:	f007 fc04 	bl	8008ba0 <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 8001398:	f000 fab2 	bl	8001900 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800139c:	f000 f97c 	bl	8001698 <MX_SPI1_Init>
  MX_I2C2_Init();
 80013a0:	f7ff ff68 	bl	8001274 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  uint8_t DataToSend[40] = {0}; // Tablica zawierajaca dane do wyslania
 80013a4:	2300      	movs	r3, #0
 80013a6:	647b      	str	r3, [r7, #68]	; 0x44
 80013a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013ac:	2224      	movs	r2, #36	; 0x24
 80013ae:	2100      	movs	r1, #0
 80013b0:	4618      	mov	r0, r3
 80013b2:	f008 f94b 	bl	800964c <memset>
  uint8_t MessageLength = 0; // Zawiera dlugosc wysylanej wiadomosci
 80013b6:	2300      	movs	r3, #0
 80013b8:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
  const uint8_t mes_count = 10;
 80013bc:	230a      	movs	r3, #10
 80013be:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a

  //struktura przechowująca dane odczytane z mierników
  MPU6050_data sensor_data, tmp_data;
  sensor_data.acc_x = 0;
 80013c2:	f04f 0300 	mov.w	r3, #0
 80013c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sensor_data.acc_y = 0;
 80013c8:	f04f 0300 	mov.w	r3, #0
 80013cc:	633b      	str	r3, [r7, #48]	; 0x30
  sensor_data.acc_z = 0;
 80013ce:	f04f 0300 	mov.w	r3, #0
 80013d2:	637b      	str	r3, [r7, #52]	; 0x34
  sensor_data.gyro_x = 0;
 80013d4:	f04f 0300 	mov.w	r3, #0
 80013d8:	63bb      	str	r3, [r7, #56]	; 0x38
  sensor_data.gyro_y = 0;
 80013da:	f04f 0300 	mov.w	r3, #0
 80013de:	63fb      	str	r3, [r7, #60]	; 0x3c
  sensor_data.gyro_z = 0;
 80013e0:	f04f 0300 	mov.w	r3, #0
 80013e4:	643b      	str	r3, [r7, #64]	; 0x40

  //częstotliwość pomiarów w Hz, domyślnie 5; wartość można edytować z poziomu komputera
  uint32_t measurementsFreq = 2, prevTime = HAL_GetTick(), recVal=0;
 80013e6:	2302      	movs	r3, #2
 80013e8:	677b      	str	r3, [r7, #116]	; 0x74
 80013ea:	f000 fb93 	bl	8001b14 <HAL_GetTick>
 80013ee:	6738      	str	r0, [r7, #112]	; 0x70
 80013f0:	2300      	movs	r3, #0
 80013f2:	66fb      	str	r3, [r7, #108]	; 0x6c


  //inicjalizacja czujnika MPU6050
  MPU6050_init();
 80013f4:	f7ff fcde 	bl	8000db4 <MPU6050_init>
//	if(ReceivedDataFlag == 1){
//
//		ReceivedDataFlag = 0;
//
//		if(*ReceivedData == *message) {
	  for(int i=0;i<mes_count;i++){
 80013f8:	2300      	movs	r3, #0
 80013fa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80013fc:	e03a      	b.n	8001474 <main+0xf4>
		  MPU6050_measure(&tmp_data);
 80013fe:	f107 0314 	add.w	r3, r7, #20
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff fd10 	bl	8000e28 <MPU6050_measure>
		  sensor_data.acc_x += tmp_data.acc_x;
 8001408:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800140c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001410:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001414:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		  sensor_data.acc_y += tmp_data.acc_y;
 8001418:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800141c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001420:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001424:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		  sensor_data.acc_z += tmp_data.acc_z;
 8001428:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800142c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001430:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001434:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		  sensor_data.gyro_x += tmp_data.gyro_x;
 8001438:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800143c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001440:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001444:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		  sensor_data.gyro_y += tmp_data.gyro_y;
 8001448:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800144c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001450:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001454:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		  sensor_data.gyro_z += tmp_data.gyro_z;
 8001458:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800145c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001460:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001464:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		  HAL_Delay(5);
 8001468:	2005      	movs	r0, #5
 800146a:	f000 fb5f 	bl	8001b2c <HAL_Delay>
	  for(int i=0;i<mes_count;i++){
 800146e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001470:	3301      	adds	r3, #1
 8001472:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001474:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8001478:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800147a:	429a      	cmp	r2, r3
 800147c:	dbbf      	blt.n	80013fe <main+0x7e>
	  }
	  	  	  sensor_data.acc_x /= (float)mes_count;
 800147e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001482:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8001486:	ee07 3a90 	vmov	s15, r3
 800148a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800148e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001492:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	  		  sensor_data.acc_y /= (float)mes_count;
 8001496:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800149a:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 800149e:	ee07 3a90 	vmov	s15, r3
 80014a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014aa:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	  		  sensor_data.acc_z /= (float)mes_count;
 80014ae:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80014b2:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 80014b6:	ee07 3a90 	vmov	s15, r3
 80014ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014c2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	  		  sensor_data.gyro_x /= (float)mes_count;
 80014c6:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80014ca:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 80014ce:	ee07 3a90 	vmov	s15, r3
 80014d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014da:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	  		  sensor_data.gyro_y /= (float)mes_count;
 80014de:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80014e2:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 80014e6:	ee07 3a90 	vmov	s15, r3
 80014ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014f2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	  		  sensor_data.gyro_z /= (float)mes_count;
 80014f6:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80014fa:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 80014fe:	ee07 3a90 	vmov	s15, r3
 8001502:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001506:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800150a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

			MessageLength = sprintf(DataToSend, "%0.2f %0.2f %0.2f %0.2f %0.2f %0.2f \n\r", sensor_data.acc_x,sensor_data.acc_y,sensor_data.acc_z,sensor_data.gyro_x,sensor_data.gyro_y,sensor_data.gyro_z);
 800150e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff f819 	bl	8000548 <__aeabi_f2d>
 8001516:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800151a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff f813 	bl	8000548 <__aeabi_f2d>
 8001522:	4604      	mov	r4, r0
 8001524:	460d      	mov	r5, r1
 8001526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff f80d 	bl	8000548 <__aeabi_f2d>
 800152e:	4680      	mov	r8, r0
 8001530:	4689      	mov	r9, r1
 8001532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff f807 	bl	8000548 <__aeabi_f2d>
 800153a:	4682      	mov	sl, r0
 800153c:	468b      	mov	fp, r1
 800153e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff f801 	bl	8000548 <__aeabi_f2d>
 8001546:	e9c7 0100 	strd	r0, r1, [r7]
 800154a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800154c:	4618      	mov	r0, r3
 800154e:	f7fe fffb 	bl	8000548 <__aeabi_f2d>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800155a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800155e:	ed97 7b00 	vldr	d7, [r7]
 8001562:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001566:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800156a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800156e:	e9cd 4500 	strd	r4, r5, [sp]
 8001572:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001576:	4910      	ldr	r1, [pc, #64]	; (80015b8 <main+0x238>)
 8001578:	f008 f870 	bl	800965c <siprintf>
 800157c:	4603      	mov	r3, r0
 800157e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

			CDC_Transmit_FS(DataToSend, MessageLength);
 8001582:	f897 207b 	ldrb.w	r2, [r7, #123]	; 0x7b
 8001586:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800158a:	4611      	mov	r1, r2
 800158c:	4618      	mov	r0, r3
 800158e:	f007 fbc5 	bl	8008d1c <CDC_Transmit_FS>

			  sensor_data.acc_x = 0;
 8001592:	f04f 0300 	mov.w	r3, #0
 8001596:	62fb      	str	r3, [r7, #44]	; 0x2c
			  sensor_data.acc_y = 0;
 8001598:	f04f 0300 	mov.w	r3, #0
 800159c:	633b      	str	r3, [r7, #48]	; 0x30
			  sensor_data.acc_z = 0;
 800159e:	f04f 0300 	mov.w	r3, #0
 80015a2:	637b      	str	r3, [r7, #52]	; 0x34
			  sensor_data.gyro_x = 0;
 80015a4:	f04f 0300 	mov.w	r3, #0
 80015a8:	63bb      	str	r3, [r7, #56]	; 0x38
			  sensor_data.gyro_y = 0;
 80015aa:	f04f 0300 	mov.w	r3, #0
 80015ae:	63fb      	str	r3, [r7, #60]	; 0x3c
			  sensor_data.gyro_z = 0;
 80015b0:	f04f 0300 	mov.w	r3, #0
 80015b4:	643b      	str	r3, [r7, #64]	; 0x40
  {
 80015b6:	e71f      	b.n	80013f8 <main+0x78>
 80015b8:	08009eb4 	.word	0x08009eb4

080015bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b094      	sub	sp, #80	; 0x50
 80015c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015c2:	f107 0320 	add.w	r3, r7, #32
 80015c6:	2230      	movs	r2, #48	; 0x30
 80015c8:	2100      	movs	r1, #0
 80015ca:	4618      	mov	r0, r3
 80015cc:	f008 f83e 	bl	800964c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015d0:	f107 030c 	add.w	r3, r7, #12
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e0:	2300      	movs	r3, #0
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	4b27      	ldr	r3, [pc, #156]	; (8001684 <SystemClock_Config+0xc8>)
 80015e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e8:	4a26      	ldr	r2, [pc, #152]	; (8001684 <SystemClock_Config+0xc8>)
 80015ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ee:	6413      	str	r3, [r2, #64]	; 0x40
 80015f0:	4b24      	ldr	r3, [pc, #144]	; (8001684 <SystemClock_Config+0xc8>)
 80015f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f8:	60bb      	str	r3, [r7, #8]
 80015fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015fc:	2300      	movs	r3, #0
 80015fe:	607b      	str	r3, [r7, #4]
 8001600:	4b21      	ldr	r3, [pc, #132]	; (8001688 <SystemClock_Config+0xcc>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a20      	ldr	r2, [pc, #128]	; (8001688 <SystemClock_Config+0xcc>)
 8001606:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800160a:	6013      	str	r3, [r2, #0]
 800160c:	4b1e      	ldr	r3, [pc, #120]	; (8001688 <SystemClock_Config+0xcc>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001614:	607b      	str	r3, [r7, #4]
 8001616:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001618:	2301      	movs	r3, #1
 800161a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800161c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001620:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001622:	2302      	movs	r3, #2
 8001624:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001626:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800162a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800162c:	2304      	movs	r3, #4
 800162e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001630:	2348      	movs	r3, #72	; 0x48
 8001632:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001634:	2302      	movs	r3, #2
 8001636:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001638:	2303      	movs	r3, #3
 800163a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800163c:	f107 0320 	add.w	r3, r7, #32
 8001640:	4618      	mov	r0, r3
 8001642:	f002 ff3f 	bl	80044c4 <HAL_RCC_OscConfig>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800164c:	f000 f81e 	bl	800168c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001650:	230f      	movs	r3, #15
 8001652:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001654:	2302      	movs	r3, #2
 8001656:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800165c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001660:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001662:	2300      	movs	r3, #0
 8001664:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001666:	f107 030c 	add.w	r3, r7, #12
 800166a:	2102      	movs	r1, #2
 800166c:	4618      	mov	r0, r3
 800166e:	f003 f9a1 	bl	80049b4 <HAL_RCC_ClockConfig>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001678:	f000 f808 	bl	800168c <Error_Handler>
  }
}
 800167c:	bf00      	nop
 800167e:	3750      	adds	r7, #80	; 0x50
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40023800 	.word	0x40023800
 8001688:	40007000 	.word	0x40007000

0800168c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001690:	b672      	cpsid	i
}
 8001692:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001694:	e7fe      	b.n	8001694 <Error_Handler+0x8>
	...

08001698 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800169c:	4b17      	ldr	r3, [pc, #92]	; (80016fc <MX_SPI1_Init+0x64>)
 800169e:	4a18      	ldr	r2, [pc, #96]	; (8001700 <MX_SPI1_Init+0x68>)
 80016a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016a2:	4b16      	ldr	r3, [pc, #88]	; (80016fc <MX_SPI1_Init+0x64>)
 80016a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016aa:	4b14      	ldr	r3, [pc, #80]	; (80016fc <MX_SPI1_Init+0x64>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016b0:	4b12      	ldr	r3, [pc, #72]	; (80016fc <MX_SPI1_Init+0x64>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016b6:	4b11      	ldr	r3, [pc, #68]	; (80016fc <MX_SPI1_Init+0x64>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016bc:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <MX_SPI1_Init+0x64>)
 80016be:	2200      	movs	r2, #0
 80016c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016c2:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <MX_SPI1_Init+0x64>)
 80016c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80016ca:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <MX_SPI1_Init+0x64>)
 80016cc:	2220      	movs	r2, #32
 80016ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016d0:	4b0a      	ldr	r3, [pc, #40]	; (80016fc <MX_SPI1_Init+0x64>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016d6:	4b09      	ldr	r3, [pc, #36]	; (80016fc <MX_SPI1_Init+0x64>)
 80016d8:	2200      	movs	r2, #0
 80016da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016dc:	4b07      	ldr	r3, [pc, #28]	; (80016fc <MX_SPI1_Init+0x64>)
 80016de:	2200      	movs	r2, #0
 80016e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80016e2:	4b06      	ldr	r3, [pc, #24]	; (80016fc <MX_SPI1_Init+0x64>)
 80016e4:	220a      	movs	r2, #10
 80016e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016e8:	4804      	ldr	r0, [pc, #16]	; (80016fc <MX_SPI1_Init+0x64>)
 80016ea:	f003 fb5f 	bl	8004dac <HAL_SPI_Init>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80016f4:	f7ff ffca 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016f8:	bf00      	nop
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000484 	.word	0x20000484
 8001700:	40013000 	.word	0x40013000

08001704 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08a      	sub	sp, #40	; 0x28
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a19      	ldr	r2, [pc, #100]	; (8001788 <HAL_SPI_MspInit+0x84>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d12b      	bne.n	800177e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	4b18      	ldr	r3, [pc, #96]	; (800178c <HAL_SPI_MspInit+0x88>)
 800172c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172e:	4a17      	ldr	r2, [pc, #92]	; (800178c <HAL_SPI_MspInit+0x88>)
 8001730:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001734:	6453      	str	r3, [r2, #68]	; 0x44
 8001736:	4b15      	ldr	r3, [pc, #84]	; (800178c <HAL_SPI_MspInit+0x88>)
 8001738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800173e:	613b      	str	r3, [r7, #16]
 8001740:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	4b11      	ldr	r3, [pc, #68]	; (800178c <HAL_SPI_MspInit+0x88>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	4a10      	ldr	r2, [pc, #64]	; (800178c <HAL_SPI_MspInit+0x88>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	6313      	str	r3, [r2, #48]	; 0x30
 8001752:	4b0e      	ldr	r3, [pc, #56]	; (800178c <HAL_SPI_MspInit+0x88>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800175e:	23e0      	movs	r3, #224	; 0xe0
 8001760:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001762:	2302      	movs	r3, #2
 8001764:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176a:	2303      	movs	r3, #3
 800176c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800176e:	2305      	movs	r3, #5
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001772:	f107 0314 	add.w	r3, r7, #20
 8001776:	4619      	mov	r1, r3
 8001778:	4805      	ldr	r0, [pc, #20]	; (8001790 <HAL_SPI_MspInit+0x8c>)
 800177a:	f000 fb9f 	bl	8001ebc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800177e:	bf00      	nop
 8001780:	3728      	adds	r7, #40	; 0x28
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40013000 	.word	0x40013000
 800178c:	40023800 	.word	0x40023800
 8001790:	40020000 	.word	0x40020000

08001794 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	607b      	str	r3, [r7, #4]
 800179e:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <HAL_MspInit+0x4c>)
 80017a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a2:	4a0f      	ldr	r2, [pc, #60]	; (80017e0 <HAL_MspInit+0x4c>)
 80017a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017a8:	6453      	str	r3, [r2, #68]	; 0x44
 80017aa:	4b0d      	ldr	r3, [pc, #52]	; (80017e0 <HAL_MspInit+0x4c>)
 80017ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017b2:	607b      	str	r3, [r7, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	603b      	str	r3, [r7, #0]
 80017ba:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <HAL_MspInit+0x4c>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	4a08      	ldr	r2, [pc, #32]	; (80017e0 <HAL_MspInit+0x4c>)
 80017c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c4:	6413      	str	r3, [r2, #64]	; 0x40
 80017c6:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <HAL_MspInit+0x4c>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ce:	603b      	str	r3, [r7, #0]
 80017d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017d2:	2007      	movs	r0, #7
 80017d4:	f000 fa9e 	bl	8001d14 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017d8:	bf00      	nop
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40023800 	.word	0x40023800

080017e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017e8:	e7fe      	b.n	80017e8 <NMI_Handler+0x4>

080017ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ea:	b480      	push	{r7}
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ee:	e7fe      	b.n	80017ee <HardFault_Handler+0x4>

080017f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f4:	e7fe      	b.n	80017f4 <MemManage_Handler+0x4>

080017f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017fa:	e7fe      	b.n	80017fa <BusFault_Handler+0x4>

080017fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001800:	e7fe      	b.n	8001800 <UsageFault_Handler+0x4>

08001802 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001830:	f000 f95c 	bl	8001aec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}

08001838 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PH0_OSC_IN_Pin);
 800183c:	2001      	movs	r0, #1
 800183e:	f000 fcdb 	bl	80021f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800184c:	4802      	ldr	r0, [pc, #8]	; (8001858 <USART2_IRQHandler+0x10>)
 800184e:	f003 fb83 	bl	8004f58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	200004dc 	.word	0x200004dc

0800185c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001860:	4802      	ldr	r0, [pc, #8]	; (800186c <OTG_FS_IRQHandler+0x10>)
 8001862:	f001 fdfc 	bl	800345e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	200019f4 	.word	0x200019f4

08001870 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001878:	4a14      	ldr	r2, [pc, #80]	; (80018cc <_sbrk+0x5c>)
 800187a:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <_sbrk+0x60>)
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001884:	4b13      	ldr	r3, [pc, #76]	; (80018d4 <_sbrk+0x64>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d102      	bne.n	8001892 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800188c:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <_sbrk+0x64>)
 800188e:	4a12      	ldr	r2, [pc, #72]	; (80018d8 <_sbrk+0x68>)
 8001890:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001892:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <_sbrk+0x64>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4413      	add	r3, r2
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	429a      	cmp	r2, r3
 800189e:	d207      	bcs.n	80018b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018a0:	f007 fe9c 	bl	80095dc <__errno>
 80018a4:	4603      	mov	r3, r0
 80018a6:	220c      	movs	r2, #12
 80018a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018aa:	f04f 33ff 	mov.w	r3, #4294967295
 80018ae:	e009      	b.n	80018c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018b0:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <_sbrk+0x64>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018b6:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <_sbrk+0x64>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4413      	add	r3, r2
 80018be:	4a05      	ldr	r2, [pc, #20]	; (80018d4 <_sbrk+0x64>)
 80018c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018c2:	68fb      	ldr	r3, [r7, #12]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20020000 	.word	0x20020000
 80018d0:	00000400 	.word	0x00000400
 80018d4:	20000200 	.word	0x20000200
 80018d8:	20001e10 	.word	0x20001e10

080018dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018e0:	4b06      	ldr	r3, [pc, #24]	; (80018fc <SystemInit+0x20>)
 80018e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018e6:	4a05      	ldr	r2, [pc, #20]	; (80018fc <SystemInit+0x20>)
 80018e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001904:	4b11      	ldr	r3, [pc, #68]	; (800194c <MX_USART2_UART_Init+0x4c>)
 8001906:	4a12      	ldr	r2, [pc, #72]	; (8001950 <MX_USART2_UART_Init+0x50>)
 8001908:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800190a:	4b10      	ldr	r3, [pc, #64]	; (800194c <MX_USART2_UART_Init+0x4c>)
 800190c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001910:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001912:	4b0e      	ldr	r3, [pc, #56]	; (800194c <MX_USART2_UART_Init+0x4c>)
 8001914:	2200      	movs	r2, #0
 8001916:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001918:	4b0c      	ldr	r3, [pc, #48]	; (800194c <MX_USART2_UART_Init+0x4c>)
 800191a:	2200      	movs	r2, #0
 800191c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800191e:	4b0b      	ldr	r3, [pc, #44]	; (800194c <MX_USART2_UART_Init+0x4c>)
 8001920:	2200      	movs	r2, #0
 8001922:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001924:	4b09      	ldr	r3, [pc, #36]	; (800194c <MX_USART2_UART_Init+0x4c>)
 8001926:	220c      	movs	r2, #12
 8001928:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800192a:	4b08      	ldr	r3, [pc, #32]	; (800194c <MX_USART2_UART_Init+0x4c>)
 800192c:	2200      	movs	r2, #0
 800192e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001930:	4b06      	ldr	r3, [pc, #24]	; (800194c <MX_USART2_UART_Init+0x4c>)
 8001932:	2200      	movs	r2, #0
 8001934:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001936:	4805      	ldr	r0, [pc, #20]	; (800194c <MX_USART2_UART_Init+0x4c>)
 8001938:	f003 fac1 	bl	8004ebe <HAL_UART_Init>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001942:	f7ff fea3 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	200004dc 	.word	0x200004dc
 8001950:	40004400 	.word	0x40004400

08001954 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b08a      	sub	sp, #40	; 0x28
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a1d      	ldr	r2, [pc, #116]	; (80019e8 <HAL_UART_MspInit+0x94>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d133      	bne.n	80019de <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	4b1c      	ldr	r3, [pc, #112]	; (80019ec <HAL_UART_MspInit+0x98>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	4a1b      	ldr	r2, [pc, #108]	; (80019ec <HAL_UART_MspInit+0x98>)
 8001980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001984:	6413      	str	r3, [r2, #64]	; 0x40
 8001986:	4b19      	ldr	r3, [pc, #100]	; (80019ec <HAL_UART_MspInit+0x98>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198e:	613b      	str	r3, [r7, #16]
 8001990:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	4b15      	ldr	r3, [pc, #84]	; (80019ec <HAL_UART_MspInit+0x98>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	4a14      	ldr	r2, [pc, #80]	; (80019ec <HAL_UART_MspInit+0x98>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	6313      	str	r3, [r2, #48]	; 0x30
 80019a2:	4b12      	ldr	r3, [pc, #72]	; (80019ec <HAL_UART_MspInit+0x98>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019ae:	230c      	movs	r3, #12
 80019b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b2:	2302      	movs	r3, #2
 80019b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ba:	2303      	movs	r3, #3
 80019bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019be:	2307      	movs	r3, #7
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c2:	f107 0314 	add.w	r3, r7, #20
 80019c6:	4619      	mov	r1, r3
 80019c8:	4809      	ldr	r0, [pc, #36]	; (80019f0 <HAL_UART_MspInit+0x9c>)
 80019ca:	f000 fa77 	bl	8001ebc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80019ce:	2200      	movs	r2, #0
 80019d0:	2100      	movs	r1, #0
 80019d2:	2026      	movs	r0, #38	; 0x26
 80019d4:	f000 f9a9 	bl	8001d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019d8:	2026      	movs	r0, #38	; 0x26
 80019da:	f000 f9c2 	bl	8001d62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80019de:	bf00      	nop
 80019e0:	3728      	adds	r7, #40	; 0x28
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40004400 	.word	0x40004400
 80019ec:	40023800 	.word	0x40023800
 80019f0:	40020000 	.word	0x40020000

080019f4 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:   ldr   sp, =_estack    		 /* set stack pointer */
 80019f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019f8:	480d      	ldr	r0, [pc, #52]	; (8001a30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019fa:	490e      	ldr	r1, [pc, #56]	; (8001a34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019fc:	4a0e      	ldr	r2, [pc, #56]	; (8001a38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a00:	e002      	b.n	8001a08 <LoopCopyDataInit>

08001a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a06:	3304      	adds	r3, #4

08001a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a0c:	d3f9      	bcc.n	8001a02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a0e:	4a0b      	ldr	r2, [pc, #44]	; (8001a3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a10:	4c0b      	ldr	r4, [pc, #44]	; (8001a40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a14:	e001      	b.n	8001a1a <LoopFillZerobss>

08001a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a18:	3204      	adds	r2, #4

08001a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a1c:	d3fb      	bcc.n	8001a16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a1e:	f7ff ff5d 	bl	80018dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a22:	f007 fde1 	bl	80095e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a26:	f7ff fcab 	bl	8001380 <main>
  bx  lr    
 8001a2a:	4770      	bx	lr
Reset_Handler:   ldr   sp, =_estack    		 /* set stack pointer */
 8001a2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a34:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001a38:	08009fe0 	.word	0x08009fe0
  ldr r2, =_sbss
 8001a3c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001a40:	20001e0c 	.word	0x20001e0c

08001a44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a44:	e7fe      	b.n	8001a44 <ADC_IRQHandler>
	...

08001a48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a4c:	4b0e      	ldr	r3, [pc, #56]	; (8001a88 <HAL_Init+0x40>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a0d      	ldr	r2, [pc, #52]	; (8001a88 <HAL_Init+0x40>)
 8001a52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a58:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <HAL_Init+0x40>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a0a      	ldr	r2, [pc, #40]	; (8001a88 <HAL_Init+0x40>)
 8001a5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a64:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <HAL_Init+0x40>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a07      	ldr	r2, [pc, #28]	; (8001a88 <HAL_Init+0x40>)
 8001a6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a70:	2003      	movs	r0, #3
 8001a72:	f000 f94f 	bl	8001d14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a76:	2000      	movs	r0, #0
 8001a78:	f000 f808 	bl	8001a8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a7c:	f7ff fe8a 	bl	8001794 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40023c00 	.word	0x40023c00

08001a8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a94:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <HAL_InitTick+0x54>)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <HAL_InitTick+0x58>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f000 f967 	bl	8001d7e <HAL_SYSTICK_Config>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e00e      	b.n	8001ad8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2b0f      	cmp	r3, #15
 8001abe:	d80a      	bhi.n	8001ad6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	6879      	ldr	r1, [r7, #4]
 8001ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac8:	f000 f92f 	bl	8001d2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001acc:	4a06      	ldr	r2, [pc, #24]	; (8001ae8 <HAL_InitTick+0x5c>)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	e000      	b.n	8001ad8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20000000 	.word	0x20000000
 8001ae4:	20000008 	.word	0x20000008
 8001ae8:	20000004 	.word	0x20000004

08001aec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001af0:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <HAL_IncTick+0x20>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	461a      	mov	r2, r3
 8001af6:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <HAL_IncTick+0x24>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4413      	add	r3, r2
 8001afc:	4a04      	ldr	r2, [pc, #16]	; (8001b10 <HAL_IncTick+0x24>)
 8001afe:	6013      	str	r3, [r2, #0]
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	20000008 	.word	0x20000008
 8001b10:	20000520 	.word	0x20000520

08001b14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  return uwTick;
 8001b18:	4b03      	ldr	r3, [pc, #12]	; (8001b28 <HAL_GetTick+0x14>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	20000520 	.word	0x20000520

08001b2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b34:	f7ff ffee 	bl	8001b14 <HAL_GetTick>
 8001b38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b44:	d005      	beq.n	8001b52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b46:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <HAL_Delay+0x44>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	4413      	add	r3, r2
 8001b50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b52:	bf00      	nop
 8001b54:	f7ff ffde 	bl	8001b14 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d8f7      	bhi.n	8001b54 <HAL_Delay+0x28>
  {
  }
}
 8001b64:	bf00      	nop
 8001b66:	bf00      	nop
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000008 	.word	0x20000008

08001b74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b84:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b8a:	68ba      	ldr	r2, [r7, #8]
 8001b8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b90:	4013      	ands	r3, r2
 8001b92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ba6:	4a04      	ldr	r2, [pc, #16]	; (8001bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	60d3      	str	r3, [r2, #12]
}
 8001bac:	bf00      	nop
 8001bae:	3714      	adds	r7, #20
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bc0:	4b04      	ldr	r3, [pc, #16]	; (8001bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	0a1b      	lsrs	r3, r3, #8
 8001bc6:	f003 0307 	and.w	r3, r3, #7
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	db0b      	blt.n	8001c02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	f003 021f 	and.w	r2, r3, #31
 8001bf0:	4907      	ldr	r1, [pc, #28]	; (8001c10 <__NVIC_EnableIRQ+0x38>)
 8001bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf6:	095b      	lsrs	r3, r3, #5
 8001bf8:	2001      	movs	r0, #1
 8001bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8001bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	e000e100 	.word	0xe000e100

08001c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	6039      	str	r1, [r7, #0]
 8001c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	db0a      	blt.n	8001c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	490c      	ldr	r1, [pc, #48]	; (8001c60 <__NVIC_SetPriority+0x4c>)
 8001c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c32:	0112      	lsls	r2, r2, #4
 8001c34:	b2d2      	uxtb	r2, r2
 8001c36:	440b      	add	r3, r1
 8001c38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c3c:	e00a      	b.n	8001c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	4908      	ldr	r1, [pc, #32]	; (8001c64 <__NVIC_SetPriority+0x50>)
 8001c44:	79fb      	ldrb	r3, [r7, #7]
 8001c46:	f003 030f 	and.w	r3, r3, #15
 8001c4a:	3b04      	subs	r3, #4
 8001c4c:	0112      	lsls	r2, r2, #4
 8001c4e:	b2d2      	uxtb	r2, r2
 8001c50:	440b      	add	r3, r1
 8001c52:	761a      	strb	r2, [r3, #24]
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	e000e100 	.word	0xe000e100
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b089      	sub	sp, #36	; 0x24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	f1c3 0307 	rsb	r3, r3, #7
 8001c82:	2b04      	cmp	r3, #4
 8001c84:	bf28      	it	cs
 8001c86:	2304      	movcs	r3, #4
 8001c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	3304      	adds	r3, #4
 8001c8e:	2b06      	cmp	r3, #6
 8001c90:	d902      	bls.n	8001c98 <NVIC_EncodePriority+0x30>
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	3b03      	subs	r3, #3
 8001c96:	e000      	b.n	8001c9a <NVIC_EncodePriority+0x32>
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43da      	mvns	r2, r3
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	401a      	ands	r2, r3
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cba:	43d9      	mvns	r1, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc0:	4313      	orrs	r3, r2
         );
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3724      	adds	r7, #36	; 0x24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
	...

08001cd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ce0:	d301      	bcc.n	8001ce6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e00f      	b.n	8001d06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ce6:	4a0a      	ldr	r2, [pc, #40]	; (8001d10 <SysTick_Config+0x40>)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3b01      	subs	r3, #1
 8001cec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cee:	210f      	movs	r1, #15
 8001cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf4:	f7ff ff8e 	bl	8001c14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cf8:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <SysTick_Config+0x40>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cfe:	4b04      	ldr	r3, [pc, #16]	; (8001d10 <SysTick_Config+0x40>)
 8001d00:	2207      	movs	r2, #7
 8001d02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	e000e010 	.word	0xe000e010

08001d14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f7ff ff29 	bl	8001b74 <__NVIC_SetPriorityGrouping>
}
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b086      	sub	sp, #24
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	4603      	mov	r3, r0
 8001d32:	60b9      	str	r1, [r7, #8]
 8001d34:	607a      	str	r2, [r7, #4]
 8001d36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d3c:	f7ff ff3e 	bl	8001bbc <__NVIC_GetPriorityGrouping>
 8001d40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	68b9      	ldr	r1, [r7, #8]
 8001d46:	6978      	ldr	r0, [r7, #20]
 8001d48:	f7ff ff8e 	bl	8001c68 <NVIC_EncodePriority>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d52:	4611      	mov	r1, r2
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff ff5d 	bl	8001c14 <__NVIC_SetPriority>
}
 8001d5a:	bf00      	nop
 8001d5c:	3718      	adds	r7, #24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b082      	sub	sp, #8
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	4603      	mov	r3, r0
 8001d6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff ff31 	bl	8001bd8 <__NVIC_EnableIRQ>
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b082      	sub	sp, #8
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7ff ffa2 	bl	8001cd0 <SysTick_Config>
 8001d8c:	4603      	mov	r3, r0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b084      	sub	sp, #16
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001da4:	f7ff feb6 	bl	8001b14 <HAL_GetTick>
 8001da8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d008      	beq.n	8001dc8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2280      	movs	r2, #128	; 0x80
 8001dba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e052      	b.n	8001e6e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 0216 	bic.w	r2, r2, #22
 8001dd6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	695a      	ldr	r2, [r3, #20]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001de6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d103      	bne.n	8001df8 <HAL_DMA_Abort+0x62>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d007      	beq.n	8001e08 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f022 0208 	bic.w	r2, r2, #8
 8001e06:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 0201 	bic.w	r2, r2, #1
 8001e16:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e18:	e013      	b.n	8001e42 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e1a:	f7ff fe7b 	bl	8001b14 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b05      	cmp	r3, #5
 8001e26:	d90c      	bls.n	8001e42 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2220      	movs	r2, #32
 8001e2c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2203      	movs	r2, #3
 8001e32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e015      	b.n	8001e6e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0301 	and.w	r3, r3, #1
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1e4      	bne.n	8001e1a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e54:	223f      	movs	r2, #63	; 0x3f
 8001e56:	409a      	lsls	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e76:	b480      	push	{r7}
 8001e78:	b083      	sub	sp, #12
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d004      	beq.n	8001e94 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2280      	movs	r2, #128	; 0x80
 8001e8e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e00c      	b.n	8001eae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2205      	movs	r2, #5
 8001e98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f022 0201 	bic.w	r2, r2, #1
 8001eaa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
	...

08001ebc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b089      	sub	sp, #36	; 0x24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	61fb      	str	r3, [r7, #28]
 8001ed6:	e159      	b.n	800218c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ed8:	2201      	movs	r2, #1
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	697a      	ldr	r2, [r7, #20]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	f040 8148 	bne.w	8002186 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d005      	beq.n	8001f0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d130      	bne.n	8001f70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	2203      	movs	r2, #3
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4013      	ands	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	68da      	ldr	r2, [r3, #12]
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f44:	2201      	movs	r2, #1
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4013      	ands	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	091b      	lsrs	r3, r3, #4
 8001f5a:	f003 0201 	and.w	r2, r3, #1
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f003 0303 	and.w	r3, r3, #3
 8001f78:	2b03      	cmp	r3, #3
 8001f7a:	d017      	beq.n	8001fac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	2203      	movs	r2, #3
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4013      	ands	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f003 0303 	and.w	r3, r3, #3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d123      	bne.n	8002000 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	08da      	lsrs	r2, r3, #3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3208      	adds	r2, #8
 8001fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	220f      	movs	r2, #15
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	691a      	ldr	r2, [r3, #16]
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	08da      	lsrs	r2, r3, #3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3208      	adds	r2, #8
 8001ffa:	69b9      	ldr	r1, [r7, #24]
 8001ffc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	2203      	movs	r2, #3
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	43db      	mvns	r3, r3
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4013      	ands	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f003 0203 	and.w	r2, r3, #3
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	4313      	orrs	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800203c:	2b00      	cmp	r3, #0
 800203e:	f000 80a2 	beq.w	8002186 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	4b57      	ldr	r3, [pc, #348]	; (80021a4 <HAL_GPIO_Init+0x2e8>)
 8002048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204a:	4a56      	ldr	r2, [pc, #344]	; (80021a4 <HAL_GPIO_Init+0x2e8>)
 800204c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002050:	6453      	str	r3, [r2, #68]	; 0x44
 8002052:	4b54      	ldr	r3, [pc, #336]	; (80021a4 <HAL_GPIO_Init+0x2e8>)
 8002054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800205e:	4a52      	ldr	r2, [pc, #328]	; (80021a8 <HAL_GPIO_Init+0x2ec>)
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	089b      	lsrs	r3, r3, #2
 8002064:	3302      	adds	r3, #2
 8002066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800206a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	220f      	movs	r2, #15
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	43db      	mvns	r3, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4013      	ands	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a49      	ldr	r2, [pc, #292]	; (80021ac <HAL_GPIO_Init+0x2f0>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d019      	beq.n	80020be <HAL_GPIO_Init+0x202>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a48      	ldr	r2, [pc, #288]	; (80021b0 <HAL_GPIO_Init+0x2f4>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d013      	beq.n	80020ba <HAL_GPIO_Init+0x1fe>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a47      	ldr	r2, [pc, #284]	; (80021b4 <HAL_GPIO_Init+0x2f8>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d00d      	beq.n	80020b6 <HAL_GPIO_Init+0x1fa>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a46      	ldr	r2, [pc, #280]	; (80021b8 <HAL_GPIO_Init+0x2fc>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d007      	beq.n	80020b2 <HAL_GPIO_Init+0x1f6>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a45      	ldr	r2, [pc, #276]	; (80021bc <HAL_GPIO_Init+0x300>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d101      	bne.n	80020ae <HAL_GPIO_Init+0x1f2>
 80020aa:	2304      	movs	r3, #4
 80020ac:	e008      	b.n	80020c0 <HAL_GPIO_Init+0x204>
 80020ae:	2307      	movs	r3, #7
 80020b0:	e006      	b.n	80020c0 <HAL_GPIO_Init+0x204>
 80020b2:	2303      	movs	r3, #3
 80020b4:	e004      	b.n	80020c0 <HAL_GPIO_Init+0x204>
 80020b6:	2302      	movs	r3, #2
 80020b8:	e002      	b.n	80020c0 <HAL_GPIO_Init+0x204>
 80020ba:	2301      	movs	r3, #1
 80020bc:	e000      	b.n	80020c0 <HAL_GPIO_Init+0x204>
 80020be:	2300      	movs	r3, #0
 80020c0:	69fa      	ldr	r2, [r7, #28]
 80020c2:	f002 0203 	and.w	r2, r2, #3
 80020c6:	0092      	lsls	r2, r2, #2
 80020c8:	4093      	lsls	r3, r2
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020d0:	4935      	ldr	r1, [pc, #212]	; (80021a8 <HAL_GPIO_Init+0x2ec>)
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	089b      	lsrs	r3, r3, #2
 80020d6:	3302      	adds	r3, #2
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020de:	4b38      	ldr	r3, [pc, #224]	; (80021c0 <HAL_GPIO_Init+0x304>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	43db      	mvns	r3, r3
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	4013      	ands	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	4313      	orrs	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002102:	4a2f      	ldr	r2, [pc, #188]	; (80021c0 <HAL_GPIO_Init+0x304>)
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002108:	4b2d      	ldr	r3, [pc, #180]	; (80021c0 <HAL_GPIO_Init+0x304>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	43db      	mvns	r3, r3
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4013      	ands	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d003      	beq.n	800212c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	4313      	orrs	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800212c:	4a24      	ldr	r2, [pc, #144]	; (80021c0 <HAL_GPIO_Init+0x304>)
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002132:	4b23      	ldr	r3, [pc, #140]	; (80021c0 <HAL_GPIO_Init+0x304>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	43db      	mvns	r3, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4013      	ands	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	4313      	orrs	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002156:	4a1a      	ldr	r2, [pc, #104]	; (80021c0 <HAL_GPIO_Init+0x304>)
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800215c:	4b18      	ldr	r3, [pc, #96]	; (80021c0 <HAL_GPIO_Init+0x304>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	43db      	mvns	r3, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4013      	ands	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d003      	beq.n	8002180 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	4313      	orrs	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002180:	4a0f      	ldr	r2, [pc, #60]	; (80021c0 <HAL_GPIO_Init+0x304>)
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	3301      	adds	r3, #1
 800218a:	61fb      	str	r3, [r7, #28]
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	2b0f      	cmp	r3, #15
 8002190:	f67f aea2 	bls.w	8001ed8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002194:	bf00      	nop
 8002196:	bf00      	nop
 8002198:	3724      	adds	r7, #36	; 0x24
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	40023800 	.word	0x40023800
 80021a8:	40013800 	.word	0x40013800
 80021ac:	40020000 	.word	0x40020000
 80021b0:	40020400 	.word	0x40020400
 80021b4:	40020800 	.word	0x40020800
 80021b8:	40020c00 	.word	0x40020c00
 80021bc:	40021000 	.word	0x40021000
 80021c0:	40013c00 	.word	0x40013c00

080021c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	460b      	mov	r3, r1
 80021ce:	807b      	strh	r3, [r7, #2]
 80021d0:	4613      	mov	r3, r2
 80021d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021d4:	787b      	ldrb	r3, [r7, #1]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021da:	887a      	ldrh	r2, [r7, #2]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021e0:	e003      	b.n	80021ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021e2:	887b      	ldrh	r3, [r7, #2]
 80021e4:	041a      	lsls	r2, r3, #16
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	619a      	str	r2, [r3, #24]
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
	...

080021f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002202:	4b08      	ldr	r3, [pc, #32]	; (8002224 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002204:	695a      	ldr	r2, [r3, #20]
 8002206:	88fb      	ldrh	r3, [r7, #6]
 8002208:	4013      	ands	r3, r2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d006      	beq.n	800221c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800220e:	4a05      	ldr	r2, [pc, #20]	; (8002224 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002210:	88fb      	ldrh	r3, [r7, #6]
 8002212:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002214:	88fb      	ldrh	r3, [r7, #6]
 8002216:	4618      	mov	r0, r3
 8002218:	f000 f806 	bl	8002228 <HAL_GPIO_EXTI_Callback>
  }
}
 800221c:	bf00      	nop
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40013c00 	.word	0x40013c00

08002228 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002232:	bf00      	nop
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
	...

08002240 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e12b      	b.n	80024aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d106      	bne.n	800226c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7ff f832 	bl	80012d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2224      	movs	r2, #36	; 0x24
 8002270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f022 0201 	bic.w	r2, r2, #1
 8002282:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002292:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022a4:	f002 fd5a 	bl	8004d5c <HAL_RCC_GetPCLK1Freq>
 80022a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	4a81      	ldr	r2, [pc, #516]	; (80024b4 <HAL_I2C_Init+0x274>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d807      	bhi.n	80022c4 <HAL_I2C_Init+0x84>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4a80      	ldr	r2, [pc, #512]	; (80024b8 <HAL_I2C_Init+0x278>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	bf94      	ite	ls
 80022bc:	2301      	movls	r3, #1
 80022be:	2300      	movhi	r3, #0
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	e006      	b.n	80022d2 <HAL_I2C_Init+0x92>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	4a7d      	ldr	r2, [pc, #500]	; (80024bc <HAL_I2C_Init+0x27c>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	bf94      	ite	ls
 80022cc:	2301      	movls	r3, #1
 80022ce:	2300      	movhi	r3, #0
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e0e7      	b.n	80024aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	4a78      	ldr	r2, [pc, #480]	; (80024c0 <HAL_I2C_Init+0x280>)
 80022de:	fba2 2303 	umull	r2, r3, r2, r3
 80022e2:	0c9b      	lsrs	r3, r3, #18
 80022e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68ba      	ldr	r2, [r7, #8]
 80022f6:	430a      	orrs	r2, r1
 80022f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	4a6a      	ldr	r2, [pc, #424]	; (80024b4 <HAL_I2C_Init+0x274>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d802      	bhi.n	8002314 <HAL_I2C_Init+0xd4>
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	3301      	adds	r3, #1
 8002312:	e009      	b.n	8002328 <HAL_I2C_Init+0xe8>
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800231a:	fb02 f303 	mul.w	r3, r2, r3
 800231e:	4a69      	ldr	r2, [pc, #420]	; (80024c4 <HAL_I2C_Init+0x284>)
 8002320:	fba2 2303 	umull	r2, r3, r2, r3
 8002324:	099b      	lsrs	r3, r3, #6
 8002326:	3301      	adds	r3, #1
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	6812      	ldr	r2, [r2, #0]
 800232c:	430b      	orrs	r3, r1
 800232e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800233a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	495c      	ldr	r1, [pc, #368]	; (80024b4 <HAL_I2C_Init+0x274>)
 8002344:	428b      	cmp	r3, r1
 8002346:	d819      	bhi.n	800237c <HAL_I2C_Init+0x13c>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	1e59      	subs	r1, r3, #1
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	fbb1 f3f3 	udiv	r3, r1, r3
 8002356:	1c59      	adds	r1, r3, #1
 8002358:	f640 73fc 	movw	r3, #4092	; 0xffc
 800235c:	400b      	ands	r3, r1
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00a      	beq.n	8002378 <HAL_I2C_Init+0x138>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	1e59      	subs	r1, r3, #1
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002370:	3301      	adds	r3, #1
 8002372:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002376:	e051      	b.n	800241c <HAL_I2C_Init+0x1dc>
 8002378:	2304      	movs	r3, #4
 800237a:	e04f      	b.n	800241c <HAL_I2C_Init+0x1dc>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d111      	bne.n	80023a8 <HAL_I2C_Init+0x168>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	1e58      	subs	r0, r3, #1
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6859      	ldr	r1, [r3, #4]
 800238c:	460b      	mov	r3, r1
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	440b      	add	r3, r1
 8002392:	fbb0 f3f3 	udiv	r3, r0, r3
 8002396:	3301      	adds	r3, #1
 8002398:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800239c:	2b00      	cmp	r3, #0
 800239e:	bf0c      	ite	eq
 80023a0:	2301      	moveq	r3, #1
 80023a2:	2300      	movne	r3, #0
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	e012      	b.n	80023ce <HAL_I2C_Init+0x18e>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	1e58      	subs	r0, r3, #1
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6859      	ldr	r1, [r3, #4]
 80023b0:	460b      	mov	r3, r1
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	440b      	add	r3, r1
 80023b6:	0099      	lsls	r1, r3, #2
 80023b8:	440b      	add	r3, r1
 80023ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80023be:	3301      	adds	r3, #1
 80023c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	bf0c      	ite	eq
 80023c8:	2301      	moveq	r3, #1
 80023ca:	2300      	movne	r3, #0
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <HAL_I2C_Init+0x196>
 80023d2:	2301      	movs	r3, #1
 80023d4:	e022      	b.n	800241c <HAL_I2C_Init+0x1dc>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d10e      	bne.n	80023fc <HAL_I2C_Init+0x1bc>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	1e58      	subs	r0, r3, #1
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6859      	ldr	r1, [r3, #4]
 80023e6:	460b      	mov	r3, r1
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	440b      	add	r3, r1
 80023ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80023f0:	3301      	adds	r3, #1
 80023f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023fa:	e00f      	b.n	800241c <HAL_I2C_Init+0x1dc>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	1e58      	subs	r0, r3, #1
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6859      	ldr	r1, [r3, #4]
 8002404:	460b      	mov	r3, r1
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	440b      	add	r3, r1
 800240a:	0099      	lsls	r1, r3, #2
 800240c:	440b      	add	r3, r1
 800240e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002412:	3301      	adds	r3, #1
 8002414:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002418:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	6809      	ldr	r1, [r1, #0]
 8002420:	4313      	orrs	r3, r2
 8002422:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69da      	ldr	r2, [r3, #28]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	431a      	orrs	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	430a      	orrs	r2, r1
 800243e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800244a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	6911      	ldr	r1, [r2, #16]
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	68d2      	ldr	r2, [r2, #12]
 8002456:	4311      	orrs	r1, r2
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	6812      	ldr	r2, [r2, #0]
 800245c:	430b      	orrs	r3, r1
 800245e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	695a      	ldr	r2, [r3, #20]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	431a      	orrs	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	430a      	orrs	r2, r1
 800247a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 0201 	orr.w	r2, r2, #1
 800248a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2220      	movs	r2, #32
 8002496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	000186a0 	.word	0x000186a0
 80024b8:	001e847f 	.word	0x001e847f
 80024bc:	003d08ff 	.word	0x003d08ff
 80024c0:	431bde83 	.word	0x431bde83
 80024c4:	10624dd3 	.word	0x10624dd3

080024c8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b088      	sub	sp, #32
 80024cc:	af02      	add	r7, sp, #8
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	4608      	mov	r0, r1
 80024d2:	4611      	mov	r1, r2
 80024d4:	461a      	mov	r2, r3
 80024d6:	4603      	mov	r3, r0
 80024d8:	817b      	strh	r3, [r7, #10]
 80024da:	460b      	mov	r3, r1
 80024dc:	813b      	strh	r3, [r7, #8]
 80024de:	4613      	mov	r3, r2
 80024e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024e2:	f7ff fb17 	bl	8001b14 <HAL_GetTick>
 80024e6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b20      	cmp	r3, #32
 80024f2:	f040 80d9 	bne.w	80026a8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	2319      	movs	r3, #25
 80024fc:	2201      	movs	r2, #1
 80024fe:	496d      	ldr	r1, [pc, #436]	; (80026b4 <HAL_I2C_Mem_Write+0x1ec>)
 8002500:	68f8      	ldr	r0, [r7, #12]
 8002502:	f000 fc7f 	bl	8002e04 <I2C_WaitOnFlagUntilTimeout>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800250c:	2302      	movs	r3, #2
 800250e:	e0cc      	b.n	80026aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002516:	2b01      	cmp	r3, #1
 8002518:	d101      	bne.n	800251e <HAL_I2C_Mem_Write+0x56>
 800251a:	2302      	movs	r3, #2
 800251c:	e0c5      	b.n	80026aa <HAL_I2C_Mem_Write+0x1e2>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	2b01      	cmp	r3, #1
 8002532:	d007      	beq.n	8002544 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f042 0201 	orr.w	r2, r2, #1
 8002542:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002552:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2221      	movs	r2, #33	; 0x21
 8002558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2240      	movs	r2, #64	; 0x40
 8002560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6a3a      	ldr	r2, [r7, #32]
 800256e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002574:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800257a:	b29a      	uxth	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	4a4d      	ldr	r2, [pc, #308]	; (80026b8 <HAL_I2C_Mem_Write+0x1f0>)
 8002584:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002586:	88f8      	ldrh	r0, [r7, #6]
 8002588:	893a      	ldrh	r2, [r7, #8]
 800258a:	8979      	ldrh	r1, [r7, #10]
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	9301      	str	r3, [sp, #4]
 8002590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	4603      	mov	r3, r0
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f000 fab6 	bl	8002b08 <I2C_RequestMemoryWrite>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d052      	beq.n	8002648 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e081      	b.n	80026aa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025aa:	68f8      	ldr	r0, [r7, #12]
 80025ac:	f000 fd00 	bl	8002fb0 <I2C_WaitOnTXEFlagUntilTimeout>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d00d      	beq.n	80025d2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	d107      	bne.n	80025ce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e06b      	b.n	80026aa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d6:	781a      	ldrb	r2, [r3, #0]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e2:	1c5a      	adds	r2, r3, #1
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ec:	3b01      	subs	r3, #1
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	3b01      	subs	r3, #1
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	f003 0304 	and.w	r3, r3, #4
 800260c:	2b04      	cmp	r3, #4
 800260e:	d11b      	bne.n	8002648 <HAL_I2C_Mem_Write+0x180>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002614:	2b00      	cmp	r3, #0
 8002616:	d017      	beq.n	8002648 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261c:	781a      	ldrb	r2, [r3, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002628:	1c5a      	adds	r2, r3, #1
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002632:	3b01      	subs	r3, #1
 8002634:	b29a      	uxth	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800263e:	b29b      	uxth	r3, r3
 8002640:	3b01      	subs	r3, #1
 8002642:	b29a      	uxth	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1aa      	bne.n	80025a6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002654:	68f8      	ldr	r0, [r7, #12]
 8002656:	f000 fcec 	bl	8003032 <I2C_WaitOnBTFFlagUntilTimeout>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d00d      	beq.n	800267c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	2b04      	cmp	r3, #4
 8002666:	d107      	bne.n	8002678 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002676:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e016      	b.n	80026aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800268a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2220      	movs	r2, #32
 8002690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026a4:	2300      	movs	r3, #0
 80026a6:	e000      	b.n	80026aa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80026a8:	2302      	movs	r3, #2
  }
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3718      	adds	r7, #24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	00100002 	.word	0x00100002
 80026b8:	ffff0000 	.word	0xffff0000

080026bc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b08c      	sub	sp, #48	; 0x30
 80026c0:	af02      	add	r7, sp, #8
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	4608      	mov	r0, r1
 80026c6:	4611      	mov	r1, r2
 80026c8:	461a      	mov	r2, r3
 80026ca:	4603      	mov	r3, r0
 80026cc:	817b      	strh	r3, [r7, #10]
 80026ce:	460b      	mov	r3, r1
 80026d0:	813b      	strh	r3, [r7, #8]
 80026d2:	4613      	mov	r3, r2
 80026d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026d6:	f7ff fa1d 	bl	8001b14 <HAL_GetTick>
 80026da:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b20      	cmp	r3, #32
 80026e6:	f040 8208 	bne.w	8002afa <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	2319      	movs	r3, #25
 80026f0:	2201      	movs	r2, #1
 80026f2:	497b      	ldr	r1, [pc, #492]	; (80028e0 <HAL_I2C_Mem_Read+0x224>)
 80026f4:	68f8      	ldr	r0, [r7, #12]
 80026f6:	f000 fb85 	bl	8002e04 <I2C_WaitOnFlagUntilTimeout>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002700:	2302      	movs	r3, #2
 8002702:	e1fb      	b.n	8002afc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800270a:	2b01      	cmp	r3, #1
 800270c:	d101      	bne.n	8002712 <HAL_I2C_Mem_Read+0x56>
 800270e:	2302      	movs	r3, #2
 8002710:	e1f4      	b.n	8002afc <HAL_I2C_Mem_Read+0x440>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0301 	and.w	r3, r3, #1
 8002724:	2b01      	cmp	r3, #1
 8002726:	d007      	beq.n	8002738 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f042 0201 	orr.w	r2, r2, #1
 8002736:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002746:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2222      	movs	r2, #34	; 0x22
 800274c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2240      	movs	r2, #64	; 0x40
 8002754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002762:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002768:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800276e:	b29a      	uxth	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	4a5b      	ldr	r2, [pc, #364]	; (80028e4 <HAL_I2C_Mem_Read+0x228>)
 8002778:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800277a:	88f8      	ldrh	r0, [r7, #6]
 800277c:	893a      	ldrh	r2, [r7, #8]
 800277e:	8979      	ldrh	r1, [r7, #10]
 8002780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002782:	9301      	str	r3, [sp, #4]
 8002784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	4603      	mov	r3, r0
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f000 fa52 	bl	8002c34 <I2C_RequestMemoryRead>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e1b0      	b.n	8002afc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d113      	bne.n	80027ca <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027a2:	2300      	movs	r3, #0
 80027a4:	623b      	str	r3, [r7, #32]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	623b      	str	r3, [r7, #32]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	623b      	str	r3, [r7, #32]
 80027b6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	e184      	b.n	8002ad4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d11b      	bne.n	800280a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027e2:	2300      	movs	r3, #0
 80027e4:	61fb      	str	r3, [r7, #28]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	695b      	ldr	r3, [r3, #20]
 80027ec:	61fb      	str	r3, [r7, #28]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	61fb      	str	r3, [r7, #28]
 80027f6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	e164      	b.n	8002ad4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800280e:	2b02      	cmp	r3, #2
 8002810:	d11b      	bne.n	800284a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002820:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002830:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002832:	2300      	movs	r3, #0
 8002834:	61bb      	str	r3, [r7, #24]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	61bb      	str	r3, [r7, #24]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	61bb      	str	r3, [r7, #24]
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	e144      	b.n	8002ad4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800284a:	2300      	movs	r3, #0
 800284c:	617b      	str	r3, [r7, #20]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	695b      	ldr	r3, [r3, #20]
 8002854:	617b      	str	r3, [r7, #20]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	617b      	str	r3, [r7, #20]
 800285e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002860:	e138      	b.n	8002ad4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002866:	2b03      	cmp	r3, #3
 8002868:	f200 80f1 	bhi.w	8002a4e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002870:	2b01      	cmp	r3, #1
 8002872:	d123      	bne.n	80028bc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002876:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002878:	68f8      	ldr	r0, [r7, #12]
 800287a:	f000 fc1b 	bl	80030b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e139      	b.n	8002afc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	691a      	ldr	r2, [r3, #16]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002892:	b2d2      	uxtb	r2, r2
 8002894:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289a:	1c5a      	adds	r2, r3, #1
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a4:	3b01      	subs	r3, #1
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	3b01      	subs	r3, #1
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028ba:	e10b      	b.n	8002ad4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d14e      	bne.n	8002962 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	9300      	str	r3, [sp, #0]
 80028c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ca:	2200      	movs	r2, #0
 80028cc:	4906      	ldr	r1, [pc, #24]	; (80028e8 <HAL_I2C_Mem_Read+0x22c>)
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f000 fa98 	bl	8002e04 <I2C_WaitOnFlagUntilTimeout>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d008      	beq.n	80028ec <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e10e      	b.n	8002afc <HAL_I2C_Mem_Read+0x440>
 80028de:	bf00      	nop
 80028e0:	00100002 	.word	0x00100002
 80028e4:	ffff0000 	.word	0xffff0000
 80028e8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	691a      	ldr	r2, [r3, #16]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290e:	1c5a      	adds	r2, r3, #1
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002918:	3b01      	subs	r3, #1
 800291a:	b29a      	uxth	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002924:	b29b      	uxth	r3, r3
 8002926:	3b01      	subs	r3, #1
 8002928:	b29a      	uxth	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	691a      	ldr	r2, [r3, #16]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002938:	b2d2      	uxtb	r2, r2
 800293a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	1c5a      	adds	r2, r3, #1
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800294a:	3b01      	subs	r3, #1
 800294c:	b29a      	uxth	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002956:	b29b      	uxth	r3, r3
 8002958:	3b01      	subs	r3, #1
 800295a:	b29a      	uxth	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002960:	e0b8      	b.n	8002ad4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002968:	2200      	movs	r2, #0
 800296a:	4966      	ldr	r1, [pc, #408]	; (8002b04 <HAL_I2C_Mem_Read+0x448>)
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f000 fa49 	bl	8002e04 <I2C_WaitOnFlagUntilTimeout>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e0bf      	b.n	8002afc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800298a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	691a      	ldr	r2, [r3, #16]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002996:	b2d2      	uxtb	r2, r2
 8002998:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299e:	1c5a      	adds	r2, r3, #1
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a8:	3b01      	subs	r3, #1
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	3b01      	subs	r3, #1
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c4:	2200      	movs	r2, #0
 80029c6:	494f      	ldr	r1, [pc, #316]	; (8002b04 <HAL_I2C_Mem_Read+0x448>)
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f000 fa1b 	bl	8002e04 <I2C_WaitOnFlagUntilTimeout>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e091      	b.n	8002afc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	691a      	ldr	r2, [r3, #16]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fa:	1c5a      	adds	r2, r3, #1
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a04:	3b01      	subs	r3, #1
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	3b01      	subs	r3, #1
 8002a14:	b29a      	uxth	r2, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	691a      	ldr	r2, [r3, #16]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a24:	b2d2      	uxtb	r2, r2
 8002a26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2c:	1c5a      	adds	r2, r3, #1
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a36:	3b01      	subs	r3, #1
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	3b01      	subs	r3, #1
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a4c:	e042      	b.n	8002ad4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a50:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a52:	68f8      	ldr	r0, [r7, #12]
 8002a54:	f000 fb2e 	bl	80030b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e04c      	b.n	8002afc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	691a      	ldr	r2, [r3, #16]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6c:	b2d2      	uxtb	r2, r2
 8002a6e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a74:	1c5a      	adds	r2, r3, #1
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	f003 0304 	and.w	r3, r3, #4
 8002a9e:	2b04      	cmp	r3, #4
 8002aa0:	d118      	bne.n	8002ad4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	691a      	ldr	r2, [r3, #16]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aac:	b2d2      	uxtb	r2, r2
 8002aae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab4:	1c5a      	adds	r2, r3, #1
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	3b01      	subs	r3, #1
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f47f aec2 	bne.w	8002862 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2220      	movs	r2, #32
 8002ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002af6:	2300      	movs	r3, #0
 8002af8:	e000      	b.n	8002afc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002afa:	2302      	movs	r3, #2
  }
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3728      	adds	r7, #40	; 0x28
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	00010004 	.word	0x00010004

08002b08 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b088      	sub	sp, #32
 8002b0c:	af02      	add	r7, sp, #8
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	4608      	mov	r0, r1
 8002b12:	4611      	mov	r1, r2
 8002b14:	461a      	mov	r2, r3
 8002b16:	4603      	mov	r3, r0
 8002b18:	817b      	strh	r3, [r7, #10]
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	813b      	strh	r3, [r7, #8]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b34:	9300      	str	r3, [sp, #0]
 8002b36:	6a3b      	ldr	r3, [r7, #32]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b3e:	68f8      	ldr	r0, [r7, #12]
 8002b40:	f000 f960 	bl	8002e04 <I2C_WaitOnFlagUntilTimeout>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00d      	beq.n	8002b66 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b58:	d103      	bne.n	8002b62 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b60:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e05f      	b.n	8002c26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b66:	897b      	ldrh	r3, [r7, #10]
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	6a3a      	ldr	r2, [r7, #32]
 8002b7a:	492d      	ldr	r1, [pc, #180]	; (8002c30 <I2C_RequestMemoryWrite+0x128>)
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f000 f998 	bl	8002eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e04c      	b.n	8002c26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	617b      	str	r3, [r7, #20]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	617b      	str	r3, [r7, #20]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	617b      	str	r3, [r7, #20]
 8002ba0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ba4:	6a39      	ldr	r1, [r7, #32]
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f000 fa02 	bl	8002fb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00d      	beq.n	8002bce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	d107      	bne.n	8002bca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bc8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e02b      	b.n	8002c26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002bce:	88fb      	ldrh	r3, [r7, #6]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d105      	bne.n	8002be0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bd4:	893b      	ldrh	r3, [r7, #8]
 8002bd6:	b2da      	uxtb	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	611a      	str	r2, [r3, #16]
 8002bde:	e021      	b.n	8002c24 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002be0:	893b      	ldrh	r3, [r7, #8]
 8002be2:	0a1b      	lsrs	r3, r3, #8
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	b2da      	uxtb	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bf0:	6a39      	ldr	r1, [r7, #32]
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f000 f9dc 	bl	8002fb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00d      	beq.n	8002c1a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	d107      	bne.n	8002c16 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e005      	b.n	8002c26 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c1a:	893b      	ldrh	r3, [r7, #8]
 8002c1c:	b2da      	uxtb	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3718      	adds	r7, #24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	00010002 	.word	0x00010002

08002c34 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b088      	sub	sp, #32
 8002c38:	af02      	add	r7, sp, #8
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	4608      	mov	r0, r1
 8002c3e:	4611      	mov	r1, r2
 8002c40:	461a      	mov	r2, r3
 8002c42:	4603      	mov	r3, r0
 8002c44:	817b      	strh	r3, [r7, #10]
 8002c46:	460b      	mov	r3, r1
 8002c48:	813b      	strh	r3, [r7, #8]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c5c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	6a3b      	ldr	r3, [r7, #32]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f000 f8c2 	bl	8002e04 <I2C_WaitOnFlagUntilTimeout>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00d      	beq.n	8002ca2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c94:	d103      	bne.n	8002c9e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e0aa      	b.n	8002df8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ca2:	897b      	ldrh	r3, [r7, #10]
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002cb0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb4:	6a3a      	ldr	r2, [r7, #32]
 8002cb6:	4952      	ldr	r1, [pc, #328]	; (8002e00 <I2C_RequestMemoryRead+0x1cc>)
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f000 f8fa 	bl	8002eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e097      	b.n	8002df8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cc8:	2300      	movs	r3, #0
 8002cca:	617b      	str	r3, [r7, #20]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	617b      	str	r3, [r7, #20]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	617b      	str	r3, [r7, #20]
 8002cdc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ce0:	6a39      	ldr	r1, [r7, #32]
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 f964 	bl	8002fb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00d      	beq.n	8002d0a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	d107      	bne.n	8002d06 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e076      	b.n	8002df8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d0a:	88fb      	ldrh	r3, [r7, #6]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d105      	bne.n	8002d1c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d10:	893b      	ldrh	r3, [r7, #8]
 8002d12:	b2da      	uxtb	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	611a      	str	r2, [r3, #16]
 8002d1a:	e021      	b.n	8002d60 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d1c:	893b      	ldrh	r3, [r7, #8]
 8002d1e:	0a1b      	lsrs	r3, r3, #8
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d2c:	6a39      	ldr	r1, [r7, #32]
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f000 f93e 	bl	8002fb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00d      	beq.n	8002d56 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	d107      	bne.n	8002d52 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e050      	b.n	8002df8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d56:	893b      	ldrh	r3, [r7, #8]
 8002d58:	b2da      	uxtb	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d62:	6a39      	ldr	r1, [r7, #32]
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 f923 	bl	8002fb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00d      	beq.n	8002d8c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d74:	2b04      	cmp	r3, #4
 8002d76:	d107      	bne.n	8002d88 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d86:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e035      	b.n	8002df8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d9a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9e:	9300      	str	r3, [sp, #0]
 8002da0:	6a3b      	ldr	r3, [r7, #32]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f000 f82b 	bl	8002e04 <I2C_WaitOnFlagUntilTimeout>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00d      	beq.n	8002dd0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dc2:	d103      	bne.n	8002dcc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e013      	b.n	8002df8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002dd0:	897b      	ldrh	r3, [r7, #10]
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	f043 0301 	orr.w	r3, r3, #1
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de2:	6a3a      	ldr	r2, [r7, #32]
 8002de4:	4906      	ldr	r1, [pc, #24]	; (8002e00 <I2C_RequestMemoryRead+0x1cc>)
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f000 f863 	bl	8002eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e000      	b.n	8002df8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3718      	adds	r7, #24
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	00010002 	.word	0x00010002

08002e04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	603b      	str	r3, [r7, #0]
 8002e10:	4613      	mov	r3, r2
 8002e12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e14:	e025      	b.n	8002e62 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e1c:	d021      	beq.n	8002e62 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e1e:	f7fe fe79 	bl	8001b14 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d302      	bcc.n	8002e34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d116      	bne.n	8002e62 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	f043 0220 	orr.w	r2, r3, #32
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e023      	b.n	8002eaa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	0c1b      	lsrs	r3, r3, #16
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d10d      	bne.n	8002e88 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	43da      	mvns	r2, r3
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	4013      	ands	r3, r2
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	bf0c      	ite	eq
 8002e7e:	2301      	moveq	r3, #1
 8002e80:	2300      	movne	r3, #0
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	461a      	mov	r2, r3
 8002e86:	e00c      	b.n	8002ea2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	43da      	mvns	r2, r3
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	4013      	ands	r3, r2
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	bf0c      	ite	eq
 8002e9a:	2301      	moveq	r3, #1
 8002e9c:	2300      	movne	r3, #0
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	79fb      	ldrb	r3, [r7, #7]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d0b6      	beq.n	8002e16 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b084      	sub	sp, #16
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	60f8      	str	r0, [r7, #12]
 8002eba:	60b9      	str	r1, [r7, #8]
 8002ebc:	607a      	str	r2, [r7, #4]
 8002ebe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ec0:	e051      	b.n	8002f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	695b      	ldr	r3, [r3, #20]
 8002ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ecc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ed0:	d123      	bne.n	8002f1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ee0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002eea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	f043 0204 	orr.w	r2, r3, #4
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e046      	b.n	8002fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f20:	d021      	beq.n	8002f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f22:	f7fe fdf7 	bl	8001b14 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d302      	bcc.n	8002f38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d116      	bne.n	8002f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2220      	movs	r2, #32
 8002f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	f043 0220 	orr.w	r2, r3, #32
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e020      	b.n	8002fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	0c1b      	lsrs	r3, r3, #16
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d10c      	bne.n	8002f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	43da      	mvns	r2, r3
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	bf14      	ite	ne
 8002f82:	2301      	movne	r3, #1
 8002f84:	2300      	moveq	r3, #0
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	e00b      	b.n	8002fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	43da      	mvns	r2, r3
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	4013      	ands	r3, r2
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	bf14      	ite	ne
 8002f9c:	2301      	movne	r3, #1
 8002f9e:	2300      	moveq	r3, #0
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d18d      	bne.n	8002ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fbc:	e02d      	b.n	800301a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f000 f8ce 	bl	8003160 <I2C_IsAcknowledgeFailed>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e02d      	b.n	800302a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd4:	d021      	beq.n	800301a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fd6:	f7fe fd9d 	bl	8001b14 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	68ba      	ldr	r2, [r7, #8]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d302      	bcc.n	8002fec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d116      	bne.n	800301a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	f043 0220 	orr.w	r2, r3, #32
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e007      	b.n	800302a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003024:	2b80      	cmp	r3, #128	; 0x80
 8003026:	d1ca      	bne.n	8002fbe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b084      	sub	sp, #16
 8003036:	af00      	add	r7, sp, #0
 8003038:	60f8      	str	r0, [r7, #12]
 800303a:	60b9      	str	r1, [r7, #8]
 800303c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800303e:	e02d      	b.n	800309c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f000 f88d 	bl	8003160 <I2C_IsAcknowledgeFailed>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e02d      	b.n	80030ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003056:	d021      	beq.n	800309c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003058:	f7fe fd5c 	bl	8001b14 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	68ba      	ldr	r2, [r7, #8]
 8003064:	429a      	cmp	r2, r3
 8003066:	d302      	bcc.n	800306e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d116      	bne.n	800309c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2220      	movs	r2, #32
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003088:	f043 0220 	orr.w	r2, r3, #32
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e007      	b.n	80030ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	f003 0304 	and.w	r3, r3, #4
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	d1ca      	bne.n	8003040 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030c0:	e042      	b.n	8003148 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	f003 0310 	and.w	r3, r3, #16
 80030cc:	2b10      	cmp	r3, #16
 80030ce:	d119      	bne.n	8003104 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f06f 0210 	mvn.w	r2, #16
 80030d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2220      	movs	r2, #32
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e029      	b.n	8003158 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003104:	f7fe fd06 	bl	8001b14 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	429a      	cmp	r2, r3
 8003112:	d302      	bcc.n	800311a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d116      	bne.n	8003148 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2220      	movs	r2, #32
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003134:	f043 0220 	orr.w	r2, r3, #32
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e007      	b.n	8003158 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003152:	2b40      	cmp	r3, #64	; 0x40
 8003154:	d1b5      	bne.n	80030c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003176:	d11b      	bne.n	80031b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003180:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2220      	movs	r2, #32
 800318c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	f043 0204 	orr.w	r2, r3, #4
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e000      	b.n	80031b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr

080031be <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80031be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031c0:	b08f      	sub	sp, #60	; 0x3c
 80031c2:	af0a      	add	r7, sp, #40	; 0x28
 80031c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d101      	bne.n	80031d0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e10f      	b.n	80033f0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d106      	bne.n	80031f0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f005 fede 	bl	8008fac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2203      	movs	r2, #3
 80031f4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003200:	2b00      	cmp	r3, #0
 8003202:	d102      	bne.n	800320a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f002 fdd1 	bl	8005db6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	603b      	str	r3, [r7, #0]
 800321a:	687e      	ldr	r6, [r7, #4]
 800321c:	466d      	mov	r5, sp
 800321e:	f106 0410 	add.w	r4, r6, #16
 8003222:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003224:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003226:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003228:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800322a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800322e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003232:	1d33      	adds	r3, r6, #4
 8003234:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003236:	6838      	ldr	r0, [r7, #0]
 8003238:	f002 fca8 	bl	8005b8c <USB_CoreInit>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d005      	beq.n	800324e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2202      	movs	r2, #2
 8003246:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e0d0      	b.n	80033f0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2100      	movs	r1, #0
 8003254:	4618      	mov	r0, r3
 8003256:	f002 fdbf 	bl	8005dd8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800325a:	2300      	movs	r3, #0
 800325c:	73fb      	strb	r3, [r7, #15]
 800325e:	e04a      	b.n	80032f6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003260:	7bfa      	ldrb	r2, [r7, #15]
 8003262:	6879      	ldr	r1, [r7, #4]
 8003264:	4613      	mov	r3, r2
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	1a9b      	subs	r3, r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	440b      	add	r3, r1
 800326e:	333d      	adds	r3, #61	; 0x3d
 8003270:	2201      	movs	r2, #1
 8003272:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003274:	7bfa      	ldrb	r2, [r7, #15]
 8003276:	6879      	ldr	r1, [r7, #4]
 8003278:	4613      	mov	r3, r2
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	1a9b      	subs	r3, r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	440b      	add	r3, r1
 8003282:	333c      	adds	r3, #60	; 0x3c
 8003284:	7bfa      	ldrb	r2, [r7, #15]
 8003286:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003288:	7bfa      	ldrb	r2, [r7, #15]
 800328a:	7bfb      	ldrb	r3, [r7, #15]
 800328c:	b298      	uxth	r0, r3
 800328e:	6879      	ldr	r1, [r7, #4]
 8003290:	4613      	mov	r3, r2
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	1a9b      	subs	r3, r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	440b      	add	r3, r1
 800329a:	3342      	adds	r3, #66	; 0x42
 800329c:	4602      	mov	r2, r0
 800329e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80032a0:	7bfa      	ldrb	r2, [r7, #15]
 80032a2:	6879      	ldr	r1, [r7, #4]
 80032a4:	4613      	mov	r3, r2
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	1a9b      	subs	r3, r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	440b      	add	r3, r1
 80032ae:	333f      	adds	r3, #63	; 0x3f
 80032b0:	2200      	movs	r2, #0
 80032b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80032b4:	7bfa      	ldrb	r2, [r7, #15]
 80032b6:	6879      	ldr	r1, [r7, #4]
 80032b8:	4613      	mov	r3, r2
 80032ba:	00db      	lsls	r3, r3, #3
 80032bc:	1a9b      	subs	r3, r3, r2
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	440b      	add	r3, r1
 80032c2:	3344      	adds	r3, #68	; 0x44
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80032c8:	7bfa      	ldrb	r2, [r7, #15]
 80032ca:	6879      	ldr	r1, [r7, #4]
 80032cc:	4613      	mov	r3, r2
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	1a9b      	subs	r3, r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	440b      	add	r3, r1
 80032d6:	3348      	adds	r3, #72	; 0x48
 80032d8:	2200      	movs	r2, #0
 80032da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80032dc:	7bfa      	ldrb	r2, [r7, #15]
 80032de:	6879      	ldr	r1, [r7, #4]
 80032e0:	4613      	mov	r3, r2
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	1a9b      	subs	r3, r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	440b      	add	r3, r1
 80032ea:	3350      	adds	r3, #80	; 0x50
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032f0:	7bfb      	ldrb	r3, [r7, #15]
 80032f2:	3301      	adds	r3, #1
 80032f4:	73fb      	strb	r3, [r7, #15]
 80032f6:	7bfa      	ldrb	r2, [r7, #15]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d3af      	bcc.n	8003260 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003300:	2300      	movs	r3, #0
 8003302:	73fb      	strb	r3, [r7, #15]
 8003304:	e044      	b.n	8003390 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003306:	7bfa      	ldrb	r2, [r7, #15]
 8003308:	6879      	ldr	r1, [r7, #4]
 800330a:	4613      	mov	r3, r2
 800330c:	00db      	lsls	r3, r3, #3
 800330e:	1a9b      	subs	r3, r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	440b      	add	r3, r1
 8003314:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003318:	2200      	movs	r2, #0
 800331a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800331c:	7bfa      	ldrb	r2, [r7, #15]
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	4613      	mov	r3, r2
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	1a9b      	subs	r3, r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	440b      	add	r3, r1
 800332a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800332e:	7bfa      	ldrb	r2, [r7, #15]
 8003330:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003332:	7bfa      	ldrb	r2, [r7, #15]
 8003334:	6879      	ldr	r1, [r7, #4]
 8003336:	4613      	mov	r3, r2
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	1a9b      	subs	r3, r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	440b      	add	r3, r1
 8003340:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003344:	2200      	movs	r2, #0
 8003346:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003348:	7bfa      	ldrb	r2, [r7, #15]
 800334a:	6879      	ldr	r1, [r7, #4]
 800334c:	4613      	mov	r3, r2
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	1a9b      	subs	r3, r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	440b      	add	r3, r1
 8003356:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800335a:	2200      	movs	r2, #0
 800335c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800335e:	7bfa      	ldrb	r2, [r7, #15]
 8003360:	6879      	ldr	r1, [r7, #4]
 8003362:	4613      	mov	r3, r2
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	1a9b      	subs	r3, r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	440b      	add	r3, r1
 800336c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003370:	2200      	movs	r2, #0
 8003372:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003374:	7bfa      	ldrb	r2, [r7, #15]
 8003376:	6879      	ldr	r1, [r7, #4]
 8003378:	4613      	mov	r3, r2
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	1a9b      	subs	r3, r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	440b      	add	r3, r1
 8003382:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003386:	2200      	movs	r2, #0
 8003388:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800338a:	7bfb      	ldrb	r3, [r7, #15]
 800338c:	3301      	adds	r3, #1
 800338e:	73fb      	strb	r3, [r7, #15]
 8003390:	7bfa      	ldrb	r2, [r7, #15]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	429a      	cmp	r2, r3
 8003398:	d3b5      	bcc.n	8003306 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	603b      	str	r3, [r7, #0]
 80033a0:	687e      	ldr	r6, [r7, #4]
 80033a2:	466d      	mov	r5, sp
 80033a4:	f106 0410 	add.w	r4, r6, #16
 80033a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80033b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80033b8:	1d33      	adds	r3, r6, #4
 80033ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033bc:	6838      	ldr	r0, [r7, #0]
 80033be:	f002 fd57 	bl	8005e70 <USB_DevInit>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d005      	beq.n	80033d4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2202      	movs	r2, #2
 80033cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e00d      	b.n	80033f0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f003 fdd3 	bl	8006f94 <USB_DevDisconnect>

  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3714      	adds	r7, #20
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033f8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800340c:	2b01      	cmp	r3, #1
 800340e:	d101      	bne.n	8003414 <HAL_PCD_Start+0x1c>
 8003410:	2302      	movs	r3, #2
 8003412:	e020      	b.n	8003456 <HAL_PCD_Start+0x5e>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003420:	2b01      	cmp	r3, #1
 8003422:	d109      	bne.n	8003438 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003428:	2b01      	cmp	r3, #1
 800342a:	d005      	beq.n	8003438 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003430:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4618      	mov	r0, r3
 800343e:	f002 fca9 	bl	8005d94 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4618      	mov	r0, r3
 8003448:	f003 fd83 	bl	8006f52 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800345e:	b590      	push	{r4, r7, lr}
 8003460:	b08d      	sub	sp, #52	; 0x34
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800346c:	6a3b      	ldr	r3, [r7, #32]
 800346e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4618      	mov	r0, r3
 8003476:	f003 fe41 	bl	80070fc <USB_GetMode>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	f040 839d 	bne.w	8003bbc <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4618      	mov	r0, r3
 8003488:	f003 fda5 	bl	8006fd6 <USB_ReadInterrupts>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	f000 8393 	beq.w	8003bba <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4618      	mov	r0, r3
 800349a:	f003 fd9c 	bl	8006fd6 <USB_ReadInterrupts>
 800349e:	4603      	mov	r3, r0
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d107      	bne.n	80034b8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	695a      	ldr	r2, [r3, #20]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f002 0202 	and.w	r2, r2, #2
 80034b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4618      	mov	r0, r3
 80034be:	f003 fd8a 	bl	8006fd6 <USB_ReadInterrupts>
 80034c2:	4603      	mov	r3, r0
 80034c4:	f003 0310 	and.w	r3, r3, #16
 80034c8:	2b10      	cmp	r3, #16
 80034ca:	d161      	bne.n	8003590 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	699a      	ldr	r2, [r3, #24]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f022 0210 	bic.w	r2, r2, #16
 80034da:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80034dc:	6a3b      	ldr	r3, [r7, #32]
 80034de:	6a1b      	ldr	r3, [r3, #32]
 80034e0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	f003 020f 	and.w	r2, r3, #15
 80034e8:	4613      	mov	r3, r2
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	1a9b      	subs	r3, r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	4413      	add	r3, r2
 80034f8:	3304      	adds	r3, #4
 80034fa:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	0c5b      	lsrs	r3, r3, #17
 8003500:	f003 030f 	and.w	r3, r3, #15
 8003504:	2b02      	cmp	r3, #2
 8003506:	d124      	bne.n	8003552 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800350e:	4013      	ands	r3, r2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d035      	beq.n	8003580 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	091b      	lsrs	r3, r3, #4
 800351c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800351e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003522:	b29b      	uxth	r3, r3
 8003524:	461a      	mov	r2, r3
 8003526:	6a38      	ldr	r0, [r7, #32]
 8003528:	f003 fbc1 	bl	8006cae <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	68da      	ldr	r2, [r3, #12]
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	091b      	lsrs	r3, r3, #4
 8003534:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003538:	441a      	add	r2, r3
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	699a      	ldr	r2, [r3, #24]
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	091b      	lsrs	r3, r3, #4
 8003546:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800354a:	441a      	add	r2, r3
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	619a      	str	r2, [r3, #24]
 8003550:	e016      	b.n	8003580 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	0c5b      	lsrs	r3, r3, #17
 8003556:	f003 030f 	and.w	r3, r3, #15
 800355a:	2b06      	cmp	r3, #6
 800355c:	d110      	bne.n	8003580 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003564:	2208      	movs	r2, #8
 8003566:	4619      	mov	r1, r3
 8003568:	6a38      	ldr	r0, [r7, #32]
 800356a:	f003 fba0 	bl	8006cae <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	699a      	ldr	r2, [r3, #24]
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	091b      	lsrs	r3, r3, #4
 8003576:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800357a:	441a      	add	r2, r3
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	699a      	ldr	r2, [r3, #24]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f042 0210 	orr.w	r2, r2, #16
 800358e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4618      	mov	r0, r3
 8003596:	f003 fd1e 	bl	8006fd6 <USB_ReadInterrupts>
 800359a:	4603      	mov	r3, r0
 800359c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035a0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80035a4:	d16e      	bne.n	8003684 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80035a6:	2300      	movs	r3, #0
 80035a8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f003 fd24 	bl	8006ffc <USB_ReadDevAllOutEpInterrupt>
 80035b4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80035b6:	e062      	b.n	800367e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80035b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d057      	beq.n	8003672 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c8:	b2d2      	uxtb	r2, r2
 80035ca:	4611      	mov	r1, r2
 80035cc:	4618      	mov	r0, r3
 80035ce:	f003 fd49 	bl	8007064 <USB_ReadDevOutEPInterrupt>
 80035d2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00c      	beq.n	80035f8 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80035de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e0:	015a      	lsls	r2, r3, #5
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	4413      	add	r3, r2
 80035e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035ea:	461a      	mov	r2, r3
 80035ec:	2301      	movs	r3, #1
 80035ee:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80035f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 fdb0 	bl	8004158 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	f003 0308 	and.w	r3, r3, #8
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00c      	beq.n	800361c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003604:	015a      	lsls	r2, r3, #5
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	4413      	add	r3, r2
 800360a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800360e:	461a      	mov	r2, r3
 8003610:	2308      	movs	r3, #8
 8003612:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003614:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 feaa 	bl	8004370 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	f003 0310 	and.w	r3, r3, #16
 8003622:	2b00      	cmp	r3, #0
 8003624:	d008      	beq.n	8003638 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003628:	015a      	lsls	r2, r3, #5
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	4413      	add	r3, r2
 800362e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003632:	461a      	mov	r2, r3
 8003634:	2310      	movs	r3, #16
 8003636:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	f003 0320 	and.w	r3, r3, #32
 800363e:	2b00      	cmp	r3, #0
 8003640:	d008      	beq.n	8003654 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003644:	015a      	lsls	r2, r3, #5
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	4413      	add	r3, r2
 800364a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800364e:	461a      	mov	r2, r3
 8003650:	2320      	movs	r3, #32
 8003652:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d009      	beq.n	8003672 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	015a      	lsls	r2, r3, #5
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	4413      	add	r3, r2
 8003666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800366a:	461a      	mov	r2, r3
 800366c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003670:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003674:	3301      	adds	r3, #1
 8003676:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367a:	085b      	lsrs	r3, r3, #1
 800367c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800367e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003680:	2b00      	cmp	r3, #0
 8003682:	d199      	bne.n	80035b8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4618      	mov	r0, r3
 800368a:	f003 fca4 	bl	8006fd6 <USB_ReadInterrupts>
 800368e:	4603      	mov	r3, r0
 8003690:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003694:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003698:	f040 80c0 	bne.w	800381c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f003 fcc5 	bl	8007030 <USB_ReadDevAllInEpInterrupt>
 80036a6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80036a8:	2300      	movs	r3, #0
 80036aa:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80036ac:	e0b2      	b.n	8003814 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80036ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 80a7 	beq.w	8003808 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036c0:	b2d2      	uxtb	r2, r2
 80036c2:	4611      	mov	r1, r2
 80036c4:	4618      	mov	r0, r3
 80036c6:	f003 fceb 	bl	80070a0 <USB_ReadDevInEPInterrupt>
 80036ca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d057      	beq.n	8003786 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80036d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d8:	f003 030f 	and.w	r3, r3, #15
 80036dc:	2201      	movs	r2, #1
 80036de:	fa02 f303 	lsl.w	r3, r2, r3
 80036e2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	43db      	mvns	r3, r3
 80036f0:	69f9      	ldr	r1, [r7, #28]
 80036f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036f6:	4013      	ands	r3, r2
 80036f8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80036fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fc:	015a      	lsls	r2, r3, #5
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	4413      	add	r3, r2
 8003702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003706:	461a      	mov	r2, r3
 8003708:	2301      	movs	r3, #1
 800370a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d132      	bne.n	800377a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003714:	6879      	ldr	r1, [r7, #4]
 8003716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003718:	4613      	mov	r3, r2
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	1a9b      	subs	r3, r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	440b      	add	r3, r1
 8003722:	3348      	adds	r3, #72	; 0x48
 8003724:	6819      	ldr	r1, [r3, #0]
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800372a:	4613      	mov	r3, r2
 800372c:	00db      	lsls	r3, r3, #3
 800372e:	1a9b      	subs	r3, r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4403      	add	r3, r0
 8003734:	3344      	adds	r3, #68	; 0x44
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4419      	add	r1, r3
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800373e:	4613      	mov	r3, r2
 8003740:	00db      	lsls	r3, r3, #3
 8003742:	1a9b      	subs	r3, r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	4403      	add	r3, r0
 8003748:	3348      	adds	r3, #72	; 0x48
 800374a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800374c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374e:	2b00      	cmp	r3, #0
 8003750:	d113      	bne.n	800377a <HAL_PCD_IRQHandler+0x31c>
 8003752:	6879      	ldr	r1, [r7, #4]
 8003754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003756:	4613      	mov	r3, r2
 8003758:	00db      	lsls	r3, r3, #3
 800375a:	1a9b      	subs	r3, r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	440b      	add	r3, r1
 8003760:	3350      	adds	r3, #80	; 0x50
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d108      	bne.n	800377a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6818      	ldr	r0, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003772:	461a      	mov	r2, r3
 8003774:	2101      	movs	r1, #1
 8003776:	f003 fcf3 	bl	8007160 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377c:	b2db      	uxtb	r3, r3
 800377e:	4619      	mov	r1, r3
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f005 fca2 	bl	80090ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	f003 0308 	and.w	r3, r3, #8
 800378c:	2b00      	cmp	r3, #0
 800378e:	d008      	beq.n	80037a2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003792:	015a      	lsls	r2, r3, #5
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	4413      	add	r3, r2
 8003798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800379c:	461a      	mov	r2, r3
 800379e:	2308      	movs	r3, #8
 80037a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	f003 0310 	and.w	r3, r3, #16
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d008      	beq.n	80037be <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80037ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ae:	015a      	lsls	r2, r3, #5
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	4413      	add	r3, r2
 80037b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037b8:	461a      	mov	r2, r3
 80037ba:	2310      	movs	r3, #16
 80037bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d008      	beq.n	80037da <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80037c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ca:	015a      	lsls	r2, r3, #5
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	4413      	add	r3, r2
 80037d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037d4:	461a      	mov	r2, r3
 80037d6:	2340      	movs	r3, #64	; 0x40
 80037d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d008      	beq.n	80037f6 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80037e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e6:	015a      	lsls	r2, r3, #5
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	4413      	add	r3, r2
 80037ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037f0:	461a      	mov	r2, r3
 80037f2:	2302      	movs	r3, #2
 80037f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d003      	beq.n	8003808 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003800:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 fc1b 	bl	800403e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380a:	3301      	adds	r3, #1
 800380c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800380e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003810:	085b      	lsrs	r3, r3, #1
 8003812:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003816:	2b00      	cmp	r3, #0
 8003818:	f47f af49 	bne.w	80036ae <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4618      	mov	r0, r3
 8003822:	f003 fbd8 	bl	8006fd6 <USB_ReadInterrupts>
 8003826:	4603      	mov	r3, r0
 8003828:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800382c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003830:	d122      	bne.n	8003878 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	69fa      	ldr	r2, [r7, #28]
 800383c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003840:	f023 0301 	bic.w	r3, r3, #1
 8003844:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800384c:	2b01      	cmp	r3, #1
 800384e:	d108      	bne.n	8003862 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003858:	2100      	movs	r1, #0
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 fe26 	bl	80044ac <HAL_PCDEx_LPM_Callback>
 8003860:	e002      	b.n	8003868 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f005 fc9e 	bl	80091a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	695a      	ldr	r2, [r3, #20]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003876:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4618      	mov	r0, r3
 800387e:	f003 fbaa 	bl	8006fd6 <USB_ReadInterrupts>
 8003882:	4603      	mov	r3, r0
 8003884:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003888:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800388c:	d112      	bne.n	80038b4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b01      	cmp	r3, #1
 800389c:	d102      	bne.n	80038a4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f005 fc5a 	bl	8009158 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	695a      	ldr	r2, [r3, #20]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80038b2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4618      	mov	r0, r3
 80038ba:	f003 fb8c 	bl	8006fd6 <USB_ReadInterrupts>
 80038be:	4603      	mov	r3, r0
 80038c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038c8:	f040 80c7 	bne.w	8003a5a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	69fa      	ldr	r2, [r7, #28]
 80038d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038da:	f023 0301 	bic.w	r3, r3, #1
 80038de:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2110      	movs	r1, #16
 80038e6:	4618      	mov	r0, r3
 80038e8:	f002 fc26 	bl	8006138 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038ec:	2300      	movs	r3, #0
 80038ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038f0:	e056      	b.n	80039a0 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80038f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f4:	015a      	lsls	r2, r3, #5
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	4413      	add	r3, r2
 80038fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038fe:	461a      	mov	r2, r3
 8003900:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003904:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003908:	015a      	lsls	r2, r3, #5
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	4413      	add	r3, r2
 800390e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003916:	0151      	lsls	r1, r2, #5
 8003918:	69fa      	ldr	r2, [r7, #28]
 800391a:	440a      	add	r2, r1
 800391c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003920:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003924:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003928:	015a      	lsls	r2, r3, #5
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	4413      	add	r3, r2
 800392e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003936:	0151      	lsls	r1, r2, #5
 8003938:	69fa      	ldr	r2, [r7, #28]
 800393a:	440a      	add	r2, r1
 800393c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003940:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003944:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003948:	015a      	lsls	r2, r3, #5
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	4413      	add	r3, r2
 800394e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003952:	461a      	mov	r2, r3
 8003954:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003958:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800395a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800395c:	015a      	lsls	r2, r3, #5
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	4413      	add	r3, r2
 8003962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800396a:	0151      	lsls	r1, r2, #5
 800396c:	69fa      	ldr	r2, [r7, #28]
 800396e:	440a      	add	r2, r1
 8003970:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003974:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003978:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800397a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800397c:	015a      	lsls	r2, r3, #5
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	4413      	add	r3, r2
 8003982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800398a:	0151      	lsls	r1, r2, #5
 800398c:	69fa      	ldr	r2, [r7, #28]
 800398e:	440a      	add	r2, r1
 8003990:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003994:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003998:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800399a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800399c:	3301      	adds	r3, #1
 800399e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d3a3      	bcc.n	80038f2 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	69fa      	ldr	r2, [r7, #28]
 80039b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039b8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80039bc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d016      	beq.n	80039f4 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039d0:	69fa      	ldr	r2, [r7, #28]
 80039d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039d6:	f043 030b 	orr.w	r3, r3, #11
 80039da:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e6:	69fa      	ldr	r2, [r7, #28]
 80039e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039ec:	f043 030b 	orr.w	r3, r3, #11
 80039f0:	6453      	str	r3, [r2, #68]	; 0x44
 80039f2:	e015      	b.n	8003a20 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039fa:	695b      	ldr	r3, [r3, #20]
 80039fc:	69fa      	ldr	r2, [r7, #28]
 80039fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a02:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a06:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003a0a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	69fa      	ldr	r2, [r7, #28]
 8003a16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a1a:	f043 030b 	orr.w	r3, r3, #11
 8003a1e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	69fa      	ldr	r2, [r7, #28]
 8003a2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a2e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003a32:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6818      	ldr	r0, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a44:	461a      	mov	r2, r3
 8003a46:	f003 fb8b 	bl	8007160 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	695a      	ldr	r2, [r3, #20]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003a58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f003 fab9 	bl	8006fd6 <USB_ReadInterrupts>
 8003a64:	4603      	mov	r3, r0
 8003a66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a6e:	d124      	bne.n	8003aba <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f003 fb4f 	bl	8007118 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f002 fbb7 	bl	80061f2 <USB_GetDevSpeed>
 8003a84:	4603      	mov	r3, r0
 8003a86:	461a      	mov	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681c      	ldr	r4, [r3, #0]
 8003a90:	f001 f958 	bl	8004d44 <HAL_RCC_GetHCLKFreq>
 8003a94:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	4620      	mov	r0, r4
 8003aa0:	f002 f8d6 	bl	8005c50 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f005 fb38 	bl	800911a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	695a      	ldr	r2, [r3, #20]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003ab8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f003 fa89 	bl	8006fd6 <USB_ReadInterrupts>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	f003 0308 	and.w	r3, r3, #8
 8003aca:	2b08      	cmp	r3, #8
 8003acc:	d10a      	bne.n	8003ae4 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f005 fb15 	bl	80090fe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	695a      	ldr	r2, [r3, #20]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f002 0208 	and.w	r2, r2, #8
 8003ae2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f003 fa74 	bl	8006fd6 <USB_ReadInterrupts>
 8003aee:	4603      	mov	r3, r0
 8003af0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003af4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003af8:	d10f      	bne.n	8003b1a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003afa:	2300      	movs	r3, #0
 8003afc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	4619      	mov	r1, r3
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f005 fb6d 	bl	80091e4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	695a      	ldr	r2, [r3, #20]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003b18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f003 fa59 	bl	8006fd6 <USB_ReadInterrupts>
 8003b24:	4603      	mov	r3, r0
 8003b26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b2e:	d10f      	bne.n	8003b50 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003b30:	2300      	movs	r3, #0
 8003b32:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	4619      	mov	r1, r3
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f005 fb40 	bl	80091c0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	695a      	ldr	r2, [r3, #20]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003b4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f003 fa3e 	bl	8006fd6 <USB_ReadInterrupts>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003b60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b64:	d10a      	bne.n	8003b7c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f005 fb4e 	bl	8009208 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	695a      	ldr	r2, [r3, #20]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003b7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f003 fa28 	bl	8006fd6 <USB_ReadInterrupts>
 8003b86:	4603      	mov	r3, r0
 8003b88:	f003 0304 	and.w	r3, r3, #4
 8003b8c:	2b04      	cmp	r3, #4
 8003b8e:	d115      	bne.n	8003bbc <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	f003 0304 	and.w	r3, r3, #4
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d002      	beq.n	8003ba8 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f005 fb3e 	bl	8009224 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	6859      	ldr	r1, [r3, #4]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	69ba      	ldr	r2, [r7, #24]
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	605a      	str	r2, [r3, #4]
 8003bb8:	e000      	b.n	8003bbc <HAL_PCD_IRQHandler+0x75e>
      return;
 8003bba:	bf00      	nop
    }
  }
}
 8003bbc:	3734      	adds	r7, #52	; 0x34
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd90      	pop	{r4, r7, pc}

08003bc2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b082      	sub	sp, #8
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
 8003bca:	460b      	mov	r3, r1
 8003bcc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d101      	bne.n	8003bdc <HAL_PCD_SetAddress+0x1a>
 8003bd8:	2302      	movs	r3, #2
 8003bda:	e013      	b.n	8003c04 <HAL_PCD_SetAddress+0x42>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	78fa      	ldrb	r2, [r7, #3]
 8003be8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	78fa      	ldrb	r2, [r7, #3]
 8003bf2:	4611      	mov	r1, r2
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f003 f986 	bl	8006f06 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3708      	adds	r7, #8
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	4608      	mov	r0, r1
 8003c16:	4611      	mov	r1, r2
 8003c18:	461a      	mov	r2, r3
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	70fb      	strb	r3, [r7, #3]
 8003c1e:	460b      	mov	r3, r1
 8003c20:	803b      	strh	r3, [r7, #0]
 8003c22:	4613      	mov	r3, r2
 8003c24:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003c26:	2300      	movs	r3, #0
 8003c28:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	da0f      	bge.n	8003c52 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c32:	78fb      	ldrb	r3, [r7, #3]
 8003c34:	f003 020f 	and.w	r2, r3, #15
 8003c38:	4613      	mov	r3, r2
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	1a9b      	subs	r3, r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	3338      	adds	r3, #56	; 0x38
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	4413      	add	r3, r2
 8003c46:	3304      	adds	r3, #4
 8003c48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	705a      	strb	r2, [r3, #1]
 8003c50:	e00f      	b.n	8003c72 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c52:	78fb      	ldrb	r3, [r7, #3]
 8003c54:	f003 020f 	and.w	r2, r3, #15
 8003c58:	4613      	mov	r3, r2
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	1a9b      	subs	r3, r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	4413      	add	r3, r2
 8003c68:	3304      	adds	r3, #4
 8003c6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003c72:	78fb      	ldrb	r3, [r7, #3]
 8003c74:	f003 030f 	and.w	r3, r3, #15
 8003c78:	b2da      	uxtb	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003c7e:	883a      	ldrh	r2, [r7, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	78ba      	ldrb	r2, [r7, #2]
 8003c88:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	785b      	ldrb	r3, [r3, #1]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d004      	beq.n	8003c9c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003c9c:	78bb      	ldrb	r3, [r7, #2]
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d102      	bne.n	8003ca8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d101      	bne.n	8003cb6 <HAL_PCD_EP_Open+0xaa>
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	e00e      	b.n	8003cd4 <HAL_PCD_EP_Open+0xc8>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68f9      	ldr	r1, [r7, #12]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f002 fab9 	bl	800623c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003cd2:	7afb      	ldrb	r3, [r7, #11]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ce8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	da0f      	bge.n	8003d10 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cf0:	78fb      	ldrb	r3, [r7, #3]
 8003cf2:	f003 020f 	and.w	r2, r3, #15
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	00db      	lsls	r3, r3, #3
 8003cfa:	1a9b      	subs	r3, r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	3338      	adds	r3, #56	; 0x38
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	4413      	add	r3, r2
 8003d04:	3304      	adds	r3, #4
 8003d06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	705a      	strb	r2, [r3, #1]
 8003d0e:	e00f      	b.n	8003d30 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d10:	78fb      	ldrb	r3, [r7, #3]
 8003d12:	f003 020f 	and.w	r2, r3, #15
 8003d16:	4613      	mov	r3, r2
 8003d18:	00db      	lsls	r3, r3, #3
 8003d1a:	1a9b      	subs	r3, r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	4413      	add	r3, r2
 8003d26:	3304      	adds	r3, #4
 8003d28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003d30:	78fb      	ldrb	r3, [r7, #3]
 8003d32:	f003 030f 	and.w	r3, r3, #15
 8003d36:	b2da      	uxtb	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d101      	bne.n	8003d4a <HAL_PCD_EP_Close+0x6e>
 8003d46:	2302      	movs	r3, #2
 8003d48:	e00e      	b.n	8003d68 <HAL_PCD_EP_Close+0x8c>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68f9      	ldr	r1, [r7, #12]
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f002 faf7 	bl	800634c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3710      	adds	r7, #16
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	607a      	str	r2, [r7, #4]
 8003d7a:	603b      	str	r3, [r7, #0]
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d80:	7afb      	ldrb	r3, [r7, #11]
 8003d82:	f003 020f 	and.w	r2, r3, #15
 8003d86:	4613      	mov	r3, r2
 8003d88:	00db      	lsls	r3, r3, #3
 8003d8a:	1a9b      	subs	r3, r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	4413      	add	r3, r2
 8003d96:	3304      	adds	r3, #4
 8003d98:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	2200      	movs	r2, #0
 8003daa:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	2200      	movs	r2, #0
 8003db0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003db2:	7afb      	ldrb	r3, [r7, #11]
 8003db4:	f003 030f 	and.w	r3, r3, #15
 8003db8:	b2da      	uxtb	r2, r3
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d102      	bne.n	8003dcc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003dcc:	7afb      	ldrb	r3, [r7, #11]
 8003dce:	f003 030f 	and.w	r3, r3, #15
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d109      	bne.n	8003dea <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6818      	ldr	r0, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	461a      	mov	r2, r3
 8003de2:	6979      	ldr	r1, [r7, #20]
 8003de4:	f002 fdd2 	bl	800698c <USB_EP0StartXfer>
 8003de8:	e008      	b.n	8003dfc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6818      	ldr	r0, [r3, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	461a      	mov	r2, r3
 8003df6:	6979      	ldr	r1, [r7, #20]
 8003df8:	f002 fb84 	bl	8006504 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3718      	adds	r7, #24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
 8003e0e:	460b      	mov	r3, r1
 8003e10:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003e12:	78fb      	ldrb	r3, [r7, #3]
 8003e14:	f003 020f 	and.w	r2, r3, #15
 8003e18:	6879      	ldr	r1, [r7, #4]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	00db      	lsls	r3, r3, #3
 8003e1e:	1a9b      	subs	r3, r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	440b      	add	r3, r1
 8003e24:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003e28:	681b      	ldr	r3, [r3, #0]
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	370c      	adds	r7, #12
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr

08003e36 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b086      	sub	sp, #24
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	60f8      	str	r0, [r7, #12]
 8003e3e:	607a      	str	r2, [r7, #4]
 8003e40:	603b      	str	r3, [r7, #0]
 8003e42:	460b      	mov	r3, r1
 8003e44:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e46:	7afb      	ldrb	r3, [r7, #11]
 8003e48:	f003 020f 	and.w	r2, r3, #15
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	1a9b      	subs	r3, r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	3338      	adds	r3, #56	; 0x38
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	4413      	add	r3, r2
 8003e5a:	3304      	adds	r3, #4
 8003e5c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	683a      	ldr	r2, [r7, #0]
 8003e68:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	2201      	movs	r2, #1
 8003e74:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e76:	7afb      	ldrb	r3, [r7, #11]
 8003e78:	f003 030f 	and.w	r3, r3, #15
 8003e7c:	b2da      	uxtb	r2, r3
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d102      	bne.n	8003e90 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e90:	7afb      	ldrb	r3, [r7, #11]
 8003e92:	f003 030f 	and.w	r3, r3, #15
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d109      	bne.n	8003eae <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6818      	ldr	r0, [r3, #0]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	6979      	ldr	r1, [r7, #20]
 8003ea8:	f002 fd70 	bl	800698c <USB_EP0StartXfer>
 8003eac:	e008      	b.n	8003ec0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6818      	ldr	r0, [r3, #0]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	461a      	mov	r2, r3
 8003eba:	6979      	ldr	r1, [r7, #20]
 8003ebc:	f002 fb22 	bl	8006504 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3718      	adds	r7, #24
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b084      	sub	sp, #16
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003ed6:	78fb      	ldrb	r3, [r7, #3]
 8003ed8:	f003 020f 	and.w	r2, r3, #15
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d901      	bls.n	8003ee8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e050      	b.n	8003f8a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ee8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	da0f      	bge.n	8003f10 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ef0:	78fb      	ldrb	r3, [r7, #3]
 8003ef2:	f003 020f 	and.w	r2, r3, #15
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	00db      	lsls	r3, r3, #3
 8003efa:	1a9b      	subs	r3, r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	3338      	adds	r3, #56	; 0x38
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	4413      	add	r3, r2
 8003f04:	3304      	adds	r3, #4
 8003f06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	705a      	strb	r2, [r3, #1]
 8003f0e:	e00d      	b.n	8003f2c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003f10:	78fa      	ldrb	r2, [r7, #3]
 8003f12:	4613      	mov	r3, r2
 8003f14:	00db      	lsls	r3, r3, #3
 8003f16:	1a9b      	subs	r3, r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	4413      	add	r3, r2
 8003f22:	3304      	adds	r3, #4
 8003f24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f32:	78fb      	ldrb	r3, [r7, #3]
 8003f34:	f003 030f 	and.w	r3, r3, #15
 8003f38:	b2da      	uxtb	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d101      	bne.n	8003f4c <HAL_PCD_EP_SetStall+0x82>
 8003f48:	2302      	movs	r3, #2
 8003f4a:	e01e      	b.n	8003f8a <HAL_PCD_EP_SetStall+0xc0>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68f9      	ldr	r1, [r7, #12]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f002 feff 	bl	8006d5e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f60:	78fb      	ldrb	r3, [r7, #3]
 8003f62:	f003 030f 	and.w	r3, r3, #15
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10a      	bne.n	8003f80 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6818      	ldr	r0, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	b2d9      	uxtb	r1, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	f003 f8f0 	bl	8007160 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b084      	sub	sp, #16
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003f9e:	78fb      	ldrb	r3, [r7, #3]
 8003fa0:	f003 020f 	and.w	r2, r3, #15
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d901      	bls.n	8003fb0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e042      	b.n	8004036 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003fb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	da0f      	bge.n	8003fd8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fb8:	78fb      	ldrb	r3, [r7, #3]
 8003fba:	f003 020f 	and.w	r2, r3, #15
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	00db      	lsls	r3, r3, #3
 8003fc2:	1a9b      	subs	r3, r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	3338      	adds	r3, #56	; 0x38
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	4413      	add	r3, r2
 8003fcc:	3304      	adds	r3, #4
 8003fce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	705a      	strb	r2, [r3, #1]
 8003fd6:	e00f      	b.n	8003ff8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fd8:	78fb      	ldrb	r3, [r7, #3]
 8003fda:	f003 020f 	and.w	r2, r3, #15
 8003fde:	4613      	mov	r3, r2
 8003fe0:	00db      	lsls	r3, r3, #3
 8003fe2:	1a9b      	subs	r3, r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	4413      	add	r3, r2
 8003fee:	3304      	adds	r3, #4
 8003ff0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ffe:	78fb      	ldrb	r3, [r7, #3]
 8004000:	f003 030f 	and.w	r3, r3, #15
 8004004:	b2da      	uxtb	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004010:	2b01      	cmp	r3, #1
 8004012:	d101      	bne.n	8004018 <HAL_PCD_EP_ClrStall+0x86>
 8004014:	2302      	movs	r3, #2
 8004016:	e00e      	b.n	8004036 <HAL_PCD_EP_ClrStall+0xa4>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68f9      	ldr	r1, [r7, #12]
 8004026:	4618      	mov	r0, r3
 8004028:	f002 ff07 	bl	8006e3a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800403e:	b580      	push	{r7, lr}
 8004040:	b08a      	sub	sp, #40	; 0x28
 8004042:	af02      	add	r7, sp, #8
 8004044:	6078      	str	r0, [r7, #4]
 8004046:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	4613      	mov	r3, r2
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	1a9b      	subs	r3, r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	3338      	adds	r3, #56	; 0x38
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	4413      	add	r3, r2
 8004062:	3304      	adds	r3, #4
 8004064:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	699a      	ldr	r2, [r3, #24]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	429a      	cmp	r2, r3
 8004070:	d901      	bls.n	8004076 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e06c      	b.n	8004150 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	695a      	ldr	r2, [r3, #20]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	69fa      	ldr	r2, [r7, #28]
 8004088:	429a      	cmp	r2, r3
 800408a:	d902      	bls.n	8004092 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	3303      	adds	r3, #3
 8004096:	089b      	lsrs	r3, r3, #2
 8004098:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800409a:	e02b      	b.n	80040f4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	695a      	ldr	r2, [r3, #20]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	69fa      	ldr	r2, [r7, #28]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d902      	bls.n	80040b8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	3303      	adds	r3, #3
 80040bc:	089b      	lsrs	r3, r3, #2
 80040be:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	68d9      	ldr	r1, [r3, #12]
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	b2da      	uxtb	r2, r3
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	9300      	str	r3, [sp, #0]
 80040d4:	4603      	mov	r3, r0
 80040d6:	6978      	ldr	r0, [r7, #20]
 80040d8:	f002 fdab 	bl	8006c32 <USB_WritePacket>

    ep->xfer_buff  += len;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	68da      	ldr	r2, [r3, #12]
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	441a      	add	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	699a      	ldr	r2, [r3, #24]
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	441a      	add	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	015a      	lsls	r2, r3, #5
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	4413      	add	r3, r2
 80040fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	b29b      	uxth	r3, r3
 8004104:	69ba      	ldr	r2, [r7, #24]
 8004106:	429a      	cmp	r2, r3
 8004108:	d809      	bhi.n	800411e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	699a      	ldr	r2, [r3, #24]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004112:	429a      	cmp	r2, r3
 8004114:	d203      	bcs.n	800411e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1be      	bne.n	800409c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	695a      	ldr	r2, [r3, #20]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	429a      	cmp	r2, r3
 8004128:	d811      	bhi.n	800414e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	f003 030f 	and.w	r3, r3, #15
 8004130:	2201      	movs	r2, #1
 8004132:	fa02 f303 	lsl.w	r3, r2, r3
 8004136:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800413e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	43db      	mvns	r3, r3
 8004144:	6939      	ldr	r1, [r7, #16]
 8004146:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800414a:	4013      	ands	r3, r2
 800414c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3720      	adds	r7, #32
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	333c      	adds	r3, #60	; 0x3c
 8004170:	3304      	adds	r3, #4
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	015a      	lsls	r2, r3, #5
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	4413      	add	r3, r2
 800417e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	2b01      	cmp	r3, #1
 800418c:	f040 80a0 	bne.w	80042d0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	f003 0308 	and.w	r3, r3, #8
 8004196:	2b00      	cmp	r3, #0
 8004198:	d015      	beq.n	80041c6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	4a72      	ldr	r2, [pc, #456]	; (8004368 <PCD_EP_OutXfrComplete_int+0x210>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	f240 80dd 	bls.w	800435e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f000 80d7 	beq.w	800435e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	015a      	lsls	r2, r3, #5
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	4413      	add	r3, r2
 80041b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041bc:	461a      	mov	r2, r3
 80041be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041c2:	6093      	str	r3, [r2, #8]
 80041c4:	e0cb      	b.n	800435e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	f003 0320 	and.w	r3, r3, #32
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d009      	beq.n	80041e4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	015a      	lsls	r2, r3, #5
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	4413      	add	r3, r2
 80041d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041dc:	461a      	mov	r2, r3
 80041de:	2320      	movs	r3, #32
 80041e0:	6093      	str	r3, [r2, #8]
 80041e2:	e0bc      	b.n	800435e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f040 80b7 	bne.w	800435e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	4a5d      	ldr	r2, [pc, #372]	; (8004368 <PCD_EP_OutXfrComplete_int+0x210>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d90f      	bls.n	8004218 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00a      	beq.n	8004218 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	015a      	lsls	r2, r3, #5
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	4413      	add	r3, r2
 800420a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800420e:	461a      	mov	r2, r3
 8004210:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004214:	6093      	str	r3, [r2, #8]
 8004216:	e0a2      	b.n	800435e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004218:	6879      	ldr	r1, [r7, #4]
 800421a:	683a      	ldr	r2, [r7, #0]
 800421c:	4613      	mov	r3, r2
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	1a9b      	subs	r3, r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	440b      	add	r3, r1
 8004226:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800422a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	0159      	lsls	r1, r3, #5
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	440b      	add	r3, r1
 8004234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800423e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	683a      	ldr	r2, [r7, #0]
 8004244:	4613      	mov	r3, r2
 8004246:	00db      	lsls	r3, r3, #3
 8004248:	1a9b      	subs	r3, r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	4403      	add	r3, r0
 800424e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004252:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004254:	6879      	ldr	r1, [r7, #4]
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	4613      	mov	r3, r2
 800425a:	00db      	lsls	r3, r3, #3
 800425c:	1a9b      	subs	r3, r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	440b      	add	r3, r1
 8004262:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004266:	6819      	ldr	r1, [r3, #0]
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	683a      	ldr	r2, [r7, #0]
 800426c:	4613      	mov	r3, r2
 800426e:	00db      	lsls	r3, r3, #3
 8004270:	1a9b      	subs	r3, r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	4403      	add	r3, r0
 8004276:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4419      	add	r1, r3
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	4613      	mov	r3, r2
 8004284:	00db      	lsls	r3, r3, #3
 8004286:	1a9b      	subs	r3, r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	4403      	add	r3, r0
 800428c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004290:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d114      	bne.n	80042c2 <PCD_EP_OutXfrComplete_int+0x16a>
 8004298:	6879      	ldr	r1, [r7, #4]
 800429a:	683a      	ldr	r2, [r7, #0]
 800429c:	4613      	mov	r3, r2
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	1a9b      	subs	r3, r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	440b      	add	r3, r1
 80042a6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d108      	bne.n	80042c2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6818      	ldr	r0, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80042ba:	461a      	mov	r2, r3
 80042bc:	2101      	movs	r1, #1
 80042be:	f002 ff4f 	bl	8007160 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	4619      	mov	r1, r3
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f004 fee3 	bl	8009094 <HAL_PCD_DataOutStageCallback>
 80042ce:	e046      	b.n	800435e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	4a26      	ldr	r2, [pc, #152]	; (800436c <PCD_EP_OutXfrComplete_int+0x214>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d124      	bne.n	8004322 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00a      	beq.n	80042f8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	015a      	lsls	r2, r3, #5
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	4413      	add	r3, r2
 80042ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ee:	461a      	mov	r2, r3
 80042f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042f4:	6093      	str	r3, [r2, #8]
 80042f6:	e032      	b.n	800435e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	f003 0320 	and.w	r3, r3, #32
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d008      	beq.n	8004314 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	015a      	lsls	r2, r3, #5
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	4413      	add	r3, r2
 800430a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800430e:	461a      	mov	r2, r3
 8004310:	2320      	movs	r3, #32
 8004312:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	b2db      	uxtb	r3, r3
 8004318:	4619      	mov	r1, r3
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f004 feba 	bl	8009094 <HAL_PCD_DataOutStageCallback>
 8004320:	e01d      	b.n	800435e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d114      	bne.n	8004352 <PCD_EP_OutXfrComplete_int+0x1fa>
 8004328:	6879      	ldr	r1, [r7, #4]
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	4613      	mov	r3, r2
 800432e:	00db      	lsls	r3, r3, #3
 8004330:	1a9b      	subs	r3, r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	440b      	add	r3, r1
 8004336:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d108      	bne.n	8004352 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6818      	ldr	r0, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800434a:	461a      	mov	r2, r3
 800434c:	2100      	movs	r1, #0
 800434e:	f002 ff07 	bl	8007160 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	b2db      	uxtb	r3, r3
 8004356:	4619      	mov	r1, r3
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f004 fe9b 	bl	8009094 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3718      	adds	r7, #24
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	4f54300a 	.word	0x4f54300a
 800436c:	4f54310a 	.word	0x4f54310a

08004370 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	333c      	adds	r3, #60	; 0x3c
 8004388:	3304      	adds	r3, #4
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	015a      	lsls	r2, r3, #5
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	4413      	add	r3, r2
 8004396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	4a15      	ldr	r2, [pc, #84]	; (80043f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d90e      	bls.n	80043c4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d009      	beq.n	80043c4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	015a      	lsls	r2, r3, #5
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	4413      	add	r3, r2
 80043b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043bc:	461a      	mov	r2, r3
 80043be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043c2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f004 fe53 	bl	8009070 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	4a0a      	ldr	r2, [pc, #40]	; (80043f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d90c      	bls.n	80043ec <PCD_EP_OutSetupPacket_int+0x7c>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d108      	bne.n	80043ec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6818      	ldr	r0, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80043e4:	461a      	mov	r2, r3
 80043e6:	2101      	movs	r1, #1
 80043e8:	f002 feba 	bl	8007160 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3718      	adds	r7, #24
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	4f54300a 	.word	0x4f54300a

080043fc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	460b      	mov	r3, r1
 8004406:	70fb      	strb	r3, [r7, #3]
 8004408:	4613      	mov	r3, r2
 800440a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004412:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004414:	78fb      	ldrb	r3, [r7, #3]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d107      	bne.n	800442a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800441a:	883b      	ldrh	r3, [r7, #0]
 800441c:	0419      	lsls	r1, r3, #16
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68ba      	ldr	r2, [r7, #8]
 8004424:	430a      	orrs	r2, r1
 8004426:	629a      	str	r2, [r3, #40]	; 0x28
 8004428:	e028      	b.n	800447c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004430:	0c1b      	lsrs	r3, r3, #16
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	4413      	add	r3, r2
 8004436:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004438:	2300      	movs	r3, #0
 800443a:	73fb      	strb	r3, [r7, #15]
 800443c:	e00d      	b.n	800445a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	7bfb      	ldrb	r3, [r7, #15]
 8004444:	3340      	adds	r3, #64	; 0x40
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	4413      	add	r3, r2
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	0c1b      	lsrs	r3, r3, #16
 800444e:	68ba      	ldr	r2, [r7, #8]
 8004450:	4413      	add	r3, r2
 8004452:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004454:	7bfb      	ldrb	r3, [r7, #15]
 8004456:	3301      	adds	r3, #1
 8004458:	73fb      	strb	r3, [r7, #15]
 800445a:	7bfa      	ldrb	r2, [r7, #15]
 800445c:	78fb      	ldrb	r3, [r7, #3]
 800445e:	3b01      	subs	r3, #1
 8004460:	429a      	cmp	r2, r3
 8004462:	d3ec      	bcc.n	800443e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004464:	883b      	ldrh	r3, [r7, #0]
 8004466:	0418      	lsls	r0, r3, #16
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6819      	ldr	r1, [r3, #0]
 800446c:	78fb      	ldrb	r3, [r7, #3]
 800446e:	3b01      	subs	r3, #1
 8004470:	68ba      	ldr	r2, [r7, #8]
 8004472:	4302      	orrs	r2, r0
 8004474:	3340      	adds	r3, #64	; 0x40
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	440b      	add	r3, r1
 800447a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3714      	adds	r7, #20
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr

0800448a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800448a:	b480      	push	{r7}
 800448c:	b083      	sub	sp, #12
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
 8004492:	460b      	mov	r3, r1
 8004494:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	887a      	ldrh	r2, [r7, #2]
 800449c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	460b      	mov	r3, r1
 80044b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b086      	sub	sp, #24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e264      	b.n	80049a0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d075      	beq.n	80045ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044e2:	4ba3      	ldr	r3, [pc, #652]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f003 030c 	and.w	r3, r3, #12
 80044ea:	2b04      	cmp	r3, #4
 80044ec:	d00c      	beq.n	8004508 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044ee:	4ba0      	ldr	r3, [pc, #640]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044f6:	2b08      	cmp	r3, #8
 80044f8:	d112      	bne.n	8004520 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044fa:	4b9d      	ldr	r3, [pc, #628]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004502:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004506:	d10b      	bne.n	8004520 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004508:	4b99      	ldr	r3, [pc, #612]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d05b      	beq.n	80045cc <HAL_RCC_OscConfig+0x108>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d157      	bne.n	80045cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e23f      	b.n	80049a0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004528:	d106      	bne.n	8004538 <HAL_RCC_OscConfig+0x74>
 800452a:	4b91      	ldr	r3, [pc, #580]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a90      	ldr	r2, [pc, #576]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 8004530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004534:	6013      	str	r3, [r2, #0]
 8004536:	e01d      	b.n	8004574 <HAL_RCC_OscConfig+0xb0>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004540:	d10c      	bne.n	800455c <HAL_RCC_OscConfig+0x98>
 8004542:	4b8b      	ldr	r3, [pc, #556]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a8a      	ldr	r2, [pc, #552]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 8004548:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800454c:	6013      	str	r3, [r2, #0]
 800454e:	4b88      	ldr	r3, [pc, #544]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a87      	ldr	r2, [pc, #540]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 8004554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004558:	6013      	str	r3, [r2, #0]
 800455a:	e00b      	b.n	8004574 <HAL_RCC_OscConfig+0xb0>
 800455c:	4b84      	ldr	r3, [pc, #528]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a83      	ldr	r2, [pc, #524]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 8004562:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004566:	6013      	str	r3, [r2, #0]
 8004568:	4b81      	ldr	r3, [pc, #516]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a80      	ldr	r2, [pc, #512]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 800456e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004572:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d013      	beq.n	80045a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800457c:	f7fd faca 	bl	8001b14 <HAL_GetTick>
 8004580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004582:	e008      	b.n	8004596 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004584:	f7fd fac6 	bl	8001b14 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b64      	cmp	r3, #100	; 0x64
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e204      	b.n	80049a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004596:	4b76      	ldr	r3, [pc, #472]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d0f0      	beq.n	8004584 <HAL_RCC_OscConfig+0xc0>
 80045a2:	e014      	b.n	80045ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a4:	f7fd fab6 	bl	8001b14 <HAL_GetTick>
 80045a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045aa:	e008      	b.n	80045be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045ac:	f7fd fab2 	bl	8001b14 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b64      	cmp	r3, #100	; 0x64
 80045b8:	d901      	bls.n	80045be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e1f0      	b.n	80049a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045be:	4b6c      	ldr	r3, [pc, #432]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1f0      	bne.n	80045ac <HAL_RCC_OscConfig+0xe8>
 80045ca:	e000      	b.n	80045ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d063      	beq.n	80046a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045da:	4b65      	ldr	r3, [pc, #404]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f003 030c 	and.w	r3, r3, #12
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00b      	beq.n	80045fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045e6:	4b62      	ldr	r3, [pc, #392]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045ee:	2b08      	cmp	r3, #8
 80045f0:	d11c      	bne.n	800462c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045f2:	4b5f      	ldr	r3, [pc, #380]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d116      	bne.n	800462c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045fe:	4b5c      	ldr	r3, [pc, #368]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d005      	beq.n	8004616 <HAL_RCC_OscConfig+0x152>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d001      	beq.n	8004616 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e1c4      	b.n	80049a0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004616:	4b56      	ldr	r3, [pc, #344]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	4952      	ldr	r1, [pc, #328]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 8004626:	4313      	orrs	r3, r2
 8004628:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800462a:	e03a      	b.n	80046a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d020      	beq.n	8004676 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004634:	4b4f      	ldr	r3, [pc, #316]	; (8004774 <HAL_RCC_OscConfig+0x2b0>)
 8004636:	2201      	movs	r2, #1
 8004638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800463a:	f7fd fa6b 	bl	8001b14 <HAL_GetTick>
 800463e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004640:	e008      	b.n	8004654 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004642:	f7fd fa67 	bl	8001b14 <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	2b02      	cmp	r3, #2
 800464e:	d901      	bls.n	8004654 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e1a5      	b.n	80049a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004654:	4b46      	ldr	r3, [pc, #280]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	2b00      	cmp	r3, #0
 800465e:	d0f0      	beq.n	8004642 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004660:	4b43      	ldr	r3, [pc, #268]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	00db      	lsls	r3, r3, #3
 800466e:	4940      	ldr	r1, [pc, #256]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 8004670:	4313      	orrs	r3, r2
 8004672:	600b      	str	r3, [r1, #0]
 8004674:	e015      	b.n	80046a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004676:	4b3f      	ldr	r3, [pc, #252]	; (8004774 <HAL_RCC_OscConfig+0x2b0>)
 8004678:	2200      	movs	r2, #0
 800467a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800467c:	f7fd fa4a 	bl	8001b14 <HAL_GetTick>
 8004680:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004682:	e008      	b.n	8004696 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004684:	f7fd fa46 	bl	8001b14 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b02      	cmp	r3, #2
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e184      	b.n	80049a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004696:	4b36      	ldr	r3, [pc, #216]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1f0      	bne.n	8004684 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0308 	and.w	r3, r3, #8
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d030      	beq.n	8004710 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d016      	beq.n	80046e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046b6:	4b30      	ldr	r3, [pc, #192]	; (8004778 <HAL_RCC_OscConfig+0x2b4>)
 80046b8:	2201      	movs	r2, #1
 80046ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046bc:	f7fd fa2a 	bl	8001b14 <HAL_GetTick>
 80046c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046c2:	e008      	b.n	80046d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046c4:	f7fd fa26 	bl	8001b14 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e164      	b.n	80049a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046d6:	4b26      	ldr	r3, [pc, #152]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 80046d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d0f0      	beq.n	80046c4 <HAL_RCC_OscConfig+0x200>
 80046e2:	e015      	b.n	8004710 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046e4:	4b24      	ldr	r3, [pc, #144]	; (8004778 <HAL_RCC_OscConfig+0x2b4>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046ea:	f7fd fa13 	bl	8001b14 <HAL_GetTick>
 80046ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046f0:	e008      	b.n	8004704 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046f2:	f7fd fa0f 	bl	8001b14 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d901      	bls.n	8004704 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e14d      	b.n	80049a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004704:	4b1a      	ldr	r3, [pc, #104]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 8004706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1f0      	bne.n	80046f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0304 	and.w	r3, r3, #4
 8004718:	2b00      	cmp	r3, #0
 800471a:	f000 80a0 	beq.w	800485e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800471e:	2300      	movs	r3, #0
 8004720:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004722:	4b13      	ldr	r3, [pc, #76]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 8004724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10f      	bne.n	800474e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800472e:	2300      	movs	r3, #0
 8004730:	60bb      	str	r3, [r7, #8]
 8004732:	4b0f      	ldr	r3, [pc, #60]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 8004734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004736:	4a0e      	ldr	r2, [pc, #56]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 8004738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800473c:	6413      	str	r3, [r2, #64]	; 0x40
 800473e:	4b0c      	ldr	r3, [pc, #48]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 8004740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004746:	60bb      	str	r3, [r7, #8]
 8004748:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800474a:	2301      	movs	r3, #1
 800474c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800474e:	4b0b      	ldr	r3, [pc, #44]	; (800477c <HAL_RCC_OscConfig+0x2b8>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004756:	2b00      	cmp	r3, #0
 8004758:	d121      	bne.n	800479e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800475a:	4b08      	ldr	r3, [pc, #32]	; (800477c <HAL_RCC_OscConfig+0x2b8>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a07      	ldr	r2, [pc, #28]	; (800477c <HAL_RCC_OscConfig+0x2b8>)
 8004760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004764:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004766:	f7fd f9d5 	bl	8001b14 <HAL_GetTick>
 800476a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800476c:	e011      	b.n	8004792 <HAL_RCC_OscConfig+0x2ce>
 800476e:	bf00      	nop
 8004770:	40023800 	.word	0x40023800
 8004774:	42470000 	.word	0x42470000
 8004778:	42470e80 	.word	0x42470e80
 800477c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004780:	f7fd f9c8 	bl	8001b14 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b02      	cmp	r3, #2
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e106      	b.n	80049a0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004792:	4b85      	ldr	r3, [pc, #532]	; (80049a8 <HAL_RCC_OscConfig+0x4e4>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800479a:	2b00      	cmp	r3, #0
 800479c:	d0f0      	beq.n	8004780 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d106      	bne.n	80047b4 <HAL_RCC_OscConfig+0x2f0>
 80047a6:	4b81      	ldr	r3, [pc, #516]	; (80049ac <HAL_RCC_OscConfig+0x4e8>)
 80047a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047aa:	4a80      	ldr	r2, [pc, #512]	; (80049ac <HAL_RCC_OscConfig+0x4e8>)
 80047ac:	f043 0301 	orr.w	r3, r3, #1
 80047b0:	6713      	str	r3, [r2, #112]	; 0x70
 80047b2:	e01c      	b.n	80047ee <HAL_RCC_OscConfig+0x32a>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	2b05      	cmp	r3, #5
 80047ba:	d10c      	bne.n	80047d6 <HAL_RCC_OscConfig+0x312>
 80047bc:	4b7b      	ldr	r3, [pc, #492]	; (80049ac <HAL_RCC_OscConfig+0x4e8>)
 80047be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c0:	4a7a      	ldr	r2, [pc, #488]	; (80049ac <HAL_RCC_OscConfig+0x4e8>)
 80047c2:	f043 0304 	orr.w	r3, r3, #4
 80047c6:	6713      	str	r3, [r2, #112]	; 0x70
 80047c8:	4b78      	ldr	r3, [pc, #480]	; (80049ac <HAL_RCC_OscConfig+0x4e8>)
 80047ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047cc:	4a77      	ldr	r2, [pc, #476]	; (80049ac <HAL_RCC_OscConfig+0x4e8>)
 80047ce:	f043 0301 	orr.w	r3, r3, #1
 80047d2:	6713      	str	r3, [r2, #112]	; 0x70
 80047d4:	e00b      	b.n	80047ee <HAL_RCC_OscConfig+0x32a>
 80047d6:	4b75      	ldr	r3, [pc, #468]	; (80049ac <HAL_RCC_OscConfig+0x4e8>)
 80047d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047da:	4a74      	ldr	r2, [pc, #464]	; (80049ac <HAL_RCC_OscConfig+0x4e8>)
 80047dc:	f023 0301 	bic.w	r3, r3, #1
 80047e0:	6713      	str	r3, [r2, #112]	; 0x70
 80047e2:	4b72      	ldr	r3, [pc, #456]	; (80049ac <HAL_RCC_OscConfig+0x4e8>)
 80047e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e6:	4a71      	ldr	r2, [pc, #452]	; (80049ac <HAL_RCC_OscConfig+0x4e8>)
 80047e8:	f023 0304 	bic.w	r3, r3, #4
 80047ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d015      	beq.n	8004822 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f6:	f7fd f98d 	bl	8001b14 <HAL_GetTick>
 80047fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047fc:	e00a      	b.n	8004814 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047fe:	f7fd f989 	bl	8001b14 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	f241 3288 	movw	r2, #5000	; 0x1388
 800480c:	4293      	cmp	r3, r2
 800480e:	d901      	bls.n	8004814 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e0c5      	b.n	80049a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004814:	4b65      	ldr	r3, [pc, #404]	; (80049ac <HAL_RCC_OscConfig+0x4e8>)
 8004816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004818:	f003 0302 	and.w	r3, r3, #2
 800481c:	2b00      	cmp	r3, #0
 800481e:	d0ee      	beq.n	80047fe <HAL_RCC_OscConfig+0x33a>
 8004820:	e014      	b.n	800484c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004822:	f7fd f977 	bl	8001b14 <HAL_GetTick>
 8004826:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004828:	e00a      	b.n	8004840 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800482a:	f7fd f973 	bl	8001b14 <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	f241 3288 	movw	r2, #5000	; 0x1388
 8004838:	4293      	cmp	r3, r2
 800483a:	d901      	bls.n	8004840 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e0af      	b.n	80049a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004840:	4b5a      	ldr	r3, [pc, #360]	; (80049ac <HAL_RCC_OscConfig+0x4e8>)
 8004842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	2b00      	cmp	r3, #0
 800484a:	d1ee      	bne.n	800482a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800484c:	7dfb      	ldrb	r3, [r7, #23]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d105      	bne.n	800485e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004852:	4b56      	ldr	r3, [pc, #344]	; (80049ac <HAL_RCC_OscConfig+0x4e8>)
 8004854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004856:	4a55      	ldr	r2, [pc, #340]	; (80049ac <HAL_RCC_OscConfig+0x4e8>)
 8004858:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800485c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	2b00      	cmp	r3, #0
 8004864:	f000 809b 	beq.w	800499e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004868:	4b50      	ldr	r3, [pc, #320]	; (80049ac <HAL_RCC_OscConfig+0x4e8>)
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f003 030c 	and.w	r3, r3, #12
 8004870:	2b08      	cmp	r3, #8
 8004872:	d05c      	beq.n	800492e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	2b02      	cmp	r3, #2
 800487a:	d141      	bne.n	8004900 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800487c:	4b4c      	ldr	r3, [pc, #304]	; (80049b0 <HAL_RCC_OscConfig+0x4ec>)
 800487e:	2200      	movs	r2, #0
 8004880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004882:	f7fd f947 	bl	8001b14 <HAL_GetTick>
 8004886:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004888:	e008      	b.n	800489c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800488a:	f7fd f943 	bl	8001b14 <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	2b02      	cmp	r3, #2
 8004896:	d901      	bls.n	800489c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e081      	b.n	80049a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800489c:	4b43      	ldr	r3, [pc, #268]	; (80049ac <HAL_RCC_OscConfig+0x4e8>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d1f0      	bne.n	800488a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	69da      	ldr	r2, [r3, #28]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a1b      	ldr	r3, [r3, #32]
 80048b0:	431a      	orrs	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b6:	019b      	lsls	r3, r3, #6
 80048b8:	431a      	orrs	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048be:	085b      	lsrs	r3, r3, #1
 80048c0:	3b01      	subs	r3, #1
 80048c2:	041b      	lsls	r3, r3, #16
 80048c4:	431a      	orrs	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ca:	061b      	lsls	r3, r3, #24
 80048cc:	4937      	ldr	r1, [pc, #220]	; (80049ac <HAL_RCC_OscConfig+0x4e8>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048d2:	4b37      	ldr	r3, [pc, #220]	; (80049b0 <HAL_RCC_OscConfig+0x4ec>)
 80048d4:	2201      	movs	r2, #1
 80048d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d8:	f7fd f91c 	bl	8001b14 <HAL_GetTick>
 80048dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048de:	e008      	b.n	80048f2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048e0:	f7fd f918 	bl	8001b14 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d901      	bls.n	80048f2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e056      	b.n	80049a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048f2:	4b2e      	ldr	r3, [pc, #184]	; (80049ac <HAL_RCC_OscConfig+0x4e8>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d0f0      	beq.n	80048e0 <HAL_RCC_OscConfig+0x41c>
 80048fe:	e04e      	b.n	800499e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004900:	4b2b      	ldr	r3, [pc, #172]	; (80049b0 <HAL_RCC_OscConfig+0x4ec>)
 8004902:	2200      	movs	r2, #0
 8004904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004906:	f7fd f905 	bl	8001b14 <HAL_GetTick>
 800490a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800490c:	e008      	b.n	8004920 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800490e:	f7fd f901 	bl	8001b14 <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	2b02      	cmp	r3, #2
 800491a:	d901      	bls.n	8004920 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e03f      	b.n	80049a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004920:	4b22      	ldr	r3, [pc, #136]	; (80049ac <HAL_RCC_OscConfig+0x4e8>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1f0      	bne.n	800490e <HAL_RCC_OscConfig+0x44a>
 800492c:	e037      	b.n	800499e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d101      	bne.n	800493a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e032      	b.n	80049a0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800493a:	4b1c      	ldr	r3, [pc, #112]	; (80049ac <HAL_RCC_OscConfig+0x4e8>)
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d028      	beq.n	800499a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004952:	429a      	cmp	r2, r3
 8004954:	d121      	bne.n	800499a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004960:	429a      	cmp	r2, r3
 8004962:	d11a      	bne.n	800499a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800496a:	4013      	ands	r3, r2
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004970:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004972:	4293      	cmp	r3, r2
 8004974:	d111      	bne.n	800499a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004980:	085b      	lsrs	r3, r3, #1
 8004982:	3b01      	subs	r3, #1
 8004984:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004986:	429a      	cmp	r2, r3
 8004988:	d107      	bne.n	800499a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004994:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004996:	429a      	cmp	r2, r3
 8004998:	d001      	beq.n	800499e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e000      	b.n	80049a0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3718      	adds	r7, #24
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	40007000 	.word	0x40007000
 80049ac:	40023800 	.word	0x40023800
 80049b0:	42470060 	.word	0x42470060

080049b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d101      	bne.n	80049c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e0cc      	b.n	8004b62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049c8:	4b68      	ldr	r3, [pc, #416]	; (8004b6c <HAL_RCC_ClockConfig+0x1b8>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0307 	and.w	r3, r3, #7
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d90c      	bls.n	80049f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049d6:	4b65      	ldr	r3, [pc, #404]	; (8004b6c <HAL_RCC_ClockConfig+0x1b8>)
 80049d8:	683a      	ldr	r2, [r7, #0]
 80049da:	b2d2      	uxtb	r2, r2
 80049dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049de:	4b63      	ldr	r3, [pc, #396]	; (8004b6c <HAL_RCC_ClockConfig+0x1b8>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0307 	and.w	r3, r3, #7
 80049e6:	683a      	ldr	r2, [r7, #0]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d001      	beq.n	80049f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e0b8      	b.n	8004b62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0302 	and.w	r3, r3, #2
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d020      	beq.n	8004a3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0304 	and.w	r3, r3, #4
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d005      	beq.n	8004a14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a08:	4b59      	ldr	r3, [pc, #356]	; (8004b70 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	4a58      	ldr	r2, [pc, #352]	; (8004b70 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0308 	and.w	r3, r3, #8
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d005      	beq.n	8004a2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a20:	4b53      	ldr	r3, [pc, #332]	; (8004b70 <HAL_RCC_ClockConfig+0x1bc>)
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	4a52      	ldr	r2, [pc, #328]	; (8004b70 <HAL_RCC_ClockConfig+0x1bc>)
 8004a26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a2c:	4b50      	ldr	r3, [pc, #320]	; (8004b70 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	494d      	ldr	r1, [pc, #308]	; (8004b70 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d044      	beq.n	8004ad4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d107      	bne.n	8004a62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a52:	4b47      	ldr	r3, [pc, #284]	; (8004b70 <HAL_RCC_ClockConfig+0x1bc>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d119      	bne.n	8004a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e07f      	b.n	8004b62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d003      	beq.n	8004a72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a6e:	2b03      	cmp	r3, #3
 8004a70:	d107      	bne.n	8004a82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a72:	4b3f      	ldr	r3, [pc, #252]	; (8004b70 <HAL_RCC_ClockConfig+0x1bc>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d109      	bne.n	8004a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e06f      	b.n	8004b62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a82:	4b3b      	ldr	r3, [pc, #236]	; (8004b70 <HAL_RCC_ClockConfig+0x1bc>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0302 	and.w	r3, r3, #2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e067      	b.n	8004b62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a92:	4b37      	ldr	r3, [pc, #220]	; (8004b70 <HAL_RCC_ClockConfig+0x1bc>)
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f023 0203 	bic.w	r2, r3, #3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	4934      	ldr	r1, [pc, #208]	; (8004b70 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004aa4:	f7fd f836 	bl	8001b14 <HAL_GetTick>
 8004aa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aaa:	e00a      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004aac:	f7fd f832 	bl	8001b14 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e04f      	b.n	8004b62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ac2:	4b2b      	ldr	r3, [pc, #172]	; (8004b70 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f003 020c 	and.w	r2, r3, #12
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d1eb      	bne.n	8004aac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ad4:	4b25      	ldr	r3, [pc, #148]	; (8004b6c <HAL_RCC_ClockConfig+0x1b8>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0307 	and.w	r3, r3, #7
 8004adc:	683a      	ldr	r2, [r7, #0]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d20c      	bcs.n	8004afc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ae2:	4b22      	ldr	r3, [pc, #136]	; (8004b6c <HAL_RCC_ClockConfig+0x1b8>)
 8004ae4:	683a      	ldr	r2, [r7, #0]
 8004ae6:	b2d2      	uxtb	r2, r2
 8004ae8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aea:	4b20      	ldr	r3, [pc, #128]	; (8004b6c <HAL_RCC_ClockConfig+0x1b8>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0307 	and.w	r3, r3, #7
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d001      	beq.n	8004afc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e032      	b.n	8004b62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0304 	and.w	r3, r3, #4
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d008      	beq.n	8004b1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b08:	4b19      	ldr	r3, [pc, #100]	; (8004b70 <HAL_RCC_ClockConfig+0x1bc>)
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	4916      	ldr	r1, [pc, #88]	; (8004b70 <HAL_RCC_ClockConfig+0x1bc>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0308 	and.w	r3, r3, #8
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d009      	beq.n	8004b3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b26:	4b12      	ldr	r3, [pc, #72]	; (8004b70 <HAL_RCC_ClockConfig+0x1bc>)
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	00db      	lsls	r3, r3, #3
 8004b34:	490e      	ldr	r1, [pc, #56]	; (8004b70 <HAL_RCC_ClockConfig+0x1bc>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b3a:	f000 f821 	bl	8004b80 <HAL_RCC_GetSysClockFreq>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	4b0b      	ldr	r3, [pc, #44]	; (8004b70 <HAL_RCC_ClockConfig+0x1bc>)
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	091b      	lsrs	r3, r3, #4
 8004b46:	f003 030f 	and.w	r3, r3, #15
 8004b4a:	490a      	ldr	r1, [pc, #40]	; (8004b74 <HAL_RCC_ClockConfig+0x1c0>)
 8004b4c:	5ccb      	ldrb	r3, [r1, r3]
 8004b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b52:	4a09      	ldr	r2, [pc, #36]	; (8004b78 <HAL_RCC_ClockConfig+0x1c4>)
 8004b54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b56:	4b09      	ldr	r3, [pc, #36]	; (8004b7c <HAL_RCC_ClockConfig+0x1c8>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7fc ff96 	bl	8001a8c <HAL_InitTick>

  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	40023c00 	.word	0x40023c00
 8004b70:	40023800 	.word	0x40023800
 8004b74:	08009f24 	.word	0x08009f24
 8004b78:	20000000 	.word	0x20000000
 8004b7c:	20000004 	.word	0x20000004

08004b80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004b84:	b084      	sub	sp, #16
 8004b86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	607b      	str	r3, [r7, #4]
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	60fb      	str	r3, [r7, #12]
 8004b90:	2300      	movs	r3, #0
 8004b92:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004b94:	2300      	movs	r3, #0
 8004b96:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b98:	4b67      	ldr	r3, [pc, #412]	; (8004d38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f003 030c 	and.w	r3, r3, #12
 8004ba0:	2b08      	cmp	r3, #8
 8004ba2:	d00d      	beq.n	8004bc0 <HAL_RCC_GetSysClockFreq+0x40>
 8004ba4:	2b08      	cmp	r3, #8
 8004ba6:	f200 80bd 	bhi.w	8004d24 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d002      	beq.n	8004bb4 <HAL_RCC_GetSysClockFreq+0x34>
 8004bae:	2b04      	cmp	r3, #4
 8004bb0:	d003      	beq.n	8004bba <HAL_RCC_GetSysClockFreq+0x3a>
 8004bb2:	e0b7      	b.n	8004d24 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bb4:	4b61      	ldr	r3, [pc, #388]	; (8004d3c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004bb6:	60bb      	str	r3, [r7, #8]
       break;
 8004bb8:	e0b7      	b.n	8004d2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bba:	4b61      	ldr	r3, [pc, #388]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004bbc:	60bb      	str	r3, [r7, #8]
      break;
 8004bbe:	e0b4      	b.n	8004d2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bc0:	4b5d      	ldr	r3, [pc, #372]	; (8004d38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bc8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bca:	4b5b      	ldr	r3, [pc, #364]	; (8004d38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d04d      	beq.n	8004c72 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bd6:	4b58      	ldr	r3, [pc, #352]	; (8004d38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	099b      	lsrs	r3, r3, #6
 8004bdc:	461a      	mov	r2, r3
 8004bde:	f04f 0300 	mov.w	r3, #0
 8004be2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004be6:	f04f 0100 	mov.w	r1, #0
 8004bea:	ea02 0800 	and.w	r8, r2, r0
 8004bee:	ea03 0901 	and.w	r9, r3, r1
 8004bf2:	4640      	mov	r0, r8
 8004bf4:	4649      	mov	r1, r9
 8004bf6:	f04f 0200 	mov.w	r2, #0
 8004bfa:	f04f 0300 	mov.w	r3, #0
 8004bfe:	014b      	lsls	r3, r1, #5
 8004c00:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004c04:	0142      	lsls	r2, r0, #5
 8004c06:	4610      	mov	r0, r2
 8004c08:	4619      	mov	r1, r3
 8004c0a:	ebb0 0008 	subs.w	r0, r0, r8
 8004c0e:	eb61 0109 	sbc.w	r1, r1, r9
 8004c12:	f04f 0200 	mov.w	r2, #0
 8004c16:	f04f 0300 	mov.w	r3, #0
 8004c1a:	018b      	lsls	r3, r1, #6
 8004c1c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004c20:	0182      	lsls	r2, r0, #6
 8004c22:	1a12      	subs	r2, r2, r0
 8004c24:	eb63 0301 	sbc.w	r3, r3, r1
 8004c28:	f04f 0000 	mov.w	r0, #0
 8004c2c:	f04f 0100 	mov.w	r1, #0
 8004c30:	00d9      	lsls	r1, r3, #3
 8004c32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c36:	00d0      	lsls	r0, r2, #3
 8004c38:	4602      	mov	r2, r0
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	eb12 0208 	adds.w	r2, r2, r8
 8004c40:	eb43 0309 	adc.w	r3, r3, r9
 8004c44:	f04f 0000 	mov.w	r0, #0
 8004c48:	f04f 0100 	mov.w	r1, #0
 8004c4c:	0259      	lsls	r1, r3, #9
 8004c4e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004c52:	0250      	lsls	r0, r2, #9
 8004c54:	4602      	mov	r2, r0
 8004c56:	460b      	mov	r3, r1
 8004c58:	4610      	mov	r0, r2
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	461a      	mov	r2, r3
 8004c60:	f04f 0300 	mov.w	r3, #0
 8004c64:	f7fb ff2a 	bl	8000abc <__aeabi_uldivmod>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	60fb      	str	r3, [r7, #12]
 8004c70:	e04a      	b.n	8004d08 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c72:	4b31      	ldr	r3, [pc, #196]	; (8004d38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	099b      	lsrs	r3, r3, #6
 8004c78:	461a      	mov	r2, r3
 8004c7a:	f04f 0300 	mov.w	r3, #0
 8004c7e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004c82:	f04f 0100 	mov.w	r1, #0
 8004c86:	ea02 0400 	and.w	r4, r2, r0
 8004c8a:	ea03 0501 	and.w	r5, r3, r1
 8004c8e:	4620      	mov	r0, r4
 8004c90:	4629      	mov	r1, r5
 8004c92:	f04f 0200 	mov.w	r2, #0
 8004c96:	f04f 0300 	mov.w	r3, #0
 8004c9a:	014b      	lsls	r3, r1, #5
 8004c9c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004ca0:	0142      	lsls	r2, r0, #5
 8004ca2:	4610      	mov	r0, r2
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	1b00      	subs	r0, r0, r4
 8004ca8:	eb61 0105 	sbc.w	r1, r1, r5
 8004cac:	f04f 0200 	mov.w	r2, #0
 8004cb0:	f04f 0300 	mov.w	r3, #0
 8004cb4:	018b      	lsls	r3, r1, #6
 8004cb6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004cba:	0182      	lsls	r2, r0, #6
 8004cbc:	1a12      	subs	r2, r2, r0
 8004cbe:	eb63 0301 	sbc.w	r3, r3, r1
 8004cc2:	f04f 0000 	mov.w	r0, #0
 8004cc6:	f04f 0100 	mov.w	r1, #0
 8004cca:	00d9      	lsls	r1, r3, #3
 8004ccc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004cd0:	00d0      	lsls	r0, r2, #3
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	1912      	adds	r2, r2, r4
 8004cd8:	eb45 0303 	adc.w	r3, r5, r3
 8004cdc:	f04f 0000 	mov.w	r0, #0
 8004ce0:	f04f 0100 	mov.w	r1, #0
 8004ce4:	0299      	lsls	r1, r3, #10
 8004ce6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004cea:	0290      	lsls	r0, r2, #10
 8004cec:	4602      	mov	r2, r0
 8004cee:	460b      	mov	r3, r1
 8004cf0:	4610      	mov	r0, r2
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	f04f 0300 	mov.w	r3, #0
 8004cfc:	f7fb fede 	bl	8000abc <__aeabi_uldivmod>
 8004d00:	4602      	mov	r2, r0
 8004d02:	460b      	mov	r3, r1
 8004d04:	4613      	mov	r3, r2
 8004d06:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d08:	4b0b      	ldr	r3, [pc, #44]	; (8004d38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	0c1b      	lsrs	r3, r3, #16
 8004d0e:	f003 0303 	and.w	r3, r3, #3
 8004d12:	3301      	adds	r3, #1
 8004d14:	005b      	lsls	r3, r3, #1
 8004d16:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d20:	60bb      	str	r3, [r7, #8]
      break;
 8004d22:	e002      	b.n	8004d2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d24:	4b05      	ldr	r3, [pc, #20]	; (8004d3c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004d26:	60bb      	str	r3, [r7, #8]
      break;
 8004d28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d2a:	68bb      	ldr	r3, [r7, #8]
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3710      	adds	r7, #16
 8004d30:	46bd      	mov	sp, r7
 8004d32:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004d36:	bf00      	nop
 8004d38:	40023800 	.word	0x40023800
 8004d3c:	00f42400 	.word	0x00f42400
 8004d40:	007a1200 	.word	0x007a1200

08004d44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d44:	b480      	push	{r7}
 8004d46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d48:	4b03      	ldr	r3, [pc, #12]	; (8004d58 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	20000000 	.word	0x20000000

08004d5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d60:	f7ff fff0 	bl	8004d44 <HAL_RCC_GetHCLKFreq>
 8004d64:	4602      	mov	r2, r0
 8004d66:	4b05      	ldr	r3, [pc, #20]	; (8004d7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	0a9b      	lsrs	r3, r3, #10
 8004d6c:	f003 0307 	and.w	r3, r3, #7
 8004d70:	4903      	ldr	r1, [pc, #12]	; (8004d80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d72:	5ccb      	ldrb	r3, [r1, r3]
 8004d74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	40023800 	.word	0x40023800
 8004d80:	08009f34 	.word	0x08009f34

08004d84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004d88:	f7ff ffdc 	bl	8004d44 <HAL_RCC_GetHCLKFreq>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	4b05      	ldr	r3, [pc, #20]	; (8004da4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	0b5b      	lsrs	r3, r3, #13
 8004d94:	f003 0307 	and.w	r3, r3, #7
 8004d98:	4903      	ldr	r1, [pc, #12]	; (8004da8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d9a:	5ccb      	ldrb	r3, [r1, r3]
 8004d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	40023800 	.word	0x40023800
 8004da8:	08009f34 	.word	0x08009f34

08004dac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e07b      	b.n	8004eb6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d108      	bne.n	8004dd8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dce:	d009      	beq.n	8004de4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	61da      	str	r2, [r3, #28]
 8004dd6:	e005      	b.n	8004de4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d106      	bne.n	8004e04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f7fc fc80 	bl	8001704 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2202      	movs	r2, #2
 8004e08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e1a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e36:	431a      	orrs	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	f003 0302 	and.w	r3, r3, #2
 8004e40:	431a      	orrs	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	f003 0301 	and.w	r3, r3, #1
 8004e4a:	431a      	orrs	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e54:	431a      	orrs	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	69db      	ldr	r3, [r3, #28]
 8004e5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e5e:	431a      	orrs	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a1b      	ldr	r3, [r3, #32]
 8004e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e68:	ea42 0103 	orr.w	r1, r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e70:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	0c1b      	lsrs	r3, r3, #16
 8004e82:	f003 0104 	and.w	r1, r3, #4
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8a:	f003 0210 	and.w	r2, r3, #16
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	69da      	ldr	r2, [r3, #28]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ea4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3708      	adds	r7, #8
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b082      	sub	sp, #8
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d101      	bne.n	8004ed0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e03f      	b.n	8004f50 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d106      	bne.n	8004eea <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f7fc fd35 	bl	8001954 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2224      	movs	r2, #36	; 0x24
 8004eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68da      	ldr	r2, [r3, #12]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f00:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 fc7a 	bl	80057fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	691a      	ldr	r2, [r3, #16]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f16:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	695a      	ldr	r2, [r3, #20]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f26:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68da      	ldr	r2, [r3, #12]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f36:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2220      	movs	r2, #32
 8004f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2220      	movs	r2, #32
 8004f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3708      	adds	r7, #8
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b0ba      	sub	sp, #232	; 0xe8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004f84:	2300      	movs	r3, #0
 8004f86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f8e:	f003 030f 	and.w	r3, r3, #15
 8004f92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004f96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10f      	bne.n	8004fbe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fa2:	f003 0320 	and.w	r3, r3, #32
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d009      	beq.n	8004fbe <HAL_UART_IRQHandler+0x66>
 8004faa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fae:	f003 0320 	and.w	r3, r3, #32
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d003      	beq.n	8004fbe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 fb65 	bl	8005686 <UART_Receive_IT>
      return;
 8004fbc:	e256      	b.n	800546c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004fbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	f000 80de 	beq.w	8005184 <HAL_UART_IRQHandler+0x22c>
 8004fc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fcc:	f003 0301 	and.w	r3, r3, #1
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d106      	bne.n	8004fe2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fd8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f000 80d1 	beq.w	8005184 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00b      	beq.n	8005006 <HAL_UART_IRQHandler+0xae>
 8004fee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d005      	beq.n	8005006 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffe:	f043 0201 	orr.w	r2, r3, #1
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800500a:	f003 0304 	and.w	r3, r3, #4
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00b      	beq.n	800502a <HAL_UART_IRQHandler+0xd2>
 8005012:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005016:	f003 0301 	and.w	r3, r3, #1
 800501a:	2b00      	cmp	r3, #0
 800501c:	d005      	beq.n	800502a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005022:	f043 0202 	orr.w	r2, r3, #2
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800502a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800502e:	f003 0302 	and.w	r3, r3, #2
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00b      	beq.n	800504e <HAL_UART_IRQHandler+0xf6>
 8005036:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b00      	cmp	r3, #0
 8005040:	d005      	beq.n	800504e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005046:	f043 0204 	orr.w	r2, r3, #4
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800504e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005052:	f003 0308 	and.w	r3, r3, #8
 8005056:	2b00      	cmp	r3, #0
 8005058:	d011      	beq.n	800507e <HAL_UART_IRQHandler+0x126>
 800505a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800505e:	f003 0320 	and.w	r3, r3, #32
 8005062:	2b00      	cmp	r3, #0
 8005064:	d105      	bne.n	8005072 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005066:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b00      	cmp	r3, #0
 8005070:	d005      	beq.n	800507e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005076:	f043 0208 	orr.w	r2, r3, #8
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005082:	2b00      	cmp	r3, #0
 8005084:	f000 81ed 	beq.w	8005462 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800508c:	f003 0320 	and.w	r3, r3, #32
 8005090:	2b00      	cmp	r3, #0
 8005092:	d008      	beq.n	80050a6 <HAL_UART_IRQHandler+0x14e>
 8005094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005098:	f003 0320 	and.w	r3, r3, #32
 800509c:	2b00      	cmp	r3, #0
 800509e:	d002      	beq.n	80050a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 faf0 	bl	8005686 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	695b      	ldr	r3, [r3, #20]
 80050ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b0:	2b40      	cmp	r3, #64	; 0x40
 80050b2:	bf0c      	ite	eq
 80050b4:	2301      	moveq	r3, #1
 80050b6:	2300      	movne	r3, #0
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c2:	f003 0308 	and.w	r3, r3, #8
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d103      	bne.n	80050d2 <HAL_UART_IRQHandler+0x17a>
 80050ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d04f      	beq.n	8005172 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 f9f8 	bl	80054c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e2:	2b40      	cmp	r3, #64	; 0x40
 80050e4:	d141      	bne.n	800516a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	3314      	adds	r3, #20
 80050ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80050f4:	e853 3f00 	ldrex	r3, [r3]
 80050f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80050fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005100:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005104:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	3314      	adds	r3, #20
 800510e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005112:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005116:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800511e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005122:	e841 2300 	strex	r3, r2, [r1]
 8005126:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800512a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1d9      	bne.n	80050e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005136:	2b00      	cmp	r3, #0
 8005138:	d013      	beq.n	8005162 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513e:	4a7d      	ldr	r2, [pc, #500]	; (8005334 <HAL_UART_IRQHandler+0x3dc>)
 8005140:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005146:	4618      	mov	r0, r3
 8005148:	f7fc fe95 	bl	8001e76 <HAL_DMA_Abort_IT>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d016      	beq.n	8005180 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800515c:	4610      	mov	r0, r2
 800515e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005160:	e00e      	b.n	8005180 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 f99a 	bl	800549c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005168:	e00a      	b.n	8005180 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 f996 	bl	800549c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005170:	e006      	b.n	8005180 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 f992 	bl	800549c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800517e:	e170      	b.n	8005462 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005180:	bf00      	nop
    return;
 8005182:	e16e      	b.n	8005462 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005188:	2b01      	cmp	r3, #1
 800518a:	f040 814a 	bne.w	8005422 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800518e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005192:	f003 0310 	and.w	r3, r3, #16
 8005196:	2b00      	cmp	r3, #0
 8005198:	f000 8143 	beq.w	8005422 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800519c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051a0:	f003 0310 	and.w	r3, r3, #16
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	f000 813c 	beq.w	8005422 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051aa:	2300      	movs	r3, #0
 80051ac:	60bb      	str	r3, [r7, #8]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	60bb      	str	r3, [r7, #8]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	60bb      	str	r3, [r7, #8]
 80051be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ca:	2b40      	cmp	r3, #64	; 0x40
 80051cc:	f040 80b4 	bne.w	8005338 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80051dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f000 8140 	beq.w	8005466 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80051ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80051ee:	429a      	cmp	r2, r3
 80051f0:	f080 8139 	bcs.w	8005466 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80051fa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005200:	69db      	ldr	r3, [r3, #28]
 8005202:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005206:	f000 8088 	beq.w	800531a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	330c      	adds	r3, #12
 8005210:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005214:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005218:	e853 3f00 	ldrex	r3, [r3]
 800521c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005220:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005224:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005228:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	330c      	adds	r3, #12
 8005232:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005236:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800523a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005242:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005246:	e841 2300 	strex	r3, r2, [r1]
 800524a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800524e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1d9      	bne.n	800520a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	3314      	adds	r3, #20
 800525c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800525e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005260:	e853 3f00 	ldrex	r3, [r3]
 8005264:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005266:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005268:	f023 0301 	bic.w	r3, r3, #1
 800526c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	3314      	adds	r3, #20
 8005276:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800527a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800527e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005280:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005282:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005286:	e841 2300 	strex	r3, r2, [r1]
 800528a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800528c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1e1      	bne.n	8005256 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	3314      	adds	r3, #20
 8005298:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800529c:	e853 3f00 	ldrex	r3, [r3]
 80052a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80052a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	3314      	adds	r3, #20
 80052b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80052b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80052b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80052bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80052be:	e841 2300 	strex	r3, r2, [r1]
 80052c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80052c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1e3      	bne.n	8005292 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2220      	movs	r2, #32
 80052ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	330c      	adds	r3, #12
 80052de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052e2:	e853 3f00 	ldrex	r3, [r3]
 80052e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80052e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052ea:	f023 0310 	bic.w	r3, r3, #16
 80052ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	330c      	adds	r3, #12
 80052f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80052fc:	65ba      	str	r2, [r7, #88]	; 0x58
 80052fe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005300:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005302:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005304:	e841 2300 	strex	r3, r2, [r1]
 8005308:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800530a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1e3      	bne.n	80052d8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005314:	4618      	mov	r0, r3
 8005316:	f7fc fd3e 	bl	8001d96 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005322:	b29b      	uxth	r3, r3
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	b29b      	uxth	r3, r3
 8005328:	4619      	mov	r1, r3
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f8c0 	bl	80054b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005330:	e099      	b.n	8005466 <HAL_UART_IRQHandler+0x50e>
 8005332:	bf00      	nop
 8005334:	0800558f 	.word	0x0800558f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005340:	b29b      	uxth	r3, r3
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800534c:	b29b      	uxth	r3, r3
 800534e:	2b00      	cmp	r3, #0
 8005350:	f000 808b 	beq.w	800546a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005354:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005358:	2b00      	cmp	r3, #0
 800535a:	f000 8086 	beq.w	800546a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	330c      	adds	r3, #12
 8005364:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005368:	e853 3f00 	ldrex	r3, [r3]
 800536c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800536e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005370:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005374:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	330c      	adds	r3, #12
 800537e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005382:	647a      	str	r2, [r7, #68]	; 0x44
 8005384:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005386:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005388:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800538a:	e841 2300 	strex	r3, r2, [r1]
 800538e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1e3      	bne.n	800535e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	3314      	adds	r3, #20
 800539c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a0:	e853 3f00 	ldrex	r3, [r3]
 80053a4:	623b      	str	r3, [r7, #32]
   return(result);
 80053a6:	6a3b      	ldr	r3, [r7, #32]
 80053a8:	f023 0301 	bic.w	r3, r3, #1
 80053ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	3314      	adds	r3, #20
 80053b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80053ba:	633a      	str	r2, [r7, #48]	; 0x30
 80053bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053c2:	e841 2300 	strex	r3, r2, [r1]
 80053c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80053c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1e3      	bne.n	8005396 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2220      	movs	r2, #32
 80053d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	330c      	adds	r3, #12
 80053e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	e853 3f00 	ldrex	r3, [r3]
 80053ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f023 0310 	bic.w	r3, r3, #16
 80053f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	330c      	adds	r3, #12
 80053fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005400:	61fa      	str	r2, [r7, #28]
 8005402:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005404:	69b9      	ldr	r1, [r7, #24]
 8005406:	69fa      	ldr	r2, [r7, #28]
 8005408:	e841 2300 	strex	r3, r2, [r1]
 800540c:	617b      	str	r3, [r7, #20]
   return(result);
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1e3      	bne.n	80053dc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005414:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005418:	4619      	mov	r1, r3
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 f848 	bl	80054b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005420:	e023      	b.n	800546a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800542a:	2b00      	cmp	r3, #0
 800542c:	d009      	beq.n	8005442 <HAL_UART_IRQHandler+0x4ea>
 800542e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005436:	2b00      	cmp	r3, #0
 8005438:	d003      	beq.n	8005442 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 f8bb 	bl	80055b6 <UART_Transmit_IT>
    return;
 8005440:	e014      	b.n	800546c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00e      	beq.n	800546c <HAL_UART_IRQHandler+0x514>
 800544e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005456:	2b00      	cmp	r3, #0
 8005458:	d008      	beq.n	800546c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 f8fb 	bl	8005656 <UART_EndTransmit_IT>
    return;
 8005460:	e004      	b.n	800546c <HAL_UART_IRQHandler+0x514>
    return;
 8005462:	bf00      	nop
 8005464:	e002      	b.n	800546c <HAL_UART_IRQHandler+0x514>
      return;
 8005466:	bf00      	nop
 8005468:	e000      	b.n	800546c <HAL_UART_IRQHandler+0x514>
      return;
 800546a:	bf00      	nop
  }
}
 800546c:	37e8      	adds	r7, #232	; 0xe8
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop

08005474 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800547c:	bf00      	nop
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80054a4:	bf00      	nop
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	460b      	mov	r3, r1
 80054ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80054bc:	bf00      	nop
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b095      	sub	sp, #84	; 0x54
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	330c      	adds	r3, #12
 80054d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054da:	e853 3f00 	ldrex	r3, [r3]
 80054de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80054e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	330c      	adds	r3, #12
 80054ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80054f0:	643a      	str	r2, [r7, #64]	; 0x40
 80054f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80054f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054f8:	e841 2300 	strex	r3, r2, [r1]
 80054fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1e5      	bne.n	80054d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	3314      	adds	r3, #20
 800550a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800550c:	6a3b      	ldr	r3, [r7, #32]
 800550e:	e853 3f00 	ldrex	r3, [r3]
 8005512:	61fb      	str	r3, [r7, #28]
   return(result);
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	f023 0301 	bic.w	r3, r3, #1
 800551a:	64bb      	str	r3, [r7, #72]	; 0x48
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	3314      	adds	r3, #20
 8005522:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005524:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005526:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005528:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800552a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800552c:	e841 2300 	strex	r3, r2, [r1]
 8005530:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1e5      	bne.n	8005504 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553c:	2b01      	cmp	r3, #1
 800553e:	d119      	bne.n	8005574 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	330c      	adds	r3, #12
 8005546:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	e853 3f00 	ldrex	r3, [r3]
 800554e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	f023 0310 	bic.w	r3, r3, #16
 8005556:	647b      	str	r3, [r7, #68]	; 0x44
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	330c      	adds	r3, #12
 800555e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005560:	61ba      	str	r2, [r7, #24]
 8005562:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005564:	6979      	ldr	r1, [r7, #20]
 8005566:	69ba      	ldr	r2, [r7, #24]
 8005568:	e841 2300 	strex	r3, r2, [r1]
 800556c:	613b      	str	r3, [r7, #16]
   return(result);
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1e5      	bne.n	8005540 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2220      	movs	r2, #32
 8005578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005582:	bf00      	nop
 8005584:	3754      	adds	r7, #84	; 0x54
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr

0800558e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800558e:	b580      	push	{r7, lr}
 8005590:	b084      	sub	sp, #16
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055a8:	68f8      	ldr	r0, [r7, #12]
 80055aa:	f7ff ff77 	bl	800549c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055ae:	bf00      	nop
 80055b0:	3710      	adds	r7, #16
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80055b6:	b480      	push	{r7}
 80055b8:	b085      	sub	sp, #20
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	2b21      	cmp	r3, #33	; 0x21
 80055c8:	d13e      	bne.n	8005648 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055d2:	d114      	bne.n	80055fe <UART_Transmit_IT+0x48>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d110      	bne.n	80055fe <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a1b      	ldr	r3, [r3, #32]
 80055e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	881b      	ldrh	r3, [r3, #0]
 80055e6:	461a      	mov	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	1c9a      	adds	r2, r3, #2
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	621a      	str	r2, [r3, #32]
 80055fc:	e008      	b.n	8005610 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a1b      	ldr	r3, [r3, #32]
 8005602:	1c59      	adds	r1, r3, #1
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	6211      	str	r1, [r2, #32]
 8005608:	781a      	ldrb	r2, [r3, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005614:	b29b      	uxth	r3, r3
 8005616:	3b01      	subs	r3, #1
 8005618:	b29b      	uxth	r3, r3
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	4619      	mov	r1, r3
 800561e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005620:	2b00      	cmp	r3, #0
 8005622:	d10f      	bne.n	8005644 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68da      	ldr	r2, [r3, #12]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005632:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68da      	ldr	r2, [r3, #12]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005642:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005644:	2300      	movs	r3, #0
 8005646:	e000      	b.n	800564a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005648:	2302      	movs	r3, #2
  }
}
 800564a:	4618      	mov	r0, r3
 800564c:	3714      	adds	r7, #20
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr

08005656 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005656:	b580      	push	{r7, lr}
 8005658:	b082      	sub	sp, #8
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68da      	ldr	r2, [r3, #12]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800566c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2220      	movs	r2, #32
 8005672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f7ff fefc 	bl	8005474 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3708      	adds	r7, #8
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005686:	b580      	push	{r7, lr}
 8005688:	b08c      	sub	sp, #48	; 0x30
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2b22      	cmp	r3, #34	; 0x22
 8005698:	f040 80ab 	bne.w	80057f2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056a4:	d117      	bne.n	80056d6 <UART_Receive_IT+0x50>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d113      	bne.n	80056d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80056ae:	2300      	movs	r3, #0
 80056b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	b29b      	uxth	r3, r3
 80056c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056c4:	b29a      	uxth	r2, r3
 80056c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ce:	1c9a      	adds	r2, r3, #2
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	629a      	str	r2, [r3, #40]	; 0x28
 80056d4:	e026      	b.n	8005724 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056da:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80056dc:	2300      	movs	r3, #0
 80056de:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056e8:	d007      	beq.n	80056fa <UART_Receive_IT+0x74>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d10a      	bne.n	8005708 <UART_Receive_IT+0x82>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d106      	bne.n	8005708 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	b2da      	uxtb	r2, r3
 8005702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005704:	701a      	strb	r2, [r3, #0]
 8005706:	e008      	b.n	800571a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	b2db      	uxtb	r3, r3
 8005710:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005714:	b2da      	uxtb	r2, r3
 8005716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005718:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571e:	1c5a      	adds	r2, r3, #1
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005728:	b29b      	uxth	r3, r3
 800572a:	3b01      	subs	r3, #1
 800572c:	b29b      	uxth	r3, r3
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	4619      	mov	r1, r3
 8005732:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005734:	2b00      	cmp	r3, #0
 8005736:	d15a      	bne.n	80057ee <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68da      	ldr	r2, [r3, #12]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f022 0220 	bic.w	r2, r2, #32
 8005746:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68da      	ldr	r2, [r3, #12]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005756:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	695a      	ldr	r2, [r3, #20]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f022 0201 	bic.w	r2, r2, #1
 8005766:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2220      	movs	r2, #32
 800576c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005774:	2b01      	cmp	r3, #1
 8005776:	d135      	bne.n	80057e4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	330c      	adds	r3, #12
 8005784:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	e853 3f00 	ldrex	r3, [r3]
 800578c:	613b      	str	r3, [r7, #16]
   return(result);
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	f023 0310 	bic.w	r3, r3, #16
 8005794:	627b      	str	r3, [r7, #36]	; 0x24
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	330c      	adds	r3, #12
 800579c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800579e:	623a      	str	r2, [r7, #32]
 80057a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a2:	69f9      	ldr	r1, [r7, #28]
 80057a4:	6a3a      	ldr	r2, [r7, #32]
 80057a6:	e841 2300 	strex	r3, r2, [r1]
 80057aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d1e5      	bne.n	800577e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0310 	and.w	r3, r3, #16
 80057bc:	2b10      	cmp	r3, #16
 80057be:	d10a      	bne.n	80057d6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80057c0:	2300      	movs	r3, #0
 80057c2:	60fb      	str	r3, [r7, #12]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	60fb      	str	r3, [r7, #12]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	60fb      	str	r3, [r7, #12]
 80057d4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80057da:	4619      	mov	r1, r3
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f7ff fe67 	bl	80054b0 <HAL_UARTEx_RxEventCallback>
 80057e2:	e002      	b.n	80057ea <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f7ff fe4f 	bl	8005488 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80057ea:	2300      	movs	r3, #0
 80057ec:	e002      	b.n	80057f4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80057ee:	2300      	movs	r3, #0
 80057f0:	e000      	b.n	80057f4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80057f2:	2302      	movs	r3, #2
  }
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3730      	adds	r7, #48	; 0x30
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005800:	b09f      	sub	sp, #124	; 0x7c
 8005802:	af00      	add	r7, sp, #0
 8005804:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005812:	68d9      	ldr	r1, [r3, #12]
 8005814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	ea40 0301 	orr.w	r3, r0, r1
 800581c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800581e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005820:	689a      	ldr	r2, [r3, #8]
 8005822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	431a      	orrs	r2, r3
 8005828:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800582a:	695b      	ldr	r3, [r3, #20]
 800582c:	431a      	orrs	r2, r3
 800582e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005830:	69db      	ldr	r3, [r3, #28]
 8005832:	4313      	orrs	r3, r2
 8005834:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005840:	f021 010c 	bic.w	r1, r1, #12
 8005844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800584a:	430b      	orrs	r3, r1
 800584c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800584e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	695b      	ldr	r3, [r3, #20]
 8005854:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800585a:	6999      	ldr	r1, [r3, #24]
 800585c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	ea40 0301 	orr.w	r3, r0, r1
 8005864:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	4bc5      	ldr	r3, [pc, #788]	; (8005b80 <UART_SetConfig+0x384>)
 800586c:	429a      	cmp	r2, r3
 800586e:	d004      	beq.n	800587a <UART_SetConfig+0x7e>
 8005870:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	4bc3      	ldr	r3, [pc, #780]	; (8005b84 <UART_SetConfig+0x388>)
 8005876:	429a      	cmp	r2, r3
 8005878:	d103      	bne.n	8005882 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800587a:	f7ff fa83 	bl	8004d84 <HAL_RCC_GetPCLK2Freq>
 800587e:	6778      	str	r0, [r7, #116]	; 0x74
 8005880:	e002      	b.n	8005888 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005882:	f7ff fa6b 	bl	8004d5c <HAL_RCC_GetPCLK1Freq>
 8005886:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800588a:	69db      	ldr	r3, [r3, #28]
 800588c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005890:	f040 80b6 	bne.w	8005a00 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005894:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005896:	461c      	mov	r4, r3
 8005898:	f04f 0500 	mov.w	r5, #0
 800589c:	4622      	mov	r2, r4
 800589e:	462b      	mov	r3, r5
 80058a0:	1891      	adds	r1, r2, r2
 80058a2:	6439      	str	r1, [r7, #64]	; 0x40
 80058a4:	415b      	adcs	r3, r3
 80058a6:	647b      	str	r3, [r7, #68]	; 0x44
 80058a8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80058ac:	1912      	adds	r2, r2, r4
 80058ae:	eb45 0303 	adc.w	r3, r5, r3
 80058b2:	f04f 0000 	mov.w	r0, #0
 80058b6:	f04f 0100 	mov.w	r1, #0
 80058ba:	00d9      	lsls	r1, r3, #3
 80058bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80058c0:	00d0      	lsls	r0, r2, #3
 80058c2:	4602      	mov	r2, r0
 80058c4:	460b      	mov	r3, r1
 80058c6:	1911      	adds	r1, r2, r4
 80058c8:	6639      	str	r1, [r7, #96]	; 0x60
 80058ca:	416b      	adcs	r3, r5
 80058cc:	667b      	str	r3, [r7, #100]	; 0x64
 80058ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	461a      	mov	r2, r3
 80058d4:	f04f 0300 	mov.w	r3, #0
 80058d8:	1891      	adds	r1, r2, r2
 80058da:	63b9      	str	r1, [r7, #56]	; 0x38
 80058dc:	415b      	adcs	r3, r3
 80058de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80058e4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80058e8:	f7fb f8e8 	bl	8000abc <__aeabi_uldivmod>
 80058ec:	4602      	mov	r2, r0
 80058ee:	460b      	mov	r3, r1
 80058f0:	4ba5      	ldr	r3, [pc, #660]	; (8005b88 <UART_SetConfig+0x38c>)
 80058f2:	fba3 2302 	umull	r2, r3, r3, r2
 80058f6:	095b      	lsrs	r3, r3, #5
 80058f8:	011e      	lsls	r6, r3, #4
 80058fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058fc:	461c      	mov	r4, r3
 80058fe:	f04f 0500 	mov.w	r5, #0
 8005902:	4622      	mov	r2, r4
 8005904:	462b      	mov	r3, r5
 8005906:	1891      	adds	r1, r2, r2
 8005908:	6339      	str	r1, [r7, #48]	; 0x30
 800590a:	415b      	adcs	r3, r3
 800590c:	637b      	str	r3, [r7, #52]	; 0x34
 800590e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005912:	1912      	adds	r2, r2, r4
 8005914:	eb45 0303 	adc.w	r3, r5, r3
 8005918:	f04f 0000 	mov.w	r0, #0
 800591c:	f04f 0100 	mov.w	r1, #0
 8005920:	00d9      	lsls	r1, r3, #3
 8005922:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005926:	00d0      	lsls	r0, r2, #3
 8005928:	4602      	mov	r2, r0
 800592a:	460b      	mov	r3, r1
 800592c:	1911      	adds	r1, r2, r4
 800592e:	65b9      	str	r1, [r7, #88]	; 0x58
 8005930:	416b      	adcs	r3, r5
 8005932:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	461a      	mov	r2, r3
 800593a:	f04f 0300 	mov.w	r3, #0
 800593e:	1891      	adds	r1, r2, r2
 8005940:	62b9      	str	r1, [r7, #40]	; 0x28
 8005942:	415b      	adcs	r3, r3
 8005944:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005946:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800594a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800594e:	f7fb f8b5 	bl	8000abc <__aeabi_uldivmod>
 8005952:	4602      	mov	r2, r0
 8005954:	460b      	mov	r3, r1
 8005956:	4b8c      	ldr	r3, [pc, #560]	; (8005b88 <UART_SetConfig+0x38c>)
 8005958:	fba3 1302 	umull	r1, r3, r3, r2
 800595c:	095b      	lsrs	r3, r3, #5
 800595e:	2164      	movs	r1, #100	; 0x64
 8005960:	fb01 f303 	mul.w	r3, r1, r3
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	00db      	lsls	r3, r3, #3
 8005968:	3332      	adds	r3, #50	; 0x32
 800596a:	4a87      	ldr	r2, [pc, #540]	; (8005b88 <UART_SetConfig+0x38c>)
 800596c:	fba2 2303 	umull	r2, r3, r2, r3
 8005970:	095b      	lsrs	r3, r3, #5
 8005972:	005b      	lsls	r3, r3, #1
 8005974:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005978:	441e      	add	r6, r3
 800597a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800597c:	4618      	mov	r0, r3
 800597e:	f04f 0100 	mov.w	r1, #0
 8005982:	4602      	mov	r2, r0
 8005984:	460b      	mov	r3, r1
 8005986:	1894      	adds	r4, r2, r2
 8005988:	623c      	str	r4, [r7, #32]
 800598a:	415b      	adcs	r3, r3
 800598c:	627b      	str	r3, [r7, #36]	; 0x24
 800598e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005992:	1812      	adds	r2, r2, r0
 8005994:	eb41 0303 	adc.w	r3, r1, r3
 8005998:	f04f 0400 	mov.w	r4, #0
 800599c:	f04f 0500 	mov.w	r5, #0
 80059a0:	00dd      	lsls	r5, r3, #3
 80059a2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80059a6:	00d4      	lsls	r4, r2, #3
 80059a8:	4622      	mov	r2, r4
 80059aa:	462b      	mov	r3, r5
 80059ac:	1814      	adds	r4, r2, r0
 80059ae:	653c      	str	r4, [r7, #80]	; 0x50
 80059b0:	414b      	adcs	r3, r1
 80059b2:	657b      	str	r3, [r7, #84]	; 0x54
 80059b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	461a      	mov	r2, r3
 80059ba:	f04f 0300 	mov.w	r3, #0
 80059be:	1891      	adds	r1, r2, r2
 80059c0:	61b9      	str	r1, [r7, #24]
 80059c2:	415b      	adcs	r3, r3
 80059c4:	61fb      	str	r3, [r7, #28]
 80059c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059ca:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80059ce:	f7fb f875 	bl	8000abc <__aeabi_uldivmod>
 80059d2:	4602      	mov	r2, r0
 80059d4:	460b      	mov	r3, r1
 80059d6:	4b6c      	ldr	r3, [pc, #432]	; (8005b88 <UART_SetConfig+0x38c>)
 80059d8:	fba3 1302 	umull	r1, r3, r3, r2
 80059dc:	095b      	lsrs	r3, r3, #5
 80059de:	2164      	movs	r1, #100	; 0x64
 80059e0:	fb01 f303 	mul.w	r3, r1, r3
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	00db      	lsls	r3, r3, #3
 80059e8:	3332      	adds	r3, #50	; 0x32
 80059ea:	4a67      	ldr	r2, [pc, #412]	; (8005b88 <UART_SetConfig+0x38c>)
 80059ec:	fba2 2303 	umull	r2, r3, r2, r3
 80059f0:	095b      	lsrs	r3, r3, #5
 80059f2:	f003 0207 	and.w	r2, r3, #7
 80059f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4432      	add	r2, r6
 80059fc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80059fe:	e0b9      	b.n	8005b74 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a02:	461c      	mov	r4, r3
 8005a04:	f04f 0500 	mov.w	r5, #0
 8005a08:	4622      	mov	r2, r4
 8005a0a:	462b      	mov	r3, r5
 8005a0c:	1891      	adds	r1, r2, r2
 8005a0e:	6139      	str	r1, [r7, #16]
 8005a10:	415b      	adcs	r3, r3
 8005a12:	617b      	str	r3, [r7, #20]
 8005a14:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005a18:	1912      	adds	r2, r2, r4
 8005a1a:	eb45 0303 	adc.w	r3, r5, r3
 8005a1e:	f04f 0000 	mov.w	r0, #0
 8005a22:	f04f 0100 	mov.w	r1, #0
 8005a26:	00d9      	lsls	r1, r3, #3
 8005a28:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a2c:	00d0      	lsls	r0, r2, #3
 8005a2e:	4602      	mov	r2, r0
 8005a30:	460b      	mov	r3, r1
 8005a32:	eb12 0804 	adds.w	r8, r2, r4
 8005a36:	eb43 0905 	adc.w	r9, r3, r5
 8005a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f04f 0100 	mov.w	r1, #0
 8005a44:	f04f 0200 	mov.w	r2, #0
 8005a48:	f04f 0300 	mov.w	r3, #0
 8005a4c:	008b      	lsls	r3, r1, #2
 8005a4e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005a52:	0082      	lsls	r2, r0, #2
 8005a54:	4640      	mov	r0, r8
 8005a56:	4649      	mov	r1, r9
 8005a58:	f7fb f830 	bl	8000abc <__aeabi_uldivmod>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	460b      	mov	r3, r1
 8005a60:	4b49      	ldr	r3, [pc, #292]	; (8005b88 <UART_SetConfig+0x38c>)
 8005a62:	fba3 2302 	umull	r2, r3, r3, r2
 8005a66:	095b      	lsrs	r3, r3, #5
 8005a68:	011e      	lsls	r6, r3, #4
 8005a6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f04f 0100 	mov.w	r1, #0
 8005a72:	4602      	mov	r2, r0
 8005a74:	460b      	mov	r3, r1
 8005a76:	1894      	adds	r4, r2, r2
 8005a78:	60bc      	str	r4, [r7, #8]
 8005a7a:	415b      	adcs	r3, r3
 8005a7c:	60fb      	str	r3, [r7, #12]
 8005a7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a82:	1812      	adds	r2, r2, r0
 8005a84:	eb41 0303 	adc.w	r3, r1, r3
 8005a88:	f04f 0400 	mov.w	r4, #0
 8005a8c:	f04f 0500 	mov.w	r5, #0
 8005a90:	00dd      	lsls	r5, r3, #3
 8005a92:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005a96:	00d4      	lsls	r4, r2, #3
 8005a98:	4622      	mov	r2, r4
 8005a9a:	462b      	mov	r3, r5
 8005a9c:	1814      	adds	r4, r2, r0
 8005a9e:	64bc      	str	r4, [r7, #72]	; 0x48
 8005aa0:	414b      	adcs	r3, r1
 8005aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005aa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f04f 0100 	mov.w	r1, #0
 8005aae:	f04f 0200 	mov.w	r2, #0
 8005ab2:	f04f 0300 	mov.w	r3, #0
 8005ab6:	008b      	lsls	r3, r1, #2
 8005ab8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005abc:	0082      	lsls	r2, r0, #2
 8005abe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005ac2:	f7fa fffb 	bl	8000abc <__aeabi_uldivmod>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	460b      	mov	r3, r1
 8005aca:	4b2f      	ldr	r3, [pc, #188]	; (8005b88 <UART_SetConfig+0x38c>)
 8005acc:	fba3 1302 	umull	r1, r3, r3, r2
 8005ad0:	095b      	lsrs	r3, r3, #5
 8005ad2:	2164      	movs	r1, #100	; 0x64
 8005ad4:	fb01 f303 	mul.w	r3, r1, r3
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	011b      	lsls	r3, r3, #4
 8005adc:	3332      	adds	r3, #50	; 0x32
 8005ade:	4a2a      	ldr	r2, [pc, #168]	; (8005b88 <UART_SetConfig+0x38c>)
 8005ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae4:	095b      	lsrs	r3, r3, #5
 8005ae6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005aea:	441e      	add	r6, r3
 8005aec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005aee:	4618      	mov	r0, r3
 8005af0:	f04f 0100 	mov.w	r1, #0
 8005af4:	4602      	mov	r2, r0
 8005af6:	460b      	mov	r3, r1
 8005af8:	1894      	adds	r4, r2, r2
 8005afa:	603c      	str	r4, [r7, #0]
 8005afc:	415b      	adcs	r3, r3
 8005afe:	607b      	str	r3, [r7, #4]
 8005b00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b04:	1812      	adds	r2, r2, r0
 8005b06:	eb41 0303 	adc.w	r3, r1, r3
 8005b0a:	f04f 0400 	mov.w	r4, #0
 8005b0e:	f04f 0500 	mov.w	r5, #0
 8005b12:	00dd      	lsls	r5, r3, #3
 8005b14:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005b18:	00d4      	lsls	r4, r2, #3
 8005b1a:	4622      	mov	r2, r4
 8005b1c:	462b      	mov	r3, r5
 8005b1e:	eb12 0a00 	adds.w	sl, r2, r0
 8005b22:	eb43 0b01 	adc.w	fp, r3, r1
 8005b26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f04f 0100 	mov.w	r1, #0
 8005b30:	f04f 0200 	mov.w	r2, #0
 8005b34:	f04f 0300 	mov.w	r3, #0
 8005b38:	008b      	lsls	r3, r1, #2
 8005b3a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005b3e:	0082      	lsls	r2, r0, #2
 8005b40:	4650      	mov	r0, sl
 8005b42:	4659      	mov	r1, fp
 8005b44:	f7fa ffba 	bl	8000abc <__aeabi_uldivmod>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	460b      	mov	r3, r1
 8005b4c:	4b0e      	ldr	r3, [pc, #56]	; (8005b88 <UART_SetConfig+0x38c>)
 8005b4e:	fba3 1302 	umull	r1, r3, r3, r2
 8005b52:	095b      	lsrs	r3, r3, #5
 8005b54:	2164      	movs	r1, #100	; 0x64
 8005b56:	fb01 f303 	mul.w	r3, r1, r3
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	011b      	lsls	r3, r3, #4
 8005b5e:	3332      	adds	r3, #50	; 0x32
 8005b60:	4a09      	ldr	r2, [pc, #36]	; (8005b88 <UART_SetConfig+0x38c>)
 8005b62:	fba2 2303 	umull	r2, r3, r2, r3
 8005b66:	095b      	lsrs	r3, r3, #5
 8005b68:	f003 020f 	and.w	r2, r3, #15
 8005b6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4432      	add	r2, r6
 8005b72:	609a      	str	r2, [r3, #8]
}
 8005b74:	bf00      	nop
 8005b76:	377c      	adds	r7, #124	; 0x7c
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b7e:	bf00      	nop
 8005b80:	40011000 	.word	0x40011000
 8005b84:	40011400 	.word	0x40011400
 8005b88:	51eb851f 	.word	0x51eb851f

08005b8c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b8c:	b084      	sub	sp, #16
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	b084      	sub	sp, #16
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
 8005b96:	f107 001c 	add.w	r0, r7, #28
 8005b9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d122      	bne.n	8005bea <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005bb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005bcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d105      	bne.n	8005bde <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f001 fb1c 	bl	800721c <USB_CoreReset>
 8005be4:	4603      	mov	r3, r0
 8005be6:	73fb      	strb	r3, [r7, #15]
 8005be8:	e01a      	b.n	8005c20 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f001 fb10 	bl	800721c <USB_CoreReset>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005c00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d106      	bne.n	8005c14 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	639a      	str	r2, [r3, #56]	; 0x38
 8005c12:	e005      	b.n	8005c20 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c18:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d10b      	bne.n	8005c3e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	f043 0206 	orr.w	r2, r3, #6
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f043 0220 	orr.w	r2, r3, #32
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3710      	adds	r7, #16
 8005c44:	46bd      	mov	sp, r7
 8005c46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c4a:	b004      	add	sp, #16
 8005c4c:	4770      	bx	lr
	...

08005c50 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b087      	sub	sp, #28
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005c5e:	79fb      	ldrb	r3, [r7, #7]
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d165      	bne.n	8005d30 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	4a41      	ldr	r2, [pc, #260]	; (8005d6c <USB_SetTurnaroundTime+0x11c>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d906      	bls.n	8005c7a <USB_SetTurnaroundTime+0x2a>
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	4a40      	ldr	r2, [pc, #256]	; (8005d70 <USB_SetTurnaroundTime+0x120>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d202      	bcs.n	8005c7a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005c74:	230f      	movs	r3, #15
 8005c76:	617b      	str	r3, [r7, #20]
 8005c78:	e062      	b.n	8005d40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	4a3c      	ldr	r2, [pc, #240]	; (8005d70 <USB_SetTurnaroundTime+0x120>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d306      	bcc.n	8005c90 <USB_SetTurnaroundTime+0x40>
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	4a3b      	ldr	r2, [pc, #236]	; (8005d74 <USB_SetTurnaroundTime+0x124>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d202      	bcs.n	8005c90 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005c8a:	230e      	movs	r3, #14
 8005c8c:	617b      	str	r3, [r7, #20]
 8005c8e:	e057      	b.n	8005d40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	4a38      	ldr	r2, [pc, #224]	; (8005d74 <USB_SetTurnaroundTime+0x124>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d306      	bcc.n	8005ca6 <USB_SetTurnaroundTime+0x56>
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	4a37      	ldr	r2, [pc, #220]	; (8005d78 <USB_SetTurnaroundTime+0x128>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d202      	bcs.n	8005ca6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005ca0:	230d      	movs	r3, #13
 8005ca2:	617b      	str	r3, [r7, #20]
 8005ca4:	e04c      	b.n	8005d40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	4a33      	ldr	r2, [pc, #204]	; (8005d78 <USB_SetTurnaroundTime+0x128>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d306      	bcc.n	8005cbc <USB_SetTurnaroundTime+0x6c>
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	4a32      	ldr	r2, [pc, #200]	; (8005d7c <USB_SetTurnaroundTime+0x12c>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d802      	bhi.n	8005cbc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005cb6:	230c      	movs	r3, #12
 8005cb8:	617b      	str	r3, [r7, #20]
 8005cba:	e041      	b.n	8005d40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	4a2f      	ldr	r2, [pc, #188]	; (8005d7c <USB_SetTurnaroundTime+0x12c>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d906      	bls.n	8005cd2 <USB_SetTurnaroundTime+0x82>
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	4a2e      	ldr	r2, [pc, #184]	; (8005d80 <USB_SetTurnaroundTime+0x130>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d802      	bhi.n	8005cd2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005ccc:	230b      	movs	r3, #11
 8005cce:	617b      	str	r3, [r7, #20]
 8005cd0:	e036      	b.n	8005d40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	4a2a      	ldr	r2, [pc, #168]	; (8005d80 <USB_SetTurnaroundTime+0x130>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d906      	bls.n	8005ce8 <USB_SetTurnaroundTime+0x98>
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	4a29      	ldr	r2, [pc, #164]	; (8005d84 <USB_SetTurnaroundTime+0x134>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d802      	bhi.n	8005ce8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005ce2:	230a      	movs	r3, #10
 8005ce4:	617b      	str	r3, [r7, #20]
 8005ce6:	e02b      	b.n	8005d40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	4a26      	ldr	r2, [pc, #152]	; (8005d84 <USB_SetTurnaroundTime+0x134>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d906      	bls.n	8005cfe <USB_SetTurnaroundTime+0xae>
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	4a25      	ldr	r2, [pc, #148]	; (8005d88 <USB_SetTurnaroundTime+0x138>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d202      	bcs.n	8005cfe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005cf8:	2309      	movs	r3, #9
 8005cfa:	617b      	str	r3, [r7, #20]
 8005cfc:	e020      	b.n	8005d40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	4a21      	ldr	r2, [pc, #132]	; (8005d88 <USB_SetTurnaroundTime+0x138>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d306      	bcc.n	8005d14 <USB_SetTurnaroundTime+0xc4>
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	4a20      	ldr	r2, [pc, #128]	; (8005d8c <USB_SetTurnaroundTime+0x13c>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d802      	bhi.n	8005d14 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005d0e:	2308      	movs	r3, #8
 8005d10:	617b      	str	r3, [r7, #20]
 8005d12:	e015      	b.n	8005d40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	4a1d      	ldr	r2, [pc, #116]	; (8005d8c <USB_SetTurnaroundTime+0x13c>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d906      	bls.n	8005d2a <USB_SetTurnaroundTime+0xda>
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	4a1c      	ldr	r2, [pc, #112]	; (8005d90 <USB_SetTurnaroundTime+0x140>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d202      	bcs.n	8005d2a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005d24:	2307      	movs	r3, #7
 8005d26:	617b      	str	r3, [r7, #20]
 8005d28:	e00a      	b.n	8005d40 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005d2a:	2306      	movs	r3, #6
 8005d2c:	617b      	str	r3, [r7, #20]
 8005d2e:	e007      	b.n	8005d40 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005d30:	79fb      	ldrb	r3, [r7, #7]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d102      	bne.n	8005d3c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005d36:	2309      	movs	r3, #9
 8005d38:	617b      	str	r3, [r7, #20]
 8005d3a:	e001      	b.n	8005d40 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005d3c:	2309      	movs	r3, #9
 8005d3e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	68da      	ldr	r2, [r3, #12]
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	029b      	lsls	r3, r3, #10
 8005d54:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005d58:	431a      	orrs	r2, r3
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	371c      	adds	r7, #28
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr
 8005d6c:	00d8acbf 	.word	0x00d8acbf
 8005d70:	00e4e1c0 	.word	0x00e4e1c0
 8005d74:	00f42400 	.word	0x00f42400
 8005d78:	01067380 	.word	0x01067380
 8005d7c:	011a499f 	.word	0x011a499f
 8005d80:	01312cff 	.word	0x01312cff
 8005d84:	014ca43f 	.word	0x014ca43f
 8005d88:	016e3600 	.word	0x016e3600
 8005d8c:	01a6ab1f 	.word	0x01a6ab1f
 8005d90:	01e84800 	.word	0x01e84800

08005d94 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f043 0201 	orr.w	r2, r3, #1
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	370c      	adds	r7, #12
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005db6:	b480      	push	{r7}
 8005db8:	b083      	sub	sp, #12
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f023 0201 	bic.w	r2, r3, #1
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	460b      	mov	r3, r1
 8005de2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005de4:	2300      	movs	r3, #0
 8005de6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005df4:	78fb      	ldrb	r3, [r7, #3]
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d115      	bne.n	8005e26 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005e06:	2001      	movs	r0, #1
 8005e08:	f7fb fe90 	bl	8001b2c <HAL_Delay>
      ms++;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f001 f972 	bl	80070fc <USB_GetMode>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d01e      	beq.n	8005e5c <USB_SetCurrentMode+0x84>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2b31      	cmp	r3, #49	; 0x31
 8005e22:	d9f0      	bls.n	8005e06 <USB_SetCurrentMode+0x2e>
 8005e24:	e01a      	b.n	8005e5c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005e26:	78fb      	ldrb	r3, [r7, #3]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d115      	bne.n	8005e58 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005e38:	2001      	movs	r0, #1
 8005e3a:	f7fb fe77 	bl	8001b2c <HAL_Delay>
      ms++;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	3301      	adds	r3, #1
 8005e42:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f001 f959 	bl	80070fc <USB_GetMode>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d005      	beq.n	8005e5c <USB_SetCurrentMode+0x84>
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2b31      	cmp	r3, #49	; 0x31
 8005e54:	d9f0      	bls.n	8005e38 <USB_SetCurrentMode+0x60>
 8005e56:	e001      	b.n	8005e5c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e005      	b.n	8005e68 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2b32      	cmp	r3, #50	; 0x32
 8005e60:	d101      	bne.n	8005e66 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e000      	b.n	8005e68 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005e66:	2300      	movs	r3, #0
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3710      	adds	r7, #16
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e70:	b084      	sub	sp, #16
 8005e72:	b580      	push	{r7, lr}
 8005e74:	b086      	sub	sp, #24
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
 8005e7a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005e7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005e82:	2300      	movs	r3, #0
 8005e84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	613b      	str	r3, [r7, #16]
 8005e8e:	e009      	b.n	8005ea4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	3340      	adds	r3, #64	; 0x40
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	4413      	add	r3, r2
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	613b      	str	r3, [r7, #16]
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	2b0e      	cmp	r3, #14
 8005ea8:	d9f2      	bls.n	8005e90 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005eaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d11c      	bne.n	8005eea <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ebe:	f043 0302 	orr.w	r3, r3, #2
 8005ec2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	639a      	str	r2, [r3, #56]	; 0x38
 8005ee8:	e00b      	b.n	8005f02 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eee:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f08:	461a      	mov	r2, r3
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f14:	4619      	mov	r1, r3
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	680b      	ldr	r3, [r1, #0]
 8005f20:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d10c      	bne.n	8005f42 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d104      	bne.n	8005f38 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005f2e:	2100      	movs	r1, #0
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 f945 	bl	80061c0 <USB_SetDevSpeed>
 8005f36:	e008      	b.n	8005f4a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005f38:	2101      	movs	r1, #1
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 f940 	bl	80061c0 <USB_SetDevSpeed>
 8005f40:	e003      	b.n	8005f4a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005f42:	2103      	movs	r1, #3
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 f93b 	bl	80061c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005f4a:	2110      	movs	r1, #16
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 f8f3 	bl	8006138 <USB_FlushTxFifo>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d001      	beq.n	8005f5c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 f90f 	bl	8006180 <USB_FlushRxFifo>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d001      	beq.n	8005f6c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f72:	461a      	mov	r2, r3
 8005f74:	2300      	movs	r3, #0
 8005f76:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f7e:	461a      	mov	r2, r3
 8005f80:	2300      	movs	r3, #0
 8005f82:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f90:	2300      	movs	r3, #0
 8005f92:	613b      	str	r3, [r7, #16]
 8005f94:	e043      	b.n	800601e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	015a      	lsls	r2, r3, #5
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fa8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fac:	d118      	bne.n	8005fe0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d10a      	bne.n	8005fca <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	015a      	lsls	r2, r3, #5
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	4413      	add	r3, r2
 8005fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005fc6:	6013      	str	r3, [r2, #0]
 8005fc8:	e013      	b.n	8005ff2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	015a      	lsls	r2, r3, #5
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005fdc:	6013      	str	r3, [r2, #0]
 8005fde:	e008      	b.n	8005ff2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	015a      	lsls	r2, r3, #5
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fec:	461a      	mov	r2, r3
 8005fee:	2300      	movs	r3, #0
 8005ff0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	015a      	lsls	r2, r3, #5
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ffe:	461a      	mov	r2, r3
 8006000:	2300      	movs	r3, #0
 8006002:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	015a      	lsls	r2, r3, #5
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	4413      	add	r3, r2
 800600c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006010:	461a      	mov	r2, r3
 8006012:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006016:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	3301      	adds	r3, #1
 800601c:	613b      	str	r3, [r7, #16]
 800601e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006020:	693a      	ldr	r2, [r7, #16]
 8006022:	429a      	cmp	r2, r3
 8006024:	d3b7      	bcc.n	8005f96 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006026:	2300      	movs	r3, #0
 8006028:	613b      	str	r3, [r7, #16]
 800602a:	e043      	b.n	80060b4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	015a      	lsls	r2, r3, #5
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	4413      	add	r3, r2
 8006034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800603e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006042:	d118      	bne.n	8006076 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d10a      	bne.n	8006060 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	015a      	lsls	r2, r3, #5
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	4413      	add	r3, r2
 8006052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006056:	461a      	mov	r2, r3
 8006058:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800605c:	6013      	str	r3, [r2, #0]
 800605e:	e013      	b.n	8006088 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	015a      	lsls	r2, r3, #5
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	4413      	add	r3, r2
 8006068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800606c:	461a      	mov	r2, r3
 800606e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006072:	6013      	str	r3, [r2, #0]
 8006074:	e008      	b.n	8006088 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	015a      	lsls	r2, r3, #5
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	4413      	add	r3, r2
 800607e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006082:	461a      	mov	r2, r3
 8006084:	2300      	movs	r3, #0
 8006086:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	015a      	lsls	r2, r3, #5
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	4413      	add	r3, r2
 8006090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006094:	461a      	mov	r2, r3
 8006096:	2300      	movs	r3, #0
 8006098:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	015a      	lsls	r2, r3, #5
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	4413      	add	r3, r2
 80060a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a6:	461a      	mov	r2, r3
 80060a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80060ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	3301      	adds	r3, #1
 80060b2:	613b      	str	r3, [r7, #16]
 80060b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b6:	693a      	ldr	r2, [r7, #16]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d3b7      	bcc.n	800602c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060c2:	691b      	ldr	r3, [r3, #16]
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060ce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80060dc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80060de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d105      	bne.n	80060f0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	699b      	ldr	r3, [r3, #24]
 80060e8:	f043 0210 	orr.w	r2, r3, #16
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	699a      	ldr	r2, [r3, #24]
 80060f4:	4b0f      	ldr	r3, [pc, #60]	; (8006134 <USB_DevInit+0x2c4>)
 80060f6:	4313      	orrs	r3, r2
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80060fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d005      	beq.n	800610e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	f043 0208 	orr.w	r2, r3, #8
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800610e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006110:	2b01      	cmp	r3, #1
 8006112:	d107      	bne.n	8006124 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	699b      	ldr	r3, [r3, #24]
 8006118:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800611c:	f043 0304 	orr.w	r3, r3, #4
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006124:	7dfb      	ldrb	r3, [r7, #23]
}
 8006126:	4618      	mov	r0, r3
 8006128:	3718      	adds	r7, #24
 800612a:	46bd      	mov	sp, r7
 800612c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006130:	b004      	add	sp, #16
 8006132:	4770      	bx	lr
 8006134:	803c3800 	.word	0x803c3800

08006138 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006142:	2300      	movs	r3, #0
 8006144:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	019b      	lsls	r3, r3, #6
 800614a:	f043 0220 	orr.w	r2, r3, #32
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	3301      	adds	r3, #1
 8006156:	60fb      	str	r3, [r7, #12]
 8006158:	4a08      	ldr	r2, [pc, #32]	; (800617c <USB_FlushTxFifo+0x44>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d901      	bls.n	8006162 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800615e:	2303      	movs	r3, #3
 8006160:	e006      	b.n	8006170 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	f003 0320 	and.w	r3, r3, #32
 800616a:	2b20      	cmp	r3, #32
 800616c:	d0f1      	beq.n	8006152 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	3714      	adds	r7, #20
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr
 800617c:	00030d40 	.word	0x00030d40

08006180 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006180:	b480      	push	{r7}
 8006182:	b085      	sub	sp, #20
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006188:	2300      	movs	r3, #0
 800618a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2210      	movs	r2, #16
 8006190:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	3301      	adds	r3, #1
 8006196:	60fb      	str	r3, [r7, #12]
 8006198:	4a08      	ldr	r2, [pc, #32]	; (80061bc <USB_FlushRxFifo+0x3c>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d901      	bls.n	80061a2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e006      	b.n	80061b0 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	f003 0310 	and.w	r3, r3, #16
 80061aa:	2b10      	cmp	r3, #16
 80061ac:	d0f1      	beq.n	8006192 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3714      	adds	r7, #20
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr
 80061bc:	00030d40 	.word	0x00030d40

080061c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b085      	sub	sp, #20
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	460b      	mov	r3, r1
 80061ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	78fb      	ldrb	r3, [r7, #3]
 80061da:	68f9      	ldr	r1, [r7, #12]
 80061dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061e0:	4313      	orrs	r3, r2
 80061e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3714      	adds	r7, #20
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr

080061f2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80061f2:	b480      	push	{r7}
 80061f4:	b087      	sub	sp, #28
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	f003 0306 	and.w	r3, r3, #6
 800620a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d102      	bne.n	8006218 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006212:	2300      	movs	r3, #0
 8006214:	75fb      	strb	r3, [r7, #23]
 8006216:	e00a      	b.n	800622e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2b02      	cmp	r3, #2
 800621c:	d002      	beq.n	8006224 <USB_GetDevSpeed+0x32>
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2b06      	cmp	r3, #6
 8006222:	d102      	bne.n	800622a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006224:	2302      	movs	r3, #2
 8006226:	75fb      	strb	r3, [r7, #23]
 8006228:	e001      	b.n	800622e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800622a:	230f      	movs	r3, #15
 800622c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800622e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006230:	4618      	mov	r0, r3
 8006232:	371c      	adds	r7, #28
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800623c:	b480      	push	{r7}
 800623e:	b085      	sub	sp, #20
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	785b      	ldrb	r3, [r3, #1]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d13a      	bne.n	80062ce <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800625e:	69da      	ldr	r2, [r3, #28]
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	f003 030f 	and.w	r3, r3, #15
 8006268:	2101      	movs	r1, #1
 800626a:	fa01 f303 	lsl.w	r3, r1, r3
 800626e:	b29b      	uxth	r3, r3
 8006270:	68f9      	ldr	r1, [r7, #12]
 8006272:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006276:	4313      	orrs	r3, r2
 8006278:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	015a      	lsls	r2, r3, #5
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	4413      	add	r3, r2
 8006282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800628c:	2b00      	cmp	r3, #0
 800628e:	d155      	bne.n	800633c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	015a      	lsls	r2, r3, #5
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	4413      	add	r3, r2
 8006298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	78db      	ldrb	r3, [r3, #3]
 80062aa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80062ac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	059b      	lsls	r3, r3, #22
 80062b2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80062b4:	4313      	orrs	r3, r2
 80062b6:	68ba      	ldr	r2, [r7, #8]
 80062b8:	0151      	lsls	r1, r2, #5
 80062ba:	68fa      	ldr	r2, [r7, #12]
 80062bc:	440a      	add	r2, r1
 80062be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062ca:	6013      	str	r3, [r2, #0]
 80062cc:	e036      	b.n	800633c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062d4:	69da      	ldr	r2, [r3, #28]
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	f003 030f 	and.w	r3, r3, #15
 80062de:	2101      	movs	r1, #1
 80062e0:	fa01 f303 	lsl.w	r3, r1, r3
 80062e4:	041b      	lsls	r3, r3, #16
 80062e6:	68f9      	ldr	r1, [r7, #12]
 80062e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062ec:	4313      	orrs	r3, r2
 80062ee:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	015a      	lsls	r2, r3, #5
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	4413      	add	r3, r2
 80062f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006302:	2b00      	cmp	r3, #0
 8006304:	d11a      	bne.n	800633c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	015a      	lsls	r2, r3, #5
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	4413      	add	r3, r2
 800630e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	78db      	ldrb	r3, [r3, #3]
 8006320:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006322:	430b      	orrs	r3, r1
 8006324:	4313      	orrs	r3, r2
 8006326:	68ba      	ldr	r2, [r7, #8]
 8006328:	0151      	lsls	r1, r2, #5
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	440a      	add	r2, r1
 800632e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006332:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006336:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800633a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	3714      	adds	r7, #20
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr
	...

0800634c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800634c:	b480      	push	{r7}
 800634e:	b085      	sub	sp, #20
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	785b      	ldrb	r3, [r3, #1]
 8006364:	2b01      	cmp	r3, #1
 8006366:	d161      	bne.n	800642c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	015a      	lsls	r2, r3, #5
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	4413      	add	r3, r2
 8006370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800637a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800637e:	d11f      	bne.n	80063c0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	015a      	lsls	r2, r3, #5
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	4413      	add	r3, r2
 8006388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	68ba      	ldr	r2, [r7, #8]
 8006390:	0151      	lsls	r1, r2, #5
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	440a      	add	r2, r1
 8006396:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800639a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800639e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	015a      	lsls	r2, r3, #5
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	4413      	add	r3, r2
 80063a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68ba      	ldr	r2, [r7, #8]
 80063b0:	0151      	lsls	r1, r2, #5
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	440a      	add	r2, r1
 80063b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	f003 030f 	and.w	r3, r3, #15
 80063d0:	2101      	movs	r1, #1
 80063d2:	fa01 f303 	lsl.w	r3, r1, r3
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	43db      	mvns	r3, r3
 80063da:	68f9      	ldr	r1, [r7, #12]
 80063dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063e0:	4013      	ands	r3, r2
 80063e2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ea:	69da      	ldr	r2, [r3, #28]
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	f003 030f 	and.w	r3, r3, #15
 80063f4:	2101      	movs	r1, #1
 80063f6:	fa01 f303 	lsl.w	r3, r1, r3
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	43db      	mvns	r3, r3
 80063fe:	68f9      	ldr	r1, [r7, #12]
 8006400:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006404:	4013      	ands	r3, r2
 8006406:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	015a      	lsls	r2, r3, #5
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	4413      	add	r3, r2
 8006410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	0159      	lsls	r1, r3, #5
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	440b      	add	r3, r1
 800641e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006422:	4619      	mov	r1, r3
 8006424:	4b35      	ldr	r3, [pc, #212]	; (80064fc <USB_DeactivateEndpoint+0x1b0>)
 8006426:	4013      	ands	r3, r2
 8006428:	600b      	str	r3, [r1, #0]
 800642a:	e060      	b.n	80064ee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	015a      	lsls	r2, r3, #5
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	4413      	add	r3, r2
 8006434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800643e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006442:	d11f      	bne.n	8006484 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	015a      	lsls	r2, r3, #5
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	4413      	add	r3, r2
 800644c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	68ba      	ldr	r2, [r7, #8]
 8006454:	0151      	lsls	r1, r2, #5
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	440a      	add	r2, r1
 800645a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800645e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006462:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	015a      	lsls	r2, r3, #5
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	4413      	add	r3, r2
 800646c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68ba      	ldr	r2, [r7, #8]
 8006474:	0151      	lsls	r1, r2, #5
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	440a      	add	r2, r1
 800647a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800647e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006482:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800648a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	f003 030f 	and.w	r3, r3, #15
 8006494:	2101      	movs	r1, #1
 8006496:	fa01 f303 	lsl.w	r3, r1, r3
 800649a:	041b      	lsls	r3, r3, #16
 800649c:	43db      	mvns	r3, r3
 800649e:	68f9      	ldr	r1, [r7, #12]
 80064a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064a4:	4013      	ands	r3, r2
 80064a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ae:	69da      	ldr	r2, [r3, #28]
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	f003 030f 	and.w	r3, r3, #15
 80064b8:	2101      	movs	r1, #1
 80064ba:	fa01 f303 	lsl.w	r3, r1, r3
 80064be:	041b      	lsls	r3, r3, #16
 80064c0:	43db      	mvns	r3, r3
 80064c2:	68f9      	ldr	r1, [r7, #12]
 80064c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064c8:	4013      	ands	r3, r2
 80064ca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	015a      	lsls	r2, r3, #5
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	4413      	add	r3, r2
 80064d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	0159      	lsls	r1, r3, #5
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	440b      	add	r3, r1
 80064e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064e6:	4619      	mov	r1, r3
 80064e8:	4b05      	ldr	r3, [pc, #20]	; (8006500 <USB_DeactivateEndpoint+0x1b4>)
 80064ea:	4013      	ands	r3, r2
 80064ec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80064ee:	2300      	movs	r3, #0
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3714      	adds	r7, #20
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr
 80064fc:	ec337800 	.word	0xec337800
 8006500:	eff37800 	.word	0xeff37800

08006504 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b08a      	sub	sp, #40	; 0x28
 8006508:	af02      	add	r7, sp, #8
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	4613      	mov	r3, r2
 8006510:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	785b      	ldrb	r3, [r3, #1]
 8006520:	2b01      	cmp	r3, #1
 8006522:	f040 815c 	bne.w	80067de <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	695b      	ldr	r3, [r3, #20]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d132      	bne.n	8006594 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	015a      	lsls	r2, r3, #5
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	4413      	add	r3, r2
 8006536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	69ba      	ldr	r2, [r7, #24]
 800653e:	0151      	lsls	r1, r2, #5
 8006540:	69fa      	ldr	r2, [r7, #28]
 8006542:	440a      	add	r2, r1
 8006544:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006548:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800654c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006550:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	015a      	lsls	r2, r3, #5
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	4413      	add	r3, r2
 800655a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	69ba      	ldr	r2, [r7, #24]
 8006562:	0151      	lsls	r1, r2, #5
 8006564:	69fa      	ldr	r2, [r7, #28]
 8006566:	440a      	add	r2, r1
 8006568:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800656c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006570:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	015a      	lsls	r2, r3, #5
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	4413      	add	r3, r2
 800657a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	69ba      	ldr	r2, [r7, #24]
 8006582:	0151      	lsls	r1, r2, #5
 8006584:	69fa      	ldr	r2, [r7, #28]
 8006586:	440a      	add	r2, r1
 8006588:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800658c:	0cdb      	lsrs	r3, r3, #19
 800658e:	04db      	lsls	r3, r3, #19
 8006590:	6113      	str	r3, [r2, #16]
 8006592:	e074      	b.n	800667e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	015a      	lsls	r2, r3, #5
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	4413      	add	r3, r2
 800659c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	69ba      	ldr	r2, [r7, #24]
 80065a4:	0151      	lsls	r1, r2, #5
 80065a6:	69fa      	ldr	r2, [r7, #28]
 80065a8:	440a      	add	r2, r1
 80065aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065ae:	0cdb      	lsrs	r3, r3, #19
 80065b0:	04db      	lsls	r3, r3, #19
 80065b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	015a      	lsls	r2, r3, #5
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	4413      	add	r3, r2
 80065bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	69ba      	ldr	r2, [r7, #24]
 80065c4:	0151      	lsls	r1, r2, #5
 80065c6:	69fa      	ldr	r2, [r7, #28]
 80065c8:	440a      	add	r2, r1
 80065ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065ce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80065d2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80065d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	015a      	lsls	r2, r3, #5
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	4413      	add	r3, r2
 80065e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065e4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	6959      	ldr	r1, [r3, #20]
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	440b      	add	r3, r1
 80065f0:	1e59      	subs	r1, r3, #1
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80065fa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80065fc:	4b9d      	ldr	r3, [pc, #628]	; (8006874 <USB_EPStartXfer+0x370>)
 80065fe:	400b      	ands	r3, r1
 8006600:	69b9      	ldr	r1, [r7, #24]
 8006602:	0148      	lsls	r0, r1, #5
 8006604:	69f9      	ldr	r1, [r7, #28]
 8006606:	4401      	add	r1, r0
 8006608:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800660c:	4313      	orrs	r3, r2
 800660e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	015a      	lsls	r2, r3, #5
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	4413      	add	r3, r2
 8006618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800661c:	691a      	ldr	r2, [r3, #16]
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	695b      	ldr	r3, [r3, #20]
 8006622:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006626:	69b9      	ldr	r1, [r7, #24]
 8006628:	0148      	lsls	r0, r1, #5
 800662a:	69f9      	ldr	r1, [r7, #28]
 800662c:	4401      	add	r1, r0
 800662e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006632:	4313      	orrs	r3, r2
 8006634:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	78db      	ldrb	r3, [r3, #3]
 800663a:	2b01      	cmp	r3, #1
 800663c:	d11f      	bne.n	800667e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	015a      	lsls	r2, r3, #5
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	4413      	add	r3, r2
 8006646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800664a:	691b      	ldr	r3, [r3, #16]
 800664c:	69ba      	ldr	r2, [r7, #24]
 800664e:	0151      	lsls	r1, r2, #5
 8006650:	69fa      	ldr	r2, [r7, #28]
 8006652:	440a      	add	r2, r1
 8006654:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006658:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800665c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	015a      	lsls	r2, r3, #5
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	4413      	add	r3, r2
 8006666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	69ba      	ldr	r2, [r7, #24]
 800666e:	0151      	lsls	r1, r2, #5
 8006670:	69fa      	ldr	r2, [r7, #28]
 8006672:	440a      	add	r2, r1
 8006674:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006678:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800667c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800667e:	79fb      	ldrb	r3, [r7, #7]
 8006680:	2b01      	cmp	r3, #1
 8006682:	d14b      	bne.n	800671c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	691b      	ldr	r3, [r3, #16]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d009      	beq.n	80066a0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800668c:	69bb      	ldr	r3, [r7, #24]
 800668e:	015a      	lsls	r2, r3, #5
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	4413      	add	r3, r2
 8006694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006698:	461a      	mov	r2, r3
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	78db      	ldrb	r3, [r3, #3]
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d128      	bne.n	80066fa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d110      	bne.n	80066da <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	015a      	lsls	r2, r3, #5
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	4413      	add	r3, r2
 80066c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	69ba      	ldr	r2, [r7, #24]
 80066c8:	0151      	lsls	r1, r2, #5
 80066ca:	69fa      	ldr	r2, [r7, #28]
 80066cc:	440a      	add	r2, r1
 80066ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80066d6:	6013      	str	r3, [r2, #0]
 80066d8:	e00f      	b.n	80066fa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	015a      	lsls	r2, r3, #5
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	4413      	add	r3, r2
 80066e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	69ba      	ldr	r2, [r7, #24]
 80066ea:	0151      	lsls	r1, r2, #5
 80066ec:	69fa      	ldr	r2, [r7, #28]
 80066ee:	440a      	add	r2, r1
 80066f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066f8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	015a      	lsls	r2, r3, #5
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	4413      	add	r3, r2
 8006702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	69ba      	ldr	r2, [r7, #24]
 800670a:	0151      	lsls	r1, r2, #5
 800670c:	69fa      	ldr	r2, [r7, #28]
 800670e:	440a      	add	r2, r1
 8006710:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006714:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006718:	6013      	str	r3, [r2, #0]
 800671a:	e12f      	b.n	800697c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	015a      	lsls	r2, r3, #5
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	4413      	add	r3, r2
 8006724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	69ba      	ldr	r2, [r7, #24]
 800672c:	0151      	lsls	r1, r2, #5
 800672e:	69fa      	ldr	r2, [r7, #28]
 8006730:	440a      	add	r2, r1
 8006732:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006736:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800673a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	78db      	ldrb	r3, [r3, #3]
 8006740:	2b01      	cmp	r3, #1
 8006742:	d015      	beq.n	8006770 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	695b      	ldr	r3, [r3, #20]
 8006748:	2b00      	cmp	r3, #0
 800674a:	f000 8117 	beq.w	800697c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006754:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	f003 030f 	and.w	r3, r3, #15
 800675e:	2101      	movs	r1, #1
 8006760:	fa01 f303 	lsl.w	r3, r1, r3
 8006764:	69f9      	ldr	r1, [r7, #28]
 8006766:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800676a:	4313      	orrs	r3, r2
 800676c:	634b      	str	r3, [r1, #52]	; 0x34
 800676e:	e105      	b.n	800697c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800677c:	2b00      	cmp	r3, #0
 800677e:	d110      	bne.n	80067a2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	015a      	lsls	r2, r3, #5
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	4413      	add	r3, r2
 8006788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	69ba      	ldr	r2, [r7, #24]
 8006790:	0151      	lsls	r1, r2, #5
 8006792:	69fa      	ldr	r2, [r7, #28]
 8006794:	440a      	add	r2, r1
 8006796:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800679a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800679e:	6013      	str	r3, [r2, #0]
 80067a0:	e00f      	b.n	80067c2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	015a      	lsls	r2, r3, #5
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	4413      	add	r3, r2
 80067aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	69ba      	ldr	r2, [r7, #24]
 80067b2:	0151      	lsls	r1, r2, #5
 80067b4:	69fa      	ldr	r2, [r7, #28]
 80067b6:	440a      	add	r2, r1
 80067b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067c0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	68d9      	ldr	r1, [r3, #12]
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	781a      	ldrb	r2, [r3, #0]
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	b298      	uxth	r0, r3
 80067d0:	79fb      	ldrb	r3, [r7, #7]
 80067d2:	9300      	str	r3, [sp, #0]
 80067d4:	4603      	mov	r3, r0
 80067d6:	68f8      	ldr	r0, [r7, #12]
 80067d8:	f000 fa2b 	bl	8006c32 <USB_WritePacket>
 80067dc:	e0ce      	b.n	800697c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	015a      	lsls	r2, r3, #5
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	4413      	add	r3, r2
 80067e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	69ba      	ldr	r2, [r7, #24]
 80067ee:	0151      	lsls	r1, r2, #5
 80067f0:	69fa      	ldr	r2, [r7, #28]
 80067f2:	440a      	add	r2, r1
 80067f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067f8:	0cdb      	lsrs	r3, r3, #19
 80067fa:	04db      	lsls	r3, r3, #19
 80067fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	015a      	lsls	r2, r3, #5
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	4413      	add	r3, r2
 8006806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	69ba      	ldr	r2, [r7, #24]
 800680e:	0151      	lsls	r1, r2, #5
 8006810:	69fa      	ldr	r2, [r7, #28]
 8006812:	440a      	add	r2, r1
 8006814:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006818:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800681c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006820:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	695b      	ldr	r3, [r3, #20]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d126      	bne.n	8006878 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	015a      	lsls	r2, r3, #5
 800682e:	69fb      	ldr	r3, [r7, #28]
 8006830:	4413      	add	r3, r2
 8006832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006836:	691a      	ldr	r2, [r3, #16]
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006840:	69b9      	ldr	r1, [r7, #24]
 8006842:	0148      	lsls	r0, r1, #5
 8006844:	69f9      	ldr	r1, [r7, #28]
 8006846:	4401      	add	r1, r0
 8006848:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800684c:	4313      	orrs	r3, r2
 800684e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006850:	69bb      	ldr	r3, [r7, #24]
 8006852:	015a      	lsls	r2, r3, #5
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	4413      	add	r3, r2
 8006858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	69ba      	ldr	r2, [r7, #24]
 8006860:	0151      	lsls	r1, r2, #5
 8006862:	69fa      	ldr	r2, [r7, #28]
 8006864:	440a      	add	r2, r1
 8006866:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800686a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800686e:	6113      	str	r3, [r2, #16]
 8006870:	e036      	b.n	80068e0 <USB_EPStartXfer+0x3dc>
 8006872:	bf00      	nop
 8006874:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	695a      	ldr	r2, [r3, #20]
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	4413      	add	r3, r2
 8006882:	1e5a      	subs	r2, r3, #1
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	fbb2 f3f3 	udiv	r3, r2, r3
 800688c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	015a      	lsls	r2, r3, #5
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	4413      	add	r3, r2
 8006896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800689a:	691a      	ldr	r2, [r3, #16]
 800689c:	8afb      	ldrh	r3, [r7, #22]
 800689e:	04d9      	lsls	r1, r3, #19
 80068a0:	4b39      	ldr	r3, [pc, #228]	; (8006988 <USB_EPStartXfer+0x484>)
 80068a2:	400b      	ands	r3, r1
 80068a4:	69b9      	ldr	r1, [r7, #24]
 80068a6:	0148      	lsls	r0, r1, #5
 80068a8:	69f9      	ldr	r1, [r7, #28]
 80068aa:	4401      	add	r1, r0
 80068ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80068b0:	4313      	orrs	r3, r2
 80068b2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	015a      	lsls	r2, r3, #5
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	4413      	add	r3, r2
 80068bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068c0:	691a      	ldr	r2, [r3, #16]
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	8af9      	ldrh	r1, [r7, #22]
 80068c8:	fb01 f303 	mul.w	r3, r1, r3
 80068cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068d0:	69b9      	ldr	r1, [r7, #24]
 80068d2:	0148      	lsls	r0, r1, #5
 80068d4:	69f9      	ldr	r1, [r7, #28]
 80068d6:	4401      	add	r1, r0
 80068d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80068dc:	4313      	orrs	r3, r2
 80068de:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80068e0:	79fb      	ldrb	r3, [r7, #7]
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d10d      	bne.n	8006902 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d009      	beq.n	8006902 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	68d9      	ldr	r1, [r3, #12]
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	015a      	lsls	r2, r3, #5
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	4413      	add	r3, r2
 80068fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068fe:	460a      	mov	r2, r1
 8006900:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	78db      	ldrb	r3, [r3, #3]
 8006906:	2b01      	cmp	r3, #1
 8006908:	d128      	bne.n	800695c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006916:	2b00      	cmp	r3, #0
 8006918:	d110      	bne.n	800693c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	015a      	lsls	r2, r3, #5
 800691e:	69fb      	ldr	r3, [r7, #28]
 8006920:	4413      	add	r3, r2
 8006922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	69ba      	ldr	r2, [r7, #24]
 800692a:	0151      	lsls	r1, r2, #5
 800692c:	69fa      	ldr	r2, [r7, #28]
 800692e:	440a      	add	r2, r1
 8006930:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006934:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006938:	6013      	str	r3, [r2, #0]
 800693a:	e00f      	b.n	800695c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	015a      	lsls	r2, r3, #5
 8006940:	69fb      	ldr	r3, [r7, #28]
 8006942:	4413      	add	r3, r2
 8006944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	69ba      	ldr	r2, [r7, #24]
 800694c:	0151      	lsls	r1, r2, #5
 800694e:	69fa      	ldr	r2, [r7, #28]
 8006950:	440a      	add	r2, r1
 8006952:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800695a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	015a      	lsls	r2, r3, #5
 8006960:	69fb      	ldr	r3, [r7, #28]
 8006962:	4413      	add	r3, r2
 8006964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	69ba      	ldr	r2, [r7, #24]
 800696c:	0151      	lsls	r1, r2, #5
 800696e:	69fa      	ldr	r2, [r7, #28]
 8006970:	440a      	add	r2, r1
 8006972:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006976:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800697a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3720      	adds	r7, #32
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	1ff80000 	.word	0x1ff80000

0800698c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800698c:	b480      	push	{r7}
 800698e:	b087      	sub	sp, #28
 8006990:	af00      	add	r7, sp, #0
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	4613      	mov	r3, r2
 8006998:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	785b      	ldrb	r3, [r3, #1]
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	f040 80cd 	bne.w	8006b48 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	695b      	ldr	r3, [r3, #20]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d132      	bne.n	8006a1c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	015a      	lsls	r2, r3, #5
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	4413      	add	r3, r2
 80069be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	693a      	ldr	r2, [r7, #16]
 80069c6:	0151      	lsls	r1, r2, #5
 80069c8:	697a      	ldr	r2, [r7, #20]
 80069ca:	440a      	add	r2, r1
 80069cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80069d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80069d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	015a      	lsls	r2, r3, #5
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	4413      	add	r3, r2
 80069e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	693a      	ldr	r2, [r7, #16]
 80069ea:	0151      	lsls	r1, r2, #5
 80069ec:	697a      	ldr	r2, [r7, #20]
 80069ee:	440a      	add	r2, r1
 80069f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	015a      	lsls	r2, r3, #5
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	4413      	add	r3, r2
 8006a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	693a      	ldr	r2, [r7, #16]
 8006a0a:	0151      	lsls	r1, r2, #5
 8006a0c:	697a      	ldr	r2, [r7, #20]
 8006a0e:	440a      	add	r2, r1
 8006a10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a14:	0cdb      	lsrs	r3, r3, #19
 8006a16:	04db      	lsls	r3, r3, #19
 8006a18:	6113      	str	r3, [r2, #16]
 8006a1a:	e04e      	b.n	8006aba <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	015a      	lsls	r2, r3, #5
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	4413      	add	r3, r2
 8006a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	693a      	ldr	r2, [r7, #16]
 8006a2c:	0151      	lsls	r1, r2, #5
 8006a2e:	697a      	ldr	r2, [r7, #20]
 8006a30:	440a      	add	r2, r1
 8006a32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a36:	0cdb      	lsrs	r3, r3, #19
 8006a38:	04db      	lsls	r3, r3, #19
 8006a3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	015a      	lsls	r2, r3, #5
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	4413      	add	r3, r2
 8006a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	693a      	ldr	r2, [r7, #16]
 8006a4c:	0151      	lsls	r1, r2, #5
 8006a4e:	697a      	ldr	r2, [r7, #20]
 8006a50:	440a      	add	r2, r1
 8006a52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a56:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006a5a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006a5e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	695a      	ldr	r2, [r3, #20]
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d903      	bls.n	8006a74 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	689a      	ldr	r2, [r3, #8]
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	015a      	lsls	r2, r3, #5
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	693a      	ldr	r2, [r7, #16]
 8006a84:	0151      	lsls	r1, r2, #5
 8006a86:	697a      	ldr	r2, [r7, #20]
 8006a88:	440a      	add	r2, r1
 8006a8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	015a      	lsls	r2, r3, #5
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	4413      	add	r3, r2
 8006a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aa0:	691a      	ldr	r2, [r3, #16]
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	695b      	ldr	r3, [r3, #20]
 8006aa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006aaa:	6939      	ldr	r1, [r7, #16]
 8006aac:	0148      	lsls	r0, r1, #5
 8006aae:	6979      	ldr	r1, [r7, #20]
 8006ab0:	4401      	add	r1, r0
 8006ab2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006aba:	79fb      	ldrb	r3, [r7, #7]
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d11e      	bne.n	8006afe <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	691b      	ldr	r3, [r3, #16]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d009      	beq.n	8006adc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	015a      	lsls	r2, r3, #5
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	4413      	add	r3, r2
 8006ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	015a      	lsls	r2, r3, #5
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	693a      	ldr	r2, [r7, #16]
 8006aec:	0151      	lsls	r1, r2, #5
 8006aee:	697a      	ldr	r2, [r7, #20]
 8006af0:	440a      	add	r2, r1
 8006af2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006af6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006afa:	6013      	str	r3, [r2, #0]
 8006afc:	e092      	b.n	8006c24 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	015a      	lsls	r2, r3, #5
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	4413      	add	r3, r2
 8006b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	693a      	ldr	r2, [r7, #16]
 8006b0e:	0151      	lsls	r1, r2, #5
 8006b10:	697a      	ldr	r2, [r7, #20]
 8006b12:	440a      	add	r2, r1
 8006b14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b18:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006b1c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	695b      	ldr	r3, [r3, #20]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d07e      	beq.n	8006c24 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	f003 030f 	and.w	r3, r3, #15
 8006b36:	2101      	movs	r1, #1
 8006b38:	fa01 f303 	lsl.w	r3, r1, r3
 8006b3c:	6979      	ldr	r1, [r7, #20]
 8006b3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b42:	4313      	orrs	r3, r2
 8006b44:	634b      	str	r3, [r1, #52]	; 0x34
 8006b46:	e06d      	b.n	8006c24 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	015a      	lsls	r2, r3, #5
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	4413      	add	r3, r2
 8006b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	693a      	ldr	r2, [r7, #16]
 8006b58:	0151      	lsls	r1, r2, #5
 8006b5a:	697a      	ldr	r2, [r7, #20]
 8006b5c:	440a      	add	r2, r1
 8006b5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b62:	0cdb      	lsrs	r3, r3, #19
 8006b64:	04db      	lsls	r3, r3, #19
 8006b66:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	015a      	lsls	r2, r3, #5
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	4413      	add	r3, r2
 8006b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	693a      	ldr	r2, [r7, #16]
 8006b78:	0151      	lsls	r1, r2, #5
 8006b7a:	697a      	ldr	r2, [r7, #20]
 8006b7c:	440a      	add	r2, r1
 8006b7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b82:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b86:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b8a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	695b      	ldr	r3, [r3, #20]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d003      	beq.n	8006b9c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	689a      	ldr	r2, [r3, #8]
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	015a      	lsls	r2, r3, #5
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	693a      	ldr	r2, [r7, #16]
 8006bac:	0151      	lsls	r1, r2, #5
 8006bae:	697a      	ldr	r2, [r7, #20]
 8006bb0:	440a      	add	r2, r1
 8006bb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bb6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006bba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	015a      	lsls	r2, r3, #5
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	4413      	add	r3, r2
 8006bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bc8:	691a      	ldr	r2, [r3, #16]
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bd2:	6939      	ldr	r1, [r7, #16]
 8006bd4:	0148      	lsls	r0, r1, #5
 8006bd6:	6979      	ldr	r1, [r7, #20]
 8006bd8:	4401      	add	r1, r0
 8006bda:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006bde:	4313      	orrs	r3, r2
 8006be0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006be2:	79fb      	ldrb	r3, [r7, #7]
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d10d      	bne.n	8006c04 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d009      	beq.n	8006c04 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	68d9      	ldr	r1, [r3, #12]
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	015a      	lsls	r2, r3, #5
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c00:	460a      	mov	r2, r1
 8006c02:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	015a      	lsls	r2, r3, #5
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	693a      	ldr	r2, [r7, #16]
 8006c14:	0151      	lsls	r1, r2, #5
 8006c16:	697a      	ldr	r2, [r7, #20]
 8006c18:	440a      	add	r2, r1
 8006c1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	371c      	adds	r7, #28
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr

08006c32 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006c32:	b480      	push	{r7}
 8006c34:	b089      	sub	sp, #36	; 0x24
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	60f8      	str	r0, [r7, #12]
 8006c3a:	60b9      	str	r1, [r7, #8]
 8006c3c:	4611      	mov	r1, r2
 8006c3e:	461a      	mov	r2, r3
 8006c40:	460b      	mov	r3, r1
 8006c42:	71fb      	strb	r3, [r7, #7]
 8006c44:	4613      	mov	r3, r2
 8006c46:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006c50:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d123      	bne.n	8006ca0 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006c58:	88bb      	ldrh	r3, [r7, #4]
 8006c5a:	3303      	adds	r3, #3
 8006c5c:	089b      	lsrs	r3, r3, #2
 8006c5e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006c60:	2300      	movs	r3, #0
 8006c62:	61bb      	str	r3, [r7, #24]
 8006c64:	e018      	b.n	8006c98 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006c66:	79fb      	ldrb	r3, [r7, #7]
 8006c68:	031a      	lsls	r2, r3, #12
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c72:	461a      	mov	r2, r3
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	3301      	adds	r3, #1
 8006c84:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	3301      	adds	r3, #1
 8006c90:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	3301      	adds	r3, #1
 8006c96:	61bb      	str	r3, [r7, #24]
 8006c98:	69ba      	ldr	r2, [r7, #24]
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d3e2      	bcc.n	8006c66 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3724      	adds	r7, #36	; 0x24
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr

08006cae <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006cae:	b480      	push	{r7}
 8006cb0:	b08b      	sub	sp, #44	; 0x2c
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	60f8      	str	r0, [r7, #12]
 8006cb6:	60b9      	str	r1, [r7, #8]
 8006cb8:	4613      	mov	r3, r2
 8006cba:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006cc4:	88fb      	ldrh	r3, [r7, #6]
 8006cc6:	089b      	lsrs	r3, r3, #2
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006ccc:	88fb      	ldrh	r3, [r7, #6]
 8006cce:	f003 0303 	and.w	r3, r3, #3
 8006cd2:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	623b      	str	r3, [r7, #32]
 8006cd8:	e014      	b.n	8006d04 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006cda:	69bb      	ldr	r3, [r7, #24]
 8006cdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce4:	601a      	str	r2, [r3, #0]
    pDest++;
 8006ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce8:	3301      	adds	r3, #1
 8006cea:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cee:	3301      	adds	r3, #1
 8006cf0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006cfe:	6a3b      	ldr	r3, [r7, #32]
 8006d00:	3301      	adds	r3, #1
 8006d02:	623b      	str	r3, [r7, #32]
 8006d04:	6a3a      	ldr	r2, [r7, #32]
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d3e6      	bcc.n	8006cda <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006d0c:	8bfb      	ldrh	r3, [r7, #30]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d01e      	beq.n	8006d50 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006d12:	2300      	movs	r3, #0
 8006d14:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	f107 0310 	add.w	r3, r7, #16
 8006d22:	6812      	ldr	r2, [r2, #0]
 8006d24:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006d26:	693a      	ldr	r2, [r7, #16]
 8006d28:	6a3b      	ldr	r3, [r7, #32]
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	00db      	lsls	r3, r3, #3
 8006d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d32:	b2da      	uxtb	r2, r3
 8006d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d36:	701a      	strb	r2, [r3, #0]
      i++;
 8006d38:	6a3b      	ldr	r3, [r7, #32]
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	623b      	str	r3, [r7, #32]
      pDest++;
 8006d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d40:	3301      	adds	r3, #1
 8006d42:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006d44:	8bfb      	ldrh	r3, [r7, #30]
 8006d46:	3b01      	subs	r3, #1
 8006d48:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006d4a:	8bfb      	ldrh	r3, [r7, #30]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d1ea      	bne.n	8006d26 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	372c      	adds	r7, #44	; 0x2c
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr

08006d5e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006d5e:	b480      	push	{r7}
 8006d60:	b085      	sub	sp, #20
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
 8006d66:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	785b      	ldrb	r3, [r3, #1]
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d12c      	bne.n	8006dd4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	015a      	lsls	r2, r3, #5
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	4413      	add	r3, r2
 8006d82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	db12      	blt.n	8006db2 <USB_EPSetStall+0x54>
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d00f      	beq.n	8006db2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	015a      	lsls	r2, r3, #5
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	4413      	add	r3, r2
 8006d9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	68ba      	ldr	r2, [r7, #8]
 8006da2:	0151      	lsls	r1, r2, #5
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	440a      	add	r2, r1
 8006da8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006db0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	015a      	lsls	r2, r3, #5
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	4413      	add	r3, r2
 8006dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	68ba      	ldr	r2, [r7, #8]
 8006dc2:	0151      	lsls	r1, r2, #5
 8006dc4:	68fa      	ldr	r2, [r7, #12]
 8006dc6:	440a      	add	r2, r1
 8006dc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dcc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006dd0:	6013      	str	r3, [r2, #0]
 8006dd2:	e02b      	b.n	8006e2c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	015a      	lsls	r2, r3, #5
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	4413      	add	r3, r2
 8006ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	db12      	blt.n	8006e0c <USB_EPSetStall+0xae>
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d00f      	beq.n	8006e0c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	015a      	lsls	r2, r3, #5
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	4413      	add	r3, r2
 8006df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68ba      	ldr	r2, [r7, #8]
 8006dfc:	0151      	lsls	r1, r2, #5
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	440a      	add	r2, r1
 8006e02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e06:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006e0a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	015a      	lsls	r2, r3, #5
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	4413      	add	r3, r2
 8006e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68ba      	ldr	r2, [r7, #8]
 8006e1c:	0151      	lsls	r1, r2, #5
 8006e1e:	68fa      	ldr	r2, [r7, #12]
 8006e20:	440a      	add	r2, r1
 8006e22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e2a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e2c:	2300      	movs	r3, #0
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3714      	adds	r7, #20
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr

08006e3a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e3a:	b480      	push	{r7}
 8006e3c:	b085      	sub	sp, #20
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
 8006e42:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	785b      	ldrb	r3, [r3, #1]
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d128      	bne.n	8006ea8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	015a      	lsls	r2, r3, #5
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	4413      	add	r3, r2
 8006e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68ba      	ldr	r2, [r7, #8]
 8006e66:	0151      	lsls	r1, r2, #5
 8006e68:	68fa      	ldr	r2, [r7, #12]
 8006e6a:	440a      	add	r2, r1
 8006e6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e70:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006e74:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	78db      	ldrb	r3, [r3, #3]
 8006e7a:	2b03      	cmp	r3, #3
 8006e7c:	d003      	beq.n	8006e86 <USB_EPClearStall+0x4c>
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	78db      	ldrb	r3, [r3, #3]
 8006e82:	2b02      	cmp	r3, #2
 8006e84:	d138      	bne.n	8006ef8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	015a      	lsls	r2, r3, #5
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	68ba      	ldr	r2, [r7, #8]
 8006e96:	0151      	lsls	r1, r2, #5
 8006e98:	68fa      	ldr	r2, [r7, #12]
 8006e9a:	440a      	add	r2, r1
 8006e9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ea4:	6013      	str	r3, [r2, #0]
 8006ea6:	e027      	b.n	8006ef8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	015a      	lsls	r2, r3, #5
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	4413      	add	r3, r2
 8006eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	68ba      	ldr	r2, [r7, #8]
 8006eb8:	0151      	lsls	r1, r2, #5
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	440a      	add	r2, r1
 8006ebe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ec2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ec6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	78db      	ldrb	r3, [r3, #3]
 8006ecc:	2b03      	cmp	r3, #3
 8006ece:	d003      	beq.n	8006ed8 <USB_EPClearStall+0x9e>
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	78db      	ldrb	r3, [r3, #3]
 8006ed4:	2b02      	cmp	r3, #2
 8006ed6:	d10f      	bne.n	8006ef8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	015a      	lsls	r2, r3, #5
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	4413      	add	r3, r2
 8006ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68ba      	ldr	r2, [r7, #8]
 8006ee8:	0151      	lsls	r1, r2, #5
 8006eea:	68fa      	ldr	r2, [r7, #12]
 8006eec:	440a      	add	r2, r1
 8006eee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ef2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ef6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3714      	adds	r7, #20
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr

08006f06 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006f06:	b480      	push	{r7}
 8006f08:	b085      	sub	sp, #20
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
 8006f0e:	460b      	mov	r3, r1
 8006f10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f24:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006f28:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	78fb      	ldrb	r3, [r7, #3]
 8006f34:	011b      	lsls	r3, r3, #4
 8006f36:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006f3a:	68f9      	ldr	r1, [r7, #12]
 8006f3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f40:	4313      	orrs	r3, r2
 8006f42:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3714      	adds	r7, #20
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr

08006f52 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006f52:	b480      	push	{r7}
 8006f54:	b085      	sub	sp, #20
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006f6c:	f023 0303 	bic.w	r3, r3, #3
 8006f70:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	68fa      	ldr	r2, [r7, #12]
 8006f7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f80:	f023 0302 	bic.w	r3, r3, #2
 8006f84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006f86:	2300      	movs	r3, #0
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3714      	adds	r7, #20
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b085      	sub	sp, #20
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006fae:	f023 0303 	bic.w	r3, r3, #3
 8006fb2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	68fa      	ldr	r2, [r7, #12]
 8006fbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fc2:	f043 0302 	orr.w	r3, r3, #2
 8006fc6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3714      	adds	r7, #20
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr

08006fd6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006fd6:	b480      	push	{r7}
 8006fd8:	b085      	sub	sp, #20
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	695b      	ldr	r3, [r3, #20]
 8006fe2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	699b      	ldr	r3, [r3, #24]
 8006fe8:	68fa      	ldr	r2, [r7, #12]
 8006fea:	4013      	ands	r3, r2
 8006fec:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006fee:	68fb      	ldr	r3, [r7, #12]
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3714      	adds	r7, #20
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b085      	sub	sp, #20
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800700e:	699b      	ldr	r3, [r3, #24]
 8007010:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007018:	69db      	ldr	r3, [r3, #28]
 800701a:	68ba      	ldr	r2, [r7, #8]
 800701c:	4013      	ands	r3, r2
 800701e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	0c1b      	lsrs	r3, r3, #16
}
 8007024:	4618      	mov	r0, r3
 8007026:	3714      	adds	r7, #20
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr

08007030 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007042:	699b      	ldr	r3, [r3, #24]
 8007044:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800704c:	69db      	ldr	r3, [r3, #28]
 800704e:	68ba      	ldr	r2, [r7, #8]
 8007050:	4013      	ands	r3, r2
 8007052:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	b29b      	uxth	r3, r3
}
 8007058:	4618      	mov	r0, r3
 800705a:	3714      	adds	r7, #20
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007064:	b480      	push	{r7}
 8007066:	b085      	sub	sp, #20
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	460b      	mov	r3, r1
 800706e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007074:	78fb      	ldrb	r3, [r7, #3]
 8007076:	015a      	lsls	r2, r3, #5
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	4413      	add	r3, r2
 800707c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800708a:	695b      	ldr	r3, [r3, #20]
 800708c:	68ba      	ldr	r2, [r7, #8]
 800708e:	4013      	ands	r3, r2
 8007090:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007092:	68bb      	ldr	r3, [r7, #8]
}
 8007094:	4618      	mov	r0, r3
 8007096:	3714      	adds	r7, #20
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr

080070a0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b087      	sub	sp, #28
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	460b      	mov	r3, r1
 80070aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070b6:	691b      	ldr	r3, [r3, #16]
 80070b8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070c2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80070c4:	78fb      	ldrb	r3, [r7, #3]
 80070c6:	f003 030f 	and.w	r3, r3, #15
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	fa22 f303 	lsr.w	r3, r2, r3
 80070d0:	01db      	lsls	r3, r3, #7
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	693a      	ldr	r2, [r7, #16]
 80070d6:	4313      	orrs	r3, r2
 80070d8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80070da:	78fb      	ldrb	r3, [r7, #3]
 80070dc:	015a      	lsls	r2, r3, #5
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	4413      	add	r3, r2
 80070e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	693a      	ldr	r2, [r7, #16]
 80070ea:	4013      	ands	r3, r2
 80070ec:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80070ee:	68bb      	ldr	r3, [r7, #8]
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	371c      	adds	r7, #28
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	695b      	ldr	r3, [r3, #20]
 8007108:	f003 0301 	and.w	r3, r3, #1
}
 800710c:	4618      	mov	r0, r3
 800710e:	370c      	adds	r7, #12
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007118:	b480      	push	{r7}
 800711a:	b085      	sub	sp, #20
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	68fa      	ldr	r2, [r7, #12]
 800712e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007132:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007136:	f023 0307 	bic.w	r3, r3, #7
 800713a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	68fa      	ldr	r2, [r7, #12]
 8007146:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800714a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800714e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	3714      	adds	r7, #20
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr
	...

08007160 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007160:	b480      	push	{r7}
 8007162:	b087      	sub	sp, #28
 8007164:	af00      	add	r7, sp, #0
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	460b      	mov	r3, r1
 800716a:	607a      	str	r2, [r7, #4]
 800716c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	333c      	adds	r3, #60	; 0x3c
 8007176:	3304      	adds	r3, #4
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	4a26      	ldr	r2, [pc, #152]	; (8007218 <USB_EP0_OutStart+0xb8>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d90a      	bls.n	800719a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007190:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007194:	d101      	bne.n	800719a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007196:	2300      	movs	r3, #0
 8007198:	e037      	b.n	800720a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071a0:	461a      	mov	r2, r3
 80071a2:	2300      	movs	r3, #0
 80071a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ac:	691b      	ldr	r3, [r3, #16]
 80071ae:	697a      	ldr	r2, [r7, #20]
 80071b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80071b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	697a      	ldr	r2, [r7, #20]
 80071c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071c8:	f043 0318 	orr.w	r3, r3, #24
 80071cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071d4:	691b      	ldr	r3, [r3, #16]
 80071d6:	697a      	ldr	r2, [r7, #20]
 80071d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071dc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80071e0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80071e2:	7afb      	ldrb	r3, [r7, #11]
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d10f      	bne.n	8007208 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ee:	461a      	mov	r2, r3
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	697a      	ldr	r2, [r7, #20]
 80071fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007202:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007206:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	371c      	adds	r7, #28
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop
 8007218:	4f54300a 	.word	0x4f54300a

0800721c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800721c:	b480      	push	{r7}
 800721e:	b085      	sub	sp, #20
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007224:	2300      	movs	r3, #0
 8007226:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	3301      	adds	r3, #1
 800722c:	60fb      	str	r3, [r7, #12]
 800722e:	4a13      	ldr	r2, [pc, #76]	; (800727c <USB_CoreReset+0x60>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d901      	bls.n	8007238 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007234:	2303      	movs	r3, #3
 8007236:	e01a      	b.n	800726e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	691b      	ldr	r3, [r3, #16]
 800723c:	2b00      	cmp	r3, #0
 800723e:	daf3      	bge.n	8007228 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007240:	2300      	movs	r3, #0
 8007242:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	691b      	ldr	r3, [r3, #16]
 8007248:	f043 0201 	orr.w	r2, r3, #1
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	3301      	adds	r3, #1
 8007254:	60fb      	str	r3, [r7, #12]
 8007256:	4a09      	ldr	r2, [pc, #36]	; (800727c <USB_CoreReset+0x60>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d901      	bls.n	8007260 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800725c:	2303      	movs	r3, #3
 800725e:	e006      	b.n	800726e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	691b      	ldr	r3, [r3, #16]
 8007264:	f003 0301 	and.w	r3, r3, #1
 8007268:	2b01      	cmp	r3, #1
 800726a:	d0f1      	beq.n	8007250 <USB_CoreReset+0x34>

  return HAL_OK;
 800726c:	2300      	movs	r3, #0
}
 800726e:	4618      	mov	r0, r3
 8007270:	3714      	adds	r7, #20
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr
 800727a:	bf00      	nop
 800727c:	00030d40 	.word	0x00030d40

08007280 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	460b      	mov	r3, r1
 800728a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800728c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007290:	f002 f960 	bl	8009554 <USBD_static_malloc>
 8007294:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d105      	bne.n	80072a8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80072a4:	2302      	movs	r3, #2
 80072a6:	e066      	b.n	8007376 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	68fa      	ldr	r2, [r7, #12]
 80072ac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	7c1b      	ldrb	r3, [r3, #16]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d119      	bne.n	80072ec <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80072b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072bc:	2202      	movs	r2, #2
 80072be:	2181      	movs	r1, #129	; 0x81
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f002 f824 	bl	800930e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2201      	movs	r2, #1
 80072ca:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80072cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072d0:	2202      	movs	r2, #2
 80072d2:	2101      	movs	r1, #1
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f002 f81a 	bl	800930e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2201      	movs	r2, #1
 80072de:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2210      	movs	r2, #16
 80072e6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80072ea:	e016      	b.n	800731a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80072ec:	2340      	movs	r3, #64	; 0x40
 80072ee:	2202      	movs	r2, #2
 80072f0:	2181      	movs	r1, #129	; 0x81
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f002 f80b 	bl	800930e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80072fe:	2340      	movs	r3, #64	; 0x40
 8007300:	2202      	movs	r2, #2
 8007302:	2101      	movs	r1, #1
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f002 f802 	bl	800930e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2201      	movs	r2, #1
 800730e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2210      	movs	r2, #16
 8007316:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800731a:	2308      	movs	r3, #8
 800731c:	2203      	movs	r2, #3
 800731e:	2182      	movs	r1, #130	; 0x82
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f001 fff4 	bl	800930e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2201      	movs	r2, #1
 800732a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2200      	movs	r2, #0
 800733c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2200      	movs	r2, #0
 8007344:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	7c1b      	ldrb	r3, [r3, #16]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d109      	bne.n	8007364 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007356:	f44f 7300 	mov.w	r3, #512	; 0x200
 800735a:	2101      	movs	r1, #1
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f002 f8c5 	bl	80094ec <USBD_LL_PrepareReceive>
 8007362:	e007      	b.n	8007374 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800736a:	2340      	movs	r3, #64	; 0x40
 800736c:	2101      	movs	r1, #1
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f002 f8bc 	bl	80094ec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007374:	2300      	movs	r3, #0
}
 8007376:	4618      	mov	r0, r3
 8007378:	3710      	adds	r7, #16
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}

0800737e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800737e:	b580      	push	{r7, lr}
 8007380:	b082      	sub	sp, #8
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
 8007386:	460b      	mov	r3, r1
 8007388:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800738a:	2181      	movs	r1, #129	; 0x81
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f001 ffe4 	bl	800935a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007398:	2101      	movs	r1, #1
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f001 ffdd 	bl	800935a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80073a8:	2182      	movs	r1, #130	; 0x82
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f001 ffd5 	bl	800935a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00e      	beq.n	80073e8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073da:	4618      	mov	r0, r3
 80073dc:	f002 f8c8 	bl	8009570 <USBD_static_free>
    pdev->pClassData = NULL;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80073e8:	2300      	movs	r3, #0
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3708      	adds	r7, #8
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
	...

080073f4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b086      	sub	sp, #24
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007404:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007406:	2300      	movs	r3, #0
 8007408:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800740a:	2300      	movs	r3, #0
 800740c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800740e:	2300      	movs	r3, #0
 8007410:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d101      	bne.n	800741c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007418:	2303      	movs	r3, #3
 800741a:	e0af      	b.n	800757c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007424:	2b00      	cmp	r3, #0
 8007426:	d03f      	beq.n	80074a8 <USBD_CDC_Setup+0xb4>
 8007428:	2b20      	cmp	r3, #32
 800742a:	f040 809f 	bne.w	800756c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	88db      	ldrh	r3, [r3, #6]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d02e      	beq.n	8007494 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	b25b      	sxtb	r3, r3
 800743c:	2b00      	cmp	r3, #0
 800743e:	da16      	bge.n	800746e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	683a      	ldr	r2, [r7, #0]
 800744a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800744c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800744e:	683a      	ldr	r2, [r7, #0]
 8007450:	88d2      	ldrh	r2, [r2, #6]
 8007452:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	88db      	ldrh	r3, [r3, #6]
 8007458:	2b07      	cmp	r3, #7
 800745a:	bf28      	it	cs
 800745c:	2307      	movcs	r3, #7
 800745e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	89fa      	ldrh	r2, [r7, #14]
 8007464:	4619      	mov	r1, r3
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f001 fb19 	bl	8008a9e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800746c:	e085      	b.n	800757a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	785a      	ldrb	r2, [r3, #1]
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	88db      	ldrh	r3, [r3, #6]
 800747c:	b2da      	uxtb	r2, r3
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007484:	6939      	ldr	r1, [r7, #16]
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	88db      	ldrh	r3, [r3, #6]
 800748a:	461a      	mov	r2, r3
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f001 fb32 	bl	8008af6 <USBD_CtlPrepareRx>
      break;
 8007492:	e072      	b.n	800757a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	683a      	ldr	r2, [r7, #0]
 800749e:	7850      	ldrb	r0, [r2, #1]
 80074a0:	2200      	movs	r2, #0
 80074a2:	6839      	ldr	r1, [r7, #0]
 80074a4:	4798      	blx	r3
      break;
 80074a6:	e068      	b.n	800757a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	785b      	ldrb	r3, [r3, #1]
 80074ac:	2b0b      	cmp	r3, #11
 80074ae:	d852      	bhi.n	8007556 <USBD_CDC_Setup+0x162>
 80074b0:	a201      	add	r2, pc, #4	; (adr r2, 80074b8 <USBD_CDC_Setup+0xc4>)
 80074b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074b6:	bf00      	nop
 80074b8:	080074e9 	.word	0x080074e9
 80074bc:	08007565 	.word	0x08007565
 80074c0:	08007557 	.word	0x08007557
 80074c4:	08007557 	.word	0x08007557
 80074c8:	08007557 	.word	0x08007557
 80074cc:	08007557 	.word	0x08007557
 80074d0:	08007557 	.word	0x08007557
 80074d4:	08007557 	.word	0x08007557
 80074d8:	08007557 	.word	0x08007557
 80074dc:	08007557 	.word	0x08007557
 80074e0:	08007513 	.word	0x08007513
 80074e4:	0800753d 	.word	0x0800753d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	2b03      	cmp	r3, #3
 80074f2:	d107      	bne.n	8007504 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80074f4:	f107 030a 	add.w	r3, r7, #10
 80074f8:	2202      	movs	r2, #2
 80074fa:	4619      	mov	r1, r3
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f001 face 	bl	8008a9e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007502:	e032      	b.n	800756a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007504:	6839      	ldr	r1, [r7, #0]
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f001 fa58 	bl	80089bc <USBD_CtlError>
            ret = USBD_FAIL;
 800750c:	2303      	movs	r3, #3
 800750e:	75fb      	strb	r3, [r7, #23]
          break;
 8007510:	e02b      	b.n	800756a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007518:	b2db      	uxtb	r3, r3
 800751a:	2b03      	cmp	r3, #3
 800751c:	d107      	bne.n	800752e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800751e:	f107 030d 	add.w	r3, r7, #13
 8007522:	2201      	movs	r2, #1
 8007524:	4619      	mov	r1, r3
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f001 fab9 	bl	8008a9e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800752c:	e01d      	b.n	800756a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800752e:	6839      	ldr	r1, [r7, #0]
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f001 fa43 	bl	80089bc <USBD_CtlError>
            ret = USBD_FAIL;
 8007536:	2303      	movs	r3, #3
 8007538:	75fb      	strb	r3, [r7, #23]
          break;
 800753a:	e016      	b.n	800756a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007542:	b2db      	uxtb	r3, r3
 8007544:	2b03      	cmp	r3, #3
 8007546:	d00f      	beq.n	8007568 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8007548:	6839      	ldr	r1, [r7, #0]
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f001 fa36 	bl	80089bc <USBD_CtlError>
            ret = USBD_FAIL;
 8007550:	2303      	movs	r3, #3
 8007552:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007554:	e008      	b.n	8007568 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007556:	6839      	ldr	r1, [r7, #0]
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f001 fa2f 	bl	80089bc <USBD_CtlError>
          ret = USBD_FAIL;
 800755e:	2303      	movs	r3, #3
 8007560:	75fb      	strb	r3, [r7, #23]
          break;
 8007562:	e002      	b.n	800756a <USBD_CDC_Setup+0x176>
          break;
 8007564:	bf00      	nop
 8007566:	e008      	b.n	800757a <USBD_CDC_Setup+0x186>
          break;
 8007568:	bf00      	nop
      }
      break;
 800756a:	e006      	b.n	800757a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800756c:	6839      	ldr	r1, [r7, #0]
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f001 fa24 	bl	80089bc <USBD_CtlError>
      ret = USBD_FAIL;
 8007574:	2303      	movs	r3, #3
 8007576:	75fb      	strb	r3, [r7, #23]
      break;
 8007578:	bf00      	nop
  }

  return (uint8_t)ret;
 800757a:	7dfb      	ldrb	r3, [r7, #23]
}
 800757c:	4618      	mov	r0, r3
 800757e:	3718      	adds	r7, #24
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	460b      	mov	r3, r1
 800758e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007596:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d101      	bne.n	80075a6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80075a2:	2303      	movs	r3, #3
 80075a4:	e04f      	b.n	8007646 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075ac:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80075ae:	78fa      	ldrb	r2, [r7, #3]
 80075b0:	6879      	ldr	r1, [r7, #4]
 80075b2:	4613      	mov	r3, r2
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	4413      	add	r3, r2
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	440b      	add	r3, r1
 80075bc:	3318      	adds	r3, #24
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d029      	beq.n	8007618 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80075c4:	78fa      	ldrb	r2, [r7, #3]
 80075c6:	6879      	ldr	r1, [r7, #4]
 80075c8:	4613      	mov	r3, r2
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	4413      	add	r3, r2
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	440b      	add	r3, r1
 80075d2:	3318      	adds	r3, #24
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	78f9      	ldrb	r1, [r7, #3]
 80075d8:	68f8      	ldr	r0, [r7, #12]
 80075da:	460b      	mov	r3, r1
 80075dc:	00db      	lsls	r3, r3, #3
 80075de:	1a5b      	subs	r3, r3, r1
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	4403      	add	r3, r0
 80075e4:	3344      	adds	r3, #68	; 0x44
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	fbb2 f1f3 	udiv	r1, r2, r3
 80075ec:	fb03 f301 	mul.w	r3, r3, r1
 80075f0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d110      	bne.n	8007618 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80075f6:	78fa      	ldrb	r2, [r7, #3]
 80075f8:	6879      	ldr	r1, [r7, #4]
 80075fa:	4613      	mov	r3, r2
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	4413      	add	r3, r2
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	440b      	add	r3, r1
 8007604:	3318      	adds	r3, #24
 8007606:	2200      	movs	r2, #0
 8007608:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800760a:	78f9      	ldrb	r1, [r7, #3]
 800760c:	2300      	movs	r3, #0
 800760e:	2200      	movs	r2, #0
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f001 ff4a 	bl	80094aa <USBD_LL_Transmit>
 8007616:	e015      	b.n	8007644 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	2200      	movs	r2, #0
 800761c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007626:	691b      	ldr	r3, [r3, #16]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d00b      	beq.n	8007644 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007632:	691b      	ldr	r3, [r3, #16]
 8007634:	68ba      	ldr	r2, [r7, #8]
 8007636:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800763a:	68ba      	ldr	r2, [r7, #8]
 800763c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007640:	78fa      	ldrb	r2, [r7, #3]
 8007642:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007644:	2300      	movs	r3, #0
}
 8007646:	4618      	mov	r0, r3
 8007648:	3710      	adds	r7, #16
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}

0800764e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800764e:	b580      	push	{r7, lr}
 8007650:	b084      	sub	sp, #16
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
 8007656:	460b      	mov	r3, r1
 8007658:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007660:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007668:	2b00      	cmp	r3, #0
 800766a:	d101      	bne.n	8007670 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800766c:	2303      	movs	r3, #3
 800766e:	e015      	b.n	800769c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007670:	78fb      	ldrb	r3, [r7, #3]
 8007672:	4619      	mov	r1, r3
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f001 ff5a 	bl	800952e <USBD_LL_GetRxDataSize>
 800767a:	4602      	mov	r2, r0
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	68fa      	ldr	r2, [r7, #12]
 800768c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007690:	68fa      	ldr	r2, [r7, #12]
 8007692:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007696:	4611      	mov	r1, r2
 8007698:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800769a:	2300      	movs	r3, #0
}
 800769c:	4618      	mov	r0, r3
 800769e:	3710      	adds	r7, #16
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076b2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d101      	bne.n	80076be <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80076ba:	2303      	movs	r3, #3
 80076bc:	e01b      	b.n	80076f6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d015      	beq.n	80076f4 <USBD_CDC_EP0_RxReady+0x50>
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80076ce:	2bff      	cmp	r3, #255	; 0xff
 80076d0:	d010      	beq.n	80076f4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	68fa      	ldr	r2, [r7, #12]
 80076dc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80076e0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80076e8:	b292      	uxth	r2, r2
 80076ea:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	22ff      	movs	r2, #255	; 0xff
 80076f0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3710      	adds	r7, #16
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
	...

08007700 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2243      	movs	r2, #67	; 0x43
 800770c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800770e:	4b03      	ldr	r3, [pc, #12]	; (800771c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007710:	4618      	mov	r0, r3
 8007712:	370c      	adds	r7, #12
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr
 800771c:	20000094 	.word	0x20000094

08007720 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2243      	movs	r2, #67	; 0x43
 800772c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800772e:	4b03      	ldr	r3, [pc, #12]	; (800773c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007730:	4618      	mov	r0, r3
 8007732:	370c      	adds	r7, #12
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr
 800773c:	20000050 	.word	0x20000050

08007740 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2243      	movs	r2, #67	; 0x43
 800774c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800774e:	4b03      	ldr	r3, [pc, #12]	; (800775c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007750:	4618      	mov	r0, r3
 8007752:	370c      	adds	r7, #12
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr
 800775c:	200000d8 	.word	0x200000d8

08007760 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007760:	b480      	push	{r7}
 8007762:	b083      	sub	sp, #12
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	220a      	movs	r2, #10
 800776c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800776e:	4b03      	ldr	r3, [pc, #12]	; (800777c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007770:	4618      	mov	r0, r3
 8007772:	370c      	adds	r7, #12
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr
 800777c:	2000000c 	.word	0x2000000c

08007780 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007780:	b480      	push	{r7}
 8007782:	b083      	sub	sp, #12
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d101      	bne.n	8007794 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007790:	2303      	movs	r3, #3
 8007792:	e004      	b.n	800779e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	683a      	ldr	r2, [r7, #0]
 8007798:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	370c      	adds	r7, #12
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr

080077aa <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80077aa:	b480      	push	{r7}
 80077ac:	b087      	sub	sp, #28
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	60f8      	str	r0, [r7, #12]
 80077b2:	60b9      	str	r1, [r7, #8]
 80077b4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077bc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d101      	bne.n	80077c8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80077c4:	2303      	movs	r3, #3
 80077c6:	e008      	b.n	80077da <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	68ba      	ldr	r2, [r7, #8]
 80077cc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	371c      	adds	r7, #28
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr

080077e6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80077e6:	b480      	push	{r7}
 80077e8:	b085      	sub	sp, #20
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
 80077ee:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077f6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d101      	bne.n	8007802 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80077fe:	2303      	movs	r3, #3
 8007800:	e004      	b.n	800780c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	683a      	ldr	r2, [r7, #0]
 8007806:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800780a:	2300      	movs	r3, #0
}
 800780c:	4618      	mov	r0, r3
 800780e:	3714      	adds	r7, #20
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr

08007818 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007826:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007828:	2301      	movs	r3, #1
 800782a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007832:	2b00      	cmp	r3, #0
 8007834:	d101      	bne.n	800783a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007836:	2303      	movs	r3, #3
 8007838:	e01a      	b.n	8007870 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007840:	2b00      	cmp	r3, #0
 8007842:	d114      	bne.n	800786e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	2201      	movs	r2, #1
 8007848:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007862:	2181      	movs	r1, #129	; 0x81
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f001 fe20 	bl	80094aa <USBD_LL_Transmit>

    ret = USBD_OK;
 800786a:	2300      	movs	r3, #0
 800786c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800786e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007870:	4618      	mov	r0, r3
 8007872:	3710      	adds	r7, #16
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b084      	sub	sp, #16
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007886:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800788e:	2b00      	cmp	r3, #0
 8007890:	d101      	bne.n	8007896 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007892:	2303      	movs	r3, #3
 8007894:	e016      	b.n	80078c4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	7c1b      	ldrb	r3, [r3, #16]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d109      	bne.n	80078b2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078a8:	2101      	movs	r1, #1
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f001 fe1e 	bl	80094ec <USBD_LL_PrepareReceive>
 80078b0:	e007      	b.n	80078c2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078b8:	2340      	movs	r3, #64	; 0x40
 80078ba:	2101      	movs	r1, #1
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f001 fe15 	bl	80094ec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80078c2:	2300      	movs	r3, #0
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3710      	adds	r7, #16
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b086      	sub	sp, #24
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	60f8      	str	r0, [r7, #12]
 80078d4:	60b9      	str	r1, [r7, #8]
 80078d6:	4613      	mov	r3, r2
 80078d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d101      	bne.n	80078e4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80078e0:	2303      	movs	r3, #3
 80078e2:	e01f      	b.n	8007924 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2200      	movs	r2, #0
 80078f8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d003      	beq.n	800790a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	68ba      	ldr	r2, [r7, #8]
 8007906:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2201      	movs	r2, #1
 800790e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	79fa      	ldrb	r2, [r7, #7]
 8007916:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007918:	68f8      	ldr	r0, [r7, #12]
 800791a:	f001 fc91 	bl	8009240 <USBD_LL_Init>
 800791e:	4603      	mov	r3, r0
 8007920:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007922:	7dfb      	ldrb	r3, [r7, #23]
}
 8007924:	4618      	mov	r0, r3
 8007926:	3718      	adds	r7, #24
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b084      	sub	sp, #16
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007936:	2300      	movs	r3, #0
 8007938:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d101      	bne.n	8007944 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007940:	2303      	movs	r3, #3
 8007942:	e016      	b.n	8007972 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	683a      	ldr	r2, [r7, #0]
 8007948:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007954:	2b00      	cmp	r3, #0
 8007956:	d00b      	beq.n	8007970 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800795e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007960:	f107 020e 	add.w	r2, r7, #14
 8007964:	4610      	mov	r0, r2
 8007966:	4798      	blx	r3
 8007968:	4602      	mov	r2, r0
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007970:	2300      	movs	r3, #0
}
 8007972:	4618      	mov	r0, r3
 8007974:	3710      	adds	r7, #16
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}

0800797a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800797a:	b580      	push	{r7, lr}
 800797c:	b082      	sub	sp, #8
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f001 fca8 	bl	80092d8 <USBD_LL_Start>
 8007988:	4603      	mov	r3, r0
}
 800798a:	4618      	mov	r0, r3
 800798c:	3708      	adds	r7, #8
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007992:	b480      	push	{r7}
 8007994:	b083      	sub	sp, #12
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800799a:	2300      	movs	r3, #0
}
 800799c:	4618      	mov	r0, r3
 800799e:	370c      	adds	r7, #12
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b084      	sub	sp, #16
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	460b      	mov	r3, r1
 80079b2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80079b4:	2303      	movs	r3, #3
 80079b6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d009      	beq.n	80079d6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	78fa      	ldrb	r2, [r7, #3]
 80079cc:	4611      	mov	r1, r2
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	4798      	blx	r3
 80079d2:	4603      	mov	r3, r0
 80079d4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80079d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3710      	adds	r7, #16
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b082      	sub	sp, #8
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	460b      	mov	r3, r1
 80079ea:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d007      	beq.n	8007a06 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	78fa      	ldrb	r2, [r7, #3]
 8007a00:	4611      	mov	r1, r2
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	4798      	blx	r3
  }

  return USBD_OK;
 8007a06:	2300      	movs	r3, #0
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3708      	adds	r7, #8
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a20:	6839      	ldr	r1, [r7, #0]
 8007a22:	4618      	mov	r0, r3
 8007a24:	f000 ff90 	bl	8008948 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007a36:	461a      	mov	r2, r3
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007a44:	f003 031f 	and.w	r3, r3, #31
 8007a48:	2b02      	cmp	r3, #2
 8007a4a:	d01a      	beq.n	8007a82 <USBD_LL_SetupStage+0x72>
 8007a4c:	2b02      	cmp	r3, #2
 8007a4e:	d822      	bhi.n	8007a96 <USBD_LL_SetupStage+0x86>
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d002      	beq.n	8007a5a <USBD_LL_SetupStage+0x4a>
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d00a      	beq.n	8007a6e <USBD_LL_SetupStage+0x5e>
 8007a58:	e01d      	b.n	8007a96 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a60:	4619      	mov	r1, r3
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 fa62 	bl	8007f2c <USBD_StdDevReq>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8007a6c:	e020      	b.n	8007ab0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a74:	4619      	mov	r1, r3
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 fac6 	bl	8008008 <USBD_StdItfReq>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	73fb      	strb	r3, [r7, #15]
      break;
 8007a80:	e016      	b.n	8007ab0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a88:	4619      	mov	r1, r3
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 fb05 	bl	800809a <USBD_StdEPReq>
 8007a90:	4603      	mov	r3, r0
 8007a92:	73fb      	strb	r3, [r7, #15]
      break;
 8007a94:	e00c      	b.n	8007ab0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007a9c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f001 fc77 	bl	8009398 <USBD_LL_StallEP>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	73fb      	strb	r3, [r7, #15]
      break;
 8007aae:	bf00      	nop
  }

  return ret;
 8007ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3710      	adds	r7, #16
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}

08007aba <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007aba:	b580      	push	{r7, lr}
 8007abc:	b086      	sub	sp, #24
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	60f8      	str	r0, [r7, #12]
 8007ac2:	460b      	mov	r3, r1
 8007ac4:	607a      	str	r2, [r7, #4]
 8007ac6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007ac8:	7afb      	ldrb	r3, [r7, #11]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d138      	bne.n	8007b40 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007ad4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007adc:	2b03      	cmp	r3, #3
 8007ade:	d14a      	bne.n	8007b76 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	689a      	ldr	r2, [r3, #8]
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	68db      	ldr	r3, [r3, #12]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d913      	bls.n	8007b14 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	689a      	ldr	r2, [r3, #8]
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	68db      	ldr	r3, [r3, #12]
 8007af4:	1ad2      	subs	r2, r2, r3
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	68da      	ldr	r2, [r3, #12]
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	4293      	cmp	r3, r2
 8007b04:	bf28      	it	cs
 8007b06:	4613      	movcs	r3, r2
 8007b08:	461a      	mov	r2, r3
 8007b0a:	6879      	ldr	r1, [r7, #4]
 8007b0c:	68f8      	ldr	r0, [r7, #12]
 8007b0e:	f001 f80f 	bl	8008b30 <USBD_CtlContinueRx>
 8007b12:	e030      	b.n	8007b76 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	2b03      	cmp	r3, #3
 8007b1e:	d10b      	bne.n	8007b38 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b26:	691b      	ldr	r3, [r3, #16]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d005      	beq.n	8007b38 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b32:	691b      	ldr	r3, [r3, #16]
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007b38:	68f8      	ldr	r0, [r7, #12]
 8007b3a:	f001 f80a 	bl	8008b52 <USBD_CtlSendStatus>
 8007b3e:	e01a      	b.n	8007b76 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	2b03      	cmp	r3, #3
 8007b4a:	d114      	bne.n	8007b76 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b52:	699b      	ldr	r3, [r3, #24]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d00e      	beq.n	8007b76 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b5e:	699b      	ldr	r3, [r3, #24]
 8007b60:	7afa      	ldrb	r2, [r7, #11]
 8007b62:	4611      	mov	r1, r2
 8007b64:	68f8      	ldr	r0, [r7, #12]
 8007b66:	4798      	blx	r3
 8007b68:	4603      	mov	r3, r0
 8007b6a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007b6c:	7dfb      	ldrb	r3, [r7, #23]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d001      	beq.n	8007b76 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007b72:	7dfb      	ldrb	r3, [r7, #23]
 8007b74:	e000      	b.n	8007b78 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007b76:	2300      	movs	r3, #0
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3718      	adds	r7, #24
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b086      	sub	sp, #24
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	460b      	mov	r3, r1
 8007b8a:	607a      	str	r2, [r7, #4]
 8007b8c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007b8e:	7afb      	ldrb	r3, [r7, #11]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d16b      	bne.n	8007c6c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	3314      	adds	r3, #20
 8007b98:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007ba0:	2b02      	cmp	r3, #2
 8007ba2:	d156      	bne.n	8007c52 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	689a      	ldr	r2, [r3, #8]
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	68db      	ldr	r3, [r3, #12]
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d914      	bls.n	8007bda <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	689a      	ldr	r2, [r3, #8]
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	1ad2      	subs	r2, r2, r3
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	6879      	ldr	r1, [r7, #4]
 8007bc6:	68f8      	ldr	r0, [r7, #12]
 8007bc8:	f000 ff84 	bl	8008ad4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007bcc:	2300      	movs	r3, #0
 8007bce:	2200      	movs	r2, #0
 8007bd0:	2100      	movs	r1, #0
 8007bd2:	68f8      	ldr	r0, [r7, #12]
 8007bd4:	f001 fc8a 	bl	80094ec <USBD_LL_PrepareReceive>
 8007bd8:	e03b      	b.n	8007c52 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	68da      	ldr	r2, [r3, #12]
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d11c      	bne.n	8007c20 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	685a      	ldr	r2, [r3, #4]
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d316      	bcc.n	8007c20 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	685a      	ldr	r2, [r3, #4]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d20f      	bcs.n	8007c20 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007c00:	2200      	movs	r2, #0
 8007c02:	2100      	movs	r1, #0
 8007c04:	68f8      	ldr	r0, [r7, #12]
 8007c06:	f000 ff65 	bl	8008ad4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c12:	2300      	movs	r3, #0
 8007c14:	2200      	movs	r2, #0
 8007c16:	2100      	movs	r1, #0
 8007c18:	68f8      	ldr	r0, [r7, #12]
 8007c1a:	f001 fc67 	bl	80094ec <USBD_LL_PrepareReceive>
 8007c1e:	e018      	b.n	8007c52 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	2b03      	cmp	r3, #3
 8007c2a:	d10b      	bne.n	8007c44 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d005      	beq.n	8007c44 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	68f8      	ldr	r0, [r7, #12]
 8007c42:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c44:	2180      	movs	r1, #128	; 0x80
 8007c46:	68f8      	ldr	r0, [r7, #12]
 8007c48:	f001 fba6 	bl	8009398 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	f000 ff93 	bl	8008b78 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d122      	bne.n	8007ca2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007c5c:	68f8      	ldr	r0, [r7, #12]
 8007c5e:	f7ff fe98 	bl	8007992 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007c6a:	e01a      	b.n	8007ca2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c72:	b2db      	uxtb	r3, r3
 8007c74:	2b03      	cmp	r3, #3
 8007c76:	d114      	bne.n	8007ca2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c7e:	695b      	ldr	r3, [r3, #20]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d00e      	beq.n	8007ca2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c8a:	695b      	ldr	r3, [r3, #20]
 8007c8c:	7afa      	ldrb	r2, [r7, #11]
 8007c8e:	4611      	mov	r1, r2
 8007c90:	68f8      	ldr	r0, [r7, #12]
 8007c92:	4798      	blx	r3
 8007c94:	4603      	mov	r3, r0
 8007c96:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007c98:	7dfb      	ldrb	r3, [r7, #23]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d001      	beq.n	8007ca2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007c9e:	7dfb      	ldrb	r3, [r7, #23]
 8007ca0:	e000      	b.n	8007ca4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007ca2:	2300      	movs	r3, #0
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3718      	adds	r7, #24
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}

08007cac <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d101      	bne.n	8007ce0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007cdc:	2303      	movs	r3, #3
 8007cde:	e02f      	b.n	8007d40 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d00f      	beq.n	8007d0a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d009      	beq.n	8007d0a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	6852      	ldr	r2, [r2, #4]
 8007d02:	b2d2      	uxtb	r2, r2
 8007d04:	4611      	mov	r1, r2
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d0a:	2340      	movs	r3, #64	; 0x40
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	2100      	movs	r1, #0
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f001 fafc 	bl	800930e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2240      	movs	r2, #64	; 0x40
 8007d22:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d26:	2340      	movs	r3, #64	; 0x40
 8007d28:	2200      	movs	r2, #0
 8007d2a:	2180      	movs	r1, #128	; 0x80
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f001 faee 	bl	800930e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2201      	movs	r2, #1
 8007d36:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2240      	movs	r2, #64	; 0x40
 8007d3c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007d3e:	2300      	movs	r3, #0
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3708      	adds	r7, #8
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	460b      	mov	r3, r1
 8007d52:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	78fa      	ldrb	r2, [r7, #3]
 8007d58:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	370c      	adds	r7, #12
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

08007d68 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d76:	b2da      	uxtb	r2, r3
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2204      	movs	r2, #4
 8007d82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007d86:	2300      	movs	r3, #0
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	370c      	adds	r7, #12
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr

08007d94 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	2b04      	cmp	r3, #4
 8007da6:	d106      	bne.n	8007db6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007dae:	b2da      	uxtb	r2, r3
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007db6:	2300      	movs	r3, #0
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	370c      	adds	r7, #12
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b082      	sub	sp, #8
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d101      	bne.n	8007dda <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007dd6:	2303      	movs	r3, #3
 8007dd8:	e012      	b.n	8007e00 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	2b03      	cmp	r3, #3
 8007de4:	d10b      	bne.n	8007dfe <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dec:	69db      	ldr	r3, [r3, #28]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d005      	beq.n	8007dfe <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007df8:	69db      	ldr	r3, [r3, #28]
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007dfe:	2300      	movs	r3, #0
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3708      	adds	r7, #8
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	460b      	mov	r3, r1
 8007e12:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d101      	bne.n	8007e22 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007e1e:	2303      	movs	r3, #3
 8007e20:	e014      	b.n	8007e4c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	2b03      	cmp	r3, #3
 8007e2c:	d10d      	bne.n	8007e4a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e34:	6a1b      	ldr	r3, [r3, #32]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d007      	beq.n	8007e4a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e40:	6a1b      	ldr	r3, [r3, #32]
 8007e42:	78fa      	ldrb	r2, [r7, #3]
 8007e44:	4611      	mov	r1, r2
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e4a:	2300      	movs	r3, #0
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3708      	adds	r7, #8
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b082      	sub	sp, #8
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d101      	bne.n	8007e6e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007e6a:	2303      	movs	r3, #3
 8007e6c:	e014      	b.n	8007e98 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	2b03      	cmp	r3, #3
 8007e78:	d10d      	bne.n	8007e96 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d007      	beq.n	8007e96 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8e:	78fa      	ldrb	r2, [r7, #3]
 8007e90:	4611      	mov	r1, r2
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e96:	2300      	movs	r3, #0
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3708      	adds	r7, #8
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007ea8:	2300      	movs	r3, #0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	370c      	adds	r7, #12
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr

08007eb6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007eb6:	b580      	push	{r7, lr}
 8007eb8:	b082      	sub	sp, #8
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d009      	beq.n	8007ee4 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	6852      	ldr	r2, [r2, #4]
 8007edc:	b2d2      	uxtb	r2, r2
 8007ede:	4611      	mov	r1, r2
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	4798      	blx	r3
  }

  return USBD_OK;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3708      	adds	r7, #8
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007eee:	b480      	push	{r7}
 8007ef0:	b087      	sub	sp, #28
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	781b      	ldrb	r3, [r3, #0]
 8007efe:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	3301      	adds	r3, #1
 8007f04:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007f0c:	8a3b      	ldrh	r3, [r7, #16]
 8007f0e:	021b      	lsls	r3, r3, #8
 8007f10:	b21a      	sxth	r2, r3
 8007f12:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	b21b      	sxth	r3, r3
 8007f1a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007f1c:	89fb      	ldrh	r3, [r7, #14]
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	371c      	adds	r7, #28
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr
	...

08007f2c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f36:	2300      	movs	r3, #0
 8007f38:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	781b      	ldrb	r3, [r3, #0]
 8007f3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f42:	2b40      	cmp	r3, #64	; 0x40
 8007f44:	d005      	beq.n	8007f52 <USBD_StdDevReq+0x26>
 8007f46:	2b40      	cmp	r3, #64	; 0x40
 8007f48:	d853      	bhi.n	8007ff2 <USBD_StdDevReq+0xc6>
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d00b      	beq.n	8007f66 <USBD_StdDevReq+0x3a>
 8007f4e:	2b20      	cmp	r3, #32
 8007f50:	d14f      	bne.n	8007ff2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	6839      	ldr	r1, [r7, #0]
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	4798      	blx	r3
 8007f60:	4603      	mov	r3, r0
 8007f62:	73fb      	strb	r3, [r7, #15]
      break;
 8007f64:	e04a      	b.n	8007ffc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	785b      	ldrb	r3, [r3, #1]
 8007f6a:	2b09      	cmp	r3, #9
 8007f6c:	d83b      	bhi.n	8007fe6 <USBD_StdDevReq+0xba>
 8007f6e:	a201      	add	r2, pc, #4	; (adr r2, 8007f74 <USBD_StdDevReq+0x48>)
 8007f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f74:	08007fc9 	.word	0x08007fc9
 8007f78:	08007fdd 	.word	0x08007fdd
 8007f7c:	08007fe7 	.word	0x08007fe7
 8007f80:	08007fd3 	.word	0x08007fd3
 8007f84:	08007fe7 	.word	0x08007fe7
 8007f88:	08007fa7 	.word	0x08007fa7
 8007f8c:	08007f9d 	.word	0x08007f9d
 8007f90:	08007fe7 	.word	0x08007fe7
 8007f94:	08007fbf 	.word	0x08007fbf
 8007f98:	08007fb1 	.word	0x08007fb1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007f9c:	6839      	ldr	r1, [r7, #0]
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 f9de 	bl	8008360 <USBD_GetDescriptor>
          break;
 8007fa4:	e024      	b.n	8007ff0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007fa6:	6839      	ldr	r1, [r7, #0]
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f000 fb43 	bl	8008634 <USBD_SetAddress>
          break;
 8007fae:	e01f      	b.n	8007ff0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007fb0:	6839      	ldr	r1, [r7, #0]
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 fb82 	bl	80086bc <USBD_SetConfig>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	73fb      	strb	r3, [r7, #15]
          break;
 8007fbc:	e018      	b.n	8007ff0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007fbe:	6839      	ldr	r1, [r7, #0]
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 fc21 	bl	8008808 <USBD_GetConfig>
          break;
 8007fc6:	e013      	b.n	8007ff0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007fc8:	6839      	ldr	r1, [r7, #0]
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 fc52 	bl	8008874 <USBD_GetStatus>
          break;
 8007fd0:	e00e      	b.n	8007ff0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007fd2:	6839      	ldr	r1, [r7, #0]
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 fc81 	bl	80088dc <USBD_SetFeature>
          break;
 8007fda:	e009      	b.n	8007ff0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007fdc:	6839      	ldr	r1, [r7, #0]
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 fc90 	bl	8008904 <USBD_ClrFeature>
          break;
 8007fe4:	e004      	b.n	8007ff0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007fe6:	6839      	ldr	r1, [r7, #0]
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 fce7 	bl	80089bc <USBD_CtlError>
          break;
 8007fee:	bf00      	nop
      }
      break;
 8007ff0:	e004      	b.n	8007ffc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007ff2:	6839      	ldr	r1, [r7, #0]
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 fce1 	bl	80089bc <USBD_CtlError>
      break;
 8007ffa:	bf00      	nop
  }

  return ret;
 8007ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3710      	adds	r7, #16
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop

08008008 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b084      	sub	sp, #16
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008012:	2300      	movs	r3, #0
 8008014:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800801e:	2b40      	cmp	r3, #64	; 0x40
 8008020:	d005      	beq.n	800802e <USBD_StdItfReq+0x26>
 8008022:	2b40      	cmp	r3, #64	; 0x40
 8008024:	d82f      	bhi.n	8008086 <USBD_StdItfReq+0x7e>
 8008026:	2b00      	cmp	r3, #0
 8008028:	d001      	beq.n	800802e <USBD_StdItfReq+0x26>
 800802a:	2b20      	cmp	r3, #32
 800802c:	d12b      	bne.n	8008086 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008034:	b2db      	uxtb	r3, r3
 8008036:	3b01      	subs	r3, #1
 8008038:	2b02      	cmp	r3, #2
 800803a:	d81d      	bhi.n	8008078 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	889b      	ldrh	r3, [r3, #4]
 8008040:	b2db      	uxtb	r3, r3
 8008042:	2b01      	cmp	r3, #1
 8008044:	d813      	bhi.n	800806e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	6839      	ldr	r1, [r7, #0]
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	4798      	blx	r3
 8008054:	4603      	mov	r3, r0
 8008056:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	88db      	ldrh	r3, [r3, #6]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d110      	bne.n	8008082 <USBD_StdItfReq+0x7a>
 8008060:	7bfb      	ldrb	r3, [r7, #15]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d10d      	bne.n	8008082 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 fd73 	bl	8008b52 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800806c:	e009      	b.n	8008082 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800806e:	6839      	ldr	r1, [r7, #0]
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 fca3 	bl	80089bc <USBD_CtlError>
          break;
 8008076:	e004      	b.n	8008082 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008078:	6839      	ldr	r1, [r7, #0]
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 fc9e 	bl	80089bc <USBD_CtlError>
          break;
 8008080:	e000      	b.n	8008084 <USBD_StdItfReq+0x7c>
          break;
 8008082:	bf00      	nop
      }
      break;
 8008084:	e004      	b.n	8008090 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008086:	6839      	ldr	r1, [r7, #0]
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 fc97 	bl	80089bc <USBD_CtlError>
      break;
 800808e:	bf00      	nop
  }

  return ret;
 8008090:	7bfb      	ldrb	r3, [r7, #15]
}
 8008092:	4618      	mov	r0, r3
 8008094:	3710      	adds	r7, #16
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800809a:	b580      	push	{r7, lr}
 800809c:	b084      	sub	sp, #16
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
 80080a2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80080a4:	2300      	movs	r3, #0
 80080a6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	889b      	ldrh	r3, [r3, #4]
 80080ac:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	781b      	ldrb	r3, [r3, #0]
 80080b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080b6:	2b40      	cmp	r3, #64	; 0x40
 80080b8:	d007      	beq.n	80080ca <USBD_StdEPReq+0x30>
 80080ba:	2b40      	cmp	r3, #64	; 0x40
 80080bc:	f200 8145 	bhi.w	800834a <USBD_StdEPReq+0x2b0>
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d00c      	beq.n	80080de <USBD_StdEPReq+0x44>
 80080c4:	2b20      	cmp	r3, #32
 80080c6:	f040 8140 	bne.w	800834a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	6839      	ldr	r1, [r7, #0]
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	4798      	blx	r3
 80080d8:	4603      	mov	r3, r0
 80080da:	73fb      	strb	r3, [r7, #15]
      break;
 80080dc:	e13a      	b.n	8008354 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	785b      	ldrb	r3, [r3, #1]
 80080e2:	2b03      	cmp	r3, #3
 80080e4:	d007      	beq.n	80080f6 <USBD_StdEPReq+0x5c>
 80080e6:	2b03      	cmp	r3, #3
 80080e8:	f300 8129 	bgt.w	800833e <USBD_StdEPReq+0x2a4>
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d07f      	beq.n	80081f0 <USBD_StdEPReq+0x156>
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d03c      	beq.n	800816e <USBD_StdEPReq+0xd4>
 80080f4:	e123      	b.n	800833e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080fc:	b2db      	uxtb	r3, r3
 80080fe:	2b02      	cmp	r3, #2
 8008100:	d002      	beq.n	8008108 <USBD_StdEPReq+0x6e>
 8008102:	2b03      	cmp	r3, #3
 8008104:	d016      	beq.n	8008134 <USBD_StdEPReq+0x9a>
 8008106:	e02c      	b.n	8008162 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008108:	7bbb      	ldrb	r3, [r7, #14]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d00d      	beq.n	800812a <USBD_StdEPReq+0x90>
 800810e:	7bbb      	ldrb	r3, [r7, #14]
 8008110:	2b80      	cmp	r3, #128	; 0x80
 8008112:	d00a      	beq.n	800812a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008114:	7bbb      	ldrb	r3, [r7, #14]
 8008116:	4619      	mov	r1, r3
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f001 f93d 	bl	8009398 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800811e:	2180      	movs	r1, #128	; 0x80
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f001 f939 	bl	8009398 <USBD_LL_StallEP>
 8008126:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008128:	e020      	b.n	800816c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800812a:	6839      	ldr	r1, [r7, #0]
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 fc45 	bl	80089bc <USBD_CtlError>
              break;
 8008132:	e01b      	b.n	800816c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	885b      	ldrh	r3, [r3, #2]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d10e      	bne.n	800815a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800813c:	7bbb      	ldrb	r3, [r7, #14]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d00b      	beq.n	800815a <USBD_StdEPReq+0xc0>
 8008142:	7bbb      	ldrb	r3, [r7, #14]
 8008144:	2b80      	cmp	r3, #128	; 0x80
 8008146:	d008      	beq.n	800815a <USBD_StdEPReq+0xc0>
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	88db      	ldrh	r3, [r3, #6]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d104      	bne.n	800815a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008150:	7bbb      	ldrb	r3, [r7, #14]
 8008152:	4619      	mov	r1, r3
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f001 f91f 	bl	8009398 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 fcf9 	bl	8008b52 <USBD_CtlSendStatus>

              break;
 8008160:	e004      	b.n	800816c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008162:	6839      	ldr	r1, [r7, #0]
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 fc29 	bl	80089bc <USBD_CtlError>
              break;
 800816a:	bf00      	nop
          }
          break;
 800816c:	e0ec      	b.n	8008348 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008174:	b2db      	uxtb	r3, r3
 8008176:	2b02      	cmp	r3, #2
 8008178:	d002      	beq.n	8008180 <USBD_StdEPReq+0xe6>
 800817a:	2b03      	cmp	r3, #3
 800817c:	d016      	beq.n	80081ac <USBD_StdEPReq+0x112>
 800817e:	e030      	b.n	80081e2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008180:	7bbb      	ldrb	r3, [r7, #14]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d00d      	beq.n	80081a2 <USBD_StdEPReq+0x108>
 8008186:	7bbb      	ldrb	r3, [r7, #14]
 8008188:	2b80      	cmp	r3, #128	; 0x80
 800818a:	d00a      	beq.n	80081a2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800818c:	7bbb      	ldrb	r3, [r7, #14]
 800818e:	4619      	mov	r1, r3
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f001 f901 	bl	8009398 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008196:	2180      	movs	r1, #128	; 0x80
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f001 f8fd 	bl	8009398 <USBD_LL_StallEP>
 800819e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80081a0:	e025      	b.n	80081ee <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80081a2:	6839      	ldr	r1, [r7, #0]
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 fc09 	bl	80089bc <USBD_CtlError>
              break;
 80081aa:	e020      	b.n	80081ee <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	885b      	ldrh	r3, [r3, #2]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d11b      	bne.n	80081ec <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80081b4:	7bbb      	ldrb	r3, [r7, #14]
 80081b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d004      	beq.n	80081c8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80081be:	7bbb      	ldrb	r3, [r7, #14]
 80081c0:	4619      	mov	r1, r3
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f001 f907 	bl	80093d6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 fcc2 	bl	8008b52 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	6839      	ldr	r1, [r7, #0]
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	4798      	blx	r3
 80081dc:	4603      	mov	r3, r0
 80081de:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80081e0:	e004      	b.n	80081ec <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80081e2:	6839      	ldr	r1, [r7, #0]
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f000 fbe9 	bl	80089bc <USBD_CtlError>
              break;
 80081ea:	e000      	b.n	80081ee <USBD_StdEPReq+0x154>
              break;
 80081ec:	bf00      	nop
          }
          break;
 80081ee:	e0ab      	b.n	8008348 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	2b02      	cmp	r3, #2
 80081fa:	d002      	beq.n	8008202 <USBD_StdEPReq+0x168>
 80081fc:	2b03      	cmp	r3, #3
 80081fe:	d032      	beq.n	8008266 <USBD_StdEPReq+0x1cc>
 8008200:	e097      	b.n	8008332 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008202:	7bbb      	ldrb	r3, [r7, #14]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d007      	beq.n	8008218 <USBD_StdEPReq+0x17e>
 8008208:	7bbb      	ldrb	r3, [r7, #14]
 800820a:	2b80      	cmp	r3, #128	; 0x80
 800820c:	d004      	beq.n	8008218 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800820e:	6839      	ldr	r1, [r7, #0]
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f000 fbd3 	bl	80089bc <USBD_CtlError>
                break;
 8008216:	e091      	b.n	800833c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008218:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800821c:	2b00      	cmp	r3, #0
 800821e:	da0b      	bge.n	8008238 <USBD_StdEPReq+0x19e>
 8008220:	7bbb      	ldrb	r3, [r7, #14]
 8008222:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008226:	4613      	mov	r3, r2
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	4413      	add	r3, r2
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	3310      	adds	r3, #16
 8008230:	687a      	ldr	r2, [r7, #4]
 8008232:	4413      	add	r3, r2
 8008234:	3304      	adds	r3, #4
 8008236:	e00b      	b.n	8008250 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008238:	7bbb      	ldrb	r3, [r7, #14]
 800823a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800823e:	4613      	mov	r3, r2
 8008240:	009b      	lsls	r3, r3, #2
 8008242:	4413      	add	r3, r2
 8008244:	009b      	lsls	r3, r3, #2
 8008246:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	4413      	add	r3, r2
 800824e:	3304      	adds	r3, #4
 8008250:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	2200      	movs	r2, #0
 8008256:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	2202      	movs	r2, #2
 800825c:	4619      	mov	r1, r3
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 fc1d 	bl	8008a9e <USBD_CtlSendData>
              break;
 8008264:	e06a      	b.n	800833c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008266:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800826a:	2b00      	cmp	r3, #0
 800826c:	da11      	bge.n	8008292 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800826e:	7bbb      	ldrb	r3, [r7, #14]
 8008270:	f003 020f 	and.w	r2, r3, #15
 8008274:	6879      	ldr	r1, [r7, #4]
 8008276:	4613      	mov	r3, r2
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	4413      	add	r3, r2
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	440b      	add	r3, r1
 8008280:	3324      	adds	r3, #36	; 0x24
 8008282:	881b      	ldrh	r3, [r3, #0]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d117      	bne.n	80082b8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008288:	6839      	ldr	r1, [r7, #0]
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 fb96 	bl	80089bc <USBD_CtlError>
                  break;
 8008290:	e054      	b.n	800833c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008292:	7bbb      	ldrb	r3, [r7, #14]
 8008294:	f003 020f 	and.w	r2, r3, #15
 8008298:	6879      	ldr	r1, [r7, #4]
 800829a:	4613      	mov	r3, r2
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	4413      	add	r3, r2
 80082a0:	009b      	lsls	r3, r3, #2
 80082a2:	440b      	add	r3, r1
 80082a4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80082a8:	881b      	ldrh	r3, [r3, #0]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d104      	bne.n	80082b8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80082ae:	6839      	ldr	r1, [r7, #0]
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 fb83 	bl	80089bc <USBD_CtlError>
                  break;
 80082b6:	e041      	b.n	800833c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	da0b      	bge.n	80082d8 <USBD_StdEPReq+0x23e>
 80082c0:	7bbb      	ldrb	r3, [r7, #14]
 80082c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80082c6:	4613      	mov	r3, r2
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	4413      	add	r3, r2
 80082cc:	009b      	lsls	r3, r3, #2
 80082ce:	3310      	adds	r3, #16
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	4413      	add	r3, r2
 80082d4:	3304      	adds	r3, #4
 80082d6:	e00b      	b.n	80082f0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80082d8:	7bbb      	ldrb	r3, [r7, #14]
 80082da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082de:	4613      	mov	r3, r2
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	4413      	add	r3, r2
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	4413      	add	r3, r2
 80082ee:	3304      	adds	r3, #4
 80082f0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80082f2:	7bbb      	ldrb	r3, [r7, #14]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d002      	beq.n	80082fe <USBD_StdEPReq+0x264>
 80082f8:	7bbb      	ldrb	r3, [r7, #14]
 80082fa:	2b80      	cmp	r3, #128	; 0x80
 80082fc:	d103      	bne.n	8008306 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	2200      	movs	r2, #0
 8008302:	601a      	str	r2, [r3, #0]
 8008304:	e00e      	b.n	8008324 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008306:	7bbb      	ldrb	r3, [r7, #14]
 8008308:	4619      	mov	r1, r3
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f001 f882 	bl	8009414 <USBD_LL_IsStallEP>
 8008310:	4603      	mov	r3, r0
 8008312:	2b00      	cmp	r3, #0
 8008314:	d003      	beq.n	800831e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	2201      	movs	r2, #1
 800831a:	601a      	str	r2, [r3, #0]
 800831c:	e002      	b.n	8008324 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	2200      	movs	r2, #0
 8008322:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	2202      	movs	r2, #2
 8008328:	4619      	mov	r1, r3
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 fbb7 	bl	8008a9e <USBD_CtlSendData>
              break;
 8008330:	e004      	b.n	800833c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008332:	6839      	ldr	r1, [r7, #0]
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 fb41 	bl	80089bc <USBD_CtlError>
              break;
 800833a:	bf00      	nop
          }
          break;
 800833c:	e004      	b.n	8008348 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800833e:	6839      	ldr	r1, [r7, #0]
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 fb3b 	bl	80089bc <USBD_CtlError>
          break;
 8008346:	bf00      	nop
      }
      break;
 8008348:	e004      	b.n	8008354 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800834a:	6839      	ldr	r1, [r7, #0]
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 fb35 	bl	80089bc <USBD_CtlError>
      break;
 8008352:	bf00      	nop
  }

  return ret;
 8008354:	7bfb      	ldrb	r3, [r7, #15]
}
 8008356:	4618      	mov	r0, r3
 8008358:	3710      	adds	r7, #16
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
	...

08008360 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800836a:	2300      	movs	r3, #0
 800836c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800836e:	2300      	movs	r3, #0
 8008370:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008372:	2300      	movs	r3, #0
 8008374:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	885b      	ldrh	r3, [r3, #2]
 800837a:	0a1b      	lsrs	r3, r3, #8
 800837c:	b29b      	uxth	r3, r3
 800837e:	3b01      	subs	r3, #1
 8008380:	2b06      	cmp	r3, #6
 8008382:	f200 8128 	bhi.w	80085d6 <USBD_GetDescriptor+0x276>
 8008386:	a201      	add	r2, pc, #4	; (adr r2, 800838c <USBD_GetDescriptor+0x2c>)
 8008388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800838c:	080083a9 	.word	0x080083a9
 8008390:	080083c1 	.word	0x080083c1
 8008394:	08008401 	.word	0x08008401
 8008398:	080085d7 	.word	0x080085d7
 800839c:	080085d7 	.word	0x080085d7
 80083a0:	08008577 	.word	0x08008577
 80083a4:	080085a3 	.word	0x080085a3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	687a      	ldr	r2, [r7, #4]
 80083b2:	7c12      	ldrb	r2, [r2, #16]
 80083b4:	f107 0108 	add.w	r1, r7, #8
 80083b8:	4610      	mov	r0, r2
 80083ba:	4798      	blx	r3
 80083bc:	60f8      	str	r0, [r7, #12]
      break;
 80083be:	e112      	b.n	80085e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	7c1b      	ldrb	r3, [r3, #16]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d10d      	bne.n	80083e4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083d0:	f107 0208 	add.w	r2, r7, #8
 80083d4:	4610      	mov	r0, r2
 80083d6:	4798      	blx	r3
 80083d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	3301      	adds	r3, #1
 80083de:	2202      	movs	r2, #2
 80083e0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80083e2:	e100      	b.n	80085e6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ec:	f107 0208 	add.w	r2, r7, #8
 80083f0:	4610      	mov	r0, r2
 80083f2:	4798      	blx	r3
 80083f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	3301      	adds	r3, #1
 80083fa:	2202      	movs	r2, #2
 80083fc:	701a      	strb	r2, [r3, #0]
      break;
 80083fe:	e0f2      	b.n	80085e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	885b      	ldrh	r3, [r3, #2]
 8008404:	b2db      	uxtb	r3, r3
 8008406:	2b05      	cmp	r3, #5
 8008408:	f200 80ac 	bhi.w	8008564 <USBD_GetDescriptor+0x204>
 800840c:	a201      	add	r2, pc, #4	; (adr r2, 8008414 <USBD_GetDescriptor+0xb4>)
 800840e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008412:	bf00      	nop
 8008414:	0800842d 	.word	0x0800842d
 8008418:	08008461 	.word	0x08008461
 800841c:	08008495 	.word	0x08008495
 8008420:	080084c9 	.word	0x080084c9
 8008424:	080084fd 	.word	0x080084fd
 8008428:	08008531 	.word	0x08008531
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d00b      	beq.n	8008450 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	7c12      	ldrb	r2, [r2, #16]
 8008444:	f107 0108 	add.w	r1, r7, #8
 8008448:	4610      	mov	r0, r2
 800844a:	4798      	blx	r3
 800844c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800844e:	e091      	b.n	8008574 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008450:	6839      	ldr	r1, [r7, #0]
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 fab2 	bl	80089bc <USBD_CtlError>
            err++;
 8008458:	7afb      	ldrb	r3, [r7, #11]
 800845a:	3301      	adds	r3, #1
 800845c:	72fb      	strb	r3, [r7, #11]
          break;
 800845e:	e089      	b.n	8008574 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008466:	689b      	ldr	r3, [r3, #8]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d00b      	beq.n	8008484 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	7c12      	ldrb	r2, [r2, #16]
 8008478:	f107 0108 	add.w	r1, r7, #8
 800847c:	4610      	mov	r0, r2
 800847e:	4798      	blx	r3
 8008480:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008482:	e077      	b.n	8008574 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008484:	6839      	ldr	r1, [r7, #0]
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 fa98 	bl	80089bc <USBD_CtlError>
            err++;
 800848c:	7afb      	ldrb	r3, [r7, #11]
 800848e:	3301      	adds	r3, #1
 8008490:	72fb      	strb	r3, [r7, #11]
          break;
 8008492:	e06f      	b.n	8008574 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d00b      	beq.n	80084b8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084a6:	68db      	ldr	r3, [r3, #12]
 80084a8:	687a      	ldr	r2, [r7, #4]
 80084aa:	7c12      	ldrb	r2, [r2, #16]
 80084ac:	f107 0108 	add.w	r1, r7, #8
 80084b0:	4610      	mov	r0, r2
 80084b2:	4798      	blx	r3
 80084b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084b6:	e05d      	b.n	8008574 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084b8:	6839      	ldr	r1, [r7, #0]
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 fa7e 	bl	80089bc <USBD_CtlError>
            err++;
 80084c0:	7afb      	ldrb	r3, [r7, #11]
 80084c2:	3301      	adds	r3, #1
 80084c4:	72fb      	strb	r3, [r7, #11]
          break;
 80084c6:	e055      	b.n	8008574 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084ce:	691b      	ldr	r3, [r3, #16]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d00b      	beq.n	80084ec <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084da:	691b      	ldr	r3, [r3, #16]
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	7c12      	ldrb	r2, [r2, #16]
 80084e0:	f107 0108 	add.w	r1, r7, #8
 80084e4:	4610      	mov	r0, r2
 80084e6:	4798      	blx	r3
 80084e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084ea:	e043      	b.n	8008574 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084ec:	6839      	ldr	r1, [r7, #0]
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 fa64 	bl	80089bc <USBD_CtlError>
            err++;
 80084f4:	7afb      	ldrb	r3, [r7, #11]
 80084f6:	3301      	adds	r3, #1
 80084f8:	72fb      	strb	r3, [r7, #11]
          break;
 80084fa:	e03b      	b.n	8008574 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008502:	695b      	ldr	r3, [r3, #20]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d00b      	beq.n	8008520 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800850e:	695b      	ldr	r3, [r3, #20]
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	7c12      	ldrb	r2, [r2, #16]
 8008514:	f107 0108 	add.w	r1, r7, #8
 8008518:	4610      	mov	r0, r2
 800851a:	4798      	blx	r3
 800851c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800851e:	e029      	b.n	8008574 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008520:	6839      	ldr	r1, [r7, #0]
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f000 fa4a 	bl	80089bc <USBD_CtlError>
            err++;
 8008528:	7afb      	ldrb	r3, [r7, #11]
 800852a:	3301      	adds	r3, #1
 800852c:	72fb      	strb	r3, [r7, #11]
          break;
 800852e:	e021      	b.n	8008574 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008536:	699b      	ldr	r3, [r3, #24]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d00b      	beq.n	8008554 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008542:	699b      	ldr	r3, [r3, #24]
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	7c12      	ldrb	r2, [r2, #16]
 8008548:	f107 0108 	add.w	r1, r7, #8
 800854c:	4610      	mov	r0, r2
 800854e:	4798      	blx	r3
 8008550:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008552:	e00f      	b.n	8008574 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008554:	6839      	ldr	r1, [r7, #0]
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f000 fa30 	bl	80089bc <USBD_CtlError>
            err++;
 800855c:	7afb      	ldrb	r3, [r7, #11]
 800855e:	3301      	adds	r3, #1
 8008560:	72fb      	strb	r3, [r7, #11]
          break;
 8008562:	e007      	b.n	8008574 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008564:	6839      	ldr	r1, [r7, #0]
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 fa28 	bl	80089bc <USBD_CtlError>
          err++;
 800856c:	7afb      	ldrb	r3, [r7, #11]
 800856e:	3301      	adds	r3, #1
 8008570:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008572:	bf00      	nop
      }
      break;
 8008574:	e037      	b.n	80085e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	7c1b      	ldrb	r3, [r3, #16]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d109      	bne.n	8008592 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008586:	f107 0208 	add.w	r2, r7, #8
 800858a:	4610      	mov	r0, r2
 800858c:	4798      	blx	r3
 800858e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008590:	e029      	b.n	80085e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008592:	6839      	ldr	r1, [r7, #0]
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f000 fa11 	bl	80089bc <USBD_CtlError>
        err++;
 800859a:	7afb      	ldrb	r3, [r7, #11]
 800859c:	3301      	adds	r3, #1
 800859e:	72fb      	strb	r3, [r7, #11]
      break;
 80085a0:	e021      	b.n	80085e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	7c1b      	ldrb	r3, [r3, #16]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d10d      	bne.n	80085c6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085b2:	f107 0208 	add.w	r2, r7, #8
 80085b6:	4610      	mov	r0, r2
 80085b8:	4798      	blx	r3
 80085ba:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	3301      	adds	r3, #1
 80085c0:	2207      	movs	r2, #7
 80085c2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80085c4:	e00f      	b.n	80085e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80085c6:	6839      	ldr	r1, [r7, #0]
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 f9f7 	bl	80089bc <USBD_CtlError>
        err++;
 80085ce:	7afb      	ldrb	r3, [r7, #11]
 80085d0:	3301      	adds	r3, #1
 80085d2:	72fb      	strb	r3, [r7, #11]
      break;
 80085d4:	e007      	b.n	80085e6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80085d6:	6839      	ldr	r1, [r7, #0]
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f000 f9ef 	bl	80089bc <USBD_CtlError>
      err++;
 80085de:	7afb      	ldrb	r3, [r7, #11]
 80085e0:	3301      	adds	r3, #1
 80085e2:	72fb      	strb	r3, [r7, #11]
      break;
 80085e4:	bf00      	nop
  }

  if (err != 0U)
 80085e6:	7afb      	ldrb	r3, [r7, #11]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d11e      	bne.n	800862a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	88db      	ldrh	r3, [r3, #6]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d016      	beq.n	8008622 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80085f4:	893b      	ldrh	r3, [r7, #8]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d00e      	beq.n	8008618 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	88da      	ldrh	r2, [r3, #6]
 80085fe:	893b      	ldrh	r3, [r7, #8]
 8008600:	4293      	cmp	r3, r2
 8008602:	bf28      	it	cs
 8008604:	4613      	movcs	r3, r2
 8008606:	b29b      	uxth	r3, r3
 8008608:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800860a:	893b      	ldrh	r3, [r7, #8]
 800860c:	461a      	mov	r2, r3
 800860e:	68f9      	ldr	r1, [r7, #12]
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 fa44 	bl	8008a9e <USBD_CtlSendData>
 8008616:	e009      	b.n	800862c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008618:	6839      	ldr	r1, [r7, #0]
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f000 f9ce 	bl	80089bc <USBD_CtlError>
 8008620:	e004      	b.n	800862c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 fa95 	bl	8008b52 <USBD_CtlSendStatus>
 8008628:	e000      	b.n	800862c <USBD_GetDescriptor+0x2cc>
    return;
 800862a:	bf00      	nop
  }
}
 800862c:	3710      	adds	r7, #16
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
 8008632:	bf00      	nop

08008634 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	889b      	ldrh	r3, [r3, #4]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d131      	bne.n	80086aa <USBD_SetAddress+0x76>
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	88db      	ldrh	r3, [r3, #6]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d12d      	bne.n	80086aa <USBD_SetAddress+0x76>
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	885b      	ldrh	r3, [r3, #2]
 8008652:	2b7f      	cmp	r3, #127	; 0x7f
 8008654:	d829      	bhi.n	80086aa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	885b      	ldrh	r3, [r3, #2]
 800865a:	b2db      	uxtb	r3, r3
 800865c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008660:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008668:	b2db      	uxtb	r3, r3
 800866a:	2b03      	cmp	r3, #3
 800866c:	d104      	bne.n	8008678 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800866e:	6839      	ldr	r1, [r7, #0]
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 f9a3 	bl	80089bc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008676:	e01d      	b.n	80086b4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	7bfa      	ldrb	r2, [r7, #15]
 800867c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008680:	7bfb      	ldrb	r3, [r7, #15]
 8008682:	4619      	mov	r1, r3
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 fef1 	bl	800946c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 fa61 	bl	8008b52 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008690:	7bfb      	ldrb	r3, [r7, #15]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d004      	beq.n	80086a0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2202      	movs	r2, #2
 800869a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800869e:	e009      	b.n	80086b4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2201      	movs	r2, #1
 80086a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086a8:	e004      	b.n	80086b4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80086aa:	6839      	ldr	r1, [r7, #0]
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 f985 	bl	80089bc <USBD_CtlError>
  }
}
 80086b2:	bf00      	nop
 80086b4:	bf00      	nop
 80086b6:	3710      	adds	r7, #16
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b084      	sub	sp, #16
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80086c6:	2300      	movs	r3, #0
 80086c8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	885b      	ldrh	r3, [r3, #2]
 80086ce:	b2da      	uxtb	r2, r3
 80086d0:	4b4c      	ldr	r3, [pc, #304]	; (8008804 <USBD_SetConfig+0x148>)
 80086d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80086d4:	4b4b      	ldr	r3, [pc, #300]	; (8008804 <USBD_SetConfig+0x148>)
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d905      	bls.n	80086e8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80086dc:	6839      	ldr	r1, [r7, #0]
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 f96c 	bl	80089bc <USBD_CtlError>
    return USBD_FAIL;
 80086e4:	2303      	movs	r3, #3
 80086e6:	e088      	b.n	80087fa <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	2b02      	cmp	r3, #2
 80086f2:	d002      	beq.n	80086fa <USBD_SetConfig+0x3e>
 80086f4:	2b03      	cmp	r3, #3
 80086f6:	d025      	beq.n	8008744 <USBD_SetConfig+0x88>
 80086f8:	e071      	b.n	80087de <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80086fa:	4b42      	ldr	r3, [pc, #264]	; (8008804 <USBD_SetConfig+0x148>)
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d01c      	beq.n	800873c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008702:	4b40      	ldr	r3, [pc, #256]	; (8008804 <USBD_SetConfig+0x148>)
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	461a      	mov	r2, r3
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800870c:	4b3d      	ldr	r3, [pc, #244]	; (8008804 <USBD_SetConfig+0x148>)
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	4619      	mov	r1, r3
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f7ff f948 	bl	80079a8 <USBD_SetClassConfig>
 8008718:	4603      	mov	r3, r0
 800871a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800871c:	7bfb      	ldrb	r3, [r7, #15]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d004      	beq.n	800872c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008722:	6839      	ldr	r1, [r7, #0]
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f000 f949 	bl	80089bc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800872a:	e065      	b.n	80087f8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f000 fa10 	bl	8008b52 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2203      	movs	r2, #3
 8008736:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800873a:	e05d      	b.n	80087f8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 fa08 	bl	8008b52 <USBD_CtlSendStatus>
      break;
 8008742:	e059      	b.n	80087f8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008744:	4b2f      	ldr	r3, [pc, #188]	; (8008804 <USBD_SetConfig+0x148>)
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d112      	bne.n	8008772 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2202      	movs	r2, #2
 8008750:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008754:	4b2b      	ldr	r3, [pc, #172]	; (8008804 <USBD_SetConfig+0x148>)
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	461a      	mov	r2, r3
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800875e:	4b29      	ldr	r3, [pc, #164]	; (8008804 <USBD_SetConfig+0x148>)
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	4619      	mov	r1, r3
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f7ff f93b 	bl	80079e0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 f9f1 	bl	8008b52 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008770:	e042      	b.n	80087f8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008772:	4b24      	ldr	r3, [pc, #144]	; (8008804 <USBD_SetConfig+0x148>)
 8008774:	781b      	ldrb	r3, [r3, #0]
 8008776:	461a      	mov	r2, r3
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	429a      	cmp	r2, r3
 800877e:	d02a      	beq.n	80087d6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	b2db      	uxtb	r3, r3
 8008786:	4619      	mov	r1, r3
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f7ff f929 	bl	80079e0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800878e:	4b1d      	ldr	r3, [pc, #116]	; (8008804 <USBD_SetConfig+0x148>)
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	461a      	mov	r2, r3
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008798:	4b1a      	ldr	r3, [pc, #104]	; (8008804 <USBD_SetConfig+0x148>)
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	4619      	mov	r1, r3
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f7ff f902 	bl	80079a8 <USBD_SetClassConfig>
 80087a4:	4603      	mov	r3, r0
 80087a6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80087a8:	7bfb      	ldrb	r3, [r7, #15]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d00f      	beq.n	80087ce <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80087ae:	6839      	ldr	r1, [r7, #0]
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 f903 	bl	80089bc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	b2db      	uxtb	r3, r3
 80087bc:	4619      	mov	r1, r3
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f7ff f90e 	bl	80079e0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2202      	movs	r2, #2
 80087c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80087cc:	e014      	b.n	80087f8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 f9bf 	bl	8008b52 <USBD_CtlSendStatus>
      break;
 80087d4:	e010      	b.n	80087f8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 f9bb 	bl	8008b52 <USBD_CtlSendStatus>
      break;
 80087dc:	e00c      	b.n	80087f8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80087de:	6839      	ldr	r1, [r7, #0]
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 f8eb 	bl	80089bc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80087e6:	4b07      	ldr	r3, [pc, #28]	; (8008804 <USBD_SetConfig+0x148>)
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	4619      	mov	r1, r3
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f7ff f8f7 	bl	80079e0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80087f2:	2303      	movs	r3, #3
 80087f4:	73fb      	strb	r3, [r7, #15]
      break;
 80087f6:	bf00      	nop
  }

  return ret;
 80087f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3710      	adds	r7, #16
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	20000204 	.word	0x20000204

08008808 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b082      	sub	sp, #8
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	88db      	ldrh	r3, [r3, #6]
 8008816:	2b01      	cmp	r3, #1
 8008818:	d004      	beq.n	8008824 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800881a:	6839      	ldr	r1, [r7, #0]
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 f8cd 	bl	80089bc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008822:	e023      	b.n	800886c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800882a:	b2db      	uxtb	r3, r3
 800882c:	2b02      	cmp	r3, #2
 800882e:	dc02      	bgt.n	8008836 <USBD_GetConfig+0x2e>
 8008830:	2b00      	cmp	r3, #0
 8008832:	dc03      	bgt.n	800883c <USBD_GetConfig+0x34>
 8008834:	e015      	b.n	8008862 <USBD_GetConfig+0x5a>
 8008836:	2b03      	cmp	r3, #3
 8008838:	d00b      	beq.n	8008852 <USBD_GetConfig+0x4a>
 800883a:	e012      	b.n	8008862 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2200      	movs	r2, #0
 8008840:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	3308      	adds	r3, #8
 8008846:	2201      	movs	r2, #1
 8008848:	4619      	mov	r1, r3
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 f927 	bl	8008a9e <USBD_CtlSendData>
        break;
 8008850:	e00c      	b.n	800886c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	3304      	adds	r3, #4
 8008856:	2201      	movs	r2, #1
 8008858:	4619      	mov	r1, r3
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 f91f 	bl	8008a9e <USBD_CtlSendData>
        break;
 8008860:	e004      	b.n	800886c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008862:	6839      	ldr	r1, [r7, #0]
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f000 f8a9 	bl	80089bc <USBD_CtlError>
        break;
 800886a:	bf00      	nop
}
 800886c:	bf00      	nop
 800886e:	3708      	adds	r7, #8
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008884:	b2db      	uxtb	r3, r3
 8008886:	3b01      	subs	r3, #1
 8008888:	2b02      	cmp	r3, #2
 800888a:	d81e      	bhi.n	80088ca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	88db      	ldrh	r3, [r3, #6]
 8008890:	2b02      	cmp	r3, #2
 8008892:	d004      	beq.n	800889e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008894:	6839      	ldr	r1, [r7, #0]
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 f890 	bl	80089bc <USBD_CtlError>
        break;
 800889c:	e01a      	b.n	80088d4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2201      	movs	r2, #1
 80088a2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d005      	beq.n	80088ba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	68db      	ldr	r3, [r3, #12]
 80088b2:	f043 0202 	orr.w	r2, r3, #2
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	330c      	adds	r3, #12
 80088be:	2202      	movs	r2, #2
 80088c0:	4619      	mov	r1, r3
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 f8eb 	bl	8008a9e <USBD_CtlSendData>
      break;
 80088c8:	e004      	b.n	80088d4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80088ca:	6839      	ldr	r1, [r7, #0]
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 f875 	bl	80089bc <USBD_CtlError>
      break;
 80088d2:	bf00      	nop
  }
}
 80088d4:	bf00      	nop
 80088d6:	3708      	adds	r7, #8
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	885b      	ldrh	r3, [r3, #2]
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d106      	bne.n	80088fc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2201      	movs	r2, #1
 80088f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 f92b 	bl	8008b52 <USBD_CtlSendStatus>
  }
}
 80088fc:	bf00      	nop
 80088fe:	3708      	adds	r7, #8
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}

08008904 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b082      	sub	sp, #8
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008914:	b2db      	uxtb	r3, r3
 8008916:	3b01      	subs	r3, #1
 8008918:	2b02      	cmp	r3, #2
 800891a:	d80b      	bhi.n	8008934 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	885b      	ldrh	r3, [r3, #2]
 8008920:	2b01      	cmp	r3, #1
 8008922:	d10c      	bne.n	800893e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2200      	movs	r2, #0
 8008928:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 f910 	bl	8008b52 <USBD_CtlSendStatus>
      }
      break;
 8008932:	e004      	b.n	800893e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008934:	6839      	ldr	r1, [r7, #0]
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f000 f840 	bl	80089bc <USBD_CtlError>
      break;
 800893c:	e000      	b.n	8008940 <USBD_ClrFeature+0x3c>
      break;
 800893e:	bf00      	nop
  }
}
 8008940:	bf00      	nop
 8008942:	3708      	adds	r7, #8
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	781a      	ldrb	r2, [r3, #0]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	3301      	adds	r3, #1
 8008962:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	781a      	ldrb	r2, [r3, #0]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	3301      	adds	r3, #1
 8008970:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008972:	68f8      	ldr	r0, [r7, #12]
 8008974:	f7ff fabb 	bl	8007eee <SWAPBYTE>
 8008978:	4603      	mov	r3, r0
 800897a:	461a      	mov	r2, r3
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	3301      	adds	r3, #1
 8008984:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	3301      	adds	r3, #1
 800898a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800898c:	68f8      	ldr	r0, [r7, #12]
 800898e:	f7ff faae 	bl	8007eee <SWAPBYTE>
 8008992:	4603      	mov	r3, r0
 8008994:	461a      	mov	r2, r3
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	3301      	adds	r3, #1
 800899e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	3301      	adds	r3, #1
 80089a4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80089a6:	68f8      	ldr	r0, [r7, #12]
 80089a8:	f7ff faa1 	bl	8007eee <SWAPBYTE>
 80089ac:	4603      	mov	r3, r0
 80089ae:	461a      	mov	r2, r3
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	80da      	strh	r2, [r3, #6]
}
 80089b4:	bf00      	nop
 80089b6:	3710      	adds	r7, #16
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b082      	sub	sp, #8
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80089c6:	2180      	movs	r1, #128	; 0x80
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 fce5 	bl	8009398 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80089ce:	2100      	movs	r1, #0
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f000 fce1 	bl	8009398 <USBD_LL_StallEP>
}
 80089d6:	bf00      	nop
 80089d8:	3708      	adds	r7, #8
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}

080089de <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80089de:	b580      	push	{r7, lr}
 80089e0:	b086      	sub	sp, #24
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	60f8      	str	r0, [r7, #12]
 80089e6:	60b9      	str	r1, [r7, #8]
 80089e8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80089ea:	2300      	movs	r3, #0
 80089ec:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d036      	beq.n	8008a62 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80089f8:	6938      	ldr	r0, [r7, #16]
 80089fa:	f000 f836 	bl	8008a6a <USBD_GetLen>
 80089fe:	4603      	mov	r3, r0
 8008a00:	3301      	adds	r3, #1
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	005b      	lsls	r3, r3, #1
 8008a06:	b29a      	uxth	r2, r3
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008a0c:	7dfb      	ldrb	r3, [r7, #23]
 8008a0e:	68ba      	ldr	r2, [r7, #8]
 8008a10:	4413      	add	r3, r2
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	7812      	ldrb	r2, [r2, #0]
 8008a16:	701a      	strb	r2, [r3, #0]
  idx++;
 8008a18:	7dfb      	ldrb	r3, [r7, #23]
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008a1e:	7dfb      	ldrb	r3, [r7, #23]
 8008a20:	68ba      	ldr	r2, [r7, #8]
 8008a22:	4413      	add	r3, r2
 8008a24:	2203      	movs	r2, #3
 8008a26:	701a      	strb	r2, [r3, #0]
  idx++;
 8008a28:	7dfb      	ldrb	r3, [r7, #23]
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008a2e:	e013      	b.n	8008a58 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008a30:	7dfb      	ldrb	r3, [r7, #23]
 8008a32:	68ba      	ldr	r2, [r7, #8]
 8008a34:	4413      	add	r3, r2
 8008a36:	693a      	ldr	r2, [r7, #16]
 8008a38:	7812      	ldrb	r2, [r2, #0]
 8008a3a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	3301      	adds	r3, #1
 8008a40:	613b      	str	r3, [r7, #16]
    idx++;
 8008a42:	7dfb      	ldrb	r3, [r7, #23]
 8008a44:	3301      	adds	r3, #1
 8008a46:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008a48:	7dfb      	ldrb	r3, [r7, #23]
 8008a4a:	68ba      	ldr	r2, [r7, #8]
 8008a4c:	4413      	add	r3, r2
 8008a4e:	2200      	movs	r2, #0
 8008a50:	701a      	strb	r2, [r3, #0]
    idx++;
 8008a52:	7dfb      	ldrb	r3, [r7, #23]
 8008a54:	3301      	adds	r3, #1
 8008a56:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d1e7      	bne.n	8008a30 <USBD_GetString+0x52>
 8008a60:	e000      	b.n	8008a64 <USBD_GetString+0x86>
    return;
 8008a62:	bf00      	nop
  }
}
 8008a64:	3718      	adds	r7, #24
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}

08008a6a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008a6a:	b480      	push	{r7}
 8008a6c:	b085      	sub	sp, #20
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008a72:	2300      	movs	r3, #0
 8008a74:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008a7a:	e005      	b.n	8008a88 <USBD_GetLen+0x1e>
  {
    len++;
 8008a7c:	7bfb      	ldrb	r3, [r7, #15]
 8008a7e:	3301      	adds	r3, #1
 8008a80:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	3301      	adds	r3, #1
 8008a86:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d1f5      	bne.n	8008a7c <USBD_GetLen+0x12>
  }

  return len;
 8008a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3714      	adds	r7, #20
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr

08008a9e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008a9e:	b580      	push	{r7, lr}
 8008aa0:	b084      	sub	sp, #16
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	60f8      	str	r0, [r7, #12]
 8008aa6:	60b9      	str	r1, [r7, #8]
 8008aa8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	2202      	movs	r2, #2
 8008aae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	68ba      	ldr	r2, [r7, #8]
 8008ac2:	2100      	movs	r1, #0
 8008ac4:	68f8      	ldr	r0, [r7, #12]
 8008ac6:	f000 fcf0 	bl	80094aa <USBD_LL_Transmit>

  return USBD_OK;
 8008aca:	2300      	movs	r3, #0
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3710      	adds	r7, #16
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	60f8      	str	r0, [r7, #12]
 8008adc:	60b9      	str	r1, [r7, #8]
 8008ade:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	68ba      	ldr	r2, [r7, #8]
 8008ae4:	2100      	movs	r1, #0
 8008ae6:	68f8      	ldr	r0, [r7, #12]
 8008ae8:	f000 fcdf 	bl	80094aa <USBD_LL_Transmit>

  return USBD_OK;
 8008aec:	2300      	movs	r3, #0
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3710      	adds	r7, #16
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}

08008af6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008af6:	b580      	push	{r7, lr}
 8008af8:	b084      	sub	sp, #16
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	60f8      	str	r0, [r7, #12]
 8008afe:	60b9      	str	r1, [r7, #8]
 8008b00:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2203      	movs	r2, #3
 8008b06:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	68ba      	ldr	r2, [r7, #8]
 8008b1e:	2100      	movs	r1, #0
 8008b20:	68f8      	ldr	r0, [r7, #12]
 8008b22:	f000 fce3 	bl	80094ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b26:	2300      	movs	r3, #0
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3710      	adds	r7, #16
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b084      	sub	sp, #16
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	60b9      	str	r1, [r7, #8]
 8008b3a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	68ba      	ldr	r2, [r7, #8]
 8008b40:	2100      	movs	r1, #0
 8008b42:	68f8      	ldr	r0, [r7, #12]
 8008b44:	f000 fcd2 	bl	80094ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b48:	2300      	movs	r3, #0
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3710      	adds	r7, #16
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}

08008b52 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008b52:	b580      	push	{r7, lr}
 8008b54:	b082      	sub	sp, #8
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2204      	movs	r2, #4
 8008b5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008b62:	2300      	movs	r3, #0
 8008b64:	2200      	movs	r2, #0
 8008b66:	2100      	movs	r1, #0
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 fc9e 	bl	80094aa <USBD_LL_Transmit>

  return USBD_OK;
 8008b6e:	2300      	movs	r3, #0
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3708      	adds	r7, #8
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b082      	sub	sp, #8
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2205      	movs	r2, #5
 8008b84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b88:	2300      	movs	r3, #0
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	2100      	movs	r1, #0
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 fcac 	bl	80094ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b94:	2300      	movs	r3, #0
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3708      	adds	r7, #8
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
	...

08008ba0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	4912      	ldr	r1, [pc, #72]	; (8008bf0 <MX_USB_DEVICE_Init+0x50>)
 8008ba8:	4812      	ldr	r0, [pc, #72]	; (8008bf4 <MX_USB_DEVICE_Init+0x54>)
 8008baa:	f7fe fe8f 	bl	80078cc <USBD_Init>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d001      	beq.n	8008bb8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008bb4:	f7f8 fd6a 	bl	800168c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008bb8:	490f      	ldr	r1, [pc, #60]	; (8008bf8 <MX_USB_DEVICE_Init+0x58>)
 8008bba:	480e      	ldr	r0, [pc, #56]	; (8008bf4 <MX_USB_DEVICE_Init+0x54>)
 8008bbc:	f7fe feb6 	bl	800792c <USBD_RegisterClass>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d001      	beq.n	8008bca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008bc6:	f7f8 fd61 	bl	800168c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008bca:	490c      	ldr	r1, [pc, #48]	; (8008bfc <MX_USB_DEVICE_Init+0x5c>)
 8008bcc:	4809      	ldr	r0, [pc, #36]	; (8008bf4 <MX_USB_DEVICE_Init+0x54>)
 8008bce:	f7fe fdd7 	bl	8007780 <USBD_CDC_RegisterInterface>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d001      	beq.n	8008bdc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008bd8:	f7f8 fd58 	bl	800168c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008bdc:	4805      	ldr	r0, [pc, #20]	; (8008bf4 <MX_USB_DEVICE_Init+0x54>)
 8008bde:	f7fe fecc 	bl	800797a <USBD_Start>
 8008be2:	4603      	mov	r3, r0
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d001      	beq.n	8008bec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008be8:	f7f8 fd50 	bl	800168c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008bec:	bf00      	nop
 8008bee:	bd80      	pop	{r7, pc}
 8008bf0:	20000130 	.word	0x20000130
 8008bf4:	20000524 	.word	0x20000524
 8008bf8:	20000018 	.word	0x20000018
 8008bfc:	2000011c 	.word	0x2000011c

08008c00 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008c04:	2200      	movs	r2, #0
 8008c06:	4905      	ldr	r1, [pc, #20]	; (8008c1c <CDC_Init_FS+0x1c>)
 8008c08:	4805      	ldr	r0, [pc, #20]	; (8008c20 <CDC_Init_FS+0x20>)
 8008c0a:	f7fe fdce 	bl	80077aa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008c0e:	4905      	ldr	r1, [pc, #20]	; (8008c24 <CDC_Init_FS+0x24>)
 8008c10:	4803      	ldr	r0, [pc, #12]	; (8008c20 <CDC_Init_FS+0x20>)
 8008c12:	f7fe fde8 	bl	80077e6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008c16:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	bd80      	pop	{r7, pc}
 8008c1c:	20000ff4 	.word	0x20000ff4
 8008c20:	20000524 	.word	0x20000524
 8008c24:	200007f4 	.word	0x200007f4

08008c28 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008c2c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr

08008c38 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b083      	sub	sp, #12
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	4603      	mov	r3, r0
 8008c40:	6039      	str	r1, [r7, #0]
 8008c42:	71fb      	strb	r3, [r7, #7]
 8008c44:	4613      	mov	r3, r2
 8008c46:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008c48:	79fb      	ldrb	r3, [r7, #7]
 8008c4a:	2b23      	cmp	r3, #35	; 0x23
 8008c4c:	d84a      	bhi.n	8008ce4 <CDC_Control_FS+0xac>
 8008c4e:	a201      	add	r2, pc, #4	; (adr r2, 8008c54 <CDC_Control_FS+0x1c>)
 8008c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c54:	08008ce5 	.word	0x08008ce5
 8008c58:	08008ce5 	.word	0x08008ce5
 8008c5c:	08008ce5 	.word	0x08008ce5
 8008c60:	08008ce5 	.word	0x08008ce5
 8008c64:	08008ce5 	.word	0x08008ce5
 8008c68:	08008ce5 	.word	0x08008ce5
 8008c6c:	08008ce5 	.word	0x08008ce5
 8008c70:	08008ce5 	.word	0x08008ce5
 8008c74:	08008ce5 	.word	0x08008ce5
 8008c78:	08008ce5 	.word	0x08008ce5
 8008c7c:	08008ce5 	.word	0x08008ce5
 8008c80:	08008ce5 	.word	0x08008ce5
 8008c84:	08008ce5 	.word	0x08008ce5
 8008c88:	08008ce5 	.word	0x08008ce5
 8008c8c:	08008ce5 	.word	0x08008ce5
 8008c90:	08008ce5 	.word	0x08008ce5
 8008c94:	08008ce5 	.word	0x08008ce5
 8008c98:	08008ce5 	.word	0x08008ce5
 8008c9c:	08008ce5 	.word	0x08008ce5
 8008ca0:	08008ce5 	.word	0x08008ce5
 8008ca4:	08008ce5 	.word	0x08008ce5
 8008ca8:	08008ce5 	.word	0x08008ce5
 8008cac:	08008ce5 	.word	0x08008ce5
 8008cb0:	08008ce5 	.word	0x08008ce5
 8008cb4:	08008ce5 	.word	0x08008ce5
 8008cb8:	08008ce5 	.word	0x08008ce5
 8008cbc:	08008ce5 	.word	0x08008ce5
 8008cc0:	08008ce5 	.word	0x08008ce5
 8008cc4:	08008ce5 	.word	0x08008ce5
 8008cc8:	08008ce5 	.word	0x08008ce5
 8008ccc:	08008ce5 	.word	0x08008ce5
 8008cd0:	08008ce5 	.word	0x08008ce5
 8008cd4:	08008ce5 	.word	0x08008ce5
 8008cd8:	08008ce5 	.word	0x08008ce5
 8008cdc:	08008ce5 	.word	0x08008ce5
 8008ce0:	08008ce5 	.word	0x08008ce5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008ce4:	bf00      	nop
  }

  return (USBD_OK);
 8008ce6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	370c      	adds	r7, #12
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr

08008cf4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b082      	sub	sp, #8
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008cfe:	6879      	ldr	r1, [r7, #4]
 8008d00:	4805      	ldr	r0, [pc, #20]	; (8008d18 <CDC_Receive_FS+0x24>)
 8008d02:	f7fe fd70 	bl	80077e6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008d06:	4804      	ldr	r0, [pc, #16]	; (8008d18 <CDC_Receive_FS+0x24>)
 8008d08:	f7fe fdb6 	bl	8007878 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008d0c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3708      	adds	r7, #8
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
 8008d16:	bf00      	nop
 8008d18:	20000524 	.word	0x20000524

08008d1c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b084      	sub	sp, #16
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	460b      	mov	r3, r1
 8008d26:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008d2c:	4b0d      	ldr	r3, [pc, #52]	; (8008d64 <CDC_Transmit_FS+0x48>)
 8008d2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d32:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d001      	beq.n	8008d42 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	e00b      	b.n	8008d5a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008d42:	887b      	ldrh	r3, [r7, #2]
 8008d44:	461a      	mov	r2, r3
 8008d46:	6879      	ldr	r1, [r7, #4]
 8008d48:	4806      	ldr	r0, [pc, #24]	; (8008d64 <CDC_Transmit_FS+0x48>)
 8008d4a:	f7fe fd2e 	bl	80077aa <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008d4e:	4805      	ldr	r0, [pc, #20]	; (8008d64 <CDC_Transmit_FS+0x48>)
 8008d50:	f7fe fd62 	bl	8007818 <USBD_CDC_TransmitPacket>
 8008d54:	4603      	mov	r3, r0
 8008d56:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3710      	adds	r7, #16
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}
 8008d62:	bf00      	nop
 8008d64:	20000524 	.word	0x20000524

08008d68 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b087      	sub	sp, #28
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	60f8      	str	r0, [r7, #12]
 8008d70:	60b9      	str	r1, [r7, #8]
 8008d72:	4613      	mov	r3, r2
 8008d74:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008d76:	2300      	movs	r3, #0
 8008d78:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008d7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	371c      	adds	r7, #28
 8008d82:	46bd      	mov	sp, r7
 8008d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d88:	4770      	bx	lr
	...

08008d8c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b083      	sub	sp, #12
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	4603      	mov	r3, r0
 8008d94:	6039      	str	r1, [r7, #0]
 8008d96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	2212      	movs	r2, #18
 8008d9c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008d9e:	4b03      	ldr	r3, [pc, #12]	; (8008dac <USBD_FS_DeviceDescriptor+0x20>)
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	370c      	adds	r7, #12
 8008da4:	46bd      	mov	sp, r7
 8008da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008daa:	4770      	bx	lr
 8008dac:	2000014c 	.word	0x2000014c

08008db0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b083      	sub	sp, #12
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	4603      	mov	r3, r0
 8008db8:	6039      	str	r1, [r7, #0]
 8008dba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	2204      	movs	r2, #4
 8008dc0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008dc2:	4b03      	ldr	r3, [pc, #12]	; (8008dd0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	370c      	adds	r7, #12
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr
 8008dd0:	20000160 	.word	0x20000160

08008dd4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	4603      	mov	r3, r0
 8008ddc:	6039      	str	r1, [r7, #0]
 8008dde:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008de0:	79fb      	ldrb	r3, [r7, #7]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d105      	bne.n	8008df2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008de6:	683a      	ldr	r2, [r7, #0]
 8008de8:	4907      	ldr	r1, [pc, #28]	; (8008e08 <USBD_FS_ProductStrDescriptor+0x34>)
 8008dea:	4808      	ldr	r0, [pc, #32]	; (8008e0c <USBD_FS_ProductStrDescriptor+0x38>)
 8008dec:	f7ff fdf7 	bl	80089de <USBD_GetString>
 8008df0:	e004      	b.n	8008dfc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008df2:	683a      	ldr	r2, [r7, #0]
 8008df4:	4904      	ldr	r1, [pc, #16]	; (8008e08 <USBD_FS_ProductStrDescriptor+0x34>)
 8008df6:	4805      	ldr	r0, [pc, #20]	; (8008e0c <USBD_FS_ProductStrDescriptor+0x38>)
 8008df8:	f7ff fdf1 	bl	80089de <USBD_GetString>
  }
  return USBD_StrDesc;
 8008dfc:	4b02      	ldr	r3, [pc, #8]	; (8008e08 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3708      	adds	r7, #8
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
 8008e06:	bf00      	nop
 8008e08:	200017f4 	.word	0x200017f4
 8008e0c:	08009edc 	.word	0x08009edc

08008e10 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b082      	sub	sp, #8
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	4603      	mov	r3, r0
 8008e18:	6039      	str	r1, [r7, #0]
 8008e1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008e1c:	683a      	ldr	r2, [r7, #0]
 8008e1e:	4904      	ldr	r1, [pc, #16]	; (8008e30 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008e20:	4804      	ldr	r0, [pc, #16]	; (8008e34 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008e22:	f7ff fddc 	bl	80089de <USBD_GetString>
  return USBD_StrDesc;
 8008e26:	4b02      	ldr	r3, [pc, #8]	; (8008e30 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3708      	adds	r7, #8
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}
 8008e30:	200017f4 	.word	0x200017f4
 8008e34:	08009ef4 	.word	0x08009ef4

08008e38 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b082      	sub	sp, #8
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	4603      	mov	r3, r0
 8008e40:	6039      	str	r1, [r7, #0]
 8008e42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	221a      	movs	r2, #26
 8008e48:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008e4a:	f000 f843 	bl	8008ed4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008e4e:	4b02      	ldr	r3, [pc, #8]	; (8008e58 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3708      	adds	r7, #8
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}
 8008e58:	20000164 	.word	0x20000164

08008e5c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b082      	sub	sp, #8
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	4603      	mov	r3, r0
 8008e64:	6039      	str	r1, [r7, #0]
 8008e66:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008e68:	79fb      	ldrb	r3, [r7, #7]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d105      	bne.n	8008e7a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e6e:	683a      	ldr	r2, [r7, #0]
 8008e70:	4907      	ldr	r1, [pc, #28]	; (8008e90 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e72:	4808      	ldr	r0, [pc, #32]	; (8008e94 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e74:	f7ff fdb3 	bl	80089de <USBD_GetString>
 8008e78:	e004      	b.n	8008e84 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e7a:	683a      	ldr	r2, [r7, #0]
 8008e7c:	4904      	ldr	r1, [pc, #16]	; (8008e90 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e7e:	4805      	ldr	r0, [pc, #20]	; (8008e94 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e80:	f7ff fdad 	bl	80089de <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e84:	4b02      	ldr	r3, [pc, #8]	; (8008e90 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3708      	adds	r7, #8
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}
 8008e8e:	bf00      	nop
 8008e90:	200017f4 	.word	0x200017f4
 8008e94:	08009f08 	.word	0x08009f08

08008e98 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b082      	sub	sp, #8
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	6039      	str	r1, [r7, #0]
 8008ea2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ea4:	79fb      	ldrb	r3, [r7, #7]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d105      	bne.n	8008eb6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008eaa:	683a      	ldr	r2, [r7, #0]
 8008eac:	4907      	ldr	r1, [pc, #28]	; (8008ecc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008eae:	4808      	ldr	r0, [pc, #32]	; (8008ed0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008eb0:	f7ff fd95 	bl	80089de <USBD_GetString>
 8008eb4:	e004      	b.n	8008ec0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008eb6:	683a      	ldr	r2, [r7, #0]
 8008eb8:	4904      	ldr	r1, [pc, #16]	; (8008ecc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008eba:	4805      	ldr	r0, [pc, #20]	; (8008ed0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008ebc:	f7ff fd8f 	bl	80089de <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ec0:	4b02      	ldr	r3, [pc, #8]	; (8008ecc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3708      	adds	r7, #8
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}
 8008eca:	bf00      	nop
 8008ecc:	200017f4 	.word	0x200017f4
 8008ed0:	08009f14 	.word	0x08009f14

08008ed4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b084      	sub	sp, #16
 8008ed8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008eda:	4b0f      	ldr	r3, [pc, #60]	; (8008f18 <Get_SerialNum+0x44>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008ee0:	4b0e      	ldr	r3, [pc, #56]	; (8008f1c <Get_SerialNum+0x48>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008ee6:	4b0e      	ldr	r3, [pc, #56]	; (8008f20 <Get_SerialNum+0x4c>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008eec:	68fa      	ldr	r2, [r7, #12]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	4413      	add	r3, r2
 8008ef2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d009      	beq.n	8008f0e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008efa:	2208      	movs	r2, #8
 8008efc:	4909      	ldr	r1, [pc, #36]	; (8008f24 <Get_SerialNum+0x50>)
 8008efe:	68f8      	ldr	r0, [r7, #12]
 8008f00:	f000 f814 	bl	8008f2c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008f04:	2204      	movs	r2, #4
 8008f06:	4908      	ldr	r1, [pc, #32]	; (8008f28 <Get_SerialNum+0x54>)
 8008f08:	68b8      	ldr	r0, [r7, #8]
 8008f0a:	f000 f80f 	bl	8008f2c <IntToUnicode>
  }
}
 8008f0e:	bf00      	nop
 8008f10:	3710      	adds	r7, #16
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}
 8008f16:	bf00      	nop
 8008f18:	1fff7a10 	.word	0x1fff7a10
 8008f1c:	1fff7a14 	.word	0x1fff7a14
 8008f20:	1fff7a18 	.word	0x1fff7a18
 8008f24:	20000166 	.word	0x20000166
 8008f28:	20000176 	.word	0x20000176

08008f2c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b087      	sub	sp, #28
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	60f8      	str	r0, [r7, #12]
 8008f34:	60b9      	str	r1, [r7, #8]
 8008f36:	4613      	mov	r3, r2
 8008f38:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008f3e:	2300      	movs	r3, #0
 8008f40:	75fb      	strb	r3, [r7, #23]
 8008f42:	e027      	b.n	8008f94 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	0f1b      	lsrs	r3, r3, #28
 8008f48:	2b09      	cmp	r3, #9
 8008f4a:	d80b      	bhi.n	8008f64 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	0f1b      	lsrs	r3, r3, #28
 8008f50:	b2da      	uxtb	r2, r3
 8008f52:	7dfb      	ldrb	r3, [r7, #23]
 8008f54:	005b      	lsls	r3, r3, #1
 8008f56:	4619      	mov	r1, r3
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	440b      	add	r3, r1
 8008f5c:	3230      	adds	r2, #48	; 0x30
 8008f5e:	b2d2      	uxtb	r2, r2
 8008f60:	701a      	strb	r2, [r3, #0]
 8008f62:	e00a      	b.n	8008f7a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	0f1b      	lsrs	r3, r3, #28
 8008f68:	b2da      	uxtb	r2, r3
 8008f6a:	7dfb      	ldrb	r3, [r7, #23]
 8008f6c:	005b      	lsls	r3, r3, #1
 8008f6e:	4619      	mov	r1, r3
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	440b      	add	r3, r1
 8008f74:	3237      	adds	r2, #55	; 0x37
 8008f76:	b2d2      	uxtb	r2, r2
 8008f78:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	011b      	lsls	r3, r3, #4
 8008f7e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008f80:	7dfb      	ldrb	r3, [r7, #23]
 8008f82:	005b      	lsls	r3, r3, #1
 8008f84:	3301      	adds	r3, #1
 8008f86:	68ba      	ldr	r2, [r7, #8]
 8008f88:	4413      	add	r3, r2
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008f8e:	7dfb      	ldrb	r3, [r7, #23]
 8008f90:	3301      	adds	r3, #1
 8008f92:	75fb      	strb	r3, [r7, #23]
 8008f94:	7dfa      	ldrb	r2, [r7, #23]
 8008f96:	79fb      	ldrb	r3, [r7, #7]
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d3d3      	bcc.n	8008f44 <IntToUnicode+0x18>
  }
}
 8008f9c:	bf00      	nop
 8008f9e:	bf00      	nop
 8008fa0:	371c      	adds	r7, #28
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa8:	4770      	bx	lr
	...

08008fac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b08a      	sub	sp, #40	; 0x28
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008fb4:	f107 0314 	add.w	r3, r7, #20
 8008fb8:	2200      	movs	r2, #0
 8008fba:	601a      	str	r2, [r3, #0]
 8008fbc:	605a      	str	r2, [r3, #4]
 8008fbe:	609a      	str	r2, [r3, #8]
 8008fc0:	60da      	str	r2, [r3, #12]
 8008fc2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008fcc:	d147      	bne.n	800905e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008fce:	2300      	movs	r3, #0
 8008fd0:	613b      	str	r3, [r7, #16]
 8008fd2:	4b25      	ldr	r3, [pc, #148]	; (8009068 <HAL_PCD_MspInit+0xbc>)
 8008fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fd6:	4a24      	ldr	r2, [pc, #144]	; (8009068 <HAL_PCD_MspInit+0xbc>)
 8008fd8:	f043 0301 	orr.w	r3, r3, #1
 8008fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8008fde:	4b22      	ldr	r3, [pc, #136]	; (8009068 <HAL_PCD_MspInit+0xbc>)
 8008fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fe2:	f003 0301 	and.w	r3, r3, #1
 8008fe6:	613b      	str	r3, [r7, #16]
 8008fe8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008fea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008fee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008ff8:	f107 0314 	add.w	r3, r7, #20
 8008ffc:	4619      	mov	r1, r3
 8008ffe:	481b      	ldr	r0, [pc, #108]	; (800906c <HAL_PCD_MspInit+0xc0>)
 8009000:	f7f8 ff5c 	bl	8001ebc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009004:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009008:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800900a:	2302      	movs	r3, #2
 800900c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800900e:	2300      	movs	r3, #0
 8009010:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009012:	2303      	movs	r3, #3
 8009014:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009016:	230a      	movs	r3, #10
 8009018:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800901a:	f107 0314 	add.w	r3, r7, #20
 800901e:	4619      	mov	r1, r3
 8009020:	4812      	ldr	r0, [pc, #72]	; (800906c <HAL_PCD_MspInit+0xc0>)
 8009022:	f7f8 ff4b 	bl	8001ebc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009026:	4b10      	ldr	r3, [pc, #64]	; (8009068 <HAL_PCD_MspInit+0xbc>)
 8009028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800902a:	4a0f      	ldr	r2, [pc, #60]	; (8009068 <HAL_PCD_MspInit+0xbc>)
 800902c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009030:	6353      	str	r3, [r2, #52]	; 0x34
 8009032:	2300      	movs	r3, #0
 8009034:	60fb      	str	r3, [r7, #12]
 8009036:	4b0c      	ldr	r3, [pc, #48]	; (8009068 <HAL_PCD_MspInit+0xbc>)
 8009038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800903a:	4a0b      	ldr	r2, [pc, #44]	; (8009068 <HAL_PCD_MspInit+0xbc>)
 800903c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009040:	6453      	str	r3, [r2, #68]	; 0x44
 8009042:	4b09      	ldr	r3, [pc, #36]	; (8009068 <HAL_PCD_MspInit+0xbc>)
 8009044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009046:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800904a:	60fb      	str	r3, [r7, #12]
 800904c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800904e:	2200      	movs	r2, #0
 8009050:	2100      	movs	r1, #0
 8009052:	2043      	movs	r0, #67	; 0x43
 8009054:	f7f8 fe69 	bl	8001d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009058:	2043      	movs	r0, #67	; 0x43
 800905a:	f7f8 fe82 	bl	8001d62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800905e:	bf00      	nop
 8009060:	3728      	adds	r7, #40	; 0x28
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}
 8009066:	bf00      	nop
 8009068:	40023800 	.word	0x40023800
 800906c:	40020000 	.word	0x40020000

08009070 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b082      	sub	sp, #8
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009084:	4619      	mov	r1, r3
 8009086:	4610      	mov	r0, r2
 8009088:	f7fe fcc2 	bl	8007a10 <USBD_LL_SetupStage>
}
 800908c:	bf00      	nop
 800908e:	3708      	adds	r7, #8
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}

08009094 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b082      	sub	sp, #8
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	460b      	mov	r3, r1
 800909e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80090a6:	78fa      	ldrb	r2, [r7, #3]
 80090a8:	6879      	ldr	r1, [r7, #4]
 80090aa:	4613      	mov	r3, r2
 80090ac:	00db      	lsls	r3, r3, #3
 80090ae:	1a9b      	subs	r3, r3, r2
 80090b0:	009b      	lsls	r3, r3, #2
 80090b2:	440b      	add	r3, r1
 80090b4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	78fb      	ldrb	r3, [r7, #3]
 80090bc:	4619      	mov	r1, r3
 80090be:	f7fe fcfc 	bl	8007aba <USBD_LL_DataOutStage>
}
 80090c2:	bf00      	nop
 80090c4:	3708      	adds	r7, #8
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}

080090ca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090ca:	b580      	push	{r7, lr}
 80090cc:	b082      	sub	sp, #8
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	6078      	str	r0, [r7, #4]
 80090d2:	460b      	mov	r3, r1
 80090d4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80090dc:	78fa      	ldrb	r2, [r7, #3]
 80090de:	6879      	ldr	r1, [r7, #4]
 80090e0:	4613      	mov	r3, r2
 80090e2:	00db      	lsls	r3, r3, #3
 80090e4:	1a9b      	subs	r3, r3, r2
 80090e6:	009b      	lsls	r3, r3, #2
 80090e8:	440b      	add	r3, r1
 80090ea:	3348      	adds	r3, #72	; 0x48
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	78fb      	ldrb	r3, [r7, #3]
 80090f0:	4619      	mov	r1, r3
 80090f2:	f7fe fd45 	bl	8007b80 <USBD_LL_DataInStage>
}
 80090f6:	bf00      	nop
 80090f8:	3708      	adds	r7, #8
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}

080090fe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090fe:	b580      	push	{r7, lr}
 8009100:	b082      	sub	sp, #8
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800910c:	4618      	mov	r0, r3
 800910e:	f7fe fe59 	bl	8007dc4 <USBD_LL_SOF>
}
 8009112:	bf00      	nop
 8009114:	3708      	adds	r7, #8
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}

0800911a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800911a:	b580      	push	{r7, lr}
 800911c:	b084      	sub	sp, #16
 800911e:	af00      	add	r7, sp, #0
 8009120:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009122:	2301      	movs	r3, #1
 8009124:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	68db      	ldr	r3, [r3, #12]
 800912a:	2b02      	cmp	r3, #2
 800912c:	d001      	beq.n	8009132 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800912e:	f7f8 faad 	bl	800168c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009138:	7bfa      	ldrb	r2, [r7, #15]
 800913a:	4611      	mov	r1, r2
 800913c:	4618      	mov	r0, r3
 800913e:	f7fe fe03 	bl	8007d48 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009148:	4618      	mov	r0, r3
 800914a:	f7fe fdaf 	bl	8007cac <USBD_LL_Reset>
}
 800914e:	bf00      	nop
 8009150:	3710      	adds	r7, #16
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}
	...

08009158 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b082      	sub	sp, #8
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009166:	4618      	mov	r0, r3
 8009168:	f7fe fdfe 	bl	8007d68 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	687a      	ldr	r2, [r7, #4]
 8009178:	6812      	ldr	r2, [r2, #0]
 800917a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800917e:	f043 0301 	orr.w	r3, r3, #1
 8009182:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6a1b      	ldr	r3, [r3, #32]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d005      	beq.n	8009198 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800918c:	4b04      	ldr	r3, [pc, #16]	; (80091a0 <HAL_PCD_SuspendCallback+0x48>)
 800918e:	691b      	ldr	r3, [r3, #16]
 8009190:	4a03      	ldr	r2, [pc, #12]	; (80091a0 <HAL_PCD_SuspendCallback+0x48>)
 8009192:	f043 0306 	orr.w	r3, r3, #6
 8009196:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009198:	bf00      	nop
 800919a:	3708      	adds	r7, #8
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}
 80091a0:	e000ed00 	.word	0xe000ed00

080091a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b082      	sub	sp, #8
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80091b2:	4618      	mov	r0, r3
 80091b4:	f7fe fdee 	bl	8007d94 <USBD_LL_Resume>
}
 80091b8:	bf00      	nop
 80091ba:	3708      	adds	r7, #8
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b082      	sub	sp, #8
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	460b      	mov	r3, r1
 80091ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80091d2:	78fa      	ldrb	r2, [r7, #3]
 80091d4:	4611      	mov	r1, r2
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7fe fe3c 	bl	8007e54 <USBD_LL_IsoOUTIncomplete>
}
 80091dc:	bf00      	nop
 80091de:	3708      	adds	r7, #8
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b082      	sub	sp, #8
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	460b      	mov	r3, r1
 80091ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80091f6:	78fa      	ldrb	r2, [r7, #3]
 80091f8:	4611      	mov	r1, r2
 80091fa:	4618      	mov	r0, r3
 80091fc:	f7fe fe04 	bl	8007e08 <USBD_LL_IsoINIncomplete>
}
 8009200:	bf00      	nop
 8009202:	3708      	adds	r7, #8
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}

08009208 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b082      	sub	sp, #8
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009216:	4618      	mov	r0, r3
 8009218:	f7fe fe42 	bl	8007ea0 <USBD_LL_DevConnected>
}
 800921c:	bf00      	nop
 800921e:	3708      	adds	r7, #8
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}

08009224 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009232:	4618      	mov	r0, r3
 8009234:	f7fe fe3f 	bl	8007eb6 <USBD_LL_DevDisconnected>
}
 8009238:	bf00      	nop
 800923a:	3708      	adds	r7, #8
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}

08009240 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b082      	sub	sp, #8
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d13c      	bne.n	80092ca <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009250:	4a20      	ldr	r2, [pc, #128]	; (80092d4 <USBD_LL_Init+0x94>)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	4a1e      	ldr	r2, [pc, #120]	; (80092d4 <USBD_LL_Init+0x94>)
 800925c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009260:	4b1c      	ldr	r3, [pc, #112]	; (80092d4 <USBD_LL_Init+0x94>)
 8009262:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009266:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009268:	4b1a      	ldr	r3, [pc, #104]	; (80092d4 <USBD_LL_Init+0x94>)
 800926a:	2204      	movs	r2, #4
 800926c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800926e:	4b19      	ldr	r3, [pc, #100]	; (80092d4 <USBD_LL_Init+0x94>)
 8009270:	2202      	movs	r2, #2
 8009272:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009274:	4b17      	ldr	r3, [pc, #92]	; (80092d4 <USBD_LL_Init+0x94>)
 8009276:	2200      	movs	r2, #0
 8009278:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800927a:	4b16      	ldr	r3, [pc, #88]	; (80092d4 <USBD_LL_Init+0x94>)
 800927c:	2202      	movs	r2, #2
 800927e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009280:	4b14      	ldr	r3, [pc, #80]	; (80092d4 <USBD_LL_Init+0x94>)
 8009282:	2200      	movs	r2, #0
 8009284:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009286:	4b13      	ldr	r3, [pc, #76]	; (80092d4 <USBD_LL_Init+0x94>)
 8009288:	2200      	movs	r2, #0
 800928a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800928c:	4b11      	ldr	r3, [pc, #68]	; (80092d4 <USBD_LL_Init+0x94>)
 800928e:	2200      	movs	r2, #0
 8009290:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8009292:	4b10      	ldr	r3, [pc, #64]	; (80092d4 <USBD_LL_Init+0x94>)
 8009294:	2201      	movs	r2, #1
 8009296:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009298:	4b0e      	ldr	r3, [pc, #56]	; (80092d4 <USBD_LL_Init+0x94>)
 800929a:	2200      	movs	r2, #0
 800929c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800929e:	480d      	ldr	r0, [pc, #52]	; (80092d4 <USBD_LL_Init+0x94>)
 80092a0:	f7f9 ff8d 	bl	80031be <HAL_PCD_Init>
 80092a4:	4603      	mov	r3, r0
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d001      	beq.n	80092ae <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80092aa:	f7f8 f9ef 	bl	800168c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80092ae:	2180      	movs	r1, #128	; 0x80
 80092b0:	4808      	ldr	r0, [pc, #32]	; (80092d4 <USBD_LL_Init+0x94>)
 80092b2:	f7fb f8ea 	bl	800448a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80092b6:	2240      	movs	r2, #64	; 0x40
 80092b8:	2100      	movs	r1, #0
 80092ba:	4806      	ldr	r0, [pc, #24]	; (80092d4 <USBD_LL_Init+0x94>)
 80092bc:	f7fb f89e 	bl	80043fc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80092c0:	2280      	movs	r2, #128	; 0x80
 80092c2:	2101      	movs	r1, #1
 80092c4:	4803      	ldr	r0, [pc, #12]	; (80092d4 <USBD_LL_Init+0x94>)
 80092c6:	f7fb f899 	bl	80043fc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80092ca:	2300      	movs	r3, #0
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3708      	adds	r7, #8
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}
 80092d4:	200019f4 	.word	0x200019f4

080092d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092e0:	2300      	movs	r3, #0
 80092e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092e4:	2300      	movs	r3, #0
 80092e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80092ee:	4618      	mov	r0, r3
 80092f0:	f7fa f882 	bl	80033f8 <HAL_PCD_Start>
 80092f4:	4603      	mov	r3, r0
 80092f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092f8:	7bfb      	ldrb	r3, [r7, #15]
 80092fa:	4618      	mov	r0, r3
 80092fc:	f000 f942 	bl	8009584 <USBD_Get_USB_Status>
 8009300:	4603      	mov	r3, r0
 8009302:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009304:	7bbb      	ldrb	r3, [r7, #14]
}
 8009306:	4618      	mov	r0, r3
 8009308:	3710      	adds	r7, #16
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}

0800930e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800930e:	b580      	push	{r7, lr}
 8009310:	b084      	sub	sp, #16
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
 8009316:	4608      	mov	r0, r1
 8009318:	4611      	mov	r1, r2
 800931a:	461a      	mov	r2, r3
 800931c:	4603      	mov	r3, r0
 800931e:	70fb      	strb	r3, [r7, #3]
 8009320:	460b      	mov	r3, r1
 8009322:	70bb      	strb	r3, [r7, #2]
 8009324:	4613      	mov	r3, r2
 8009326:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009328:	2300      	movs	r3, #0
 800932a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800932c:	2300      	movs	r3, #0
 800932e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009336:	78bb      	ldrb	r3, [r7, #2]
 8009338:	883a      	ldrh	r2, [r7, #0]
 800933a:	78f9      	ldrb	r1, [r7, #3]
 800933c:	f7fa fc66 	bl	8003c0c <HAL_PCD_EP_Open>
 8009340:	4603      	mov	r3, r0
 8009342:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009344:	7bfb      	ldrb	r3, [r7, #15]
 8009346:	4618      	mov	r0, r3
 8009348:	f000 f91c 	bl	8009584 <USBD_Get_USB_Status>
 800934c:	4603      	mov	r3, r0
 800934e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009350:	7bbb      	ldrb	r3, [r7, #14]
}
 8009352:	4618      	mov	r0, r3
 8009354:	3710      	adds	r7, #16
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}

0800935a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800935a:	b580      	push	{r7, lr}
 800935c:	b084      	sub	sp, #16
 800935e:	af00      	add	r7, sp, #0
 8009360:	6078      	str	r0, [r7, #4]
 8009362:	460b      	mov	r3, r1
 8009364:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009366:	2300      	movs	r3, #0
 8009368:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800936a:	2300      	movs	r3, #0
 800936c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009374:	78fa      	ldrb	r2, [r7, #3]
 8009376:	4611      	mov	r1, r2
 8009378:	4618      	mov	r0, r3
 800937a:	f7fa fcaf 	bl	8003cdc <HAL_PCD_EP_Close>
 800937e:	4603      	mov	r3, r0
 8009380:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009382:	7bfb      	ldrb	r3, [r7, #15]
 8009384:	4618      	mov	r0, r3
 8009386:	f000 f8fd 	bl	8009584 <USBD_Get_USB_Status>
 800938a:	4603      	mov	r3, r0
 800938c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800938e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009390:	4618      	mov	r0, r3
 8009392:	3710      	adds	r7, #16
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b084      	sub	sp, #16
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	460b      	mov	r3, r1
 80093a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093a4:	2300      	movs	r3, #0
 80093a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093a8:	2300      	movs	r3, #0
 80093aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80093b2:	78fa      	ldrb	r2, [r7, #3]
 80093b4:	4611      	mov	r1, r2
 80093b6:	4618      	mov	r0, r3
 80093b8:	f7fa fd87 	bl	8003eca <HAL_PCD_EP_SetStall>
 80093bc:	4603      	mov	r3, r0
 80093be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093c0:	7bfb      	ldrb	r3, [r7, #15]
 80093c2:	4618      	mov	r0, r3
 80093c4:	f000 f8de 	bl	8009584 <USBD_Get_USB_Status>
 80093c8:	4603      	mov	r3, r0
 80093ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3710      	adds	r7, #16
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}

080093d6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093d6:	b580      	push	{r7, lr}
 80093d8:	b084      	sub	sp, #16
 80093da:	af00      	add	r7, sp, #0
 80093dc:	6078      	str	r0, [r7, #4]
 80093de:	460b      	mov	r3, r1
 80093e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093e2:	2300      	movs	r3, #0
 80093e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093e6:	2300      	movs	r3, #0
 80093e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80093f0:	78fa      	ldrb	r2, [r7, #3]
 80093f2:	4611      	mov	r1, r2
 80093f4:	4618      	mov	r0, r3
 80093f6:	f7fa fdcc 	bl	8003f92 <HAL_PCD_EP_ClrStall>
 80093fa:	4603      	mov	r3, r0
 80093fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093fe:	7bfb      	ldrb	r3, [r7, #15]
 8009400:	4618      	mov	r0, r3
 8009402:	f000 f8bf 	bl	8009584 <USBD_Get_USB_Status>
 8009406:	4603      	mov	r3, r0
 8009408:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800940a:	7bbb      	ldrb	r3, [r7, #14]
}
 800940c:	4618      	mov	r0, r3
 800940e:	3710      	adds	r7, #16
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009414:	b480      	push	{r7}
 8009416:	b085      	sub	sp, #20
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	460b      	mov	r3, r1
 800941e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009426:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009428:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800942c:	2b00      	cmp	r3, #0
 800942e:	da0b      	bge.n	8009448 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009430:	78fb      	ldrb	r3, [r7, #3]
 8009432:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009436:	68f9      	ldr	r1, [r7, #12]
 8009438:	4613      	mov	r3, r2
 800943a:	00db      	lsls	r3, r3, #3
 800943c:	1a9b      	subs	r3, r3, r2
 800943e:	009b      	lsls	r3, r3, #2
 8009440:	440b      	add	r3, r1
 8009442:	333e      	adds	r3, #62	; 0x3e
 8009444:	781b      	ldrb	r3, [r3, #0]
 8009446:	e00b      	b.n	8009460 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009448:	78fb      	ldrb	r3, [r7, #3]
 800944a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800944e:	68f9      	ldr	r1, [r7, #12]
 8009450:	4613      	mov	r3, r2
 8009452:	00db      	lsls	r3, r3, #3
 8009454:	1a9b      	subs	r3, r3, r2
 8009456:	009b      	lsls	r3, r3, #2
 8009458:	440b      	add	r3, r1
 800945a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800945e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009460:	4618      	mov	r0, r3
 8009462:	3714      	adds	r7, #20
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr

0800946c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b084      	sub	sp, #16
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	460b      	mov	r3, r1
 8009476:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009478:	2300      	movs	r3, #0
 800947a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800947c:	2300      	movs	r3, #0
 800947e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009486:	78fa      	ldrb	r2, [r7, #3]
 8009488:	4611      	mov	r1, r2
 800948a:	4618      	mov	r0, r3
 800948c:	f7fa fb99 	bl	8003bc2 <HAL_PCD_SetAddress>
 8009490:	4603      	mov	r3, r0
 8009492:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009494:	7bfb      	ldrb	r3, [r7, #15]
 8009496:	4618      	mov	r0, r3
 8009498:	f000 f874 	bl	8009584 <USBD_Get_USB_Status>
 800949c:	4603      	mov	r3, r0
 800949e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3710      	adds	r7, #16
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}

080094aa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80094aa:	b580      	push	{r7, lr}
 80094ac:	b086      	sub	sp, #24
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	60f8      	str	r0, [r7, #12]
 80094b2:	607a      	str	r2, [r7, #4]
 80094b4:	603b      	str	r3, [r7, #0]
 80094b6:	460b      	mov	r3, r1
 80094b8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094ba:	2300      	movs	r3, #0
 80094bc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094be:	2300      	movs	r3, #0
 80094c0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80094c8:	7af9      	ldrb	r1, [r7, #11]
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	687a      	ldr	r2, [r7, #4]
 80094ce:	f7fa fcb2 	bl	8003e36 <HAL_PCD_EP_Transmit>
 80094d2:	4603      	mov	r3, r0
 80094d4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094d6:	7dfb      	ldrb	r3, [r7, #23]
 80094d8:	4618      	mov	r0, r3
 80094da:	f000 f853 	bl	8009584 <USBD_Get_USB_Status>
 80094de:	4603      	mov	r3, r0
 80094e0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80094e2:	7dbb      	ldrb	r3, [r7, #22]
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3718      	adds	r7, #24
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}

080094ec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b086      	sub	sp, #24
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	60f8      	str	r0, [r7, #12]
 80094f4:	607a      	str	r2, [r7, #4]
 80094f6:	603b      	str	r3, [r7, #0]
 80094f8:	460b      	mov	r3, r1
 80094fa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094fc:	2300      	movs	r3, #0
 80094fe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009500:	2300      	movs	r3, #0
 8009502:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800950a:	7af9      	ldrb	r1, [r7, #11]
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	687a      	ldr	r2, [r7, #4]
 8009510:	f7fa fc2e 	bl	8003d70 <HAL_PCD_EP_Receive>
 8009514:	4603      	mov	r3, r0
 8009516:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009518:	7dfb      	ldrb	r3, [r7, #23]
 800951a:	4618      	mov	r0, r3
 800951c:	f000 f832 	bl	8009584 <USBD_Get_USB_Status>
 8009520:	4603      	mov	r3, r0
 8009522:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009524:	7dbb      	ldrb	r3, [r7, #22]
}
 8009526:	4618      	mov	r0, r3
 8009528:	3718      	adds	r7, #24
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}

0800952e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800952e:	b580      	push	{r7, lr}
 8009530:	b082      	sub	sp, #8
 8009532:	af00      	add	r7, sp, #0
 8009534:	6078      	str	r0, [r7, #4]
 8009536:	460b      	mov	r3, r1
 8009538:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009540:	78fa      	ldrb	r2, [r7, #3]
 8009542:	4611      	mov	r1, r2
 8009544:	4618      	mov	r0, r3
 8009546:	f7fa fc5e 	bl	8003e06 <HAL_PCD_EP_GetRxCount>
 800954a:	4603      	mov	r3, r0
}
 800954c:	4618      	mov	r0, r3
 800954e:	3708      	adds	r7, #8
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009554:	b480      	push	{r7}
 8009556:	b083      	sub	sp, #12
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800955c:	4b03      	ldr	r3, [pc, #12]	; (800956c <USBD_static_malloc+0x18>)
}
 800955e:	4618      	mov	r0, r3
 8009560:	370c      	adds	r7, #12
 8009562:	46bd      	mov	sp, r7
 8009564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009568:	4770      	bx	lr
 800956a:	bf00      	nop
 800956c:	20000208 	.word	0x20000208

08009570 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009570:	b480      	push	{r7}
 8009572:	b083      	sub	sp, #12
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]

}
 8009578:	bf00      	nop
 800957a:	370c      	adds	r7, #12
 800957c:	46bd      	mov	sp, r7
 800957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009582:	4770      	bx	lr

08009584 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009584:	b480      	push	{r7}
 8009586:	b085      	sub	sp, #20
 8009588:	af00      	add	r7, sp, #0
 800958a:	4603      	mov	r3, r0
 800958c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800958e:	2300      	movs	r3, #0
 8009590:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009592:	79fb      	ldrb	r3, [r7, #7]
 8009594:	2b03      	cmp	r3, #3
 8009596:	d817      	bhi.n	80095c8 <USBD_Get_USB_Status+0x44>
 8009598:	a201      	add	r2, pc, #4	; (adr r2, 80095a0 <USBD_Get_USB_Status+0x1c>)
 800959a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800959e:	bf00      	nop
 80095a0:	080095b1 	.word	0x080095b1
 80095a4:	080095b7 	.word	0x080095b7
 80095a8:	080095bd 	.word	0x080095bd
 80095ac:	080095c3 	.word	0x080095c3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80095b0:	2300      	movs	r3, #0
 80095b2:	73fb      	strb	r3, [r7, #15]
    break;
 80095b4:	e00b      	b.n	80095ce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80095b6:	2303      	movs	r3, #3
 80095b8:	73fb      	strb	r3, [r7, #15]
    break;
 80095ba:	e008      	b.n	80095ce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80095bc:	2301      	movs	r3, #1
 80095be:	73fb      	strb	r3, [r7, #15]
    break;
 80095c0:	e005      	b.n	80095ce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80095c2:	2303      	movs	r3, #3
 80095c4:	73fb      	strb	r3, [r7, #15]
    break;
 80095c6:	e002      	b.n	80095ce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80095c8:	2303      	movs	r3, #3
 80095ca:	73fb      	strb	r3, [r7, #15]
    break;
 80095cc:	bf00      	nop
  }
  return usb_status;
 80095ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3714      	adds	r7, #20
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr

080095dc <__errno>:
 80095dc:	4b01      	ldr	r3, [pc, #4]	; (80095e4 <__errno+0x8>)
 80095de:	6818      	ldr	r0, [r3, #0]
 80095e0:	4770      	bx	lr
 80095e2:	bf00      	nop
 80095e4:	20000180 	.word	0x20000180

080095e8 <__libc_init_array>:
 80095e8:	b570      	push	{r4, r5, r6, lr}
 80095ea:	4d0d      	ldr	r5, [pc, #52]	; (8009620 <__libc_init_array+0x38>)
 80095ec:	4c0d      	ldr	r4, [pc, #52]	; (8009624 <__libc_init_array+0x3c>)
 80095ee:	1b64      	subs	r4, r4, r5
 80095f0:	10a4      	asrs	r4, r4, #2
 80095f2:	2600      	movs	r6, #0
 80095f4:	42a6      	cmp	r6, r4
 80095f6:	d109      	bne.n	800960c <__libc_init_array+0x24>
 80095f8:	4d0b      	ldr	r5, [pc, #44]	; (8009628 <__libc_init_array+0x40>)
 80095fa:	4c0c      	ldr	r4, [pc, #48]	; (800962c <__libc_init_array+0x44>)
 80095fc:	f000 fc4e 	bl	8009e9c <_init>
 8009600:	1b64      	subs	r4, r4, r5
 8009602:	10a4      	asrs	r4, r4, #2
 8009604:	2600      	movs	r6, #0
 8009606:	42a6      	cmp	r6, r4
 8009608:	d105      	bne.n	8009616 <__libc_init_array+0x2e>
 800960a:	bd70      	pop	{r4, r5, r6, pc}
 800960c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009610:	4798      	blx	r3
 8009612:	3601      	adds	r6, #1
 8009614:	e7ee      	b.n	80095f4 <__libc_init_array+0xc>
 8009616:	f855 3b04 	ldr.w	r3, [r5], #4
 800961a:	4798      	blx	r3
 800961c:	3601      	adds	r6, #1
 800961e:	e7f2      	b.n	8009606 <__libc_init_array+0x1e>
 8009620:	08009fd8 	.word	0x08009fd8
 8009624:	08009fd8 	.word	0x08009fd8
 8009628:	08009fd8 	.word	0x08009fd8
 800962c:	08009fdc 	.word	0x08009fdc

08009630 <memcpy>:
 8009630:	440a      	add	r2, r1
 8009632:	4291      	cmp	r1, r2
 8009634:	f100 33ff 	add.w	r3, r0, #4294967295
 8009638:	d100      	bne.n	800963c <memcpy+0xc>
 800963a:	4770      	bx	lr
 800963c:	b510      	push	{r4, lr}
 800963e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009642:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009646:	4291      	cmp	r1, r2
 8009648:	d1f9      	bne.n	800963e <memcpy+0xe>
 800964a:	bd10      	pop	{r4, pc}

0800964c <memset>:
 800964c:	4402      	add	r2, r0
 800964e:	4603      	mov	r3, r0
 8009650:	4293      	cmp	r3, r2
 8009652:	d100      	bne.n	8009656 <memset+0xa>
 8009654:	4770      	bx	lr
 8009656:	f803 1b01 	strb.w	r1, [r3], #1
 800965a:	e7f9      	b.n	8009650 <memset+0x4>

0800965c <siprintf>:
 800965c:	b40e      	push	{r1, r2, r3}
 800965e:	b500      	push	{lr}
 8009660:	b09c      	sub	sp, #112	; 0x70
 8009662:	ab1d      	add	r3, sp, #116	; 0x74
 8009664:	9002      	str	r0, [sp, #8]
 8009666:	9006      	str	r0, [sp, #24]
 8009668:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800966c:	4809      	ldr	r0, [pc, #36]	; (8009694 <siprintf+0x38>)
 800966e:	9107      	str	r1, [sp, #28]
 8009670:	9104      	str	r1, [sp, #16]
 8009672:	4909      	ldr	r1, [pc, #36]	; (8009698 <siprintf+0x3c>)
 8009674:	f853 2b04 	ldr.w	r2, [r3], #4
 8009678:	9105      	str	r1, [sp, #20]
 800967a:	6800      	ldr	r0, [r0, #0]
 800967c:	9301      	str	r3, [sp, #4]
 800967e:	a902      	add	r1, sp, #8
 8009680:	f000 f8c4 	bl	800980c <_svfiprintf_r>
 8009684:	9b02      	ldr	r3, [sp, #8]
 8009686:	2200      	movs	r2, #0
 8009688:	701a      	strb	r2, [r3, #0]
 800968a:	b01c      	add	sp, #112	; 0x70
 800968c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009690:	b003      	add	sp, #12
 8009692:	4770      	bx	lr
 8009694:	20000180 	.word	0x20000180
 8009698:	ffff0208 	.word	0xffff0208

0800969c <__retarget_lock_acquire_recursive>:
 800969c:	4770      	bx	lr

0800969e <__retarget_lock_release_recursive>:
 800969e:	4770      	bx	lr

080096a0 <_malloc_r>:
 80096a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096a2:	1ccd      	adds	r5, r1, #3
 80096a4:	f025 0503 	bic.w	r5, r5, #3
 80096a8:	3508      	adds	r5, #8
 80096aa:	2d0c      	cmp	r5, #12
 80096ac:	bf38      	it	cc
 80096ae:	250c      	movcc	r5, #12
 80096b0:	2d00      	cmp	r5, #0
 80096b2:	4606      	mov	r6, r0
 80096b4:	db01      	blt.n	80096ba <_malloc_r+0x1a>
 80096b6:	42a9      	cmp	r1, r5
 80096b8:	d903      	bls.n	80096c2 <_malloc_r+0x22>
 80096ba:	230c      	movs	r3, #12
 80096bc:	6033      	str	r3, [r6, #0]
 80096be:	2000      	movs	r0, #0
 80096c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096c2:	f000 fb61 	bl	8009d88 <__malloc_lock>
 80096c6:	4921      	ldr	r1, [pc, #132]	; (800974c <_malloc_r+0xac>)
 80096c8:	680a      	ldr	r2, [r1, #0]
 80096ca:	4614      	mov	r4, r2
 80096cc:	b99c      	cbnz	r4, 80096f6 <_malloc_r+0x56>
 80096ce:	4f20      	ldr	r7, [pc, #128]	; (8009750 <_malloc_r+0xb0>)
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	b923      	cbnz	r3, 80096de <_malloc_r+0x3e>
 80096d4:	4621      	mov	r1, r4
 80096d6:	4630      	mov	r0, r6
 80096d8:	f000 fb2c 	bl	8009d34 <_sbrk_r>
 80096dc:	6038      	str	r0, [r7, #0]
 80096de:	4629      	mov	r1, r5
 80096e0:	4630      	mov	r0, r6
 80096e2:	f000 fb27 	bl	8009d34 <_sbrk_r>
 80096e6:	1c43      	adds	r3, r0, #1
 80096e8:	d123      	bne.n	8009732 <_malloc_r+0x92>
 80096ea:	230c      	movs	r3, #12
 80096ec:	6033      	str	r3, [r6, #0]
 80096ee:	4630      	mov	r0, r6
 80096f0:	f000 fb50 	bl	8009d94 <__malloc_unlock>
 80096f4:	e7e3      	b.n	80096be <_malloc_r+0x1e>
 80096f6:	6823      	ldr	r3, [r4, #0]
 80096f8:	1b5b      	subs	r3, r3, r5
 80096fa:	d417      	bmi.n	800972c <_malloc_r+0x8c>
 80096fc:	2b0b      	cmp	r3, #11
 80096fe:	d903      	bls.n	8009708 <_malloc_r+0x68>
 8009700:	6023      	str	r3, [r4, #0]
 8009702:	441c      	add	r4, r3
 8009704:	6025      	str	r5, [r4, #0]
 8009706:	e004      	b.n	8009712 <_malloc_r+0x72>
 8009708:	6863      	ldr	r3, [r4, #4]
 800970a:	42a2      	cmp	r2, r4
 800970c:	bf0c      	ite	eq
 800970e:	600b      	streq	r3, [r1, #0]
 8009710:	6053      	strne	r3, [r2, #4]
 8009712:	4630      	mov	r0, r6
 8009714:	f000 fb3e 	bl	8009d94 <__malloc_unlock>
 8009718:	f104 000b 	add.w	r0, r4, #11
 800971c:	1d23      	adds	r3, r4, #4
 800971e:	f020 0007 	bic.w	r0, r0, #7
 8009722:	1ac2      	subs	r2, r0, r3
 8009724:	d0cc      	beq.n	80096c0 <_malloc_r+0x20>
 8009726:	1a1b      	subs	r3, r3, r0
 8009728:	50a3      	str	r3, [r4, r2]
 800972a:	e7c9      	b.n	80096c0 <_malloc_r+0x20>
 800972c:	4622      	mov	r2, r4
 800972e:	6864      	ldr	r4, [r4, #4]
 8009730:	e7cc      	b.n	80096cc <_malloc_r+0x2c>
 8009732:	1cc4      	adds	r4, r0, #3
 8009734:	f024 0403 	bic.w	r4, r4, #3
 8009738:	42a0      	cmp	r0, r4
 800973a:	d0e3      	beq.n	8009704 <_malloc_r+0x64>
 800973c:	1a21      	subs	r1, r4, r0
 800973e:	4630      	mov	r0, r6
 8009740:	f000 faf8 	bl	8009d34 <_sbrk_r>
 8009744:	3001      	adds	r0, #1
 8009746:	d1dd      	bne.n	8009704 <_malloc_r+0x64>
 8009748:	e7cf      	b.n	80096ea <_malloc_r+0x4a>
 800974a:	bf00      	nop
 800974c:	20000428 	.word	0x20000428
 8009750:	2000042c 	.word	0x2000042c

08009754 <__ssputs_r>:
 8009754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009758:	688e      	ldr	r6, [r1, #8]
 800975a:	429e      	cmp	r6, r3
 800975c:	4682      	mov	sl, r0
 800975e:	460c      	mov	r4, r1
 8009760:	4690      	mov	r8, r2
 8009762:	461f      	mov	r7, r3
 8009764:	d838      	bhi.n	80097d8 <__ssputs_r+0x84>
 8009766:	898a      	ldrh	r2, [r1, #12]
 8009768:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800976c:	d032      	beq.n	80097d4 <__ssputs_r+0x80>
 800976e:	6825      	ldr	r5, [r4, #0]
 8009770:	6909      	ldr	r1, [r1, #16]
 8009772:	eba5 0901 	sub.w	r9, r5, r1
 8009776:	6965      	ldr	r5, [r4, #20]
 8009778:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800977c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009780:	3301      	adds	r3, #1
 8009782:	444b      	add	r3, r9
 8009784:	106d      	asrs	r5, r5, #1
 8009786:	429d      	cmp	r5, r3
 8009788:	bf38      	it	cc
 800978a:	461d      	movcc	r5, r3
 800978c:	0553      	lsls	r3, r2, #21
 800978e:	d531      	bpl.n	80097f4 <__ssputs_r+0xa0>
 8009790:	4629      	mov	r1, r5
 8009792:	f7ff ff85 	bl	80096a0 <_malloc_r>
 8009796:	4606      	mov	r6, r0
 8009798:	b950      	cbnz	r0, 80097b0 <__ssputs_r+0x5c>
 800979a:	230c      	movs	r3, #12
 800979c:	f8ca 3000 	str.w	r3, [sl]
 80097a0:	89a3      	ldrh	r3, [r4, #12]
 80097a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097a6:	81a3      	strh	r3, [r4, #12]
 80097a8:	f04f 30ff 	mov.w	r0, #4294967295
 80097ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097b0:	6921      	ldr	r1, [r4, #16]
 80097b2:	464a      	mov	r2, r9
 80097b4:	f7ff ff3c 	bl	8009630 <memcpy>
 80097b8:	89a3      	ldrh	r3, [r4, #12]
 80097ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80097be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097c2:	81a3      	strh	r3, [r4, #12]
 80097c4:	6126      	str	r6, [r4, #16]
 80097c6:	6165      	str	r5, [r4, #20]
 80097c8:	444e      	add	r6, r9
 80097ca:	eba5 0509 	sub.w	r5, r5, r9
 80097ce:	6026      	str	r6, [r4, #0]
 80097d0:	60a5      	str	r5, [r4, #8]
 80097d2:	463e      	mov	r6, r7
 80097d4:	42be      	cmp	r6, r7
 80097d6:	d900      	bls.n	80097da <__ssputs_r+0x86>
 80097d8:	463e      	mov	r6, r7
 80097da:	4632      	mov	r2, r6
 80097dc:	6820      	ldr	r0, [r4, #0]
 80097de:	4641      	mov	r1, r8
 80097e0:	f000 fab8 	bl	8009d54 <memmove>
 80097e4:	68a3      	ldr	r3, [r4, #8]
 80097e6:	6822      	ldr	r2, [r4, #0]
 80097e8:	1b9b      	subs	r3, r3, r6
 80097ea:	4432      	add	r2, r6
 80097ec:	60a3      	str	r3, [r4, #8]
 80097ee:	6022      	str	r2, [r4, #0]
 80097f0:	2000      	movs	r0, #0
 80097f2:	e7db      	b.n	80097ac <__ssputs_r+0x58>
 80097f4:	462a      	mov	r2, r5
 80097f6:	f000 fb23 	bl	8009e40 <_realloc_r>
 80097fa:	4606      	mov	r6, r0
 80097fc:	2800      	cmp	r0, #0
 80097fe:	d1e1      	bne.n	80097c4 <__ssputs_r+0x70>
 8009800:	6921      	ldr	r1, [r4, #16]
 8009802:	4650      	mov	r0, sl
 8009804:	f000 facc 	bl	8009da0 <_free_r>
 8009808:	e7c7      	b.n	800979a <__ssputs_r+0x46>
	...

0800980c <_svfiprintf_r>:
 800980c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009810:	4698      	mov	r8, r3
 8009812:	898b      	ldrh	r3, [r1, #12]
 8009814:	061b      	lsls	r3, r3, #24
 8009816:	b09d      	sub	sp, #116	; 0x74
 8009818:	4607      	mov	r7, r0
 800981a:	460d      	mov	r5, r1
 800981c:	4614      	mov	r4, r2
 800981e:	d50e      	bpl.n	800983e <_svfiprintf_r+0x32>
 8009820:	690b      	ldr	r3, [r1, #16]
 8009822:	b963      	cbnz	r3, 800983e <_svfiprintf_r+0x32>
 8009824:	2140      	movs	r1, #64	; 0x40
 8009826:	f7ff ff3b 	bl	80096a0 <_malloc_r>
 800982a:	6028      	str	r0, [r5, #0]
 800982c:	6128      	str	r0, [r5, #16]
 800982e:	b920      	cbnz	r0, 800983a <_svfiprintf_r+0x2e>
 8009830:	230c      	movs	r3, #12
 8009832:	603b      	str	r3, [r7, #0]
 8009834:	f04f 30ff 	mov.w	r0, #4294967295
 8009838:	e0d1      	b.n	80099de <_svfiprintf_r+0x1d2>
 800983a:	2340      	movs	r3, #64	; 0x40
 800983c:	616b      	str	r3, [r5, #20]
 800983e:	2300      	movs	r3, #0
 8009840:	9309      	str	r3, [sp, #36]	; 0x24
 8009842:	2320      	movs	r3, #32
 8009844:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009848:	f8cd 800c 	str.w	r8, [sp, #12]
 800984c:	2330      	movs	r3, #48	; 0x30
 800984e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80099f8 <_svfiprintf_r+0x1ec>
 8009852:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009856:	f04f 0901 	mov.w	r9, #1
 800985a:	4623      	mov	r3, r4
 800985c:	469a      	mov	sl, r3
 800985e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009862:	b10a      	cbz	r2, 8009868 <_svfiprintf_r+0x5c>
 8009864:	2a25      	cmp	r2, #37	; 0x25
 8009866:	d1f9      	bne.n	800985c <_svfiprintf_r+0x50>
 8009868:	ebba 0b04 	subs.w	fp, sl, r4
 800986c:	d00b      	beq.n	8009886 <_svfiprintf_r+0x7a>
 800986e:	465b      	mov	r3, fp
 8009870:	4622      	mov	r2, r4
 8009872:	4629      	mov	r1, r5
 8009874:	4638      	mov	r0, r7
 8009876:	f7ff ff6d 	bl	8009754 <__ssputs_r>
 800987a:	3001      	adds	r0, #1
 800987c:	f000 80aa 	beq.w	80099d4 <_svfiprintf_r+0x1c8>
 8009880:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009882:	445a      	add	r2, fp
 8009884:	9209      	str	r2, [sp, #36]	; 0x24
 8009886:	f89a 3000 	ldrb.w	r3, [sl]
 800988a:	2b00      	cmp	r3, #0
 800988c:	f000 80a2 	beq.w	80099d4 <_svfiprintf_r+0x1c8>
 8009890:	2300      	movs	r3, #0
 8009892:	f04f 32ff 	mov.w	r2, #4294967295
 8009896:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800989a:	f10a 0a01 	add.w	sl, sl, #1
 800989e:	9304      	str	r3, [sp, #16]
 80098a0:	9307      	str	r3, [sp, #28]
 80098a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80098a6:	931a      	str	r3, [sp, #104]	; 0x68
 80098a8:	4654      	mov	r4, sl
 80098aa:	2205      	movs	r2, #5
 80098ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098b0:	4851      	ldr	r0, [pc, #324]	; (80099f8 <_svfiprintf_r+0x1ec>)
 80098b2:	f7f6 fc95 	bl	80001e0 <memchr>
 80098b6:	9a04      	ldr	r2, [sp, #16]
 80098b8:	b9d8      	cbnz	r0, 80098f2 <_svfiprintf_r+0xe6>
 80098ba:	06d0      	lsls	r0, r2, #27
 80098bc:	bf44      	itt	mi
 80098be:	2320      	movmi	r3, #32
 80098c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098c4:	0711      	lsls	r1, r2, #28
 80098c6:	bf44      	itt	mi
 80098c8:	232b      	movmi	r3, #43	; 0x2b
 80098ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098ce:	f89a 3000 	ldrb.w	r3, [sl]
 80098d2:	2b2a      	cmp	r3, #42	; 0x2a
 80098d4:	d015      	beq.n	8009902 <_svfiprintf_r+0xf6>
 80098d6:	9a07      	ldr	r2, [sp, #28]
 80098d8:	4654      	mov	r4, sl
 80098da:	2000      	movs	r0, #0
 80098dc:	f04f 0c0a 	mov.w	ip, #10
 80098e0:	4621      	mov	r1, r4
 80098e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098e6:	3b30      	subs	r3, #48	; 0x30
 80098e8:	2b09      	cmp	r3, #9
 80098ea:	d94e      	bls.n	800998a <_svfiprintf_r+0x17e>
 80098ec:	b1b0      	cbz	r0, 800991c <_svfiprintf_r+0x110>
 80098ee:	9207      	str	r2, [sp, #28]
 80098f0:	e014      	b.n	800991c <_svfiprintf_r+0x110>
 80098f2:	eba0 0308 	sub.w	r3, r0, r8
 80098f6:	fa09 f303 	lsl.w	r3, r9, r3
 80098fa:	4313      	orrs	r3, r2
 80098fc:	9304      	str	r3, [sp, #16]
 80098fe:	46a2      	mov	sl, r4
 8009900:	e7d2      	b.n	80098a8 <_svfiprintf_r+0x9c>
 8009902:	9b03      	ldr	r3, [sp, #12]
 8009904:	1d19      	adds	r1, r3, #4
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	9103      	str	r1, [sp, #12]
 800990a:	2b00      	cmp	r3, #0
 800990c:	bfbb      	ittet	lt
 800990e:	425b      	neglt	r3, r3
 8009910:	f042 0202 	orrlt.w	r2, r2, #2
 8009914:	9307      	strge	r3, [sp, #28]
 8009916:	9307      	strlt	r3, [sp, #28]
 8009918:	bfb8      	it	lt
 800991a:	9204      	strlt	r2, [sp, #16]
 800991c:	7823      	ldrb	r3, [r4, #0]
 800991e:	2b2e      	cmp	r3, #46	; 0x2e
 8009920:	d10c      	bne.n	800993c <_svfiprintf_r+0x130>
 8009922:	7863      	ldrb	r3, [r4, #1]
 8009924:	2b2a      	cmp	r3, #42	; 0x2a
 8009926:	d135      	bne.n	8009994 <_svfiprintf_r+0x188>
 8009928:	9b03      	ldr	r3, [sp, #12]
 800992a:	1d1a      	adds	r2, r3, #4
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	9203      	str	r2, [sp, #12]
 8009930:	2b00      	cmp	r3, #0
 8009932:	bfb8      	it	lt
 8009934:	f04f 33ff 	movlt.w	r3, #4294967295
 8009938:	3402      	adds	r4, #2
 800993a:	9305      	str	r3, [sp, #20]
 800993c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009a08 <_svfiprintf_r+0x1fc>
 8009940:	7821      	ldrb	r1, [r4, #0]
 8009942:	2203      	movs	r2, #3
 8009944:	4650      	mov	r0, sl
 8009946:	f7f6 fc4b 	bl	80001e0 <memchr>
 800994a:	b140      	cbz	r0, 800995e <_svfiprintf_r+0x152>
 800994c:	2340      	movs	r3, #64	; 0x40
 800994e:	eba0 000a 	sub.w	r0, r0, sl
 8009952:	fa03 f000 	lsl.w	r0, r3, r0
 8009956:	9b04      	ldr	r3, [sp, #16]
 8009958:	4303      	orrs	r3, r0
 800995a:	3401      	adds	r4, #1
 800995c:	9304      	str	r3, [sp, #16]
 800995e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009962:	4826      	ldr	r0, [pc, #152]	; (80099fc <_svfiprintf_r+0x1f0>)
 8009964:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009968:	2206      	movs	r2, #6
 800996a:	f7f6 fc39 	bl	80001e0 <memchr>
 800996e:	2800      	cmp	r0, #0
 8009970:	d038      	beq.n	80099e4 <_svfiprintf_r+0x1d8>
 8009972:	4b23      	ldr	r3, [pc, #140]	; (8009a00 <_svfiprintf_r+0x1f4>)
 8009974:	bb1b      	cbnz	r3, 80099be <_svfiprintf_r+0x1b2>
 8009976:	9b03      	ldr	r3, [sp, #12]
 8009978:	3307      	adds	r3, #7
 800997a:	f023 0307 	bic.w	r3, r3, #7
 800997e:	3308      	adds	r3, #8
 8009980:	9303      	str	r3, [sp, #12]
 8009982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009984:	4433      	add	r3, r6
 8009986:	9309      	str	r3, [sp, #36]	; 0x24
 8009988:	e767      	b.n	800985a <_svfiprintf_r+0x4e>
 800998a:	fb0c 3202 	mla	r2, ip, r2, r3
 800998e:	460c      	mov	r4, r1
 8009990:	2001      	movs	r0, #1
 8009992:	e7a5      	b.n	80098e0 <_svfiprintf_r+0xd4>
 8009994:	2300      	movs	r3, #0
 8009996:	3401      	adds	r4, #1
 8009998:	9305      	str	r3, [sp, #20]
 800999a:	4619      	mov	r1, r3
 800999c:	f04f 0c0a 	mov.w	ip, #10
 80099a0:	4620      	mov	r0, r4
 80099a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099a6:	3a30      	subs	r2, #48	; 0x30
 80099a8:	2a09      	cmp	r2, #9
 80099aa:	d903      	bls.n	80099b4 <_svfiprintf_r+0x1a8>
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d0c5      	beq.n	800993c <_svfiprintf_r+0x130>
 80099b0:	9105      	str	r1, [sp, #20]
 80099b2:	e7c3      	b.n	800993c <_svfiprintf_r+0x130>
 80099b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80099b8:	4604      	mov	r4, r0
 80099ba:	2301      	movs	r3, #1
 80099bc:	e7f0      	b.n	80099a0 <_svfiprintf_r+0x194>
 80099be:	ab03      	add	r3, sp, #12
 80099c0:	9300      	str	r3, [sp, #0]
 80099c2:	462a      	mov	r2, r5
 80099c4:	4b0f      	ldr	r3, [pc, #60]	; (8009a04 <_svfiprintf_r+0x1f8>)
 80099c6:	a904      	add	r1, sp, #16
 80099c8:	4638      	mov	r0, r7
 80099ca:	f3af 8000 	nop.w
 80099ce:	1c42      	adds	r2, r0, #1
 80099d0:	4606      	mov	r6, r0
 80099d2:	d1d6      	bne.n	8009982 <_svfiprintf_r+0x176>
 80099d4:	89ab      	ldrh	r3, [r5, #12]
 80099d6:	065b      	lsls	r3, r3, #25
 80099d8:	f53f af2c 	bmi.w	8009834 <_svfiprintf_r+0x28>
 80099dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099de:	b01d      	add	sp, #116	; 0x74
 80099e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099e4:	ab03      	add	r3, sp, #12
 80099e6:	9300      	str	r3, [sp, #0]
 80099e8:	462a      	mov	r2, r5
 80099ea:	4b06      	ldr	r3, [pc, #24]	; (8009a04 <_svfiprintf_r+0x1f8>)
 80099ec:	a904      	add	r1, sp, #16
 80099ee:	4638      	mov	r0, r7
 80099f0:	f000 f87a 	bl	8009ae8 <_printf_i>
 80099f4:	e7eb      	b.n	80099ce <_svfiprintf_r+0x1c2>
 80099f6:	bf00      	nop
 80099f8:	08009f9c 	.word	0x08009f9c
 80099fc:	08009fa6 	.word	0x08009fa6
 8009a00:	00000000 	.word	0x00000000
 8009a04:	08009755 	.word	0x08009755
 8009a08:	08009fa2 	.word	0x08009fa2

08009a0c <_printf_common>:
 8009a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a10:	4616      	mov	r6, r2
 8009a12:	4699      	mov	r9, r3
 8009a14:	688a      	ldr	r2, [r1, #8]
 8009a16:	690b      	ldr	r3, [r1, #16]
 8009a18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	bfb8      	it	lt
 8009a20:	4613      	movlt	r3, r2
 8009a22:	6033      	str	r3, [r6, #0]
 8009a24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a28:	4607      	mov	r7, r0
 8009a2a:	460c      	mov	r4, r1
 8009a2c:	b10a      	cbz	r2, 8009a32 <_printf_common+0x26>
 8009a2e:	3301      	adds	r3, #1
 8009a30:	6033      	str	r3, [r6, #0]
 8009a32:	6823      	ldr	r3, [r4, #0]
 8009a34:	0699      	lsls	r1, r3, #26
 8009a36:	bf42      	ittt	mi
 8009a38:	6833      	ldrmi	r3, [r6, #0]
 8009a3a:	3302      	addmi	r3, #2
 8009a3c:	6033      	strmi	r3, [r6, #0]
 8009a3e:	6825      	ldr	r5, [r4, #0]
 8009a40:	f015 0506 	ands.w	r5, r5, #6
 8009a44:	d106      	bne.n	8009a54 <_printf_common+0x48>
 8009a46:	f104 0a19 	add.w	sl, r4, #25
 8009a4a:	68e3      	ldr	r3, [r4, #12]
 8009a4c:	6832      	ldr	r2, [r6, #0]
 8009a4e:	1a9b      	subs	r3, r3, r2
 8009a50:	42ab      	cmp	r3, r5
 8009a52:	dc26      	bgt.n	8009aa2 <_printf_common+0x96>
 8009a54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009a58:	1e13      	subs	r3, r2, #0
 8009a5a:	6822      	ldr	r2, [r4, #0]
 8009a5c:	bf18      	it	ne
 8009a5e:	2301      	movne	r3, #1
 8009a60:	0692      	lsls	r2, r2, #26
 8009a62:	d42b      	bmi.n	8009abc <_printf_common+0xb0>
 8009a64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a68:	4649      	mov	r1, r9
 8009a6a:	4638      	mov	r0, r7
 8009a6c:	47c0      	blx	r8
 8009a6e:	3001      	adds	r0, #1
 8009a70:	d01e      	beq.n	8009ab0 <_printf_common+0xa4>
 8009a72:	6823      	ldr	r3, [r4, #0]
 8009a74:	68e5      	ldr	r5, [r4, #12]
 8009a76:	6832      	ldr	r2, [r6, #0]
 8009a78:	f003 0306 	and.w	r3, r3, #6
 8009a7c:	2b04      	cmp	r3, #4
 8009a7e:	bf08      	it	eq
 8009a80:	1aad      	subeq	r5, r5, r2
 8009a82:	68a3      	ldr	r3, [r4, #8]
 8009a84:	6922      	ldr	r2, [r4, #16]
 8009a86:	bf0c      	ite	eq
 8009a88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a8c:	2500      	movne	r5, #0
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	bfc4      	itt	gt
 8009a92:	1a9b      	subgt	r3, r3, r2
 8009a94:	18ed      	addgt	r5, r5, r3
 8009a96:	2600      	movs	r6, #0
 8009a98:	341a      	adds	r4, #26
 8009a9a:	42b5      	cmp	r5, r6
 8009a9c:	d11a      	bne.n	8009ad4 <_printf_common+0xc8>
 8009a9e:	2000      	movs	r0, #0
 8009aa0:	e008      	b.n	8009ab4 <_printf_common+0xa8>
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	4652      	mov	r2, sl
 8009aa6:	4649      	mov	r1, r9
 8009aa8:	4638      	mov	r0, r7
 8009aaa:	47c0      	blx	r8
 8009aac:	3001      	adds	r0, #1
 8009aae:	d103      	bne.n	8009ab8 <_printf_common+0xac>
 8009ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ab8:	3501      	adds	r5, #1
 8009aba:	e7c6      	b.n	8009a4a <_printf_common+0x3e>
 8009abc:	18e1      	adds	r1, r4, r3
 8009abe:	1c5a      	adds	r2, r3, #1
 8009ac0:	2030      	movs	r0, #48	; 0x30
 8009ac2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009ac6:	4422      	add	r2, r4
 8009ac8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009acc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ad0:	3302      	adds	r3, #2
 8009ad2:	e7c7      	b.n	8009a64 <_printf_common+0x58>
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	4622      	mov	r2, r4
 8009ad8:	4649      	mov	r1, r9
 8009ada:	4638      	mov	r0, r7
 8009adc:	47c0      	blx	r8
 8009ade:	3001      	adds	r0, #1
 8009ae0:	d0e6      	beq.n	8009ab0 <_printf_common+0xa4>
 8009ae2:	3601      	adds	r6, #1
 8009ae4:	e7d9      	b.n	8009a9a <_printf_common+0x8e>
	...

08009ae8 <_printf_i>:
 8009ae8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009aec:	460c      	mov	r4, r1
 8009aee:	4691      	mov	r9, r2
 8009af0:	7e27      	ldrb	r7, [r4, #24]
 8009af2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009af4:	2f78      	cmp	r7, #120	; 0x78
 8009af6:	4680      	mov	r8, r0
 8009af8:	469a      	mov	sl, r3
 8009afa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009afe:	d807      	bhi.n	8009b10 <_printf_i+0x28>
 8009b00:	2f62      	cmp	r7, #98	; 0x62
 8009b02:	d80a      	bhi.n	8009b1a <_printf_i+0x32>
 8009b04:	2f00      	cmp	r7, #0
 8009b06:	f000 80d8 	beq.w	8009cba <_printf_i+0x1d2>
 8009b0a:	2f58      	cmp	r7, #88	; 0x58
 8009b0c:	f000 80a3 	beq.w	8009c56 <_printf_i+0x16e>
 8009b10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009b14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b18:	e03a      	b.n	8009b90 <_printf_i+0xa8>
 8009b1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b1e:	2b15      	cmp	r3, #21
 8009b20:	d8f6      	bhi.n	8009b10 <_printf_i+0x28>
 8009b22:	a001      	add	r0, pc, #4	; (adr r0, 8009b28 <_printf_i+0x40>)
 8009b24:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009b28:	08009b81 	.word	0x08009b81
 8009b2c:	08009b95 	.word	0x08009b95
 8009b30:	08009b11 	.word	0x08009b11
 8009b34:	08009b11 	.word	0x08009b11
 8009b38:	08009b11 	.word	0x08009b11
 8009b3c:	08009b11 	.word	0x08009b11
 8009b40:	08009b95 	.word	0x08009b95
 8009b44:	08009b11 	.word	0x08009b11
 8009b48:	08009b11 	.word	0x08009b11
 8009b4c:	08009b11 	.word	0x08009b11
 8009b50:	08009b11 	.word	0x08009b11
 8009b54:	08009ca1 	.word	0x08009ca1
 8009b58:	08009bc5 	.word	0x08009bc5
 8009b5c:	08009c83 	.word	0x08009c83
 8009b60:	08009b11 	.word	0x08009b11
 8009b64:	08009b11 	.word	0x08009b11
 8009b68:	08009cc3 	.word	0x08009cc3
 8009b6c:	08009b11 	.word	0x08009b11
 8009b70:	08009bc5 	.word	0x08009bc5
 8009b74:	08009b11 	.word	0x08009b11
 8009b78:	08009b11 	.word	0x08009b11
 8009b7c:	08009c8b 	.word	0x08009c8b
 8009b80:	680b      	ldr	r3, [r1, #0]
 8009b82:	1d1a      	adds	r2, r3, #4
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	600a      	str	r2, [r1, #0]
 8009b88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009b8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b90:	2301      	movs	r3, #1
 8009b92:	e0a3      	b.n	8009cdc <_printf_i+0x1f4>
 8009b94:	6825      	ldr	r5, [r4, #0]
 8009b96:	6808      	ldr	r0, [r1, #0]
 8009b98:	062e      	lsls	r6, r5, #24
 8009b9a:	f100 0304 	add.w	r3, r0, #4
 8009b9e:	d50a      	bpl.n	8009bb6 <_printf_i+0xce>
 8009ba0:	6805      	ldr	r5, [r0, #0]
 8009ba2:	600b      	str	r3, [r1, #0]
 8009ba4:	2d00      	cmp	r5, #0
 8009ba6:	da03      	bge.n	8009bb0 <_printf_i+0xc8>
 8009ba8:	232d      	movs	r3, #45	; 0x2d
 8009baa:	426d      	negs	r5, r5
 8009bac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bb0:	485e      	ldr	r0, [pc, #376]	; (8009d2c <_printf_i+0x244>)
 8009bb2:	230a      	movs	r3, #10
 8009bb4:	e019      	b.n	8009bea <_printf_i+0x102>
 8009bb6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009bba:	6805      	ldr	r5, [r0, #0]
 8009bbc:	600b      	str	r3, [r1, #0]
 8009bbe:	bf18      	it	ne
 8009bc0:	b22d      	sxthne	r5, r5
 8009bc2:	e7ef      	b.n	8009ba4 <_printf_i+0xbc>
 8009bc4:	680b      	ldr	r3, [r1, #0]
 8009bc6:	6825      	ldr	r5, [r4, #0]
 8009bc8:	1d18      	adds	r0, r3, #4
 8009bca:	6008      	str	r0, [r1, #0]
 8009bcc:	0628      	lsls	r0, r5, #24
 8009bce:	d501      	bpl.n	8009bd4 <_printf_i+0xec>
 8009bd0:	681d      	ldr	r5, [r3, #0]
 8009bd2:	e002      	b.n	8009bda <_printf_i+0xf2>
 8009bd4:	0669      	lsls	r1, r5, #25
 8009bd6:	d5fb      	bpl.n	8009bd0 <_printf_i+0xe8>
 8009bd8:	881d      	ldrh	r5, [r3, #0]
 8009bda:	4854      	ldr	r0, [pc, #336]	; (8009d2c <_printf_i+0x244>)
 8009bdc:	2f6f      	cmp	r7, #111	; 0x6f
 8009bde:	bf0c      	ite	eq
 8009be0:	2308      	moveq	r3, #8
 8009be2:	230a      	movne	r3, #10
 8009be4:	2100      	movs	r1, #0
 8009be6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009bea:	6866      	ldr	r6, [r4, #4]
 8009bec:	60a6      	str	r6, [r4, #8]
 8009bee:	2e00      	cmp	r6, #0
 8009bf0:	bfa2      	ittt	ge
 8009bf2:	6821      	ldrge	r1, [r4, #0]
 8009bf4:	f021 0104 	bicge.w	r1, r1, #4
 8009bf8:	6021      	strge	r1, [r4, #0]
 8009bfa:	b90d      	cbnz	r5, 8009c00 <_printf_i+0x118>
 8009bfc:	2e00      	cmp	r6, #0
 8009bfe:	d04d      	beq.n	8009c9c <_printf_i+0x1b4>
 8009c00:	4616      	mov	r6, r2
 8009c02:	fbb5 f1f3 	udiv	r1, r5, r3
 8009c06:	fb03 5711 	mls	r7, r3, r1, r5
 8009c0a:	5dc7      	ldrb	r7, [r0, r7]
 8009c0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009c10:	462f      	mov	r7, r5
 8009c12:	42bb      	cmp	r3, r7
 8009c14:	460d      	mov	r5, r1
 8009c16:	d9f4      	bls.n	8009c02 <_printf_i+0x11a>
 8009c18:	2b08      	cmp	r3, #8
 8009c1a:	d10b      	bne.n	8009c34 <_printf_i+0x14c>
 8009c1c:	6823      	ldr	r3, [r4, #0]
 8009c1e:	07df      	lsls	r7, r3, #31
 8009c20:	d508      	bpl.n	8009c34 <_printf_i+0x14c>
 8009c22:	6923      	ldr	r3, [r4, #16]
 8009c24:	6861      	ldr	r1, [r4, #4]
 8009c26:	4299      	cmp	r1, r3
 8009c28:	bfde      	ittt	le
 8009c2a:	2330      	movle	r3, #48	; 0x30
 8009c2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009c30:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009c34:	1b92      	subs	r2, r2, r6
 8009c36:	6122      	str	r2, [r4, #16]
 8009c38:	f8cd a000 	str.w	sl, [sp]
 8009c3c:	464b      	mov	r3, r9
 8009c3e:	aa03      	add	r2, sp, #12
 8009c40:	4621      	mov	r1, r4
 8009c42:	4640      	mov	r0, r8
 8009c44:	f7ff fee2 	bl	8009a0c <_printf_common>
 8009c48:	3001      	adds	r0, #1
 8009c4a:	d14c      	bne.n	8009ce6 <_printf_i+0x1fe>
 8009c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c50:	b004      	add	sp, #16
 8009c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c56:	4835      	ldr	r0, [pc, #212]	; (8009d2c <_printf_i+0x244>)
 8009c58:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009c5c:	6823      	ldr	r3, [r4, #0]
 8009c5e:	680e      	ldr	r6, [r1, #0]
 8009c60:	061f      	lsls	r7, r3, #24
 8009c62:	f856 5b04 	ldr.w	r5, [r6], #4
 8009c66:	600e      	str	r6, [r1, #0]
 8009c68:	d514      	bpl.n	8009c94 <_printf_i+0x1ac>
 8009c6a:	07d9      	lsls	r1, r3, #31
 8009c6c:	bf44      	itt	mi
 8009c6e:	f043 0320 	orrmi.w	r3, r3, #32
 8009c72:	6023      	strmi	r3, [r4, #0]
 8009c74:	b91d      	cbnz	r5, 8009c7e <_printf_i+0x196>
 8009c76:	6823      	ldr	r3, [r4, #0]
 8009c78:	f023 0320 	bic.w	r3, r3, #32
 8009c7c:	6023      	str	r3, [r4, #0]
 8009c7e:	2310      	movs	r3, #16
 8009c80:	e7b0      	b.n	8009be4 <_printf_i+0xfc>
 8009c82:	6823      	ldr	r3, [r4, #0]
 8009c84:	f043 0320 	orr.w	r3, r3, #32
 8009c88:	6023      	str	r3, [r4, #0]
 8009c8a:	2378      	movs	r3, #120	; 0x78
 8009c8c:	4828      	ldr	r0, [pc, #160]	; (8009d30 <_printf_i+0x248>)
 8009c8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009c92:	e7e3      	b.n	8009c5c <_printf_i+0x174>
 8009c94:	065e      	lsls	r6, r3, #25
 8009c96:	bf48      	it	mi
 8009c98:	b2ad      	uxthmi	r5, r5
 8009c9a:	e7e6      	b.n	8009c6a <_printf_i+0x182>
 8009c9c:	4616      	mov	r6, r2
 8009c9e:	e7bb      	b.n	8009c18 <_printf_i+0x130>
 8009ca0:	680b      	ldr	r3, [r1, #0]
 8009ca2:	6826      	ldr	r6, [r4, #0]
 8009ca4:	6960      	ldr	r0, [r4, #20]
 8009ca6:	1d1d      	adds	r5, r3, #4
 8009ca8:	600d      	str	r5, [r1, #0]
 8009caa:	0635      	lsls	r5, r6, #24
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	d501      	bpl.n	8009cb4 <_printf_i+0x1cc>
 8009cb0:	6018      	str	r0, [r3, #0]
 8009cb2:	e002      	b.n	8009cba <_printf_i+0x1d2>
 8009cb4:	0671      	lsls	r1, r6, #25
 8009cb6:	d5fb      	bpl.n	8009cb0 <_printf_i+0x1c8>
 8009cb8:	8018      	strh	r0, [r3, #0]
 8009cba:	2300      	movs	r3, #0
 8009cbc:	6123      	str	r3, [r4, #16]
 8009cbe:	4616      	mov	r6, r2
 8009cc0:	e7ba      	b.n	8009c38 <_printf_i+0x150>
 8009cc2:	680b      	ldr	r3, [r1, #0]
 8009cc4:	1d1a      	adds	r2, r3, #4
 8009cc6:	600a      	str	r2, [r1, #0]
 8009cc8:	681e      	ldr	r6, [r3, #0]
 8009cca:	6862      	ldr	r2, [r4, #4]
 8009ccc:	2100      	movs	r1, #0
 8009cce:	4630      	mov	r0, r6
 8009cd0:	f7f6 fa86 	bl	80001e0 <memchr>
 8009cd4:	b108      	cbz	r0, 8009cda <_printf_i+0x1f2>
 8009cd6:	1b80      	subs	r0, r0, r6
 8009cd8:	6060      	str	r0, [r4, #4]
 8009cda:	6863      	ldr	r3, [r4, #4]
 8009cdc:	6123      	str	r3, [r4, #16]
 8009cde:	2300      	movs	r3, #0
 8009ce0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ce4:	e7a8      	b.n	8009c38 <_printf_i+0x150>
 8009ce6:	6923      	ldr	r3, [r4, #16]
 8009ce8:	4632      	mov	r2, r6
 8009cea:	4649      	mov	r1, r9
 8009cec:	4640      	mov	r0, r8
 8009cee:	47d0      	blx	sl
 8009cf0:	3001      	adds	r0, #1
 8009cf2:	d0ab      	beq.n	8009c4c <_printf_i+0x164>
 8009cf4:	6823      	ldr	r3, [r4, #0]
 8009cf6:	079b      	lsls	r3, r3, #30
 8009cf8:	d413      	bmi.n	8009d22 <_printf_i+0x23a>
 8009cfa:	68e0      	ldr	r0, [r4, #12]
 8009cfc:	9b03      	ldr	r3, [sp, #12]
 8009cfe:	4298      	cmp	r0, r3
 8009d00:	bfb8      	it	lt
 8009d02:	4618      	movlt	r0, r3
 8009d04:	e7a4      	b.n	8009c50 <_printf_i+0x168>
 8009d06:	2301      	movs	r3, #1
 8009d08:	4632      	mov	r2, r6
 8009d0a:	4649      	mov	r1, r9
 8009d0c:	4640      	mov	r0, r8
 8009d0e:	47d0      	blx	sl
 8009d10:	3001      	adds	r0, #1
 8009d12:	d09b      	beq.n	8009c4c <_printf_i+0x164>
 8009d14:	3501      	adds	r5, #1
 8009d16:	68e3      	ldr	r3, [r4, #12]
 8009d18:	9903      	ldr	r1, [sp, #12]
 8009d1a:	1a5b      	subs	r3, r3, r1
 8009d1c:	42ab      	cmp	r3, r5
 8009d1e:	dcf2      	bgt.n	8009d06 <_printf_i+0x21e>
 8009d20:	e7eb      	b.n	8009cfa <_printf_i+0x212>
 8009d22:	2500      	movs	r5, #0
 8009d24:	f104 0619 	add.w	r6, r4, #25
 8009d28:	e7f5      	b.n	8009d16 <_printf_i+0x22e>
 8009d2a:	bf00      	nop
 8009d2c:	08009fad 	.word	0x08009fad
 8009d30:	08009fbe 	.word	0x08009fbe

08009d34 <_sbrk_r>:
 8009d34:	b538      	push	{r3, r4, r5, lr}
 8009d36:	4d06      	ldr	r5, [pc, #24]	; (8009d50 <_sbrk_r+0x1c>)
 8009d38:	2300      	movs	r3, #0
 8009d3a:	4604      	mov	r4, r0
 8009d3c:	4608      	mov	r0, r1
 8009d3e:	602b      	str	r3, [r5, #0]
 8009d40:	f7f7 fd96 	bl	8001870 <_sbrk>
 8009d44:	1c43      	adds	r3, r0, #1
 8009d46:	d102      	bne.n	8009d4e <_sbrk_r+0x1a>
 8009d48:	682b      	ldr	r3, [r5, #0]
 8009d4a:	b103      	cbz	r3, 8009d4e <_sbrk_r+0x1a>
 8009d4c:	6023      	str	r3, [r4, #0]
 8009d4e:	bd38      	pop	{r3, r4, r5, pc}
 8009d50:	20001e08 	.word	0x20001e08

08009d54 <memmove>:
 8009d54:	4288      	cmp	r0, r1
 8009d56:	b510      	push	{r4, lr}
 8009d58:	eb01 0402 	add.w	r4, r1, r2
 8009d5c:	d902      	bls.n	8009d64 <memmove+0x10>
 8009d5e:	4284      	cmp	r4, r0
 8009d60:	4623      	mov	r3, r4
 8009d62:	d807      	bhi.n	8009d74 <memmove+0x20>
 8009d64:	1e43      	subs	r3, r0, #1
 8009d66:	42a1      	cmp	r1, r4
 8009d68:	d008      	beq.n	8009d7c <memmove+0x28>
 8009d6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d72:	e7f8      	b.n	8009d66 <memmove+0x12>
 8009d74:	4402      	add	r2, r0
 8009d76:	4601      	mov	r1, r0
 8009d78:	428a      	cmp	r2, r1
 8009d7a:	d100      	bne.n	8009d7e <memmove+0x2a>
 8009d7c:	bd10      	pop	{r4, pc}
 8009d7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d86:	e7f7      	b.n	8009d78 <memmove+0x24>

08009d88 <__malloc_lock>:
 8009d88:	4801      	ldr	r0, [pc, #4]	; (8009d90 <__malloc_lock+0x8>)
 8009d8a:	f7ff bc87 	b.w	800969c <__retarget_lock_acquire_recursive>
 8009d8e:	bf00      	nop
 8009d90:	20001e00 	.word	0x20001e00

08009d94 <__malloc_unlock>:
 8009d94:	4801      	ldr	r0, [pc, #4]	; (8009d9c <__malloc_unlock+0x8>)
 8009d96:	f7ff bc82 	b.w	800969e <__retarget_lock_release_recursive>
 8009d9a:	bf00      	nop
 8009d9c:	20001e00 	.word	0x20001e00

08009da0 <_free_r>:
 8009da0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009da2:	2900      	cmp	r1, #0
 8009da4:	d048      	beq.n	8009e38 <_free_r+0x98>
 8009da6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009daa:	9001      	str	r0, [sp, #4]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	f1a1 0404 	sub.w	r4, r1, #4
 8009db2:	bfb8      	it	lt
 8009db4:	18e4      	addlt	r4, r4, r3
 8009db6:	f7ff ffe7 	bl	8009d88 <__malloc_lock>
 8009dba:	4a20      	ldr	r2, [pc, #128]	; (8009e3c <_free_r+0x9c>)
 8009dbc:	9801      	ldr	r0, [sp, #4]
 8009dbe:	6813      	ldr	r3, [r2, #0]
 8009dc0:	4615      	mov	r5, r2
 8009dc2:	b933      	cbnz	r3, 8009dd2 <_free_r+0x32>
 8009dc4:	6063      	str	r3, [r4, #4]
 8009dc6:	6014      	str	r4, [r2, #0]
 8009dc8:	b003      	add	sp, #12
 8009dca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009dce:	f7ff bfe1 	b.w	8009d94 <__malloc_unlock>
 8009dd2:	42a3      	cmp	r3, r4
 8009dd4:	d90b      	bls.n	8009dee <_free_r+0x4e>
 8009dd6:	6821      	ldr	r1, [r4, #0]
 8009dd8:	1862      	adds	r2, r4, r1
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	bf04      	itt	eq
 8009dde:	681a      	ldreq	r2, [r3, #0]
 8009de0:	685b      	ldreq	r3, [r3, #4]
 8009de2:	6063      	str	r3, [r4, #4]
 8009de4:	bf04      	itt	eq
 8009de6:	1852      	addeq	r2, r2, r1
 8009de8:	6022      	streq	r2, [r4, #0]
 8009dea:	602c      	str	r4, [r5, #0]
 8009dec:	e7ec      	b.n	8009dc8 <_free_r+0x28>
 8009dee:	461a      	mov	r2, r3
 8009df0:	685b      	ldr	r3, [r3, #4]
 8009df2:	b10b      	cbz	r3, 8009df8 <_free_r+0x58>
 8009df4:	42a3      	cmp	r3, r4
 8009df6:	d9fa      	bls.n	8009dee <_free_r+0x4e>
 8009df8:	6811      	ldr	r1, [r2, #0]
 8009dfa:	1855      	adds	r5, r2, r1
 8009dfc:	42a5      	cmp	r5, r4
 8009dfe:	d10b      	bne.n	8009e18 <_free_r+0x78>
 8009e00:	6824      	ldr	r4, [r4, #0]
 8009e02:	4421      	add	r1, r4
 8009e04:	1854      	adds	r4, r2, r1
 8009e06:	42a3      	cmp	r3, r4
 8009e08:	6011      	str	r1, [r2, #0]
 8009e0a:	d1dd      	bne.n	8009dc8 <_free_r+0x28>
 8009e0c:	681c      	ldr	r4, [r3, #0]
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	6053      	str	r3, [r2, #4]
 8009e12:	4421      	add	r1, r4
 8009e14:	6011      	str	r1, [r2, #0]
 8009e16:	e7d7      	b.n	8009dc8 <_free_r+0x28>
 8009e18:	d902      	bls.n	8009e20 <_free_r+0x80>
 8009e1a:	230c      	movs	r3, #12
 8009e1c:	6003      	str	r3, [r0, #0]
 8009e1e:	e7d3      	b.n	8009dc8 <_free_r+0x28>
 8009e20:	6825      	ldr	r5, [r4, #0]
 8009e22:	1961      	adds	r1, r4, r5
 8009e24:	428b      	cmp	r3, r1
 8009e26:	bf04      	itt	eq
 8009e28:	6819      	ldreq	r1, [r3, #0]
 8009e2a:	685b      	ldreq	r3, [r3, #4]
 8009e2c:	6063      	str	r3, [r4, #4]
 8009e2e:	bf04      	itt	eq
 8009e30:	1949      	addeq	r1, r1, r5
 8009e32:	6021      	streq	r1, [r4, #0]
 8009e34:	6054      	str	r4, [r2, #4]
 8009e36:	e7c7      	b.n	8009dc8 <_free_r+0x28>
 8009e38:	b003      	add	sp, #12
 8009e3a:	bd30      	pop	{r4, r5, pc}
 8009e3c:	20000428 	.word	0x20000428

08009e40 <_realloc_r>:
 8009e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e42:	4607      	mov	r7, r0
 8009e44:	4614      	mov	r4, r2
 8009e46:	460e      	mov	r6, r1
 8009e48:	b921      	cbnz	r1, 8009e54 <_realloc_r+0x14>
 8009e4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009e4e:	4611      	mov	r1, r2
 8009e50:	f7ff bc26 	b.w	80096a0 <_malloc_r>
 8009e54:	b922      	cbnz	r2, 8009e60 <_realloc_r+0x20>
 8009e56:	f7ff ffa3 	bl	8009da0 <_free_r>
 8009e5a:	4625      	mov	r5, r4
 8009e5c:	4628      	mov	r0, r5
 8009e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e60:	f000 f814 	bl	8009e8c <_malloc_usable_size_r>
 8009e64:	42a0      	cmp	r0, r4
 8009e66:	d20f      	bcs.n	8009e88 <_realloc_r+0x48>
 8009e68:	4621      	mov	r1, r4
 8009e6a:	4638      	mov	r0, r7
 8009e6c:	f7ff fc18 	bl	80096a0 <_malloc_r>
 8009e70:	4605      	mov	r5, r0
 8009e72:	2800      	cmp	r0, #0
 8009e74:	d0f2      	beq.n	8009e5c <_realloc_r+0x1c>
 8009e76:	4631      	mov	r1, r6
 8009e78:	4622      	mov	r2, r4
 8009e7a:	f7ff fbd9 	bl	8009630 <memcpy>
 8009e7e:	4631      	mov	r1, r6
 8009e80:	4638      	mov	r0, r7
 8009e82:	f7ff ff8d 	bl	8009da0 <_free_r>
 8009e86:	e7e9      	b.n	8009e5c <_realloc_r+0x1c>
 8009e88:	4635      	mov	r5, r6
 8009e8a:	e7e7      	b.n	8009e5c <_realloc_r+0x1c>

08009e8c <_malloc_usable_size_r>:
 8009e8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e90:	1f18      	subs	r0, r3, #4
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	bfbc      	itt	lt
 8009e96:	580b      	ldrlt	r3, [r1, r0]
 8009e98:	18c0      	addlt	r0, r0, r3
 8009e9a:	4770      	bx	lr

08009e9c <_init>:
 8009e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e9e:	bf00      	nop
 8009ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ea2:	bc08      	pop	{r3}
 8009ea4:	469e      	mov	lr, r3
 8009ea6:	4770      	bx	lr

08009ea8 <_fini>:
 8009ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eaa:	bf00      	nop
 8009eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eae:	bc08      	pop	{r3}
 8009eb0:	469e      	mov	lr, r3
 8009eb2:	4770      	bx	lr
